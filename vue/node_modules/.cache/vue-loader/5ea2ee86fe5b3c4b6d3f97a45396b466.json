{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/permission/user/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/permission/user/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDepartmentSelectorByAuth } from '@/api/permission/department'\nimport { getUserList, updateUserState, unlockUser, delUser } from '@/api/permission/user'\nimport Form from './Form'\nimport Diagram from './Diagram'\nimport ResetPwdForm from './ResetPassword'\nimport ImportForm from './ImportForm'\nimport ExportForm from './ExportForm'\nimport SocialsBind from './SocialsBind'\nimport WorkHandoverForm from './WorkHandoverForm.vue'\nimport { mapGetters } from \"vuex\"\nimport CheckPermissions from '@/components/CheckPermissions'\nexport default {\n  name: 'permission-user',\n  components: {\n    Form,\n    Diagram,\n    ResetPwdForm,\n    ExportForm,\n    ImportForm,\n    SocialsBind,\n    WorkHandoverForm,\n    CheckPermissions\n  },\n  data() {\n    return {\n      genderTreeData: [],\n      keyword: '',\n      treeData: [],\n      tableData: [],\n      treeLoading: false,\n      listLoading: true,\n      listQuery: {\n        organizeId: '',\n        keyword: '',\n        gender: '',\n        enabledMark: '',\n        currentPage: 1,\n        pageSize: 20\n      },\n      defaultProps: {\n        children: 'children',\n        label: 'fullName'\n      },\n      total: 0,\n      type: '',\n      formVisible: false,\n      diagramVisible: false,\n      resetFormVisible: false,\n      authorizeFormVisible: false,\n      importFormVisible: false,\n      exportFormVisible: false,\n      expands: true,\n      refreshTree: true,\n      filterText: '',\n      socialsVisible: false,\n      workHandoverVisible: false,\n      organizeIdTree: [],\n      checkPermissionsVisible: false\n    }\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.treeBox.filter(val)\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n    useSocials() {\n      return localStorage.getItem('useSocials') && localStorage.getItem('useSocials') != '0'\n    }\n  },\n  created() {\n    this.getOrganizeList(true)\n  },\n  methods: {\n    workHandover(data) {\n      this.workHandoverVisible = true\n      this.$nextTick(() => {\n        this.$refs.WorkHandoverForm.init(data)\n      })\n    },\n    showDiagram() {\n      this.diagramVisible = true\n      this.$nextTick(() => {\n        this.$refs.Diagram.init()\n      })\n    },\n    checkPermissions(item) {\n      this.checkPermissionsVisible = true\n      this.$nextTick(() => {\n        item = { ...item, type: 'user', fullName: item.realName }\n        this.$refs.checkPermissions.init(item, 2)\n      })\n    },\n    search() {\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = 20\n      this.listQuery.sort = 'desc'\n      this.initData()\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.listQuery.gender = ''\n      this.listQuery.enabledMark = ''\n      this.search()\n    },\n    toggleExpand(expands) {\n      this.filterText = ''\n      this.refreshTree = false\n      this.expands = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(this.companyId)\n        })\n      })\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.fullName.indexOf(value) !== -1;\n    },\n    getOrganizeList(isInit) {\n      this.filterText = ''\n      this.treeLoading = true\n      // 获取性别\n      this.$store.dispatch('base/getDictionaryData', { sort: 'sex' }).then(res => {\n        this.genderTreeData = res\n      })\n      getDepartmentSelectorByAuth().then(res => {\n        this.treeData = res.data.list\n        this.treeLoading = false\n        if (isInit) this.initData()\n      }).catch(() => {\n        this.treeLoading = false\n      })\n    },\n    initData() {\n      this.listLoading = true\n      getUserList(this.listQuery).then(res => {\n        this.tableData = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    getNodePath(node) {\n      let fullPath = []\n      const loop = (node) => {\n        if (node.level) fullPath.unshift(node.data)\n        if (node.parent) loop(node.parent)\n      }\n      loop(node)\n      return fullPath\n    },\n    handleNodeClick(data, node) {\n      if (this.listQuery.organizeId === data.id) return\n      this.listQuery.organizeId = data.id\n      this.type = data.type\n      const nodePath = this.getNodePath(node)\n      this.organizeIdTree = nodePath.map(o => o.id)\n      this.reset()\n    },\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id, this.organizeIdTree || [])\n      })\n    },\n    removeForm(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) {\n        this.keyword = ''\n        this.initData()\n      }\n    },\n    removeAuthorizeForm(isRefresh) {\n      this.authorizeFormVisible = false\n      if (isRefresh) {\n        this.keyword = ''\n        this.initData()\n      }\n    },\n    handleUpdateState(row) {\n      const txt = row.enabledMark ? '禁用' : '开启'\n      this.$confirm(`您确定要${txt}当前用户吗, 是否继续?`, '提示', {\n        type: 'warning'\n      }).then(() => {\n        updateUserState(row.id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              row.enabledMark = row.enabledMark ? 0 : 1\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    handleDel(id) {\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        delUser(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.initData()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    unlockUser(id) {\n      this.$confirm('此操作将解除该账户锁定, 是否继续?', '解除锁定', {\n        type: 'warning'\n      }).then(() => {\n        unlockUser(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.initData()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    exportForm() {\n      this.exportFormVisible = true\n      this.$nextTick(() => {\n        this.$refs.exportForm.init(this.listQuery)\n      })\n    },\n    uploadForm() {\n      this.importFormVisible = true\n      this.$nextTick(() => {\n        this.$refs.importForm.init()\n      })\n    },\n    handleResetPwd(id, account) {\n      this.resetFormVisible = true\n      this.$nextTick(() => {\n        this.$refs.ResetPwdForm.init(id, account)\n      })\n    },\n    socialsBindBtn(data) {\n      this.socialsVisible = true\n      this.$nextTick(() => {\n        this.$refs.SocialsBind.init(data)\n      })\n    },\n    handleSync() {\n      this.$router.push({ path: `/system/sysConfig?type=1` })\n    }\n  }\n}\n",null]}