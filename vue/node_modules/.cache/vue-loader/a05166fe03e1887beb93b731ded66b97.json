{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/DraggableItem.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/DraggableItem.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport draggable from 'vuedraggable'\nimport render from '@/components/Generator/render/render'\nimport { dyOptionsList } from '@/components/Generator/generator/comConfig'\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\n\nlet activeData = {}\nconst components = {\n  itemBtns(h, element, index, parent) {\n    const gutter = element.__config__.layout === 'colFormItem' && this.formConf.gutter ? this.formConf.gutter : 15\n    const rightDistance = gutter / 2\n    const { copyItem, deleteItem } = this.$listeners\n    return [\n      <span class=\"drawing-item-copy\" style={{ '--rightDistance': rightDistance + 50 + 'px' }} title=\"复制\" onClick={event => {\n        copyItem(element, parent); event.stopPropagation()\n      }}>\n        <i class=\"el-icon-copy-document\" />\n      </span>,\n      <el-popconfirm title=\"确定删除该组件？\" class=\"drawing-item-delete\" style={{ '--rightDistance': rightDistance + 18 + 'px' }} onConfirm={event => {\n        deleteItem(index, parent)\n      }}>\n        <span title=\"删除\" slot=\"reference\" style=\"width:100%;height:100%;display:inline-block\" >\n          <i class=\"el-icon-delete\" />\n        </span>\n      </el-popconfirm>\n    ]\n  },\n  tableSetting(h, element) {\n    const { addRow, addCol } = this.$listeners\n    return [\n      <span class=\"drawing-item-add-row\" title=\"插入行\" onClick={event => {\n        addRow(element); event.stopPropagation()\n      }}>\n        <i class=\"icon-ym icon-ym-generator-insertRow\" />\n      </span>,\n      <span class=\"drawing-item-add-col\" title=\"插入列\" onClick={event => {\n        addCol(element); event.stopPropagation()\n      }}>\n        <i class=\"icon-ym icon-ym-generator-insertCol\" />\n      </span>\n    ]\n  },\n  cellSetting(h, element, rowIndex, colIndex) {\n    const { handleTableSetting, handleShowMenu } = this.$listeners\n    const {\n      mergeLeftColDisabled,\n      mergeRightColDisabled,\n      mergeWholeRowDisabled,\n      mergeAboveRowDisabled,\n      mergeBelowRowDisabled,\n      mergeWholeColDisabled,\n      undoMergeRowDisabled,\n      undoMergeColDisabled,\n      deleteWholeColDisabled,\n      deleteWholeRowDisabled\n    } = this.$attrs\n    return [\n      <span class=\"drawing-item-cell\" >\n        <el-dropdown trigger=\"click\" onCommand={event => { handleTableSetting(event, element) }}\n          on-visible-change={event => { if (event) handleShowMenu(element, rowIndex, colIndex) }} >\n          <i class=\"icon-ym icon-ym-generator-TableSettings\" />\n          <el-dropdown-menu slot=\"dropdown\">\n            <el-dropdown-item command=\"1\">插入左侧列</el-dropdown-item>\n            <el-dropdown-item command=\"2\">插入右侧列</el-dropdown-item>\n            <el-dropdown-item command=\"3\">插入上方行</el-dropdown-item>\n            <el-dropdown-item command=\"4\">插入下方行</el-dropdown-item>\n            <el-dropdown-item command=\"5\" disabled={mergeLeftColDisabled} divided>向左合并</el-dropdown-item>\n            <el-dropdown-item command=\"6\" disabled={mergeRightColDisabled}>向右合并</el-dropdown-item>\n            <el-dropdown-item command=\"7\" disabled={mergeWholeRowDisabled}>合并整行</el-dropdown-item>\n            <el-dropdown-item command=\"8\" disabled={mergeAboveRowDisabled} divided>向上合并</el-dropdown-item>\n            <el-dropdown-item command=\"9\" disabled={mergeBelowRowDisabled}>向下合并</el-dropdown-item>\n            <el-dropdown-item command=\"10\" disabled={mergeWholeColDisabled}>合并整列</el-dropdown-item>\n            <el-dropdown-item command=\"11\" disabled={undoMergeRowDisabled} divided>撤销行合并</el-dropdown-item>\n            <el-dropdown-item command=\"12\" disabled={undoMergeColDisabled}>撤销列合并</el-dropdown-item>\n            <el-dropdown-item command=\"13\" disabled={deleteWholeColDisabled} divided>删除整列</el-dropdown-item>\n            <el-dropdown-item command=\"14\" disabled={deleteWholeRowDisabled}>删除整行</el-dropdown-item>\n          </el-dropdown-menu>\n        </el-dropdown>\n      </span >\n    ]\n  }\n}\n\nconst layouts = {\n  colFormItem(h, element, index, parent) {\n    const { activeItem } = this.$listeners\n    const config = element.__config__\n    let className = this.activeId === config.formId ? 'drawing-item active-from-item' : 'drawing-item'\n    if (this.formConf.unFocusedComponentBorder) className += ' unfocus-bordered'\n    let labelWidth = config.labelWidth ? `${config.labelWidth}px` : null\n    let label = config.label ? config.parentVModel ? config.label : config.label + (this.formConf.labelSuffix || '') : ''\n    if (config.showLabel === false) labelWidth = '0'\n    const Item = config.jnpfKey === 'cascader'\n      ? <JnpfCascader props={{ props: element.props }} v-model={config.defaultValue} placeholder={element.placeholder} options={element.options} multiple={element.multiple}\n        disabled={element.disabled} show-all-levels={element.showAllLevels} separator={element.separator}\n        style={element.style} clearable={element.clearable} filterable={element.filterable} key={config.renderKey}></JnpfCascader>\n      : <render key={config.renderKey} conf={element} onInput={event => { this.$set(config, 'defaultValue', event) }} />\n    return (\n      <el-col span={config.span} class={className}\n        nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n        <jnpf-form-tip-item label-width={labelWidth} tip-label={config.label && config.showLabel ? config.tipLabel : ''}\n          label={config.showLabel ? label : ''} required={config.required}>\n          {Item}\n        </jnpf-form-tip-item>\n        {components.itemBtns.apply(this, arguments)}\n      </el-col>\n    )\n  },\n  rowFormItem(h, element, index, parent) {\n    const { activeItem } = this.$listeners\n    const { put, end } = this.$attrs\n    const className = this.activeId === element.__config__.formId\n      ? 'drawing-row-item active-from-item'\n      : 'drawing-row-item'\n    if (element.__config__.jnpfKey === 'tab') {\n      return (\n        <el-col span={element.__config__.span}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <el-tabs type={element.type} tab-position={element.tabPosition} vModel={element.__config__.active}>\n              {\n                element.__config__.children.map((item, i) => {\n                  let child = renderChildren.apply(this, [h, item, i, element])\n                  let childgroup = { name: 'componentsGroup', put: (...arg) => put(...arg, item) }\n                  const onChildEnd = (...arg) => end(...arg, activeData, item)\n                  let tip = ''\n                  if (!item.__config__.children.length) {\n                    tip = <div class=\"table-tip tab-tip\">请将组件拖到此区域(可拖多个组件)</div>\n                  }\n                  return (\n                    <el-tab-pane key={item.name} name={item.name} label={item.title} >\n                      <el-col >\n                        {tip}\n                        <el-row gutter={element.__config__.gutter} style=\"padding-top:15px\">\n                          <draggable list={item.__config__.children} animation={340} group={childgroup} onEnd={onChildEnd} class=\"drag-wrapper\">\n                            {child}\n                          </draggable>\n                        </el-row>\n                      </el-col>\n                    </el-tab-pane>\n                  )\n                })\n              }\n            </el-tabs>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'collapse') {\n      return (\n        <el-col span={element.__config__.span}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <el-collapse vModel={element.__config__.active} accordion={element.accordion}>\n              {\n                element.__config__.children.map((item, i) => {\n                  let child = renderChildren.apply(this, [h, item, i, element])\n                  let childgroup = { name: 'componentsGroup', put: (...arg) => put(...arg, item) }\n                  const onChildEnd = (...arg) => end(...arg, activeData, item)\n                  let tip = ''\n                  if (!item.__config__.children.length) {\n                    tip = <div class=\"table-tip card-tip\">请将组件拖到此区域(可拖多个组件)</div>\n                  }\n                  return (\n                    <el-collapse-item key={item.name} title={item.title} name={item.name} >\n                      <el-col style=\"position:relative;padding-top:15px\">\n                        {tip}\n                        <el-row gutter={element.__config__.gutter} >\n                          <draggable list={item.__config__.children} animation={340} group={childgroup} onEnd={onChildEnd} class=\"drag-wrapper\">\n                            {child}\n                          </draggable>\n                        </el-row>\n                      </el-col>\n                    </el-collapse-item>\n                  )\n                })\n              }\n            </el-collapse>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'tableGrid') {\n      return (\n        <el-col span={element.__config__.span}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <table class=\"table-grid\">\n              <tbody>\n                {\n                  element.__config__.children.map((item, rowIndex) => {\n                    return (\n                      <tr>\n                        {\n                          item.__config__.children.map((it, colIndex) => {\n                            let child = renderChildren.apply(this, [h, it, colIndex, item])\n                            let childGroup = { name: 'componentsGroup', put: (...arg) => put(...arg, it) }\n                            const onChildEnd = (...arg) => end(...arg, activeData, it)\n                            const childClassName = this.activeId === it.__config__.formId ? 'drawing-row-item active-from-item' : 'drawing-row-item'\n                            return !it.__config__.merged ? (\n                              <td class={childClassName} colspan={it.__config__.colspan || 1} rowspan={it.__config__.rowspan || 1} onClick={event => { activeItem(it); event.stopPropagation() }}>\n                                <el-col>\n                                  <el-row gutter={element.__config__.gutter} >\n                                    <draggable list={it.__config__.children} animation={340} group={childGroup} onEnd={onChildEnd} class='table-cell'>\n                                      {child}\n                                    </draggable>\n                                  </el-row>\n                                </el-col>\n                                {components.cellSetting.apply(this, [h, element, rowIndex, colIndex])}\n                              </td>\n                            ) : ''\n                          })\n                        }\n                      </tr>\n                    )\n                  })\n                }\n              </tbody>\n            </table>\n            {components.tableSetting.apply(this, arguments)}\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    let child = renderChildren.apply(this, arguments)\n    const group = { name: 'componentsGroup', put: (...arg) => put(...arg, element) }\n    const onEnd = (...arg) => end(...arg, activeData, element)\n    if (element.__config__.jnpfKey === 'row') {\n      if (element.type === 'flex') {\n        child = <el-row type={element.type} justify={element.justify} align={element.align}>\n          {child}\n        </el-row>\n      }\n      let tip = ''\n      if (!element.__config__.children.length) {\n        tip = <div class=\"table-tip\">请将组件拖到此区域(可拖多个组件)</div>\n      }\n      return (\n        <el-col span={element.__config__.span}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <span class=\"component-name\" >{element.__config__.componentName} </span>\n            {tip}\n            <draggable list={element.__config__.children} animation={340} group={group} onEnd={onEnd} class=\"drag-wrapper\" style=\"margin-top:20px\">\n              {child}\n            </draggable>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'table') {\n      let tip = ''\n      if (!element.__config__.children.length) {\n        tip = <div class=\"table-tip\">请将组件拖到此区域(可拖多个组件)</div>\n      }\n      let toolTip = element.__config__.label\n      if (element.__config__.tipLabel && element.__config__.label) {\n        toolTip = <span slot=\"label\">{element.__config__.label}\n          <el-tooltip placement=\"top\" content={element.__config__.tipLabel}>\n            <a class='el-icon-question tooltip-question content-name'></a>\n          </el-tooltip>\n        </span >\n      }\n      return (\n        <el-col span={element.__config__.span}>\n          <el-row gutter={element.__config__.gutter} class={className + ' drawing-row-item-table'}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <span class=\"component-name\" >{toolTip} </span>\n            {tip}\n            <el-form label-position=\"top\">\n              <draggable list={element.__config__.children} animation={340} group={group} class=\"drag-wrapper table-wrapper table-wrapper-web\" onEnd={onEnd} clone={cloneComponent}>\n                {child}\n              </draggable>\n            </el-form>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'card') {\n      let tip = ''\n      if (!element.__config__.children.length) {\n        tip = <div class=\"table-tip card-tip\">请将组件拖到此区域(可拖多个组件)</div>\n      }\n      let toolTip = element.header\n      if (element.__config__.tipLabel && element.__config__.label) {\n        toolTip = <span slot=\"label\">{element.header}\n          <el-tooltip placement=\"top\" content={element.__config__.tipLabel}>\n            <a class='el-icon-question tooltip-question content-name'></a>\n          </el-tooltip>\n        </span >\n      }\n      let header = ''\n      if (element.header) {\n        header = <div slot=\"header\" ><span>{toolTip}</span></div>\n      }\n      return (\n        <el-col span={element.__config__.span}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <el-card shadow={element.shadow} header={element.header}>\n              {header}\n              <el-col>\n                <el-row gutter={element.__config__.gutter}\n                  nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n                  {tip}\n                  <draggable list={element.__config__.children} animation={340} group={group} onEnd={onEnd} class=\"drag-wrapper\">\n                    {child}\n                  </draggable>\n                </el-row>\n              </el-col>\n            </el-card>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n  }\n}\nfunction cloneComponent(origin) {\n  activeData = origin\n}\n\nfunction renderChildren(h, element, index, parent) {\n  const config = element.__config__\n  if (!Array.isArray(config.children)) return null\n  return config.children.map((el, i) => {\n    const layout = layouts[el.__config__.layout]\n    if (layout) {\n      return layout.call(this, h, el, i, config.children)\n    }\n    return layoutIsNotFound.call(this)\n  })\n}\n\nfunction layoutIsNotFound() {\n  throw new Error(`没有与${this.element.__config__.layout}匹配的layout`)\n}\n\nfunction buildOptions(element) {\n  const config = element.__config__\n  if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n    if (config.dataType === 'dictionary' && config.dictionaryType) {\n      getDictionaryDataSelector(config.dictionaryType).then(res => {\n        element.options = res.data.list\n      })\n    }\n    if (config.dataType === 'dynamic' && config.propsUrl) {\n      getDataInterfaceRes(config.propsUrl).then(res => {\n        element.options = Array.isArray(res.data) ? res.data : []\n      })\n    }\n  }\n  if (config.children && Array.isArray(config.children)) {\n    for (let i = 0; i < config.children.length; i++) {\n      buildOptions(config.children[i])\n    }\n  }\n}\n\nexport default {\n  components: {\n    render,\n    draggable\n  },\n  props: [\n    'element',\n    'index',\n    'drawingList',\n    'activeId',\n    'formConf'\n  ],\n  render(h) {\n    // buildOptions(this.element)\n    const layout = layouts[this.element.__config__.layout]\n    if (layout) {\n      return layout.call(this, h, this.element, this.index, this.drawingList)\n    }\n    return layoutIsNotFound.call(this)\n  }\n}\n",null]}