{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataSync/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataSync/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/web.dom.iterable\");\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nvar _dataSource = require(\"@/api/systemData/dataSource\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  name: 'systemData-dataSync',\n  data: function data() {\n    return {\n      key: '',\n      dataForm: {\n        dbConnectionFrom: '',\n        dbConnectionTo: ''\n      },\n      dbOptions: [],\n      dataRule: {\n        dbConnectionFrom: [{\n          required: true,\n          message: '数据库连接 From不能为空',\n          trigger: 'blur'\n        }],\n        dbConnectionTo: [{\n          required: true,\n          message: '数据库连接 To不能为空',\n          trigger: 'blur'\n        }]\n      },\n      list: [],\n      listLoading: false,\n      dialogVisible: false,\n      //规则配置弹窗\n      configureList: [],\n      defaultConfigureList: [],\n      beforeConversion: '',\n      //转换前\n      beforeConversionList: [],\n      //转换前\n      afterConversion: '',\n      //转换后\n      afterConversionList: [],\n      //转换后\n      verification: false,\n      convertRuleMap: {},\n      batchList: []\n    };\n  },\n  created: function created() {\n    this.initData();\n  },\n  methods: {\n    initData: function initData() {\n      var _this = this;\n      (0, _dataSource.getDataSourceListAll)().then(function (res) {\n        _this.dbOptions = res.data.list.filter(function (o) {\n          return o.children && o.children.length;\n        });\n      });\n    },\n    check: function check() {\n      var _this2 = this;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          if (_this2.dataForm.dbConnectionFrom === _this2.dataForm.dbConnectionTo) {\n            _this2.$message({\n              message: '数据库连接不能相同',\n              type: 'error',\n              duration: 1000\n            });\n            return _this2.list = [];\n          }\n          _this2.listLoading = true;\n          (0, _dataSource.checkDbLink)(_this2.dataForm).then(function (res) {\n            _this2.beforeConversionList = [];\n            _this2.convertRuleMap = res.data.convertRuleMap;\n            for (var key in _this2.convertRuleMap) {\n              _this2.beforeConversionList.push({\n                val: key,\n                value: _this2.convertRuleMap[key]\n              });\n            }\n            _this2.defaultConfigureList = [];\n            for (var index = 0; index < _this2.beforeConversionList.length; index++) {\n              var element = _this2.beforeConversionList[index];\n              _this2.defaultConfigureList.push({\n                beforeConversion: element.val,\n                afterConversion: element.value[0]\n              });\n              _this2.defaultConfigureList[index].afterConversionList = element.value;\n            }\n            _this2.configureList = JSON.parse(JSON.stringify(_this2.defaultConfigureList));\n            _this2.verification = res.data.checkDbFlag;\n            _this2.list = res.data.tableList;\n            for (var i = 0; i < _this2.list.length; i++) {\n              var e = _this2.list[i];\n              _this2.$set(_this2.list[i], 'result', '');\n              _this2.$set(_this2.list[i], 'btnLoading', false);\n            }\n            _this2.listLoading = false;\n          }).catch(function (res) {\n            _this2.listLoading = false;\n            _this2.list = [];\n          });\n        }\n      });\n    },\n    changeConversion: function changeConversion(val, i) {\n      this.afterConversionList = [];\n      this.configureList[i].afterConversion = '';\n      this.configureList[i].afterConversionList = this.convertRuleMap[val];\n    },\n    saveRule: function saveRule() {\n      //保存\n      this.defaultConfigureList = JSON.parse(JSON.stringify(this.configureList));\n      this.dialogVisible = false;\n    },\n    addRule: function addRule() {\n      //规则配置新增\n      this.configureList.push({\n        beforeConversion: '',\n        afterConversion: ''\n      });\n    },\n    delRule: function delRule(i) {\n      //规则配置删除\n      this.configureList.splice(i, 1);\n    },\n    batch: function batch() {\n      var _this3 = this;\n      //批量同步\n      if (!this.batchList.length) return this.$message.error('请先选择数据');\n      var map = {};\n      var data = {\n        dbConnectionFrom: this.dataForm.dbConnectionFrom,\n        dbConnectionTo: this.dataForm.dbConnectionTo,\n        dbTableList: this.batchList\n      };\n      if (this.configureList && this.configureList.length) {\n        for (var index in this.configureList) {\n          map[this.configureList[index].beforeConversion] = this.configureList[index].afterConversion;\n        }\n        data = _objectSpread(_objectSpread({}, data), {}, {\n          convertRuleMap: map\n        });\n      }\n      this.listLoading = true;\n      this.$confirm('批量同步，将覆盖您原有表内的数据。请确认操作', {\n        type: 'warning'\n      }).then(function () {\n        (0, _dataSource.batchExecute)(data).then(function (res) {\n          _this3.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1000\n          });\n          for (var key in res.data) {\n            for (var _index = 0; _index < _this3.list.length; _index++) {\n              var element = _this3.list[_index];\n              if (element.table == key) element.result = res.data[key] == 1 ? '成功' : '失败';\n            }\n          }\n          _this3.listLoading = false;\n          _this3.toggleSelection();\n        }).catch(function () {\n          _this3.listLoading = false;\n        });\n      }).catch(function () {\n        _this3.listLoading = false;\n      });\n    },\n    toggleSelection: function toggleSelection() {\n      this.$refs.multipleTable.$refs.JNPFTable.clearSelection();\n    },\n    addConfigure: function addConfigure() {\n      //添加规则配置\n      if (!this.verification) return this.$message.error('请验证连接');\n      this.dialogVisible = true;\n      this.configureList = JSON.parse(JSON.stringify(this.defaultConfigureList));\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      //多选框\n      var list = [];\n      val.forEach(function (element) {\n        list.push(element.table);\n      });\n      this.batchList = list;\n    },\n    copy: function copy(row) {\n      var _this4 = this;\n      var map = {};\n      row.btnLoading = true;\n      row.result = '';\n      var data = {\n        dbConnectionFrom: this.dataForm.dbConnectionFrom,\n        dbConnectionTo: this.dataForm.dbConnectionTo,\n        dbTable: row.table\n      };\n      if (this.configureList.length) {\n        for (var index in this.configureList) {\n          map[this.configureList[index].beforeConversion] = this.configureList[index].afterConversion;\n        }\n        data = _objectSpread(_objectSpread({}, data), {}, {\n          convertRuleMap: map\n        });\n      }\n      (0, _dataSource.DataSync)(data).then(function (res) {\n        if (res.data == 0) {\n          _this4.execute(row, res.data);\n        } else if (res.data == 1) {\n          _this4.$message({\n            message: '初始库表中没有数据',\n            type: 'warning',\n            duration: 1000\n          });\n          row.btnLoading = false;\n        } else if (res.data == 2) {\n          _this4.$confirm('目标库中该表不存在，是否在目标库中创建该表，并同步数据?', '提示', {\n            type: 'warning'\n          }).then(function () {\n            _this4.execute(row, res.data);\n          }).catch(function () {\n            row.btnLoading = false;\n          });\n        } else if (res.data == 3) {\n          _this4.$confirm('目标表存在数据,是否自动清除并同步数据?', '提示', {\n            type: 'warning'\n          }).then(function () {\n            _this4.execute(row, res.data);\n          }).catch(function () {\n            row.btnLoading = false;\n          });\n        }\n      }).catch(function () {\n        row.btnLoading = false;\n      });\n    },\n    execute: function execute(row, type) {\n      row.result = '';\n      var map = {};\n      var data = {\n        type: type,\n        dbConnectionFrom: this.dataForm.dbConnectionFrom,\n        dbConnectionTo: this.dataForm.dbConnectionTo,\n        dbTable: row.table\n      };\n      if (this.configureList.length) {\n        for (var index in this.configureList) {\n          map[this.configureList[index].beforeConversion] = this.configureList[index].afterConversion;\n        }\n        data = _objectSpread(_objectSpread({}, data), {}, {\n          convertRuleMap: map\n        });\n      }\n      (0, _dataSource.Execute)(data).then(function (res) {\n        row.result = res.msg;\n        row.btnLoading = false;\n      }).catch(function () {\n        row.btnLoading = false;\n      });\n    }\n  }\n};",null]}