{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/formShortLink/list/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/formShortLink/list/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getModelSubList, deleteModel, batchDelete, exportModel, createModel, updateModel, getConfigData } from '@/api/onlineDev/visualDev'\nimport { Create, Update } from '@/api/workFlow/workFlowForm'\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport { getColumnsByModuleId } from '@/api/common'\nimport { dyOptionsList, systemComponentsList } from '@/components/Generator/generator/comConfig'\nimport { Candidates } from '@/api/workFlow/FlowBefore'\nimport Form from './Form'\nimport FlowBox from '@/views/workFlow/components/FlowBox'\nimport Detail from './detail'\nimport ExportBox from '@/components/ExportBox'\nimport Search from './Search'\nimport ChildTableColumn from './child-table-column'\nimport SuperQuery from '@/components/SuperQuery'\nimport CandidateForm from '@/views/workFlow/components/CandidateForm'\nimport CustomBox from '@/components/JNPFCustom'\nimport { getModelListLink, getConfig, checkPwd } from '@/api/onlineDev/webDesign'\nimport QRCode from 'qrcodejs2'\nimport md5 from 'js-md5';\nconst getFormDataFields = item => {\n  if (!item.__config__ || !item.__config__.jnpfKey) return true\n  const jnpfKey = item.__config__.jnpfKey\n  const list = [\n    'input',\n    'textarea',\n    'inputNumber',\n    'switch',\n    'datePicker',\n    'timePicker',\n    'colorPicker',\n    'rate',\n    'slider',\n    'editor',\n    'link',\n    'text',\n    'alert',\n    'table',\n    'collapse',\n    'collapseItem',\n    'tabItem',\n    'tab',\n    'row',\n    'card',\n    'groupTitle',\n    'divider',\n    'tableGrid',\n    'tableGridTr',\n    'tableGridTd',\n    'sign',\n    'location'\n  ]\n  const fieldsSelectList = [\"radio\", \"checkbox\", \"select\", \"cascader\", \"treeSelect\"]\n  if (list.includes(jnpfKey) || (fieldsSelectList.includes(jnpfKey) && item.__config__.dataType ===\n    'static')) return true\n  return false\n}\nexport default {\n  name: 'dynamicModel',\n  components: { Form, ExportBox, Search, Detail, FlowBox, ChildTableColumn, SuperQuery, CandidateForm, CustomBox },\n  props: ['config', 'modelId', 'isPreview', 'encryption'],\n  data() {\n    return {\n      systemComponentsList,\n      keyword: '',\n      treeProps: {\n        children: 'children',\n        label: 'fullName',\n        value: 'id',\n        isLeaf: 'isLeaf'\n      },\n      list: [],\n      cacheList: [],\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: '',\n        menuId: '',\n        queryJson: '',\n        superQueryJson: ''\n      },\n      defaultListQuery: {\n        pageSize: 20,\n        sort: 'desc',\n        sidx: '',\n      },\n      flowVisible: false,\n      formVisible: false,\n      detailVisible: false,\n      importBoxVisible: false,\n      exportBoxVisible: false,\n      uploadBoxVisible: false,\n      customBoxVisible: false,\n      superQueryVisible: false,\n      treeData: [],\n      expandsTree: true,\n      treeActiveId: '',\n      columnData: {\n        columnBtnsList: []\n      },\n      formData: {},\n      columnList: [],\n      childColumnList: [],\n      columnOptions: [],\n      exportList: [],\n      columnBtnsList: [],\n      customBtnsList: [],\n      hasBatchBtn: false,\n      refreshTable: false,\n      expandsTable: true,\n      multipleSelection: [],\n      settingsColumnList: [],\n      mergeList: [],\n      expandObj: {},\n      flowTemplateJson: {},\n      isCustomCopy: false,\n      candidateVisible: false,\n      candidateType: 1,\n      branchList: [],\n      candidateList: [],\n      currRow: {},\n      workFlowFormData: {},\n      rowStyle: null,\n      cellStyle: null,\n      refreshTree: true,\n      searchList: [],\n      dataList: [],\n      formLink: '',\n      columnPassUse: 1,\n      password: '',\n      passwordLoading: false,\n      id: '',\n      ordersList: []\n    }\n  },\n  computed: {\n    operationWidth() {\n      const customWidth = this.customBtnsList.length ? 50 : 0\n      return this.columnBtnsList.length * 50 + customWidth\n    }\n  },\n  watch: {\n    keyword(val) {\n      if (this.columnData.treeMethod == 1) this.$refs.treeBox.filter(val)\n    }\n  },\n  created() {\n    getConfig(this.modelId, this.encryption).then(res => {\n      this.searchList = res.data.columnCondition ? JSON.parse(res.data.columnCondition) : []\n      this.addSearchList()\n      this.dataList = res.data.columnText ? JSON.parse(res.data.columnText) : []\n      this.formLink = res.data.formLink || ''\n      this.id = res.data.id || 0\n      this.columnPassUse = res.data.columnPassUse || 0\n      if (this.columnPassUse == 1) return\n      this.init()\n    })\n  },\n  methods: {\n    async init() {\n      this.listLoading = true\n      this.listQuery.menuId = this.modelId\n      this.refreshTable = false\n      if (!this.config.columnData || !this.config.formData) return\n      this.columnData = JSON.parse(this.config.columnData)\n      this.columnData.type = 1\n      this.columnData.searchList = this.searchList\n      if (this.columnData.type === 3) {\n        this.columnData.columnList = this.columnData.columnList.filter(o => o.prop != this.columnData.groupField)\n      }\n      if (this.config.enableFlow == 1) {\n        this.flowTemplateJson = this.config.flowTemplateJson ? JSON.parse(this.config.flowTemplateJson) : {}\n        this.isCustomCopy = this.flowTemplateJson.properties && this.flowTemplateJson.properties.isCustomCopy\n      }\n      this.hasBatchBtn = this.columnData.btnsList.some(o => o.value == 'batchRemove')\n      this.formData = JSON.parse(this.config.formData)\n      this.formData.fields = this.recurSiveFilter(this.formData.fields)\n      this.listLoading = true\n      if (this.isPreview) this.listQuery.menuId = \"270579315303777093\"\n      this.rowStyle = this.jnpf.getScriptFunc.call(this, this.columnData.funcs && this.columnData.funcs.rowStyle)\n      this.cellStyle = this.jnpf.getScriptFunc.call(this, this.columnData.funcs && this.columnData.funcs.cellStyle)\n      this.getColumnList()\n      this.$nextTick(() => {\n        this.refreshTable = true\n      })\n      if (this.isPreview) return this.listLoading = false\n      this.listQuery.pageSize = this.columnData.pageSize\n      this.listQuery.sort = this.columnData.sort\n      this.listQuery.sidx = this.columnData.defaultSidx\n      this.defaultListQuery.pageSize = this.columnData.pageSize\n      this.defaultListQuery.sort = this.columnData.sort\n      this.defaultListQuery.sidx = this.columnData.defaultSidx\n      if (this.columnData.type === 3 || !this.columnData.hasPage) this.listQuery.pageSize = 10000\n      this.initData()\n      this.setDefaultQuery(this.columnData.defaultSortConfig)\n    },\n    setDefaultQuery(defaultSortList) {\n      const defaultSortConfig = (defaultSortList || []).map(o =>\n        (o.sort === 'desc' ? '-' : '') + o.field);\n      this.listQuery.sidx = defaultSortConfig.join(',')\n    },\n    addSearchList() {\n      const obj = {\n        label: '关键词',\n        __config__: { jnpfKey: 'input' },\n        value: undefined,\n        id: 'jnpfKeyword',\n        prop: 'jnpfKeyword'\n      };\n      for (let i = 0; i < this.searchList.length; i++) {\n        const item = this.searchList[i];\n        if (item.isKeyword) return this.searchList.unshift(obj);\n      }\n    },\n    recurSiveFilter(getDrawingList) {\n      let newColumn = getDrawingList.filter(item => getFormDataFields(item))\n      newColumn.forEach(x =>\n        x.__config__ && x.__config__.children && Array.isArray(x.__config__.children) && (x\n          .__config__.children = this.recurSiveFilter(x.__config__.children))\n      )\n      return newColumn\n    },\n    initDefaultSearchData() {\n      let searchList = this.columnData.searchList\n      //处理搜索条件中的默认值\n      if (searchList != null && searchList.length > 0) {\n        let initQueryJson = {}\n        for (let i = 0, len = searchList.length; i < len; i++) {\n          if (searchList[i].jnpfKey === 'datePicker' && searchList[i].__config__.defaultCurrent == true) {\n            //日期\n            let startDateTime = new Date()\n            startDateTime.setHours(0, 0, 0, 0)\n            let endDateTime = new Date()\n            endDateTime.setHours(23, 59, 59, 999)\n            initQueryJson[searchList[i].__vModel__] = [startDateTime.getTime(), endDateTime.getTime()]\n          } else if (searchList[i].jnpfKey === 'organizeSelect' && searchList[i].__config__.defaultCurrent == true) {\n            //组织机构\n            if (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0) {\n              initQueryJson[searchList[i].__vModel__] = searchList[i].searchMultiple == true ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList;\n            } else {\n              initQueryJson[searchList[i].__vModel__] = []\n            }\n          } else if (searchList[i].jnpfKey === 'depSelect' && searchList[i].__config__.defaultCurrent == true && this.userInfo.departmentId != null && this.userInfo.departmentId != '') {\n            if (searchList[i].__config__.defaultValue != null) {\n              initQueryJson[searchList[i].__vModel__] = searchList[i].__config__.defaultValue\n            }\n          } else if (searchList[i].__config__.jnpfKey === 'userSelect' && searchList[i].__config__.defaultCurrent == true) {\n            if (searchList[i].__config__.defaultValue != null) {\n              initQueryJson[searchList[i].__vModel__] = searchList[i].__config__.defaultValue\n            }\n          }\n        }\n        if (Object.keys(initQueryJson).length > 0) {\n          this.listQuery.queryJson = JSON.stringify(initQueryJson)\n        }\n      }\n    },\n    initData() {\n      if (this.isPreview) return\n      this.listLoading = true\n      getModelListLink(this.modelId, this.listQuery, this.encryption).then(res => {\n        this.list = res.data.list\n        if (this.columnData.type !== 3 && this.columnData.hasPage) this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    handleLogin() {\n      this.passwordLoading = true\n      if (!this.password) {\n        this.$message({\n          message: '请输入验证码',\n          type: 'error'\n        })\n        this.passwordLoading = false\n        return\n      }\n      let param = {\n        id: this.id,\n        type: 1,\n        encryption: this.encryption,\n        password: md5(this.password)\n      }\n      checkPwd(param).then((res) => {\n        this.passwordLoading = false\n        if (res.code == 200) {\n          this.columnPassUse = 0\n          this.init()\n        }\n      }).catch(() => {\n        this.passwordLoading = false\n      })\n    },\n    getQRimg() {\n      if (!this.formLink) {\n        return\n      }\n      this.$refs.qrCode.innerHTML = \"\";\n      this.qrcode = new QRCode(this.$refs.qrCode, {\n        width: 150,\n        height: 150, // 高度\n        text: this.formLink, // 二维码内容\n        // render: 'canvas' // 设置渲染方式（有两种方式 table和canvas，默认是canvas）\n        // background: '#f0f'\n        // foreground: '#ff0'\n        correctLevel: QRCode.CorrectLevel.H //容错级别 容错级别有：（1）QRCode.CorrectLevel.L （2）QRCode.CorrectLevel.M （3）QRCode.CorrectLevel.Q （4）QRCode.CorrectLevel.H\n      })\n    },\n    toDetail(item, defaultValue) {\n      if (!defaultValue) return\n      this.mainLoading = true\n      getConfigData(item.modelId).then(res => {\n        this.mainLoading = false\n        if (!res.data) return\n        if (!res.data.formData) return\n        let formData = JSON.parse(res.data.formData)\n        formData.popupType = this.formData.popupType\n        this.detailVisible = true\n        this.$nextTick(() => {\n          this.$refs.Detail.init(formData, item.modelId, defaultValue)\n        })\n      }).catch(() => { this.mainLoading = false })\n    },\n    getTreeView() {\n      if (this.columnData.treeDataSource === \"dictionary\") {\n        if (!this.columnData.treeDictionary) return\n        getDictionaryDataSelector(this.columnData.treeDictionary).then(res => {\n          this.treeData = res.data.list\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"organize\") {\n        this.$store.dispatch('generator/getDepTree').then(res => {\n          this.treeData = res\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"department\") {\n        this.$store.dispatch('generator/getDepTree').then(res => {\n          this.treeData = res\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"api\") {\n        if (!this.columnData.treePropsUrl) return\n        getDataInterfaceRes(this.columnData.treePropsUrl).then(res => {\n          this.treeData = Array.isArray(res.data) ? res.data : [];\n          this.initData()\n        })\n      }\n    },\n    getColumnList() {\n      if (![3, 5].includes(this.columnData.type)) this.dataList = this.getComplexColumns(this.dataList)\n      this.columnList = this.transformColumnList(this.dataList)\n    },\n    getComplexColumns(columns) {\n      let complexHeaderList = this.columnData.complexHeaderList || [];\n      if (!complexHeaderList.length) return columns;\n      let childColumns = [];\n      for (let i = 0; i < complexHeaderList.length; i++) {\n        const e = complexHeaderList[i];\n        e.label = e.fullName;\n        e.align = e.align;\n        e.dataIndex = e.id;\n        e.prop = e.id;\n        e.children = [];\n        e.jnpfKey = 'complexHeader';\n        e.sortable = false;\n        if (e.childColumns && e.childColumns.length) {\n          childColumns.push(...e.childColumns);\n          for (let j = 0; j < columns.length; j++) {\n            const o = columns[j];\n            if (e.childColumns.includes(o.__vModel__) && o.fixed !== 'left' && o.fixed !== 'right') e.children.push({ ...o });\n          }\n        }\n      }\n      complexHeaderList = complexHeaderList.filter(o => o.children.length);\n      for (let i = 0; i < columns.length; i++) {\n        const item = columns[i];\n        if (!childColumns.includes(item.__vModel__)) complexHeaderList.push(item);\n      }\n      return complexHeaderList;\n    },\n    transformColumnList(columnList) {\n      let list = []\n      for (let i = 0; i < columnList.length; i++) {\n        const e = columnList[i];\n        if (!e.prop.includes('-')) {\n          list.push(e)\n        } else {\n          let prop = e.prop.split('-')[0]\n          let vModel = e.prop.split('-')[1]\n          let label = e.label.split('-')[0]\n          let childLabel = e.label.replace(label + '-', '');\n          let newItem = {\n            align: \"center\",\n            jnpfKey: \"table\",\n            prop,\n            label,\n            children: []\n          }\n          e.vModel = vModel\n          e.childLabel = childLabel\n          if (!this.expandObj.hasOwnProperty(`${prop}Expand`)) this.$set(this.expandObj, `${prop}Expand`, false)\n          if (!list.some(o => o.prop === prop)) list.push(newItem)\n          for (let i = 0; i < list.length; i++) {\n            if (list[i].prop === prop) {\n              list[i].children.push(e)\n              break\n            }\n          }\n        }\n      }\n      this.getMergeList(list)\n      this.getExportList(list)\n      this.childColumnList = list.filter(o => o.jnpfKey === 'table')\n      return list\n    },\n    getExportList(list) {\n      let exportList = []\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].jnpfKey === 'table') {\n          for (let j = 0; j < list[i].children.length; j++) {\n            exportList.push(list[i].children[j])\n          }\n        } else {\n          exportList.push(list[i])\n        }\n      }\n      this.exportList = exportList\n    },\n    getMergeList(list) {\n      list.forEach(item => {\n        if (item.children && item.children.length > 0 && item.jnpfKey == 'table') {\n          item.children.forEach((child, index) => {\n            if (index == 0) {\n              this.mergeList.push({\n                prop: child.prop,\n                rowspan: 1,\n                colspan: item.children.length\n              })\n            } else {\n              this.mergeList.push({\n                prop: child.prop,\n                rowspan: 0,\n                colspan: 0\n              })\n            }\n          })\n        } else {\n          this.mergeList.push({\n            prop: item.prop,\n            rowspan: 1,\n            colspan: 1\n          })\n        }\n      })\n    },\n    arraySpanMethod({ column }) {\n      for (let i = 0; i < this.mergeList.length; i++) {\n        if (column.property == this.mergeList[i].prop) {\n          return [this.mergeList[i].rowspan, this.mergeList[i].colspan]\n        }\n      }\n    },\n    toggleExpand(row, field) {\n      row[field] = !row[field]\n    },\n    getNodePath(node) {\n      let fullPath = []\n      const loop = (node) => {\n        if (node.level) fullPath.unshift(node.data)\n        if (node.parent) loop(node.parent)\n      }\n      loop(node)\n      return fullPath\n    },\n    handleNodeClick(data, node) {\n      if (this.treeActiveId == data[this.treeProps.value]) return\n      this.treeActiveId = data[this.treeProps.value]\n      this.$refs.Search.treeReset()\n      let queryJson = {}\n      if (this.columnData.treeDataSource === \"organize\") {\n        const nodePath = this.getNodePath(node)\n        const currValue = nodePath.map(o => o[this.treeProps.value])\n        queryJson = { [this.columnData.treeRelation]: currValue }\n        this.treeActiveId = currValue\n      } else {\n        queryJson = { [this.columnData.treeRelation]: data[this.treeProps.value] }\n      }\n      this.search(JSON.stringify(queryJson))\n    },\n    handleDel(id, index) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        if (id) {\n          deleteModel(this.modelId, id).then(res => {\n            this.$message({\n              type: 'success',\n              message: res.msg,\n              duration: 1000,\n              onClose: () => { this.initData() }\n            });\n          })\n        } else {\n          this.list.splice(index, 1)\n        }\n      }).catch(() => { });\n    },\n    saveForRowEdit(row, status, candidateData) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      if (this.config.enableFlow == 1) {\n        let query = {\n          id: row.id,\n          status: status || \"1\",\n          candidateType: this.candidateType,\n          formData: row,\n          flowId: this.config.flowId,\n          flowUrgent: 1\n        }\n        if (candidateData) query = { ...query, ...candidateData }\n        const formMethod = query.id ? Update : Create\n        formMethod(query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.candidateVisible = false\n              this.initData()\n            }\n          })\n        })\n      } else {\n        let query = {\n          id: row.id,\n          data: JSON.stringify(row)\n        }\n        const formMethod = query.id ? updateModel : createModel\n        formMethod(this.modelId, query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.candidateVisible = false\n              this.initData()\n            }\n          })\n        })\n      }\n    },\n    submitForRowEdit(row) {\n      this.currRow = row\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.workFlowFormData = {\n        id: row.id,\n        formData: row,\n        flowId: this.config.flowId\n      }\n      Candidates(0, this.workFlowFormData).then(res => {\n        let data = res.data\n        this.candidateType = data.type\n        if (data.type == 1) {\n          this.branchList = res.data.list.filter(o => o.isBranchFlow)\n          this.candidateList = res.data.list.filter(o => !o.isBranchFlow && o.isCandidates)\n          this.candidateVisible = true\n        } else if (data.type == 2) {\n          this.branchList = []\n          this.candidateList = res.data.list.filter(o => o.isCandidates)\n          this.candidateVisible = true\n        } else {\n          if (this.isCustomCopy) {\n            this.branchList = []\n            this.candidateList = []\n            this.candidateVisible = true\n            return\n          }\n          this.$confirm('您确定要提交当前流程吗, 是否继续?', '提示', {\n            type: 'warning'\n          }).then(() => {\n            this.saveForRowEdit(row, '0')\n          }).catch(() => { })\n        }\n      }).catch(() => { })\n    },\n    submitCandidate(data) {\n      this.saveForRowEdit(this.currRow, '0', data)\n    },\n    cancelRowEdit(row, index) {\n      if (!row.id) return this.list.splice(index, 1)\n      row.rowEdit = false\n      let item = JSON.parse(JSON.stringify(this.cacheList[index]))\n      this.$set(this.list, index, item)\n    },\n    addHandleForRowEdit() {\n      let item = {\n        rowEdit: true\n      }\n      for (let i = 0; i < this.columnData.columnList.length; i++) {\n        let e = this.columnData.columnList[i]\n        item[e.__vModel__] = e.__config__.defaultValue\n      }\n      this.list.unshift(item)\n    },\n    addOrUpdateHandle(id) {\n      if (this.config.enableFlow == 1) {\n        let data = {\n          id: id || '',\n          enCode: this.config.flowEnCode,\n          flowId: this.config.flowId,\n          formType: 2,\n          type: 1,\n          opType: '-1',\n          modelId: this.modelId,\n          isPreview: this.isPreview,\n          formConf: JSON.stringify(this.formData)\n        }\n        this.flowVisible = true\n        this.$nextTick(() => {\n          this.$refs.FlowBox.init(data)\n        })\n      } else {\n        this.formVisible = true\n        this.$nextTick(() => {\n          this.$refs.Form.init(this.formData, this.modelId, id, this.isPreview, this.columnData.useFormPermission)\n        })\n      }\n    },\n    headBtnsHandel(key) {\n      if (key === 'add') {\n        if (this.columnData.type === 4) {\n          this.addHandleForRowEdit()\n        } else {\n          this.addOrUpdateHandle()\n        }\n      }\n      if (key == 'download') {\n        this.exportBoxVisible = true\n        this.$nextTick(() => {\n          this.$refs.ExportBox.init(this.exportList)\n        })\n      }\n      if (key == 'upload') {\n        this.uploadBoxVisible = true\n        this.$nextTick(() => {\n          this.$refs.UploadBox.init(this.modelId)\n        })\n      }\n      if (this.isPreview) return\n      if (key === 'batchRemove') {\n        this.batchRemove()\n      }\n    },\n    handleSelectionChange(val) {\n      const res = val.map(item => item.id)\n      this.multipleSelection = res\n    },\n    batchRemove() {\n      if (!this.multipleSelection.length) {\n        this.$message({\n          type: 'error',\n          message: '请选择一条数据',\n          duration: 1500,\n        })\n        return\n      }\n      this.$confirm('您确定要删除这些数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        batchDelete(this.modelId, this.multipleSelection).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.initData()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    download(data) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据导出', type: 'warning' })\n      let query = { ...this.listQuery, ...data }\n      exportModel(this.modelId, query).then(res => {\n        if (!res.data.url) return\n        this.jnpf.downloadFile(res.data.url)\n        this.$refs.ExportBox.visible = false\n        this.exportBoxVisible = false\n      })\n    },\n    columnBtnHandel(row) {\n      this.goDetail(row.id, row)\n    },\n    goDetail(id, row) {\n      this.detailVisible = true\n      this.$nextTick(() => {\n        this.$refs.Detail.init(this.formData, this.modelId, id, this.encryption)\n      })\n    },\n    handleHeaderClass({ column }) {\n      column.order = column.multiOrder\n    },\n    handleOrderChange(orderColumn, orderState) {\n      let index = this.ordersList.findIndex(e => e.field === orderColumn);\n      let sort = orderState === 'ascending' ? 'asc' : orderState === 'descending' ? 'desc' : '';\n      if (index > -1) {\n        this.ordersList[index].sort = orderState;\n      } else {\n        this.ordersList.push({ field: orderColumn, sort });\n      }\n      this.ordersList = this.ordersList.filter(e => e.sort);\n      this.setDefaultQuery(this.ordersList)\n      this.initData()\n    },\n    handleTableSort({ column }) {\n      if (column.sortable !== 'custom') return\n      column.multiOrder = column.multiOrder === 'descending' ? 'ascending' : column.multiOrder ? '' : 'descending';\n      this.handleOrderChange(column.property, column.multiOrder)\n    },\n    refresh(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) this.initData()\n    },\n    closeFlow(isRefresh) {\n      this.flowVisible = false\n      if (isRefresh) this.initData()\n    },\n    reset() {\n      this.listQuery.sort = this.defaultListQuery.sort\n      this.listQuery.sidx = this.defaultListQuery.sidx\n      this.search('')\n    },\n    searchData(queryJson) {\n      this.search(queryJson)\n    },\n    search(queryJson) {\n      // if (this.isPreview) return\n      // if (!queryJson) this.$refs.treeBox && this.$refs.treeBox.setCurrentKey(null);\n      this.listQuery.queryJson = queryJson\n      this.listQuery.currentPage = 1\n      this.setDefaultQuery(this.ordersList)\n      this.initData()\n    },\n    openSuperQuery() {\n      this.superQueryVisible = true\n      this.$nextTick(() => {\n        this.$refs.SuperQuery.init()\n      })\n    },\n    superQuery(queryJson) {\n      if (this.isPreview) return\n      this.listQuery.superQueryJson = queryJson\n      this.listQuery.currentPage = 1\n      this.initData()\n    },\n    customBtnsHandel(item, row, index) {\n      if (item.btnType == 1) this.handlePopup(item, row, index)\n      if (item.btnType == 2) this.handleScriptFunc(item, row, index)\n      if (item.btnType == 3) this.handleInterface(item, row, index)\n\n    },\n    handlePopup(item, row, index) {\n      this.customBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.CustomBox.init(item, this.modelId, row.id, this.isPreview)\n      })\n    },\n    handleScriptFunc(item, row, index) {\n      const parameter = {\n        data: row,\n        index,\n        refresh: this.initData,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n      const func = this.jnpf.getScriptFunc.call(this, item.func)\n      if (!func) return\n      func.call(this, parameter)\n    },\n    handleInterface(item, row, index) {\n      const handlerInterface = () => {\n        if (item.templateJson && item.templateJson.length) {\n          item.templateJson.forEach((ele) => {\n            ele.defaultValue = row[ele.relationField] || \"\"\n          })\n        }\n        let query = {\n          paramList: item.templateJson || [],\n        }\n        getDataInterfaceRes(item.interfaceId, query).then(res => {\n          this.$message({ message: res.msg, type: 'success' });\n        })\n      }\n      if (!item.useConfirm) return handlerInterface()\n      this.$confirm(item.confirmTitle || '确认执行此操作', '提示', { type: 'warning' }).then(() => {\n        handlerInterface()\n      }).catch(() => { })\n    },\n    setTableLoadFunc() {\n      const JNPFTable = this.$refs.tableRef.$refs.JNPFTable\n      const parameter = {\n        data: this.list,\n        tableRef: JNPFTable,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n      const func = this.jnpf.getScriptFunc.call(this, this.columnData.funcs.afterOnload)\n      if (!func) return\n      func.call(this, parameter)\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.treeProps.label].indexOf(value) !== -1;\n    },\n    toggleTreeExpand(expands) {\n      this.refreshTree = false\n      this.expandsTree = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(null)\n        })\n      })\n    },\n    toggleExpandList() {\n      this.refreshTable = false;\n      this.expandsTable = !this.expandsTable;\n      this.$nextTick(() => {\n        this.refreshTable = true;\n      });\n    },\n    loadNode(node, resolve) {\n      const nodeData = node.data\n      const config = this.columnData\n      if (config.treeInterfaceId) {\n        if (config.treeTemplateJson && config.treeTemplateJson.length) {\n          for (let i = 0; i < config.treeTemplateJson.length; i++) {\n            const element = config.treeTemplateJson[i];\n            element.defaultValue = nodeData[element.relationField] || ''\n          }\n        }\n        let query = {\n          paramList: config.treeTemplateJson || [],\n        }\n        getDataInterfaceRes(config.treeInterfaceId, query).then(res => {\n          let data = res.data\n          if (Array.isArray(data)) {\n            resolve(data);\n          } else {\n            resolve([]);\n          }\n        })\n      }\n    },\n    treeLoad(tree, treeNode, resolve) {\n      getModelSubList(this.modelId, tree.id, this.listQuery).then(res => {\n        if (res.data.list && Array.isArray(res.data.list)) {\n          const list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            hasChildren: true\n          }))\n          resolve(list);\n        } else {\n          resolve([]);\n        }\n      })\n    }\n  }\n}\n",null]}