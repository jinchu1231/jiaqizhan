{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/formShortLink/list/Search.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/formShortLink/list/Search.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { deepClone } from '@/utils'\nimport { dyOptionsList, useInputList, useDateList, useSelectList } from '@/components/Generator/generator/comConfig'\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\n\nexport default {\n  props: ['list', 'initDataJson'],\n  data() {\n    return {\n      showAll: false,\n      searchList: [],\n      useInputList,\n      useDateList,\n      useSelectList\n    }\n  },\n  watch: {\n    list: {\n      handler: function (val) {\n        this.searchList = deepClone(val)\n        this.buildOptions(this.searchList)\n      },\n      deep: true,\n      immediate: true\n    },\n    initDataJson: {\n      handler: function (val) {\n        if (val != '') {\n          let initData = JSON.parse(val);\n          if (Object.keys(initData).length > 0) {\n            for (let key in initData) {\n              for (let i = 0; i < this.searchList.length; i++) {\n                if (this.searchList[i].__vModel__ === key) {\n                  if (this.searchList[i].searchMultiple) {\n                    if (this.searchList[i].jnpfKey == \"organizeSelect\") {\n                      this.searchList[i].value = Array.isArray(initData[key]) && Array.isArray(initData[key][0]) ? initData[key] : [initData[key]]\n                    } else {\n                      this.searchList[i].value = Array.isArray(initData[key]) ? initData[key] : [initData[key]]\n                    }\n                  } else {\n                    this.searchList[i].value = initData[key]\n                  }\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  computed: {\n\n  },\n  methods: {\n    changeValue(e) {\n      this.$forceUpdate()\n    },\n    buildOptions(componentList) {\n      componentList.forEach(cur => {\n        const config = cur.__config__\n        if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            cur.options = []\n            getDictionaryDataSelector(config.dictionaryType).then(res => {\n              cur.options = res.data.list\n            })\n          }\n          if (config.dataType === 'dynamic' && config.propsUrl) {\n            cur.options = []\n            let query = { paramList: config.templateJson || [] }\n            getDataInterfaceRes(config.propsUrl, query).then(res => {\n              cur.options = Array.isArray(res.data) ? res.data : []\n            })\n          }\n        }\n      })\n    },\n    search() {\n      let obj = {}\n      for (let i = 0; i < this.searchList.length; i++) {\n        const e = this.searchList[i]\n        if (e.value) {\n          if (Array.isArray(e.value)) {\n            if (e.value.length) obj[e.id] = e.value\n          } else {\n            obj[e.id] = e.value\n          }\n        }\n      }\n      let queryJson = JSON.stringify(obj) === \"{}\" ? '' : JSON.stringify(obj)\n      this.$emit('search', queryJson)\n    },\n    reset() {\n      this.treeReset()\n      this.$emit('reset')\n    },\n    treeReset() {\n      for (let i = 0; i < this.searchList.length; i++) {\n        this.searchList[i].value = ''\n      }\n      this.$forceUpdate()\n    }\n  }\n}\n",null]}