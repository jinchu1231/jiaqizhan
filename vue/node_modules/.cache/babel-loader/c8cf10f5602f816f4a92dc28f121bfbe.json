{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataSource/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataSource/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/asyncToGenerator.js\"));\nvar _dataSource = require(\"@/api/systemData/dataSource\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  data: function data() {\n    return {\n      visible: false,\n      dataForm: {\n        dbType: '',\n        id: 0,\n        fullName: '',\n        host: '',\n        port: '',\n        userName: '',\n        password: '',\n        serviceName: '',\n        dbSchema: '',\n        tableSpace: '',\n        sortCode: 0,\n        enabledMark: 1,\n        oracleExtend: false,\n        oracleLinkType: '',\n        oracleService: '',\n        oracleRole: ''\n      },\n      dataRule: {\n        dbType: [{\n          required: true,\n          message: '连接驱动不能为空',\n          trigger: 'change'\n        }],\n        fullName: [{\n          required: true,\n          message: '连接名称不能为空',\n          trigger: 'blur'\n        }],\n        host: [{\n          required: true,\n          message: '主机地址不能为空',\n          trigger: 'blur'\n        }],\n        port: [{\n          required: true,\n          message: '端口不能为空',\n          trigger: 'blur'\n        }, {\n          pattern: /^([0-9]|[1-9]\\d{1,3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/,\n          message: '请输入正确的端口号',\n          trigger: 'blur'\n        }],\n        userName: [{\n          required: true,\n          message: '用户不能为空',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '密码不能为空',\n          trigger: 'blur'\n        }],\n        serviceName: [{\n          required: true,\n          message: '库名不能为空',\n          trigger: 'blur'\n        }],\n        tableSpace: [{\n          required: true,\n          message: '表空间不能为空',\n          trigger: 'blur'\n        }]\n      },\n      dbOptions: [],\n      btnLoading: false,\n      testLoad: false\n    };\n  },\n  methods: {\n    init: function init(id) {\n      var _this = this;\n      this.dataForm.id = id || 0;\n      this.visible = true;\n      this.$nextTick( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.$refs['dataForm'].resetFields();\n              _this.dataForm.serviceName = '';\n              _this.dataForm.dbSchema = '';\n              _this.dataForm.oracleExtend = false;\n              _this.dataForm.oracleLinkType = '';\n              _this.dataForm.oracleService = '';\n              _this.dataForm.oracleRole = '';\n              _context.next = 9;\n              return _this.$store.dispatch('base/getDictionaryData', {\n                sort: 'dbType'\n              });\n            case 9:\n              res = _context.sent;\n              _this.dbOptions = JSON.parse(JSON.stringify(res));\n              if (_this.dataForm.id) {\n                (0, _dataSource.DataSourceInfo)(_this.dataForm.id).then(function (res) {\n                  _this.dataForm = res.data;\n                });\n              }\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })));\n    },\n    dataFormSubmit: function dataFormSubmit() {\n      var _this2 = this;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          _this2.btnLoading = true;\n          var formMethod = _this2.dataForm.id ? _dataSource.DataSourceUpdate : _dataSource.DataSourceCreate;\n          formMethod(_this2.dataForm).then(function (res) {\n            _this2.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: function onClose() {\n                _this2.visible = false;\n                _this2.btnLoading = false;\n                _this2.$emit('refreshDataList');\n              }\n            });\n          }).catch(function () {\n            _this2.btnLoading = false;\n          });\n        }\n      });\n    },\n    handleChange: function handleChange(val) {\n      var port = '';\n      var dbSchema = '';\n      switch (val) {\n        case 'SQLServer':\n          port = '1433';\n          dbSchema = 'dbo';\n          break;\n        case 'MySQL':\n          port = '3306';\n          break;\n        case 'Oracle':\n          port = '1521';\n          break;\n        case 'DM':\n          port = '5236';\n          break;\n        case 'KingbaseES':\n          port = '54321';\n          dbSchema = 'public';\n          break;\n        case 'PostgreSQL':\n          port = '5432';\n          dbSchema = 'public';\n          break;\n        default:\n          port = '';\n          break;\n      }\n      this.dataForm.serviceName = '';\n      this.dataForm.port = port;\n      this.dataForm.dbSchema = dbSchema;\n      this.$refs['dataForm'].clearValidate();\n    },\n    test: function test() {\n      var _this3 = this;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          _this3.testLoad = true;\n          (0, _dataSource.TestDbConnection)(_this3.dataForm).then(function (res) {\n            if (res.code == 200) {\n              _this3.$message({\n                message: res.msg,\n                type: 'success',\n                duration: 1500\n              });\n            } else {\n              _this3.$message({\n                message: res.msg,\n                type: 'error',\n                duration: 1500\n              });\n            }\n            _this3.testLoad = false;\n          }).catch(function () {\n            _this3.testLoad = false;\n          });\n        }\n      });\n    }\n  }\n};",null]}