{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/onlineDev/dataReport/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/onlineDev/dataReport/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataReportList, copyDataReport, delDataReport, release } from '@/api/onlineDev/dataReport'\nimport { reportServer } from '@/utils/define'\nimport { getToken } from '@/utils/auth'\nimport Form from './Form'\nimport Preview from './Preview'\nimport previewDialog from '@/components/PreviewDialog'\nexport default {\n  components: { Form, Preview, previewDialog },\n  name: 'onlineDev-dataReport',\n  data() {\n    return {\n      keyword: '',\n      category: '',\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      total: 0,\n      list: [],\n      listLoading: false,\n      btnLoading: false,\n      formVisible: false,\n      previewVisible: false,\n      categoryList: [],\n      previewDialogVisible: false,\n      currRow: {},\n      enabledMark: '',\n      options: [\n        { fullName: '启用', id: 1 },\n        { fullName: '禁用', id: 0 },\n      ],\n    }\n  },\n  filters: {\n    getCategoryText(id, categoryList) {\n      let item = categoryList.filter(o => o.id == id)[0]\n      return item && item.fullName ? item.fullName : ''\n    }\n  },\n  created() {\n    this.getDictionaryData()\n  },\n  methods: {\n    reset() {\n      this.keyword = ''\n      this.category = ''\n      this.enabledMark = ''\n      this.search()\n    },\n    search() {\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    refresh(isRefresh) {\n      this.initData()\n    },\n    initData() {\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        category: this.category,\n        enabledMark: this.enabledMark\n      }\n      getDataReportList(query).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    getDictionaryData() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'ReportSort' }).then(res => {\n        this.categoryList = JSON.parse(JSON.stringify(res))\n        this.initData()\n      })\n    },\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id)\n      })\n    },\n    handleUpdate(row) {\n      if (row.enabledMark) {\n        this.$confirm('此操作将禁用该报表，是否继续？', '提示', {\n          type: 'warning'\n        }).then(() => {\n          release(row.id).then(res => {\n            row.enabledMark = 0\n            this.$message({\n              type: 'success',\n              message: res.msg\n            });\n          })\n        }).catch(() => { });\n      } else {\n        this.$confirm('此操作将启用该报表，是否继续？', '提示', {\n          type: 'warning'\n        }).then(() => {\n          release(row.id).then(res => {\n            row.enabledMark = 1\n            this.$message({\n              type: 'success',\n              message: res.msg\n            });\n          })\n        }).catch(() => { });\n      }\n    },\n    handleDel(id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        delDataReport(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.initData()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    preview(row) {\n      this.currRow = row\n      this.$nextTick(() => {\n        this.previewDialogVisible = true\n      })\n    },\n    previewPc() {\n      this.previewVisible = true\n      this.$nextTick(() => {\n        this.$refs.Preview.init(this.currRow.id)\n      })\n    },\n    handleCopy(id) {\n      this.$confirm('您确定要复制该报表, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        copyDataReport(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.initData()\n            }\n          });\n        })\n      }).catch(() => { });\n    },\n    handleExport(id) {\n      this.$confirm('您确定要导出该报表, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        const token = getToken()\n        let link = document.createElement('a')\n        link.href = `${reportServer}/Data/${id}/Actions/Export?token=${token}`\n        link.click();\n      }).catch(() => { });\n    },\n    handleSuccess(res) {\n      this.btnLoading = false\n      if (res.code == 200) {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1000\n        })\n        this.initData()\n      } else {\n        this.$message({\n          message: res.msg,\n          type: 'error',\n          duration: 1000\n        })\n      }\n    }\n  }\n}\n",null]}