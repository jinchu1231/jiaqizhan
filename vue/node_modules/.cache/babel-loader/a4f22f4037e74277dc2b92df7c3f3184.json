{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/LaunchFlowNode.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/LaunchFlowNode.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.number.constructor\");\nvar _FlowModal = _interopRequireDefault(require(\"./FlowModal\"));\nvar _define = require(\"../FlowCard/define.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar emptyChildItem = {\n  field: '',\n  symbol: '==',\n  fieldValueType: 1,\n  fieldValue: undefined,\n  jnpfKey: '',\n  fieldValueJnpfKey: '',\n  cellKey: +new Date()\n};\nvar emptyItem = {\n  logic: 'and',\n  groups: [emptyChildItem]\n};\nvar _default2 = exports.default = {\n  name: 'addDataNode',\n  components: {\n    FlowModal: _FlowModal.default\n  },\n  props: {\n    formConf: {\n      type: Object,\n      default: function _default() {}\n    },\n    integrateType: {\n      type: Number,\n      default: 1\n    },\n    formFieldsOptions: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    getFormFieldList: {\n      type: Function,\n      default: null\n    },\n    getFlowFormFieldList: {\n      type: Function,\n      default: null\n    },\n    usedFormItems: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    flowOptions: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      sourceTypeOptions: _define.sourceTypeOptions,\n      transferList: JSON.parse(JSON.stringify(this.formConf.transferList)),\n      flowId: JSON.parse(JSON.stringify(this.formConf.flowId)),\n      initiator: JSON.parse(JSON.stringify(this.formConf.initiator || []))\n    };\n  },\n  computed: {\n    getRuleOptions: function getRuleOptions() {\n      var formFieldList = this.formConf.formFieldList.filter(function (o) {\n        return o.id.indexOf('-') < 0;\n      });\n      return formFieldList.filter(function (o) {\n        return !['relationFormAttr', 'popupAttr', 'uploadFile', 'uploadImg', 'colorPicker', 'editor'].includes(o.__config__.jnpfKey);\n      });\n    }\n  },\n  methods: {\n    onChangeFlow: function onChangeFlow() {\n      var _this = this;\n      if (!this.flowId) return this.formConf.flowName = '';\n      var item = this.flowOptions.filter(function (o) {\n        return o.id === _this.flowId;\n      })[0];\n      this.formConf.flowName = item.fullName;\n    },\n    onChangeSourceValue: function onChangeSourceValue(item) {\n      if (item.sourceValue) item.sourceValue = undefined;\n    },\n    getItem: function getItem() {\n      var item = {\n        transferList: this.transferList,\n        flowId: this.flowId,\n        initiator: this.initiator || []\n      };\n      return item;\n    },\n    onChangeUpdate: function onChangeUpdate() {\n      this.$forceUpdate();\n    },\n    onFlowIdChange: function onFlowIdChange(id, item) {\n      this.formConf.transferList = [JSON.parse(JSON.stringify(emptyItem))];\n      if (!id) return handleNull();\n      this.formConf.flowName = item.fullName;\n      this.getFlowFormFieldList(id, 'launchFlow');\n      this.flowId = id;\n      this.transferList = [];\n      this.formConf.transferList = [];\n      this.formConf.flowId = id;\n    },\n    handleNull: function handleNull() {\n      this.formConf.flowName = '';\n      this.formConf.flowId = '';\n      this.flowId = '';\n      this.formConf.formFieldList = [];\n      this.transferList = [];\n    },\n    addTransferItem: function addTransferItem() {\n      this.transferList.push({\n        targetField: '',\n        targetFieldLabel: '',\n        sourceType: 1,\n        sourceValue: '',\n        required: false\n      });\n    },\n    delTransferItem: function delTransferItem(index) {\n      this.transferList.splice(index, 1);\n    },\n    getTargetOptions: function getTargetOptions(index) {\n      var ignoreOptions = [];\n      for (var i = 0; i < this.transferList.length; i++) {\n        var e = this.transferList[i];\n        if (e.targetField && index !== i) ignoreOptions.push(e.targetField);\n      }\n      var list = this.formConf.formFieldList.filter(function (o) {\n        return !ignoreOptions.includes(o.id);\n      });\n      return list;\n    }\n  }\n};",null]}