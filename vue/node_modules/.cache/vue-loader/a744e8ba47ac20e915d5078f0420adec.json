{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RPopupSelect.vue?vue&type=template&id=c9605e48&scoped=true","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RPopupSelect.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"el-row\",\n    [\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"控件标题\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入控件标题\" },\n            model: {\n              value: _vm.activeData.__config__.label,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"label\", $$v)\n              },\n              expression: \"activeData.__config__.label\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"显示标题\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.showLabel,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"showLabel\", $$v)\n              },\n              expression: \"activeData.__config__.showLabel\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"标题提示\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { type: \"textarea\", rows: 2, placeholder: \"请输入标题提示\" },\n            model: {\n              value: _vm.activeData.__config__.tipLabel,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"tipLabel\", $$v)\n              },\n              expression: \"activeData.__config__.tipLabel\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"占位提示\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入占位提示\" },\n            model: {\n              value: _vm.activeData.placeholder,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"placeholder\", $$v)\n              },\n              expression: \"activeData.placeholder\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm.activeData.__config__.jnpfKey === \"popupSelect\"\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"弹窗标题\" } },\n            [\n              _c(\"el-input\", {\n                attrs: { placeholder: \"请输入弹窗标题\" },\n                model: {\n                  value: _vm.activeData.popupTitle,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.activeData, \"popupTitle\", $$v)\n                  },\n                  expression: \"activeData.popupTitle\",\n                },\n              }),\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.activeData.__config__.jnpfKey === \"popupSelect\" &&\n      _vm.showType === \"pc\"\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"弹窗类型\" } },\n            [\n              _c(\n                \"el-select\",\n                {\n                  attrs: { placeholder: \"请选择弹窗类型\" },\n                  model: {\n                    value: _vm.activeData.popupType,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.activeData, \"popupType\", $$v)\n                    },\n                    expression: \"activeData.popupType\",\n                  },\n                },\n                [\n                  _c(\"el-option\", {\n                    attrs: { label: \"居中弹窗\", value: \"dialog\" },\n                  }),\n                  _c(\"el-option\", {\n                    attrs: { label: \"右侧弹窗\", value: \"drawer\" },\n                  }),\n                ],\n                1\n              ),\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.activeData.__config__.jnpfKey === \"popupSelect\" &&\n      _vm.showType === \"pc\"\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"弹窗宽度\" } },\n            [\n              _c(\n                \"el-select\",\n                {\n                  attrs: { placeholder: \"请选择弹窗宽度\", filterable: \"\" },\n                  model: {\n                    value: _vm.activeData.popupWidth,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.activeData, \"popupWidth\", $$v)\n                    },\n                    expression: \"activeData.popupWidth\",\n                  },\n                },\n                _vm._l(_vm.popupWidthOptions, function (item) {\n                  return _c(\"el-option\", {\n                    key: item,\n                    attrs: { label: item, value: item },\n                  })\n                }),\n                1\n              ),\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"远端数据\" } },\n        [\n          _c(\"interface-dialog\", {\n            attrs: {\n              value: _vm.activeData.interfaceId,\n              title: _vm.activeData.interfaceName,\n              popupTitle: \"远端数据\",\n              hasPage: 1,\n            },\n            on: { change: _vm.onInterfaceIdChange },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"存储字段\" } },\n        [\n          _c(\"el-autocomplete\", {\n            staticClass: \"inline-input\",\n            staticStyle: { width: \"100%\" },\n            attrs: {\n              \"fetch-suggestions\": _vm.querySearch,\n              placeholder: \"请输入内容\",\n            },\n            on: {\n              select: function ($event) {\n                return _vm.handleSelect($event, \"propsValue\")\n              },\n            },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function (ref) {\n                  var item = ref.item\n                  return [\n                    _c(\"div\", { staticClass: \"sale-order-popper-item\" }, [\n                      _c(\"span\", [_vm._v(_vm._s(item.defaultValue))]),\n                    ]),\n                  ]\n                },\n              },\n            ]),\n            model: {\n              value: _vm.activeData.propsValue,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"propsValue\", $$v)\n              },\n              expression: \"activeData.propsValue\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"显示字段\" } },\n        [\n          _c(\"el-autocomplete\", {\n            staticClass: \"inline-input\",\n            staticStyle: { width: \"100%\" },\n            attrs: {\n              \"fetch-suggestions\": _vm.querySearch,\n              placeholder: \"请输入内容\",\n            },\n            on: {\n              select: function ($event) {\n                return _vm.handleSelect($event, \"relationField\")\n              },\n            },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function (ref) {\n                  var item = ref.item\n                  return [\n                    _c(\"div\", { staticClass: \"sale-order-popper-item\" }, [\n                      _c(\"span\", [_vm._v(_vm._s(item.defaultValue))]),\n                    ]),\n                  ]\n                },\n              },\n            ]),\n            model: {\n              value: _vm.activeData.relationField,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"relationField\", $$v)\n              },\n              expression: \"activeData.relationField\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm.activeData.templateJson && _vm.activeData.templateJson.length\n        ? _c(\n            \"el-table\",\n            { attrs: { data: _vm.activeData.templateJson } },\n            [\n              _c(\"el-table-column\", {\n                attrs: {\n                  type: \"index\",\n                  width: \"50\",\n                  label: \"序号\",\n                  align: \"center\",\n                },\n              }),\n              _c(\"el-table-column\", {\n                attrs: { prop: \"field\", label: \"参数名称\" },\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function (scope) {\n                        return [\n                          _c(\"span\", { staticClass: \"required-sign\" }, [\n                            _vm._v(_vm._s(scope.row.required ? \"*\" : \"\")),\n                          ]),\n                          _vm._v(\n                            \"\\n        \" +\n                              _vm._s(\n                                scope.row.fieldName\n                                  ? scope.row.field +\n                                      \"(\" +\n                                      scope.row.fieldName +\n                                      \")\"\n                                  : scope.row.field\n                              ) +\n                              \"\\n      \"\n                          ),\n                        ]\n                      },\n                    },\n                  ],\n                  null,\n                  false,\n                  3347837687\n                ),\n              }),\n              _c(\"el-table-column\", {\n                attrs: { prop: \"value\", label: \"表单字段\" },\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function (scope) {\n                        return [\n                          _c(\n                            \"el-select\",\n                            {\n                              attrs: {\n                                placeholder: \"请选择表单字段\",\n                                clearable: \"\",\n                                filterable: \"\",\n                              },\n                              on: {\n                                change: function ($event) {\n                                  return _vm.onRelationFieldChange(\n                                    $event,\n                                    scope.row\n                                  )\n                                },\n                              },\n                              model: {\n                                value: scope.row.relationField,\n                                callback: function ($$v) {\n                                  _vm.$set(scope.row, \"relationField\", $$v)\n                                },\n                                expression: \"scope.row.relationField\",\n                              },\n                            },\n                            _vm._l(_vm.formFieldsOptions, function (item) {\n                              return _c(\"el-option\", {\n                                key: item.realVModel,\n                                attrs: {\n                                  label: item.realLabel,\n                                  value: item.realVModel,\n                                },\n                              })\n                            }),\n                            1\n                          ),\n                        ]\n                      },\n                    },\n                  ],\n                  null,\n                  false,\n                  3708884993\n                ),\n              }),\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.activeData.__config__.jnpfKey == \"popupSelect\" &&\n      (_vm.modelType == 1 || _vm.modelType == 6)\n        ? _c(\n            \"el-form-item\",\n            {\n              class: {\n                \"mt-18px\":\n                  _vm.activeData.templateJson &&\n                  _vm.activeData.templateJson.length,\n              },\n              attrs: { label: \"填充字段\" },\n            },\n            [\n              _c(\n                \"div\",\n                { attrs: { slot: \"label\" }, slot: \"label\" },\n                [\n                  _vm._v(\"填充字段\\n      \"),\n                  _c(\n                    \"el-tooltip\",\n                    {\n                      attrs: {\n                        content:\n                          \"选择数据后，将远端数据的字段值填充到当前表单字段。\",\n                        placement: \"top\",\n                      },\n                    },\n                    [\n                      _c(\"i\", {\n                        staticClass: \"el-icon-question tooltip-question\",\n                      }),\n                    ]\n                  ),\n                ],\n                1\n              ),\n              _c(\n                \"el-button\",\n                {\n                  staticStyle: { width: \"100%\" },\n                  on: { click: _vm.onChangeRule },\n                },\n                [\n                  _vm._v(\n                    _vm._s(\n                      _vm.activeData.__config__.transferList.length\n                        ? \"编辑填充规则\"\n                        : \"填充规则配置\"\n                    )\n                  ),\n                ]\n              ),\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\"el-divider\", [_vm._v(\"列表字段\")]),\n      _c(\n        \"draggable\",\n        {\n          attrs: {\n            list: _vm.activeData.columnOptions,\n            animation: 340,\n            group: \"selectItem\",\n            handle: \".option-drag\",\n          },\n        },\n        _vm._l(_vm.activeData.columnOptions, function (item, index) {\n          return _c(\n            \"div\",\n            { key: index, staticClass: \"select-item\" },\n            [\n              _c(\"div\", { staticClass: \"select-line-icon option-drag\" }, [\n                _c(\"i\", { staticClass: \"icon-ym icon-ym-darg\" }),\n              ]),\n              _c(\"el-input\", {\n                attrs: { placeholder: \"列名\", size: \"small\" },\n                model: {\n                  value: item.label,\n                  callback: function ($$v) {\n                    _vm.$set(item, \"label\", $$v)\n                  },\n                  expression: \"item.label\",\n                },\n              }),\n              _c(\"el-autocomplete\", {\n                staticClass: \"inline-input\",\n                staticStyle: { width: \"100%\", \"margin-left\": \"6px\" },\n                attrs: {\n                  \"fetch-suggestions\": _vm.querySearch,\n                  placeholder: \"请输入内容\",\n                },\n                on: {\n                  select: function ($event) {\n                    return _vm.handleSelect($event, \"value\", index)\n                  },\n                },\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function (ref) {\n                        var item = ref.item\n                        return [\n                          _c(\"div\", { staticClass: \"sale-order-popper-item\" }, [\n                            _c(\"span\", [_vm._v(_vm._s(item.defaultValue))]),\n                          ]),\n                        ]\n                      },\n                    },\n                  ],\n                  null,\n                  true\n                ),\n                model: {\n                  value: item.value,\n                  callback: function ($$v) {\n                    _vm.$set(item, \"value\", $$v)\n                  },\n                  expression: \"item.value\",\n                },\n              }),\n              _c(\n                \"div\",\n                {\n                  staticClass: \"close-btn select-line-icon\",\n                  on: {\n                    click: function ($event) {\n                      return _vm.activeData.columnOptions.splice(index, 1)\n                    },\n                  },\n                },\n                [_c(\"i\", { staticClass: \"el-icon-remove-outline\" })]\n              ),\n            ],\n            1\n          )\n        }),\n        0\n      ),\n      _c(\n        \"div\",\n        { staticStyle: { \"margin-left\": \"29px\" } },\n        [\n          _c(\n            \"el-button\",\n            {\n              staticStyle: { \"padding-bottom\": \"0\" },\n              attrs: { icon: \"el-icon-circle-plus-outline\", type: \"text\" },\n              on: { click: _vm.addSelectItem },\n            },\n            [_vm._v(\"\\n      添加字段\\n    \")]\n          ),\n        ],\n        1\n      ),\n      _c(\"el-divider\", [_vm._v(\"列表分页\")]),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"分页设置\" } },\n        [\n          _c(\"el-switch\", {\n            attrs: {\n              disabled:\n                _vm.activeData.interfaceHasPage == 1 && _vm.activeData.hasPage,\n            },\n            model: {\n              value: _vm.activeData.hasPage,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"hasPage\", $$v)\n              },\n              expression: \"activeData.hasPage\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm.activeData.hasPage\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"分页条数\", \"label-width\": \"80px\" } },\n            [\n              _c(\n                \"el-radio-group\",\n                {\n                  model: {\n                    value: _vm.activeData.pageSize,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.activeData, \"pageSize\", $$v)\n                    },\n                    expression: \"activeData.pageSize\",\n                  },\n                },\n                [\n                  _c(\"el-radio-button\", { attrs: { label: 20 } }, [\n                    _vm._v(\"20条\"),\n                  ]),\n                  _c(\"el-radio-button\", { attrs: { label: 50 } }, [\n                    _vm._v(\"50条\"),\n                  ]),\n                  _c(\"el-radio-button\", { attrs: { label: 100 } }, [\n                    _vm._v(\"100条\"),\n                  ]),\n                  _c(\"el-radio-button\", { attrs: { label: 500 } }, [\n                    _vm._v(\"500条\"),\n                  ]),\n                ],\n                1\n              ),\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\"el-divider\"),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"能否清空\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.clearable,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"clearable\", $$v)\n              },\n              expression: \"activeData.clearable\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm.activeData.__config__.jnpfKey === \"popupTableSelect\"\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"能否搜索\" } },\n            [\n              _c(\"el-switch\", {\n                model: {\n                  value: _vm.activeData.filterable,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.activeData, \"filterable\", $$v)\n                  },\n                  expression: \"activeData.filterable\",\n                },\n              }),\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.activeData.__config__.jnpfKey === \"popupTableSelect\"\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"能否多选\" } },\n            [\n              _c(\"el-switch\", {\n                on: { change: _vm.multipleChange },\n                model: {\n                  value: _vm.activeData.multiple,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.activeData, \"multiple\", $$v)\n                  },\n                  expression: \"activeData.multiple\",\n                },\n              }),\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否禁用\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.disabled,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"disabled\", $$v)\n              },\n              expression: \"activeData.disabled\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否隐藏\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.noShow,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"noShow\", $$v)\n              },\n              expression: \"activeData.__config__.noShow\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否必填\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.required,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"required\", $$v)\n              },\n              expression: \"activeData.__config__.required\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm.ruleVisible\n        ? _c(\"RuleDialog\", {\n            ref: \"rule\",\n            attrs: { type: 2 },\n            on: { confirm: _vm.onChangeFieldRule },\n          })\n        : _vm._e(),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}