{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/Upload/vue-simple-uploader/fileItem.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/Upload/vue-simple-uploader/fileItem.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Uploader from 'simple-uploader.js'\n\nconst COMPONENT_NAME = 'uploader-file'\nconst secondsToStr = (temp) => {\n  const years = Math.floor(temp / 31536000)\n  if (years) {\n    return years + ' year' + numberEnding(years)\n  }\n  const days = Math.floor((temp %= 31536000) / 86400)\n  if (days) {\n    return days + ' day' + numberEnding(days)\n  }\n  const hours = Math.floor((temp %= 86400) / 3600)\n  if (hours) {\n    return hours + ' hour' + numberEnding(hours)\n  }\n  const minutes = Math.floor((temp %= 3600) / 60)\n  if (minutes) {\n    return minutes + ' minute' + numberEnding(minutes)\n  }\n  const seconds = temp % 60\n  return seconds + ' second' + numberEnding(seconds)\n  function numberEnding(number) {\n    return (number > 1) ? 's' : ''\n  }\n}\n\nconst events = ['fileProgress', 'fileSuccess', 'fileComplete', 'fileError']\n\nexport default {\n  name: COMPONENT_NAME,\n  props: {\n    file: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    list: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      response: null,\n      paused: false,\n      error: false,\n      averageSpeed: 0,\n      currentSpeed: 0,\n      isComplete: false,\n      isUploading: false,\n      size: 0,\n      formatedSize: '',\n      uploadedSize: 0,\n      progress: 0,\n      timeRemaining: 0,\n      type: '',\n      extension: '',\n      progressingClass: '',\n      successProgressStyle: {\n        progress: '100%',\n        webkitTransform: 'translateX(0)',\n        mozTransform: 'translateX(0)',\n        msTransform: 'translateX(0)',\n        transform: 'translateX(0)'\n      }\n    }\n  },\n  computed: {\n    fileCategory() {\n      const extension = this.extension\n      const isFolder = this.file.isFolder\n      let type = isFolder ? 'folder' : 'unknown'\n      const categoryMap = this.file.uploader.opts.categoryMap\n      const typeMap = categoryMap || {\n        image: ['gif', 'jpg', 'jpeg', 'png', 'bmp', 'webp'],\n        video: ['mp4', 'm3u8', 'rmvb', 'avi', 'swf', '3gp', 'mkv', 'flv'],\n        audio: ['mp3', 'wav', 'wma', 'ogg', 'aac', 'flac'],\n        document: ['doc', 'txt', 'docx', 'pages', 'epub', 'pdf', 'numbers', 'csv', 'xls', 'xlsx', 'keynote', 'ppt', 'pptx']\n      }\n      Object.keys(typeMap).forEach((_type) => {\n        const extensions = typeMap[_type]\n        if (extensions.indexOf(extension) > -1) {\n          type = _type\n        }\n      })\n      return type\n    },\n    progressStyle() {\n      const realProgress = this.progress === 1 ? .99 : this.progress\n      const progress = Math.floor(realProgress * 100)\n      const style = `translateX(${Math.floor(progress - 100)}%)`\n      return {\n        progress: `${progress}%`,\n        webkitTransform: style,\n        mozTransform: style,\n        msTransform: style,\n        transform: style\n      }\n    },\n    formatedAverageSpeed() {\n      return `${Uploader.utils.formatSize(this.averageSpeed)} / s`\n    },\n    status() {\n      const isUploading = this.isUploading\n      const isComplete = this.isComplete\n      const isError = this.error\n      const paused = this.paused\n      if (isComplete) {\n        return 'success'\n      } else if (isError) {\n        return 'error'\n      } else if (isUploading) {\n        return 'uploading'\n      } else if (paused) {\n        return 'paused'\n      } else {\n        return 'waiting'\n      }\n    },\n    statusText() {\n      const status = this.status\n      const fileStatusText = this.file.uploader.fileStatusText\n      let txt = status\n      if (typeof fileStatusText === 'function') {\n        txt = fileStatusText(status, this.response)\n      } else {\n        txt = fileStatusText[status]\n      }\n      return txt || status\n    },\n    formatedTimeRemaining() {\n      const timeRemaining = this.timeRemaining\n      const file = this.file\n      if (timeRemaining === Number.POSITIVE_INFINITY || timeRemaining === 0) {\n        return ''\n      }\n      let parsedTimeRemaining = secondsToStr(timeRemaining)\n      const parseTimeRemaining = file.uploader.opts.parseTimeRemaining\n      if (parseTimeRemaining) {\n        parsedTimeRemaining = parseTimeRemaining(timeRemaining, parsedTimeRemaining)\n      }\n      return parsedTimeRemaining\n    }\n  },\n  watch: {\n    status(newStatus, oldStatus) {\n      if (oldStatus && newStatus === 'uploading' && oldStatus !== 'uploading') {\n        this.tid = setTimeout(() => {\n          this.progressingClass = 'uploader-file-progressing'\n        }, 200)\n      } else {\n        clearTimeout(this.tid)\n        this.progressingClass = ''\n      }\n    }\n  },\n  methods: {\n    _actionCheck() {\n      this.paused = this.file.paused\n      this.error = this.file.error\n      this.isUploading = this.file.isUploading()\n    },\n    pause() {\n      this.file.pause()\n      this._actionCheck()\n      this._fileProgress()\n    },\n    resume() {\n      this.file.resume()\n      this._actionCheck()\n    },\n    remove() {\n      this.file.cancel()\n    },\n    retry() {\n      this.file.retry()\n      this._actionCheck()\n    },\n    processResponse(message) {\n      let res = message\n      try {\n        res = JSON.parse(message)\n      } catch (e) { }\n      this.response = res\n    },\n    fileEventsHandler(event, args) {\n      const rootFile = args[0]\n      const file = args[1]\n      const target = this.list ? rootFile : file\n      if (this.file === target) {\n        if (this.list && event === 'fileSuccess') {\n          this.processResponse(args[2])\n          return\n        }\n        this[`_${event}`].apply(this, args)\n      }\n    },\n    _fileProgress() {\n      this.progress = this.file.progress()\n      this.averageSpeed = this.file.averageSpeed\n      this.currentSpeed = this.file.currentSpeed\n      this.timeRemaining = this.file.timeRemaining()\n      this.uploadedSize = this.file.sizeUploaded()\n      this._actionCheck()\n    },\n    _fileSuccess(rootFile, file, message) {\n      if (rootFile) {\n        this.processResponse(message)\n      }\n      this._fileProgress()\n      this.error = false\n      this.isComplete = true\n      this.isUploading = false\n    },\n    _fileComplete() {\n      this._fileSuccess()\n    },\n    _fileError(rootFile, file, message) {\n      this._fileProgress()\n      this.processResponse(message)\n      this.error = true\n      this.isComplete = false\n      this.isUploading = false\n    }\n  },\n  mounted() {\n    const staticProps = ['paused', 'error', 'averageSpeed', 'currentSpeed']\n    const fnProps = [\n      'isComplete',\n      'isUploading',\n      {\n        key: 'size',\n        fn: 'getSize'\n      },\n      {\n        key: 'formatedSize',\n        fn: 'getFormatSize'\n      },\n      {\n        key: 'uploadedSize',\n        fn: 'sizeUploaded'\n      },\n      'progress',\n      'timeRemaining',\n      {\n        key: 'type',\n        fn: 'getType'\n      },\n      {\n        key: 'extension',\n        fn: 'getExtension'\n      }\n    ]\n    staticProps.forEach(prop => {\n      this[prop] = this.file[prop]\n    })\n    fnProps.forEach((fnProp) => {\n      if (typeof fnProp === 'string') {\n        this[fnProp] = this.file[fnProp]()\n      } else {\n        this[fnProp.key] = this.file[fnProp.fn]()\n      }\n    })\n\n    const handlers = this._handlers = {}\n    const eventHandler = (event) => {\n      handlers[event] = (...args) => {\n        this.fileEventsHandler(event, args)\n      }\n      return handlers[event]\n    }\n    events.forEach((event) => {\n      this.file.uploader.on(event, eventHandler(event))\n    })\n  },\n  destroyed() {\n    events.forEach((event) => {\n      this.file.uploader.off(event, this._handlers[event])\n    })\n    this._handlers = null\n  }\n}\n",null]}