{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/PopupSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/PopupSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceDataSelect, getDataInterfaceDataInfoByIds } from '@/api/systemData/dataInterface'\nimport emitter from 'element-ui/src/mixins/emitter'\nlet { methods: { dispatch } } = emitter\nexport default {\n  name: 'JnpfPopupSelect',\n  props: {\n    value: {\n      default: ''\n    },\n    rowIndex: {\n      default: null\n    },\n    formData: {\n      type: Object\n    },\n    templateJson: {\n      type: Array,\n      default: () => []\n    },\n    interfaceId: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    propsValue: {\n      type: String,\n      default: 'id'\n    },\n    relationField: {\n      type: String,\n      default: 'fullName'\n    },\n    popupType: {\n      type: String,\n      default: 'dialog'\n    },\n    popupTitle: {\n      type: String,\n      default: '选择数据'\n    },\n    popupWidth: {\n      type: String,\n      default: '800px'\n    },\n    field: {\n      type: String,\n      default: ''\n    },\n    columnOptions: {\n      type: Array,\n      default: () => []\n    },\n    hasPage: {\n      type: Boolean,\n      default: false\n    },\n    pageSize: {\n      type: Number,\n      default: 20\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data() {\n    return {\n      list: [],\n      innerValue: '',\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      },\n      total: 0,\n      checked: '',\n      checkedTxt: '',\n      checkedRow: {},\n      listLoading: false,\n      visible: false,\n      inputHovering: false,\n    }\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.multiple\n        ? Array.isArray(this.value) && this.value.length > 0\n        : this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.disabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    },\n    propsLabel() {\n      return this.columnOptions[0].value\n    }\n  },\n  created() {\n    this.listQuery.pageSize = this.hasPage ? this.pageSize : 100000\n    this.setDefault()\n  },\n  methods: {\n    initData() {\n      if (!this.interfaceId) return\n      this.listLoading = true\n      const paramList = this.getParamList()\n      const columnOptions = this.columnOptions.map(o => o.value)\n      let query = {\n        ...this.listQuery,\n        interfaceId: this.interfaceId,\n        propsValue: this.propsValue,\n        relationField: this.relationField,\n        columnOptions: columnOptions.join(','),\n        paramList\n      }\n      getDataInterfaceDataSelect(this.interfaceId, query).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => { this.listLoading = false })\n    },\n    getParamList() {\n      let templateJson = this.templateJson\n      if (!this.formData) return templateJson\n      for (let i = 0; i < templateJson.length; i++) {\n        if (templateJson[i].relationField) {\n          if (templateJson[i].relationField.includes('-')) {\n            let tableVModel = templateJson[i].relationField.split('-')[0]\n            let childVModel = templateJson[i].relationField.split('-')[1]\n            templateJson[i].defaultValue = this.formData[tableVModel] && this.formData[tableVModel][this.rowIndex] && this.formData[tableVModel][this.rowIndex][childVModel] || ''\n          } else {\n            templateJson[i].defaultValue = this.formData[templateJson[i].relationField] || ''\n          }\n        }\n      }\n      return templateJson\n    },\n    interfaceDataHandler(data) {\n      if (!data.dataProcessing) return data.list\n      const dataHandler = this.jnpf.getScriptFunc.call(this, data.dataProcessing)\n      if (!dataHandler) return data.list\n      return dataHandler(data.list)\n    },\n    search() {\n      this.initData()\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n      this.initData()\n    },\n    openDialog() {\n      if (this.disabled) return\n      this.checked = this.value\n      this.visible = true\n      this.reset()\n    },\n    clear(event) {\n      this.checked = ''\n      this.innerValue = ''\n      this.checkedRow = {}\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n      dispatch.call(this, 'ElFormItem', 'el.form.change', this.checked)\n      event.stopPropagation();\n    },\n    select() {\n      if (!this.checked) return\n      this.innerValue = this.checkedTxt\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n      dispatch.call(this, 'ElFormItem', 'el.form.change', this.checked)\n      this.visible = false\n    },\n    rowClick(row) {\n      this.checked = row[this.propsValue]\n      this.checkedTxt = row[this.relationField]\n      this.checkedRow = row\n    },\n    setDefault() {\n      if (this.value) {\n        if (!this.interfaceId) return\n        const paramList = this.getParamList()\n        let query = {\n          ids: [this.value],\n          interfaceId: this.interfaceId,\n          propsValue: this.propsValue,\n          relationField: this.relationField,\n          paramList\n        }\n        getDataInterfaceDataInfoByIds(this.interfaceId, query).then(res => {\n          const data = res.data && res.data.length ? res.data[0] : {}\n          this.innerValue = data[this.relationField]\n          if (!this.field) return\n          let relationData = this.$store.state.generator.relationData\n          this.$set(relationData, this.field, data)\n          this.$eventBus.$emit('popupAttrEventBus', relationData, this.field)\n          this.$store.commit('generator/UPDATE_RELATION_DATA', relationData)\n        })\n      } else {\n        this.innerValue = ''\n        if (!this.field) return\n        let relationData = this.$store.state.generator.relationData\n        this.$set(relationData, this.field, {})\n        this.$eventBus.$emit('popupAttrEventBus', relationData, this.field)\n        this.$store.commit('generator/UPDATE_RELATION_DATA', relationData)\n      }\n    }\n  }\n}\n",null]}