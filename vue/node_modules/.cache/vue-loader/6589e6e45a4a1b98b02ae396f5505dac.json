{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/entrust/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/entrust/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FlowDelegateInfo, Create, Update } from '@/api/workFlow/FlowDelegate'\nimport { FlowEngineListAll } from '@/api/workFlow/FlowEngine'\nimport FlowSelect from '../components/FlowSelect.vue'\nimport { mapGetters } from \"vuex\";\nimport gradeUserSelect from \"../../permission/gradeManage/GradeUserSelect\"\nimport { getListByAuthorize } from '@/api/permission/user'\n\nexport default {\n  components: { FlowSelect, gradeUserSelect },\n  data() {\n    var checkStartTime = (rule, value, callback) => {\n      if (!this.dataForm.endTime) {\n        callback()\n      } else {\n        if (this.dataForm.endTime < value) {\n          callback(new Error('开始日期应该小于结束日期'));\n        } else {\n          this.$refs.dataForm.validateField('endTime');\n          callback()\n        }\n      }\n    }\n    var checkEndTime = (rule, value, callback) => {\n      if (!this.dataForm.startTime) {\n        callback()\n      } else {\n        if (this.dataForm.startTime > value) {\n          callback(new Error('结束日期应该大于开始日期'));\n        } else {\n          callback()\n        }\n      }\n    }\n    return {\n      visible: false,\n      pickerOptions: {\n        disabledDate: time => {\n          return new Date(time).getTime() < new Date().getTime() - 86400000;\n        }\n      },\n      dataForm: {\n        id: '',\n        userId: '',\n        toUserId: '',\n        flowId: [],\n        description: '',\n        startTime: '',\n        endTime: '',\n        flowName: '',\n        toUserName: '',\n        type: [],\n      },\n      dataRule: {\n        userId: [\n          { required: true, message: '委托人不能为空', trigger: 'click' }\n        ],\n        toUserId: [\n          { required: true, message: '受委托人不能为空', trigger: 'click' }\n        ],\n        type: [\n          { required: true, message: '委托类型不能为空', trigger: 'change' }\n        ],\n        startTime: [\n          { required: true, message: '开始时间不能为空', trigger: 'change' },\n          { validator: checkStartTime, trigger: 'change' }\n        ],\n        endTime: [\n          { required: true, message: '结束时间不能为空', trigger: 'change' },\n          { validator: checkEndTime, trigger: 'change' }\n        ],\n      },\n      loading: false,\n      btnLoading: false,\n      flowEngineList: [],\n      typeOptions: [{\n        value: \"0\",\n        label: '发起委托'\n      }, {\n        value: \"1\",\n        label: '审批委托'\n      }],\n      isGradeUser: 2,//0管理员，1分级管理员，2普通用户\n      myNameAccount: '',\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo'])\n\n  },\n  watch: {\n\n  },\n  created() {\n\n  },\n  methods: {\n\n\n    init(id) {\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n      })\n      this.dataForm.id = id || ''\n      this.visible = true\n      this.loading = true\n      this.myNameAccount = this.userInfo.userName + '/' + this.userInfo.userAccount\n      this.dataForm.userId = this.userInfo.userAccount\n      this.dataForm.userName = this.myNameAccount\n      //初始化委托人组件\n      // if (this.userInfo.isAdministrator) {\n      //   this.isGradeUser = 0\n      // } else {\n      //   getListByAuthorize('0', null).then(res => {\n      //     if (res.data.list.length) {\n      //       this.isGradeUser = 1\n      //     }\n      //     if (this.isGradeUser == 2) {\n      //       this.myNameAccount = this.userInfo.userName + '/' + this.userInfo.userAccount\n      //       this.dataForm.userId = this.userInfo.userAccount\n      //       this.dataForm.userName = this.myNameAccount\n      //     }\n      //   })\n      // }\n      //初始化流程列表\n      this.getFlowEngineList()\n    },\n    getFlowEngineList() {\n      FlowEngineListAll().then((res) => {\n        this.flowEngineList = res.data.list\n        //初始化数据\n        if (this.dataForm.id) {\n          FlowDelegateInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            this.dataForm.flowId = this.dataForm.flowId ? this.dataForm.flowId.split(\",\") : []\n            this.myNameAccount = this.dataForm.userName\n          })\n        }\n        this.loading = false\n      })\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.btnLoading = true\n          const formMethod = this.dataForm.id ? Update : Create\n          let params = {\n            ...this.dataForm\n          }\n          params.flowId = this.dataForm.flowId ? this.dataForm.flowId.join(\",\") : \"\"\n          if (this.isGradeUser == 2) {\n            params.userId = this.userInfo.userId\n            params.userName = this.myNameAccount\n          }\n          if (!params.flowId) {\n            params.flowName = \"全部流程\"\n          }\n          formMethod(params).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1000,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList')\n              }\n            })\n          }).catch(() => { this.btnLoading = false })\n        }\n      })\n    },\n    handleChange(val) {\n      if (!val) {\n        this.dataForm.flowName = ''\n        return\n      }\n      let active = {}\n      for (let i = 0; i < this.flowEngineList.length; i++) {\n        const item = this.flowEngineList[i];\n        if (item.children && item.children.length) {\n          for (let j = 0; j < item.children.length; j++) {\n            if (item.children[j].id === val) {\n              active = item.children[j]\n              break\n            }\n          }\n        }\n      }\n      this.dataForm.flowName = active.fullName + '/' + active.enCode\n    },\n    onChange(id, selectedData) {\n      if (!id) return this.dataForm.toUserName = ''\n      this.dataForm.toUserName = selectedData.fullName\n    },\n    onChangeUser(id, selectedData) {\n      if (!id) return this.dataForm.userName = ''\n      this.dataForm.userName = selectedData.fullName\n    },\n    changeName(listData) {\n      if (listData && listData.length) {\n        let arr = []\n        listData.forEach(item => {\n          arr.push(item.fullName + \"/\" + item.enCode)\n        })\n        this.dataForm.flowName = arr.join(\",\")\n      } else {\n        this.dataForm.flowName = \"全部流程\"\n      }\n    },\n  },\n\n\n}\n",null]}