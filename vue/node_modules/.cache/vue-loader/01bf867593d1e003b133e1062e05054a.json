{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataInterface/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataInterface/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getDataInterfaceList,\n  updateDataInterfaceState,\n  delDataInterface,\n  exportData,\n  copy\n} from '@/api/systemData/dataInterface'\nimport Form from './Form'\nimport Preview from './Preview'\nimport Variable from './components/variable/index.vue'\nimport Log from './Log'\nexport default {\n  name: 'systemData-dataInterface',\n  components: { Form, Preview, Log, Variable },\n  data() {\n    return {\n      defaultProps: {\n        children: 'children',\n        label: 'fullName'\n      },\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        enabledMark: '',\n        type: '',\n        pageSize: 20,\n        category: '',\n        sort: 'desc'\n      },\n      total: 0,\n      treeLoading: false,\n      listLoading: false,\n      btnLoading: false,\n      treeData: [],\n      tableData: [],\n      logVisible: false,\n      formVisible: false,\n      previewVisible: false,\n      isVisible: false,\n      expandsTree: true,\n      refreshTree: true,\n      options: [\n        { fullName: '静态数据', id: 2 },\n        { fullName: 'SQL操作', id: 1 },\n        { fullName: 'API操作', id: 3 },\n      ],\n    }\n  },\n  created() {\n    this.initData(true)\n  },\n  methods: {\n    initData(isInit) {\n      this.treeLoading = true\n      this.$store.dispatch('base/getDictionaryData', { sort: 'DataInterfaceType' }).then((res) => {\n        this.treeData = res\n        if (!this.treeData.length) return this.treeLoading = false\n        this.$nextTick(() => {\n          if (isInit) this.listQuery.category = this.treeData[0].id\n          this.$refs.treeBox.setCurrentKey(this.listQuery.category)\n          this.treeLoading = false\n          if (isInit) this.getList()\n        })\n      })\n    },\n    toggleTreeExpand(expands) {\n      this.refreshTree = false\n      this.expandsTree = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(this.listQuery.category)\n        })\n      })\n    },\n    getList() {\n      this.listLoading = true\n      getDataInterfaceList(this.listQuery).then(res => {\n        this.tableData = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n        this.btnLoading = false\n      }).catch(() => {\n        this.listLoading = false\n        this.btnLoading = false\n      })\n    },\n    viewLog(row) {\n      this.logVisible = true\n      this.$nextTick(() => {\n        this.$refs.Log.init(row.id, row.fullName)\n      })\n    },\n    handleUpdateState(row) {\n      const txt = row.enabledMark ? '禁用' : '开启'\n      this.$confirm(`您确定要${txt}当前接口吗, 是否继续?`, '提示', {\n        type: 'warning'\n      }).then(() => {\n        updateDataInterfaceState(row.id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              row.enabledMark = row.enabledMark ? 0 : 1\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    handleNodeClick(data) {\n      if (this.listQuery.category === data.id) return\n      this.listQuery.category = data.id\n      this.reset()\n    },\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id, this.listQuery.category)\n      })\n    },\n    handleDel(id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        delDataInterface(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.getList()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    handlePreview(row) {\n      const { id, enabledMark, tenantId, fullName } = row\n      if (enabledMark === 0) {\n        this.$message.error('接口已被禁用，请先开启接口')\n      } else {\n        this.previewVisible = true\n        this.$nextTick(() => {\n          this.$refs.Preview.init(id, tenantId, fullName)\n        })\n      }\n    },\n    handleCopy(id) {\n      this.$confirm('您确定要复制该数据接口, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        copy(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.getList()\n            }\n          });\n        })\n      }).catch(() => { });\n    },\n    search() {\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = 20\n      this.listQuery.sort = 'desc'\n      this.getList()\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.listQuery.type = ''\n      this.listQuery.enabledMark = ''\n      this.search()\n    },\n    closeForm(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) {\n        this.reset()\n      }\n    },\n    closePreview(isRefresh) {\n      this.previewVisible = false\n      if (isRefresh) {\n        this.reset()\n      }\n    },\n    closeVariable(isRefresh) {\n      this.isVisible = false\n      if (isRefresh) {\n        this.reset()\n      }\n    },\n    variableData(id) {\n      this.isVisible = true\n      this.$nextTick(() => {\n        this.$refs.variable.init(id)\n      })\n    },\n    exportData(id) {\n      this.$confirm('您确定要导出该数据接口, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        exportData(id).then(res => {\n          this.jnpf.downloadFile(res.data.url)\n        })\n      }).catch(() => { });\n    }\n  }\n}\n",null]}