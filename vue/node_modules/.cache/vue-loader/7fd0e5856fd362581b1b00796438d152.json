{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/JNPFEditor/components/EditorImage.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/JNPFEditor/components/EditorImage.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n  name: 'EditorImage',\n  props: {\n    color: {\n      type: String,\n      default: '#1890ff'\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: 'annexpic'\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      listObj: {},\n      fileList: [],\n      uploading: false\n    }\n  },\n  computed: {\n    getAction() {\n      return this.define.comUploadUrl + '/' + this.type\n    },\n    uploadHeaders() {\n      return { Authorization: this.$store.getters.token }\n    }\n  },\n  methods: {\n    handleChange(file) {\n      this.beforeUpload(file.raw)\n    },\n    handleUploadError(err, file, fileList) {\n      // 处理上传失败的回调\n      console.error(\"图片上传失败！\", err);\n    },\n    beforeUpload(file) {\n      let isAccept = new RegExp('image/*').test(file.type)\n      if (!isAccept) {\n        this.$message.error(`请上传图片`)\n        return isAccept;\n      }\n      this.getBase64WithFile(file).then(({ result: thumbUrl }) => {\n        this.$emit('successOK', thumbUrl)\n      });\n    },\n    handleSuccess(res, file) {\n      if (res.code == 200) {\n        this.urlToBase64(this.define.APIURl + res.data.url).then(base64 => {\n          this.$emit('successOK', base64)\n        })\n      } else {\n        this.$message({ message: res.msg, type: 'error', duration: 1500 })\n      }\n    },\n    urlToBase64(url, mineType) {\n      return new Promise((resolve, reject) => {\n        let canvas = document.createElement('CANVAS');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.crossOrigin = '';\n        img.onload = function () {\n          if (!canvas || !ctx) {\n            return reject();\n          }\n          canvas.height = img.height;\n          canvas.width = img.width;\n          ctx.drawImage(img, 0, 0);\n          const dataURL = canvas.toDataURL(mineType || 'image/*');\n          canvas = null;\n          resolve(dataURL);\n        };\n        img.src = url;\n      });\n    },\n    getBase64WithFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve({ result: reader.result, file });\n        reader.onerror = error => reject(error);\n      });\n    }\n  }\n}\n",null]}