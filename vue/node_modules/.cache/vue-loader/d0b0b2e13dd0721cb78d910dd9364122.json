{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/permission/role/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/permission/role/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDepartmentSelectorByAuth } from '@/api/permission/department'\nimport { getRoleList, delRole, updateRoleState } from '@/api/permission/role'\nimport Form from './Form'\nimport UserRelationList from './userRelation'\nimport GlobalUserRelationList from '@/views/permission/userRelation/Selector'\nimport Diagram from '@/views/permission/user/Diagram'\nimport CheckPermissions from '@/components/CheckPermissions'\nimport { mapGetters } from \"vuex\";\nexport default {\n  components: { Form, UserRelationList, GlobalUserRelationList, Diagram, CheckPermissions },\n  name: 'permission-role',\n  data() {\n    return {\n      treeData: [],\n      defaultProps: {\n        children: 'children',\n        label: 'fullName'\n      },\n      list: [],\n      listQuery: {\n        organizeId: '',\n        keyword: '',\n        type: '',\n        enabledMark: '',\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      total: 0,\n      listLoading: true,\n      treeLoading: false,\n      formVisible: false,\n      diagramVisible: false,\n      userRelationListVisible: false,\n      currentView: null,\n      expands: true,\n      refreshTree: true,\n      filterText: '',\n      checkPermissionsVisible: false,\n      options: [\n        { fullName: '启用', id: 1 },\n        { fullName: '禁用', id: 0 },\n      ]\n\n    }\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.treeBox.filter(val)\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo'])\n  },\n  created() {\n    this.getOrganizeList(true)\n  },\n  methods: {\n    reset() {\n      this.listQuery.keyword = ''\n      this.listQuery.type = ''\n      this.listQuery.enabledMark = ''\n      this.search()\n    },\n    search() {\n      this.listQuery = {\n        ...this.listQuery,\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    showDiagram() {\n      this.diagramVisible = true\n      this.$nextTick(() => {\n        this.$refs.Diagram.init()\n      })\n    },\n    checkPermissions(item) {\n      this.checkPermissionsVisible = true\n      this.$nextTick(() => {\n        item = { ...item, type: 'role' }\n        this.$refs.checkPermissions.init(item, 2)\n      })\n    },\n    toggleExpand(expands) {\n      this.filterText = ''\n      this.refreshTree = false\n      this.expands = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(this.companyId)\n        })\n      })\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.fullName.indexOf(value) !== -1;\n    },\n    getOrganizeList(isInit) {\n      this.filterText = ''\n      this.treeLoading = true\n      getDepartmentSelectorByAuth().then(res => {\n        if (this.userInfo.isAdministrator) {\n          let globalItem = {\n            fullName: \"全局\",\n            hasChildren: false,\n            id: \"0\",\n            parentId: \"-1\",\n            icon: 'icon-ym icon-ym-global-role'\n          }\n          this.treeData = [...res.data.list, globalItem]\n        } else {\n          this.treeData = res.data.list || []\n        }\n        this.$nextTick(() => {\n          this.treeLoading = false\n          if (isInit) this.initData()\n        })\n      }).catch(() => {\n        this.treeLoading = false\n      })\n    },\n    initData() {\n      this.listLoading = true\n      getRoleList(this.listQuery).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id)\n      })\n    },\n    handleNodeClick(data) {\n      if (this.listQuery.organizeId === data.id) return\n      this.listQuery.organizeId = data.id\n      this.reset()\n    },\n    removeUserRelationList(isRefresh) {\n      this.userRelationListVisible = false\n      if (isRefresh) {\n        this.initData()\n      }\n    },\n    handleUpdateState(row) {\n      const txt = row.enabledMark ? '禁用' : '开启'\n      this.$confirm(`您确定要${txt}当前角色吗, 是否继续?`, '提示', {\n        type: 'warning'\n      }).then(() => {\n        updateRoleState(row.id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              row.enabledMark = row.enabledMark ? 0 : 1\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    handleDel(id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        delRole(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.initData()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    handleUserRelation(row) {\n      this.currentView = row.type === '全局' ? GlobalUserRelationList : UserRelationList\n      this.$nextTick(() => {\n        this.userRelationListVisible = true\n        this.$nextTick(() => {\n          this.$refs.UserRelationList.init(row.id, row.fullName, 'Role')\n        })\n      })\n    },\n  }\n}\n",null]}