{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/PropPanel/InterfaceDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/PropPanel/InterfaceDialog.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceSelectorList } from '@/api/systemData/dataInterface'\nexport default {\n  components: {},\n  props: {\n    value: {\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    dataType: {\n      type: String,\n      default: ''\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    popupTitle: {\n      type: String,\n      default: '接口模板'\n    },\n    hasPage: {\n      type: Number,\n      default: 0\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data() {\n    return {\n      list: [],\n      innerValue: '',\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      total: 0,\n      checked: '',\n      checkedRow: {},\n      listLoading: false,\n      defaultProps: {\n        children: 'children',\n        label: 'fullName'\n      },\n      query: {\n        category: '',\n        keyword: '',\n        dataType: null,\n      },\n      treeLoading: false,\n      treeData: [],\n      inputHovering: false,\n      visible: false,\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.disabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    }\n  },\n  methods: {\n    initData() {\n      this.listLoading = true\n      const query = {\n        ...this.listQuery,\n        ...this.query,\n        type: !this.dataType ? this.query.dataType : this.dataType,\n        hasPage: this.hasPage\n      }\n      this.$emit('clearValidate')\n      getDataInterfaceSelectorList(query).then(res => {\n        this.list = res.data.list.map(o => {\n          let templateJson = o.parameterJson ? JSON.parse(o.parameterJson) : []\n          if (!templateJson) templateJson = []\n          let item = { templateJson, ...o }\n          return item\n        })\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => { this.listLoading = false })\n    },\n    handleNodeClick(data) {\n      if (this.query.category === data.id) return\n      this.query.category = data.id\n      this.reset()\n    },\n    reset() {\n      this.query.keyword = ''\n      this.query.dataType = null\n      this.search()\n    },\n    search() {\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = 20\n      this.listQuery.sort = 'desc'\n      this.initData()\n    },\n    openDialog() {\n      if (this.disabled) return\n      this.checked = this.value\n      this.visible = true\n      this.treeLoading = true\n      this.listLoading = true\n      this.$store.dispatch('base/getDictionaryData', { sort: 'DataInterfaceType' }).then((res) => {\n        this.treeData = res\n        if (!this.treeData.length) return this.treeLoading = false\n        this.$nextTick(() => {\n          this.query.category = this.treeData[0].id\n          this.$refs.treeBox.setCurrentKey(this.query.category)\n          this.treeLoading = false\n          this.reset()\n        })\n      })\n    },\n    clear() {\n      this.checked = ''\n      this.checkedRow = {}\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n    },\n    select() {\n      if (!this.checked) return\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n      this.visible = false\n    },\n    rowClick(row) {\n      this.checked = row.id\n      this.checkedRow = row\n    },\n    goDataInterface() {\n      let src = window.location.protocol + \"//\" + window.location.host + \"/systemData/dataInterface\"\n      window.open(src, \"_blank\")\n    }\n  }\n}\n",null]}