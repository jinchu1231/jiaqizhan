{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RTreeSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RTreeSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport comMixin from '../mixin';\nimport dynamicMixin from '../dynamicMixin';\nimport handelFlidMixin from '../handelFlidMixin';\nimport TreeNodeDialog from './TreeNodeDialog'\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary'\nimport dicIndex from '@/views/systemData/dictionary/index.vue';\nimport TreeEditing from './TreeEditing'\nexport default {\n  mixins: [comMixin, dynamicMixin, handelFlidMixin],\n  components: { TreeNodeDialog, dicIndex, TreeEditing },\n  data() {\n    return {\n      dialogVisible: false,\n      currentNode: {},\n      props: {\n        value: 'id',\n        label: 'fullName',\n        children: 'children',\n      },\n      renderKey: +new Date(),\n      dicVisible: false,\n      updateVisible: false,\n      node: '',\n      currentNodeId: \"\",\n      formData: {\n        fullName: '',\n        id: ''\n      },\n    }\n  },\n  mounted() {\n    this.getDataInterfaceInfo()\n  },\n  methods: {\n    selectChange() {\n      this.$emit('changeSelect')\n      this.dictionaryTypeChange(this.dictionaryId)\n    },\n    defaultValueChange() {\n      this.selectChange()\n    },\n    goDictionary() {\n      this.dicVisible = true\n      this.$nextTick(() => {\n        this.$refs.dicIndex.initData()\n      })\n    },\n    addTreeItem() {\n      this.currentNodeId = ''\n      this.dialogVisible = true\n      this.currentNode = this.activeData.options\n    },\n    addNode(data) {\n      if (this.currentNodeId) {\n        Object.keys(data).forEach(key => { this.node.data[key] = data[key] })\n      } else {\n        this.currentNode.push(data)\n      }\n    },\n    update(node, data) {\n      this.node = node\n      this.currentNodeId = data.id\n      this.dialogVisible = true\n      this.currentNode = data\n    },\n    append(data) {\n      this.currentNodeId = ''\n      if (!data.children) {\n        this.$set(data, 'children', [])\n      }\n      this.dialogVisible = true\n      this.currentNode = data.children\n    },\n    remove(node, data) {\n      this.activeData.__config__.defaultValue = [] // 避免删除时报错\n      const { parent } = node\n      const children = parent.data.children || parent.data\n      const index = children.findIndex(d => d.id === data.id)\n      children.splice(index, 1)\n    },\n    onChange() {\n      this.renderKey = +new Date()\n      this.activeData.__config__.renderKey = +new Date()\n      this.activeData.__config__.defaultValue = this.activeData.multiple ? [] : ''\n    },\n    dataTypeChange(val) {\n      this.activeData.__config__.defaultValue = ''\n      this.activeData.options = []\n      this.activeData.props.value = 'id'\n      this.activeData.props.label = 'fullName'\n      this.activeData.props.children = 'children'\n      this.activeData.__config__.dictionaryType = ''\n      this.activeData.__config__.propsUrl = ''\n      this.activeData.__config__.propsName = ''\n      this.activeData.__config__.templateJson = []\n    },\n    dictionaryTypeChange(val) {\n      this.activeData.__config__.defaultValue = this.activeData.multiple ? [] : ''\n      if (!val) {\n        this.activeData.options = []\n        return\n      }\n      getDictionaryDataSelector(val).then(res => {\n        this.activeData.options = res.data.list\n      })\n    },\n    treeSelectItem() {\n      this.updateVisible = true\n      this.$nextTick(() => {\n        this.$refs.treeEditing.init(this.activeData.options)\n      })\n    },\n    handleSure(arr) {\n      this.activeData.options = arr || []\n    }\n  }\n}\n",null]}