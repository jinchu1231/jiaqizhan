{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/filters/index.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/filters/index.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataType = dataType;\nexports.dynamicText = dynamicText;\nexports.dynamicTreeText = dynamicTreeText;\nexports.flowStatus = flowStatus;\nObject.defineProperty(exports, \"formatTime\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.formatTime;\n  }\n});\nexports.numberFormatter = numberFormatter;\nObject.defineProperty(exports, \"parseTime\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.parseTime;\n  }\n});\nexports.timeAgo = timeAgo;\nexports.toDate = toDate;\nexports.toDateText = toDateText;\nexports.toDateValue = toDateValue;\nexports.toFileSize = toFileSize;\nexports.toThousandFilter = toThousandFilter;\nexports.uppercaseFirst = uppercaseFirst;\nexports.urgentText = urgentText;\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/es6.regexp.to-string\");\nrequire(\"core-js/modules/es6.regexp.replace\");\nrequire(\"core-js/modules/es6.number.constructor\");\nvar _utils = require(\"@/utils\");\nvar _jnpf = _interopRequireDefault(require(\"@/utils/jnpf\"));\n// import parseTime, formatTime and set to filter\n\n/**\n * Show plural label if time is plural number\n * @param {number} time\n * @param {string} label\n * @return {string}\n */\nfunction pluralize(time, label) {\n  if (time === 1) {\n    return time + label;\n  }\n  return time + label + 's';\n}\n\n/**\n * @param {number} time\n */\nfunction timeAgo(time) {\n  var between = Date.now() / 1000 - Number(time);\n  if (between < 3600) {\n    return pluralize(~~(between / 60), ' minute');\n  } else if (between < 86400) {\n    return pluralize(~~(between / 3600), ' hour');\n  } else {\n    return pluralize(~~(between / 86400), ' day');\n  }\n}\n\n/**\n * Number formatting\n * like 10000 => 10k\n * @param {number} num\n * @param {number} digits\n */\nfunction numberFormatter(num, digits) {\n  var si = [{\n    value: 1E18,\n    symbol: 'E'\n  }, {\n    value: 1E15,\n    symbol: 'P'\n  }, {\n    value: 1E12,\n    symbol: 'T'\n  }, {\n    value: 1E9,\n    symbol: 'G'\n  }, {\n    value: 1E6,\n    symbol: 'M'\n  }, {\n    value: 1E3,\n    symbol: 'k'\n  }];\n  for (var i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol;\n    }\n  }\n  return num.toString();\n}\n\n/**\n * 10000 => \"10,000\"\n * @param {number} num\n */\nfunction toThousandFilter(num) {\n  return (+num || 0).toString().replace(/^-?\\d+/g, function (m) {\n    return m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',');\n  });\n}\n\n/**\n * Upper case first char\n * @param {String} string\n */\n\n//  工作流审批状态\nfunction flowStatus(status) {\n  var text = '';\n  switch (status) {\n    case 1:\n      text = \"wait\";\n      break;\n    case 2:\n      text = \"adopt\";\n      break;\n    case 3:\n      text = \"reject\";\n      break;\n    case 4:\n      text = \"revoke\";\n      break;\n    case 5:\n      text = \"cancel\";\n      break;\n  }\n  return text;\n}\n//  工作流紧急程度\nfunction urgentText(value) {\n  var text = '';\n  switch (value) {\n    case 1:\n      text = \"普通\";\n      break;\n    case 2:\n      text = \"重要\";\n      break;\n    case 3:\n      text = \"紧急\";\n      break;\n    default:\n      text = \"普通\";\n      break;\n  }\n  return text;\n}\n//  工作流审批状态\nfunction dataType(val) {\n  var text = val;\n  switch (val) {\n    case 'varchar':\n      text = \"字符串\";\n      break;\n    case 'int':\n      text = \"整型\";\n      break;\n    case 'datetime':\n      text = \"日期时间\";\n      break;\n    case 'decimal':\n      text = \"浮点\";\n      break;\n    case 'bigint':\n      text = \"长整型\";\n      break;\n    case 'text':\n      text = \"文本\";\n      break;\n    default:\n      text = val;\n      break;\n  }\n  return text;\n}\nfunction uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction toDate(v, format) {\n  return _jnpf.default.toDate(v, format);\n}\nfunction toDateText(dateTime) {\n  return _jnpf.default.toDateText(dateTime);\n}\nfunction toDateValue(dateTime) {\n  return _jnpf.default.toDateValue(dateTime);\n}\nfunction toFileSize(size) {\n  return _jnpf.default.toFileSize(size);\n}\n\n// 代码生成器数据匹配\nfunction dynamicText(value, options) {\n  if (!value) return '';\n  if (Array.isArray(value)) {\n    if (!options || !Array.isArray(options)) return value.join();\n    var textList = [];\n    var _loop = function _loop(i) {\n      var item = options.filter(function (o) {\n        return o.id == value[i];\n      })[0];\n      if (!item || !item.fullName) {\n        textList.push(value[i]);\n      } else {\n        textList.push(item.fullName);\n      }\n    };\n    for (var i = 0; i < value.length; i++) {\n      _loop(i);\n    }\n    return textList.join();\n  }\n  if (!options || !Array.isArray(options)) return value;\n  var item = options.filter(function (o) {\n    return o.id == value;\n  })[0];\n  if (!item || !item.fullName) return value;\n  return item.fullName;\n}\nfunction dynamicTreeText(value, options) {\n  if (!value) return '';\n  function transfer(data, partition) {\n    var textList = [];\n    function loop(data, id) {\n      for (var i = 0; i < data.length; i++) {\n        if (data[i].id === id) {\n          textList.push(data[i].fullName);\n          break;\n        }\n        if (data[i].children) loop(data[i].children, id);\n      }\n    }\n    for (var i = 0; i < data.length; i++) {\n      if (Array.isArray(data[i])) {\n        textList.push(transfer(data[i], \"/\"));\n      } else {\n        loop(options, data[i]);\n      }\n    }\n    return textList.join(partition);\n  }\n  if (!options || !Array.isArray(options)) return value.join();\n  if (Array.isArray(value)) {\n    var text = transfer(value);\n    return text;\n  } else {\n    if (!options || !Array.isArray(options)) return value;\n    var list = value.split();\n    var _text = transfer(list);\n    return _text;\n  }\n}",null]}