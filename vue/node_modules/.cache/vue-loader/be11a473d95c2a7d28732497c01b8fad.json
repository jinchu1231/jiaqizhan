{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/onlineDev/webDesign/ShortLinkDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/onlineDev/webDesign/ShortLinkDialog.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport QRCode from 'qrcodejs2'\nimport clipboard from '@/utils/clipboard'\nimport { getShortLink, save } from '@/api/onlineDev/webDesign'\nimport { getVisualDevInfo } from '@/api/onlineDev/visualDev'\nimport ChangeField from '@/components/ChangeField'\nimport { noColumnShowList, noSearchList } from '@/components/Generator/generator/comConfig'\nconst getFormDataFields = item => {\n  const jnpfKey = item.__config__.jnpfKey\n  const fieldsList = [\n    'input',\n    'textarea',\n    'inputNumber',\n    'switch',\n    'datePicker',\n    'timePicker',\n    'colorPicker',\n    'rate',\n    'slider',\n    'editor',\n    'link',\n    'text',\n    'alert',\n    'table',\n    'collapse',\n    'collapseItem',\n    'tabItem',\n    'tab',\n    'row',\n    'card',\n    'groupTitle',\n    'divider',\n    'tableGrid',\n    'tableGridTr',\n    'tableGridTd',\n    'sign',\n    'location']\n  const fieldsSelectList = [\"radio\", \"checkbox\", \"select\", \"cascader\", \"treeSelect\"]\n  if (fieldsList.includes(jnpfKey) || (fieldsSelectList.includes(jnpfKey) && item.__config__.dataType === 'static')) return item\n}\nexport default {\n  components: { ChangeField },\n  data() {\n    return {\n      previewAppVisible: false,\n      changeFieldVisible: false,\n      qrCodeText: '',\n      dialogVisible: false,\n      loading: false,\n      btnLoading: false,\n      visible: false,\n      dataForm: {\n        id: '',\n        formLink: '',\n        formUse: 0,\n        formPassUse: 0,\n        formPassword: '',\n        columnUse: 0,\n        columnLink: '',\n        columnPassUse: 0,\n        columnPassword: '',\n        columnCondition: [],\n        columnText: [],\n        alreadySave: false\n      },\n      columnCondition: [],\n      columnText: [],\n      dataRule: {\n        formPassword: [\n          {\n            required: true,\n            message: '请输入',\n            trigger: 'blur'\n          },\n          {\n            pattern: /^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^(0-9a-zA-Z)]).{6,16}$/,\n            message: '密码必须由数字、字母、特殊字符组合,请输入6-16位',\n            trigger: 'blur'\n          },\n        ],\n        columnPassword: [\n          {\n            required: true,\n            message: '请输入',\n            trigger: 'blur'\n          },\n          {\n            pattern: /^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^(0-9a-zA-Z)]).{6,16}$/,\n            message: '密码必须由数字、字母、特殊字符组合,请输入6-16位',\n            trigger: 'blur'\n          },\n        ],\n      },\n      qrcode: '',\n      formData: '',\n      listOptions: [],\n      searchList: [],\n      webType: '1',\n      type: ''\n    }\n  },\n  methods: {\n    download(type) {\n      let qrcode = ''\n      if (type == 1) {\n        qrcode = document.querySelector('#qrcode')\n      } else {\n        qrcode = document.querySelector('#qrcode2')\n      }\n      const canvas = qrcode.querySelector('canvas')\n      const imgurl = canvas.toDataURL('image/png')\n      const a = document.createElement('a')\n      a.href = imgurl\n      a.download = '二维码' // 图片名称\n      a.click()\n    },\n    columnConditionChange(arr) {\n      let list = []\n      for (let index = 0; index < this.searchList.length; index++) {\n        const element = this.searchList[index];\n        arr.forEach(o => {\n          if (element.id == o) {\n            list.push(element)\n          }\n        })\n      }\n      this.dataForm.columnCondition = list\n    },\n    columnTextChange(arr) {\n      let list = []\n      for (let index = 0; index < this.listOptions.length; index++) {\n        const element = this.listOptions[index];\n        arr.forEach(o => {\n          if (element.id == o) {\n            list.push(element)\n          }\n        })\n      }\n      this.dataForm.columnText = list\n    },\n    init(id) {\n      this.btnLoading = false\n      this.webType = '1'\n      this.columnCondition = ''\n      this.columnText = ''\n      this.getShortLink(id)\n      getVisualDevInfo(id).then(res => {\n        this.webType = res.data.webType || '1';\n        this.formData = res.data.formData && JSON.parse(res.data.formData)\n        let list = []\n        if (this.formData && this.formData.fields.length) {\n          const loop = (data, parent) => {\n            if (!data) return\n            if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n              loop(data.__config__.children, data)\n            }\n            if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n            if (data.__config__ && data.__config__.jnpfKey) {\n              const visibility = !data.__config__.visibility || (Array.isArray(data.__config__.visibility) && data.__config__.visibility.includes('pc'))\n              if (data.__config__.layout === 'colFormItem' && data.__vModel__ && visibility) {\n                const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table';\n                list.push({\n                  id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n                  fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n                  ...data,\n                  disabled: false,\n                });\n              }\n            }\n          }\n          loop(this.formData.fields)\n        }\n        this.listOptions = list\n        this.listOptions = list.filter(o => noColumnShowList.indexOf(o.__config__.jnpfKey) < 0 || o.isStorage == 1)\n        this.searchList = list.filter(o => noSearchList.indexOf(o.__config__.jnpfKey) < 0)\n        this.listOptions = this.listOptions.filter(o => getFormDataFields(o))\n        this.searchList = this.searchList.filter(o => getFormDataFields(o))\n        this.searchList = this.searchList.map(o => ({\n          label: o.fullName,\n          prop: o.id,\n          jnpfKey: o.__config__.jnpfKey,\n          value: '',\n          ...o,\n        }));\n        this.listOptions = this.listOptions.map(o => ({\n          label: o.fullName,\n          prop: o.id,\n          fixed: 'none',\n          align: 'left',\n          jnpfKey: o.__config__.jnpfKey,\n          sortable: false,\n          width: null,\n          ...o,\n        }));\n      })\n      this.dialogVisible = true\n    },\n    getShortLink(id) {\n      getShortLink(id).then(res => {\n        this.dataForm = res.data || {}\n        this.dataForm.columnCondition = this.dataForm.columnCondition ? JSON.parse(this.dataForm.columnCondition) : []\n        this.dataForm.columnText = this.dataForm.columnText ? JSON.parse(this.dataForm.columnText) : []\n        let column = []\n        if (this.dataForm.columnCondition.length) {\n          this.dataForm.columnCondition.forEach(o => {\n            column.push(o.id)\n          })\n        }\n        this.columnCondition = column\n        let text = []\n        if (this.dataForm.columnText.length) {\n          this.dataForm.columnText.forEach(o => {\n            text.push(o.id)\n          })\n        }\n        this.columnText = text\n      })\n    },\n    change(type) {\n      this.type = type\n      this.changeFieldVisible = true\n      this.$nextTick(() => {\n        this.$refs.ChangeField.openDialog()\n      })\n    },\n    copy(text, event) {\n      clipboard(text, event)\n    },\n    open(val) {\n      window.open(val)\n    },\n    getQRimg() {\n      if (!this.dataForm.formLink || !this.dataForm.alreadySave) {\n        return\n      }\n      this.$refs.qrCode.innerHTML = \"\";\n      this.qrcode = new QRCode(this.$refs.qrCode, {\n        width: 150,\n        height: 150, // 高度\n        text: this.dataForm.formLink, // 二维码内容\n        // render: 'canvas' // 设置渲染方式（有两种方式 table和canvas，默认是canvas）\n        // background: '#f0f'\n        // foreground: '#ff0'\n        correctLevel: QRCode.CorrectLevel.H //容错级别 容错级别有：（1）QRCode.CorrectLevel.L （2）QRCode.CorrectLevel.M （3）QRCode.CorrectLevel.Q （4）QRCode.CorrectLevel.H\n      })\n    },\n    getQRimg2() {\n      if (!this.dataForm.columnLink || !this.dataForm.alreadySave) {\n        return\n      }\n      this.$refs.qrCode2.innerHTML = \"\";\n      this.qrcode = new QRCode(this.$refs.qrCode2, {\n        width: 150,\n        height: 150, // 高度\n        text: this.dataForm.columnLink, // 二维码内容\n        // render: 'canvas' // 设置渲染方式（有两种方式 table和canvas，默认是canvas）\n        // background: '#f0f'\n        // foreground: '#ff0'\n        correctLevel: QRCode.CorrectLevel.H //容错级别 容错级别有：（1）QRCode.CorrectLevel.L （2）QRCode.CorrectLevel.M （3）QRCode.CorrectLevel.Q （4）QRCode.CorrectLevel.H\n      })\n    },\n    dataFormSubmit() {\n      if (this.dataForm.formPassUse == 0) this.dataForm.formPassword = ''\n      if (this.dataForm.columnPassUse == 0) this.dataForm.columnPassword = ''\n      if (this.dataForm.formPassUse == 1 && !this.dataForm.formPassword) return this.$message.error('请输入表单凭密码填写')\n      if (this.dataForm.columnPassUse == 1 && !this.dataForm.columnPassword) return this.$message.error('请输入列表凭密码填写')\n      this.btnLoading = true\n      if (typeof this.dataForm.columnCondition !== 'string') this.dataForm.columnCondition = JSON.stringify(this.dataForm.columnCondition)\n      if (typeof this.dataForm.columnText !== 'string') this.dataForm.columnText = JSON.stringify(this.dataForm.columnText)\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          save(this.dataForm).then(res => {\n            this.$message({\n              type: 'success',\n              message: res.msg,\n              duration: 1000,\n              onClose: () => {\n                this.$nextTick(() => {\n                  this.btnLoading = false\n                  this.getShortLink(this.dataForm.id)\n                })\n              }\n            })\n          })\n        } else {\n          this.btnLoading = false\n        }\n      })\n    }\n  }\n}\n",null]}