{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es7.array.includes\");\nvar _babelHelperVueJsxMergeProps = _interopRequireDefault(require(\"@vue/babel-helper-vue-jsx-merge-props\"));\nvar _util = require(\"./util.js\");\nvar isCondition = function isCondition(data) {\n  return data.type === \"condition\" || data.type === \"approver\" && (data.isInterflow || data.isBranchFlow);\n};\nvar notEmptyArray = function notEmptyArray(arr) {\n  return Array.isArray(arr) && arr.length > 0;\n};\nvar hasBranch = function hasBranch(data) {\n  return notEmptyArray(data.conditionNodes);\n};\nvar stopPro = function stopPro(ev) {\n  return ev.stopPropagation();\n};\nfunction createNormalCard(ctx, conf, h) {\n  var _this = this;\n  var classList = ['flow-path-card'];\n  var afterTrue = function afterTrue(isTrue, name) {\n    return isTrue && classList.push(name), isTrue;\n  };\n  var isStartNode = afterTrue(_util.NodeUtils.isStartNode(conf), 'start-node');\n  var isApprNode = afterTrue(_util.NodeUtils.isApproverNode(conf), 'approver');\n  var isCopyNode = afterTrue(_util.NodeUtils.isCopyNode(conf), 'copy');\n  var isTimerNode = afterTrue(_util.NodeUtils.isTimerNode(conf), 'timer');\n  var isSubFlowNode = afterTrue(_util.NodeUtils.isSubFlowNode(conf), 'subFlow');\n  return h(\"section\", {\n    \"class\": classList.join(' '),\n    \"on\": {\n      \"click\": this.eventLauncher.bind(ctx, \"edit\", conf)\n    }\n  }, [h(\"header\", {\n    \"class\": \"header\"\n  }, [h(\"div\", {\n    \"class\": \"title-box\",\n    \"style\": \"height: 100%;width:190px;\"\n  }, [h(\"span\", {\n    \"class\": \"title-text\"\n  }, [conf.properties.title]), !isTimerNode && h(\"input\", (0, _babelHelperVueJsxMergeProps.default)([{\n    \"on\": {\n      \"blur\": function blur($event) {\n        _this.$forceUpdate();\n      },\n      \"input\": function input($event) {\n        if ($event.target.composing) return;\n        _this.$set(conf.properties, \"title\", $event.target.value.trim());\n      },\n      \"click\": stopPro\n    },\n    \"class\": \"title-input\",\n    \"domProps\": {\n      \"value\": conf.properties.title\n    }\n  }, {\n    directives: [{\n      name: \"model\",\n      value: conf.properties.title,\n      modifiers: {\n        trim: true\n      }\n    }]\n  }]))]), h(\"div\", {\n    \"class\": \"actions\"\n  }, [h(\"i\", {\n    \"class\": \"el-icon-close icon\",\n    \"on\": {\n      \"click\": this.eventLauncher.bind(ctx, \"deleteNode\", conf, ctx.data)\n    }\n  })]), isSubFlowNode && h(\"el-tag\", {\n    \"class\": \"async-state\",\n    \"attrs\": {\n      \"size\": \"mini\",\n      \"effect\": \"plain\"\n    }\n  }, [conf.properties.isAsync ? '异步' : '同步'])]), h(\"div\", {\n    \"class\": \"body\"\n  }, [h(\"span\", {\n    \"class\": \"text\"\n  }, [conf.content])])]);\n}\n// arg = ctx, data, h\nvar createFunc = function createFunc() {\n  for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n    arg[_key] = arguments[_key];\n  }\n  return createNormalCard.call.apply(createNormalCard, [arg[0]].concat(arg));\n};\nvar nodes = {\n  start: createFunc,\n  approver: createFunc,\n  copy: createFunc,\n  timer: createFunc,\n  subFlow: createFunc,\n  interflow: createFunc,\n  branchFlow: createFunc,\n  empty: function empty(_) {\n    return '';\n  },\n  condition: function condition(ctx, conf, h) {\n    var _this2 = this;\n    // <i\n    //    class=\"el-icon-document-copy icon\"\n    //    onClick={this.eventLauncher.bind(ctx, \"copyNode\", conf, ctx.data)}\n    //  ></i>\n    return h(\"section\", {\n      \"class\": \"flow-path-card condition\",\n      \"on\": {\n        \"click\": this.eventLauncher.bind(ctx, \"edit\", conf)\n      }\n    }, [h(\"header\", {\n      \"class\": \"header\"\n    }, [h(\"div\", {\n      \"class\": \"title-box\",\n      \"style\": \"height:20px;width:160px;\"\n    }, [h(\"span\", {\n      \"class\": \"title-text\"\n    }, [conf.properties.title]), h(\"input\", (0, _babelHelperVueJsxMergeProps.default)([{\n      \"on\": {\n        \"blur\": function blur($event) {\n          _this2.$forceUpdate();\n        },\n        \"input\": function input($event) {\n          if ($event.target.composing) return;\n          _this2.$set(conf.properties, \"title\", $event.target.value.trim());\n        },\n        \"click\": stopPro\n      },\n      \"class\": \"title-input\",\n      \"domProps\": {\n        \"value\": conf.properties.title\n      }\n    }, {\n      directives: [{\n        name: \"model\",\n        value: conf.properties.title,\n        modifiers: {\n          trim: true\n        }\n      }]\n    }]))]), h(\"div\", {\n      \"class\": \"actions\"\n    }, [h(\"i\", {\n      \"class\": \"el-icon-close icon\",\n      \"on\": {\n        \"click\": this.eventLauncher.bind(ctx, \"deleteNode\", conf, ctx.data)\n      }\n    })])]), h(\"div\", {\n      \"class\": \"body\"\n    }, [h(\"div\", {\n      \"class\": \"text\"\n    }, [conf.content])])]);\n  }\n};\nfunction addNodeButton(ctx, data, h) {\n  var isBranch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (data.type === 'condition' && data.properties.conditionType === 1) {\n    return h(\"div\", {\n      \"class\": \"add-node-btn-box flex justify-center\"\n    }, [h(\"div\", {\n      \"class\": \"add-node-btn\"\n    }, [h(\"button\", {\n      \"class\": \"btn disabled-btn\",\n      \"attrs\": {\n        \"type\": \"button\"\n      }\n    }, [h(\"i\", {\n      \"class\": \"icon-ym icon-ym-nav-close icon\"\n    })])])]);\n  }\n  // 只有非条件节点和条件分支树下面的那个按钮 才能添加新分支树\n  var couldAddBranch = !hasBranch(data) || isBranch;\n  var canAddAppendBranch = true;\n  var canAddAppendInterflow = true;\n  var canAddAppendBranchFlowBranch = true;\n  var canAddSubFlow = true;\n  var canAddTimerNode = true;\n  if (Array.isArray(data.conditionNodes) && data.conditionNodes.length) {\n    canAddAppendBranch = false;\n    canAddAppendInterflow = false;\n    canAddAppendBranchFlowBranch = false;\n    canAddSubFlow = false;\n    canAddTimerNode = false;\n  }\n  if (data.type === 'timer' || data.childNode && data.childNode.type === 'timer') {\n    canAddTimerNode = false;\n  }\n  if (data.type === 'subFlow') {\n    canAddAppendBranch = false;\n  }\n  var isEmpty = data.type === \"empty\";\n  if (isEmpty && !isBranch) {\n    return \"\";\n  }\n  return h(\"div\", {\n    \"class\": \"add-node-btn-box flex justify-center\"\n  }, [h(\"div\", {\n    \"class\": \"add-node-btn\"\n  }, [h(\"el-popover\", {\n    \"attrs\": {\n      \"placement\": \"right\",\n      \"trigger\": \"click\",\n      \"width\": \"440\"\n    }\n  }, [h(\"el-alert\", {\n    \"attrs\": {\n      \"title\": \"增加节点后可能会导致下面节点配置的数据传递规则失效\",\n      \"type\": \"warning\",\n      \"closable\": false,\n      \"show-icon\": true\n    }\n  }), h(\"div\", {\n    \"class\": \"condition-box\"\n  }, [h(\"div\", [h(\"div\", {\n    \"class\": \"condition-icon\",\n    \"on\": {\n      \"click\": ctx.eventLauncher.bind(ctx, \"addApprovalNode\", data, isBranch)\n    }\n  }, [h(\"i\", {\n    \"class\": \"icon-ym icon-ym-flowTodo\"\n  })]), \"\\u5BA1\\u6279\\u8282\\u70B9\"]), h(\"div\", {\n    \"class\": {\n      'condition-disabled': !canAddSubFlow && !isBranch\n    }\n  }, [h(\"div\", {\n    \"class\": \"condition-icon\",\n    \"on\": {\n      \"click\": ctx.eventLauncher.bind(ctx, \"addSubFlowNode\", data, isBranch, !canAddSubFlow && !isBranch)\n    }\n  }, [h(\"i\", {\n    \"class\": \"icon-ym icon-ym-generator-subFlow\"\n  })]), \"\\u5B50\\u6D41\\u7A0B\"]), h(\"div\", {\n    \"class\": {\n      'condition-disabled': !canAddAppendBranch\n    }\n  }, [h(\"div\", {\n    \"class\": \"condition-icon\",\n    \"on\": {\n      \"click\": this.eventLauncher.bind(ctx, \"appendBranch\", data, isBranch, !canAddAppendBranch)\n    }\n  }, [h(\"i\", {\n    \"class\": \"ym-custom ym-custom-sitemap\"\n  })]), \"\\u6761\\u4EF6\\u5206\\u652F\"]), h(\"div\", {\n    \"class\": {\n      'condition-disabled': !canAddAppendBranchFlowBranch\n    }\n  }, [h(\"div\", {\n    \"class\": \"condition-icon\",\n    \"on\": {\n      \"click\": this.eventLauncher.bind(ctx, \"appendBranchFlowBranch\", data, isBranch, !canAddAppendBranchFlowBranch)\n    }\n  }, [h(\"i\", {\n    \"class\": \"icon-ym icon-ym-branch\"\n  })]), \"\\u9009\\u62E9\\u5206\\u652F\"]), h(\"div\", {\n    \"class\": {\n      'condition-disabled': !canAddAppendInterflow\n    }\n  }, [h(\"div\", {\n    \"class\": \"condition-icon\",\n    \"on\": {\n      \"click\": this.eventLauncher.bind(ctx, \"appendInterflowBranch\", data, isBranch, !canAddAppendInterflow)\n    }\n  }, [h(\"i\", {\n    \"class\": \"icon-ym icon-ym-node\"\n  })]), \"\\u5E76\\u884C\\u5206\\u652F\"]), h(\"div\", {\n    \"class\": {\n      'condition-disabled': !canAddTimerNode\n    }\n  }, [h(\"div\", {\n    \"class\": \"condition-icon\",\n    \"on\": {\n      \"click\": ctx.eventLauncher.bind(ctx, \"addTimerNode\", data, isBranch, !canAddTimerNode)\n    }\n  }, [h(\"i\", {\n    \"class\": \"icon-ym icon-ym-timer\"\n  })]), \"\\u5B9A\\u65F6\\u5668\"])]), h(\"button\", {\n    \"class\": \"btn\",\n    \"attrs\": {\n      \"type\": \"button\"\n    },\n    \"slot\": \"reference\"\n  }, [h(\"i\", {\n    \"class\": \"el-icon-plus icon\"\n  })])])])]);\n}\nfunction NodeFactory(ctx, data, h) {\n  if (!data) return;\n  var showErrorTip = ctx.verifyMode && _util.NodeUtils.checkNode(data) === false;\n  var content = \"未设置审批人\";\n  if (_util.NodeUtils.isStartNode(data)) content = \"\\u672A\\u8BBE\\u7F6E\".concat(this.flowType == 1 ? \"功能\" : \"表单\", \"\\u914D\\u7F6E\");\n  if (_util.NodeUtils.isConditionNode(data)) content = \"未设置条件\";\n  if (_util.NodeUtils.isSubFlowNode(data)) content = \"未设置发起人\";\n  var res = [],\n    branchNode = \"\",\n    selfNode = h(\"div\", {\n      \"class\": \"node-wrap\"\n    }, [h(\"div\", {\n      \"class\": \"node-wrap-box \".concat(data.type, \" \").concat(_util.NodeUtils.isInterflowNode(data) ? 'interflow' : '', \" \").concat(_util.NodeUtils.isBranchFlowNode(data) ? 'branchFlow' : '', \" \").concat(showErrorTip ? 'error' : '')\n    }, [h(\"el-tooltip\", {\n      \"attrs\": {\n        \"content\": content,\n        \"placement\": \"top\",\n        \"effect\": \"dark\"\n      }\n    }, [h(\"div\", {\n      \"class\": \"error-tip\",\n      \"on\": {\n        \"click\": this.eventLauncher.bind(ctx, \"edit\", data)\n      }\n    }, [\"!!!\"])]), nodes[data.type].call(ctx, ctx, data, h), addNodeButton.call(ctx, ctx, data, h)])]);\n  if (hasBranch(data)) {\n    // 如果节点是数组 一定为条件分支 添加分支样式包裹\n    // {data.childNode && NodeFactory.call(ctx, ctx, data.childNode, h)}\n    if (_util.NodeUtils.isConditionNode(data.conditionNodes[0])) {\n      branchNode = h(\"div\", {\n        \"class\": \"branch-wrap\"\n      }, [h(\"div\", {\n        \"class\": \"branch-box-wrap\"\n      }, [h(\"div\", {\n        \"class\": \"branch-box flex justify-center relative\"\n      }, [h(\"el-popover\", {\n        \"attrs\": {\n          \"placement\": \"right\",\n          \"trigger\": \"click\",\n          \"width\": \"180\"\n        },\n        \"class\": 'popover'\n      }, [h(\"div\", {\n        \"class\": \"add-popover-main add-condition-popover-main\"\n      }, [h(\"div\", {\n        \"class\": \"condition-box\"\n      }, [h(\"div\", {\n        \"on\": {\n          \"click\": this.eventLauncher.bind(null, 'appendConditionNode', data, 0)\n        }\n      }, [h(\"div\", {\n        \"class\": \"condition-icon\"\n      }, [h(\"i\", {\n        \"class\": \"icon-ym icon-ym icon-ym-condition\"\n      })]), \"\\u6761\\u4EF6\\u903B\\u8F91\"]), h(\"div\", {\n        \"on\": {\n          \"click\": this.eventLauncher.bind(null, 'appendConditionNode', data, 1)\n        }\n      }, [h(\"div\", {\n        \"class\": \"condition-icon\"\n      }, [h(\"i\", {\n        \"class\": \"icon-ym icon-ym icon-ym-turn\"\n      })]), \"\\u8F6C\\u5411\\u903B\\u8F91\"])])]), h(\"button\", {\n        \"class\": \"btn\",\n        \"attrs\": {\n          \"type\": \"button\"\n        },\n        \"slot\": \"reference\"\n      }, [\"\\u6DFB\\u52A0\\u6761\\u4EF6\"])]), data.conditionNodes.map(function (d) {\n        return NodeFactory.call(ctx, ctx, d, h);\n      })])]), addNodeButton.call(ctx, ctx, data, h, true)]);\n    }\n    if (_util.NodeUtils.isInterflowNode(data.conditionNodes[0])) {\n      branchNode = h(\"div\", {\n        \"class\": \"branch-wrap\"\n      }, [h(\"div\", {\n        \"class\": \"branch-box-wrap\"\n      }, [h(\"div\", {\n        \"class\": \"branch-box flex justify-center relative\"\n      }, [h(\"button\", {\n        \"on\": {\n          \"click\": this.eventLauncher.bind(ctx, \"appendInterflowNode\", data)\n        },\n        \"class\": \"btn\"\n      }, [\"\\u6DFB\\u52A0\\u5206\\u6D41\"]), data.conditionNodes.map(function (d) {\n        return NodeFactory.call(ctx, ctx, d, h);\n      })])]), addNodeButton.call(ctx, ctx, data, h, true)]);\n    }\n    if (_util.NodeUtils.isBranchFlowNode(data.conditionNodes[0])) {\n      branchNode = h(\"div\", {\n        \"class\": \"branch-wrap\"\n      }, [h(\"div\", {\n        \"class\": \"branch-box-wrap\"\n      }, [h(\"div\", {\n        \"class\": \"branch-box flex justify-center relative\"\n      }, [h(\"button\", {\n        \"on\": {\n          \"click\": this.eventLauncher.bind(ctx, \"appendBranchFlowNode\", data)\n        },\n        \"class\": \"btn\"\n      }, [\"\\u6DFB\\u52A0\\u5206\\u652F\"]), data.conditionNodes.map(function (d) {\n        return NodeFactory.call(ctx, ctx, d, h);\n      })])]), addNodeButton.call(ctx, ctx, data, h, true)]);\n    }\n  }\n  if (isCondition(data)) {\n    return h(\"div\", {\n      \"class\": \"col-box\"\n    }, [h(\"div\", {\n      \"class\": \"center-line\"\n    }), h(\"div\", {\n      \"class\": \"top-cover-line\"\n    }), h(\"div\", {\n      \"class\": \"bottom-cover-line\"\n    }), selfNode, branchNode, NodeFactory.call(ctx, ctx, data.childNode, h)]);\n  }\n  res.push(selfNode);\n  branchNode && res.push(branchNode);\n  data.childNode && res.push(NodeFactory.call(ctx, ctx, data.childNode, h));\n  return res;\n}\nfunction addEndNode(h) {\n  return h(\"section\", {\n    \"class\": \"end-node\"\n  }, [\"\\u6D41\\u7A0B\\u7ED3\\u675F\"]);\n}\nvar _default = exports.default = {\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    // 点击发布时需要校验节点数据完整性 此时打开校验模式\n    verifyMode: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {},\n  methods: {\n    /**\n     *事件触发器 统筹本组件所有事件并转发到父组件中\n     * @param { Object } 包含event（事件名）和args（事件参数）两个参数\n     */\n    eventLauncher: function eventLauncher(event) {\n      var _this3 = this;\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      stopPro(args[args.length - 1]);\n      var list = ['appendBranch', 'appendBranchFlowBranch', 'appendInterflowBranch', 'addTimerNode'];\n      if (list.includes(event) && args[args.length - 2]) return;\n      // args.slice(0,-1) vue 会注入MouseEvent到最后一个参数 去除事件对象\n      var param = {\n        event: event,\n        args: args.slice(0, -1)\n      };\n      if (event === 'deleteNode') {\n        this.$confirm('此操作将永久删除该节点，删除后可能会导致下面节点配置的数据传递规则失效，是否继续?', '提示', {\n          type: 'warning'\n        }).then(function () {\n          _this3.$emit(\"emits\", param);\n        }).catch(function () {});\n      } else {\n        this.$emit(\"emits\", param);\n      }\n    }\n  },\n  render: function render(h) {\n    return h(\"div\", {\n      \"style\": \"display: inline-flex; flex-direction: column; align-items: center;\"\n    }, [this.data && NodeFactory.call(this, this, this.data, h), addEndNode(h)]);\n  }\n};",null]}