{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/messageRecord/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/messageRecord/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMessageList, MessageDeleteRecord, ReadInfo } from '@/api/system/message'\nimport Form from './Form'\nimport ScheduleView from '@/components/ScheduleView'\nexport default {\n  name: 'messageRecord',\n  components: { Form, ScheduleView },\n  data() {\n    return {\n      visible: false,\n      formVisible: false,\n      keyword: '',\n      activeName: \"0\",\n      list: [],\n      multipleSelection: [],\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n      },\n      scheduleVisible: false,\n      messageList: []\n    }\n  },\n  watch: {\n    activeName(val) {\n      this.keyword = ''\n      this.search()\n    }\n  },\n  created() {\n    this.getDictionaryData()\n    this.initData()\n  },\n  methods: {\n    search() {\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n      }\n      this.initData()\n    },\n    reset() {\n      this.keyword = ''\n      this.search()\n    },\n    getDictionaryData() {\n      this.messageList = []\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSourceType' }).then((res) => {\n        let item = { id: '0', fullName: '全部', enCode: '0' }\n        this.messageList.push(item, ...res)\n      })\n    },\n    getType(type) {\n      let item = this.messageList.filter(o => o.enCode == type)[0]\n      return item && item.fullName || ''\n    },\n    initData() {\n      this.listLoading = true\n      let data = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        type: this.activeName == '0' ? '' : this.activeName\n      }\n      this.list = []\n      getMessageList(data).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    handleDel() {\n      if (!this.multipleSelection.length) {\n        this.$message({ type: 'error', message: '请选择一条数据' });\n        return\n      }\n      let data = {\n        ids: this.multipleSelection.join(',')\n      }\n      this.$confirm('您确定要删除这些数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        MessageDeleteRecord(data).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg\n          });\n          this.initData();\n        })\n      }).catch(() => { });\n    },\n    handleSelectionChange(val) {\n      this.multipleSelection = val.map(item => item.id)\n    },\n    readInfo(item) {\n      ReadInfo(item.id).then(res => {\n        this.info = res.data\n        this.files = res.data.files ? JSON.parse(res.data.files) : []\n        if (item.isRead == '0') {\n          item.isRead = '1'\n          this.$emit('read')\n        }\n        if (item.type == 4) {\n          let bodyText = JSON.parse(res.data.bodyText)\n          if (bodyText.type == 3) return\n          this.scheduleVisible = true\n          this.$nextTick(() => {\n            this.$refs.schedule.init(bodyText.id, '', bodyText.groupId)\n          })\n          return\n        }\n        if (item.type == 2 && item.flowType == 2) {\n          let bodyText = JSON.parse(res.data.bodyText)\n          this.drawer = false\n          this.$router.push('/workFlow/entrust?config=' + bodyText.type)\n        } else {\n          if (item.type == 1 || item.type == 3) {\n            this.formVisible = true\n            this.$nextTick(() => {\n              this.$refs.Form.init(item.id)\n            })\n          } else {\n            if (!res.data.bodyText) return\n            this.drawer = false\n            const Base64 = require('js-base64').Base64\n            this.$router.push('/workFlowDetail?config=' + encodeURIComponent(Base64.encode(res.data.bodyText)))\n          }\n        }\n      })\n    }\n  }\n}\n",null]}