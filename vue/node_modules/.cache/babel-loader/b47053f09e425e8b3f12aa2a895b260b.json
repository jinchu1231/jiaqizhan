{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/mixins/useRedo.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/mixins/useRedo.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = exports.default = {\n  data: function data() {\n    return {\n      recordList: [],\n      currentRecordIndex: -1,\n      recordLimit: 500,\n      copyLayout: \"\"\n    };\n  },\n  computed: {\n    getCanUndo: function getCanUndo() {\n      return this.currentRecordIndex > 0;\n    },\n    getCanRedo: function getCanRedo() {\n      return this.recordList.length > this.currentRecordIndex + 1;\n    }\n  },\n  methods: {\n    initRedo: function initRedo() {\n      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;\n      this.recordList = [];\n      this.currentRecordIndex = -1;\n      this.recordLimit = limit;\n    },\n    addRecord: function addRecord(item) {\n      if (this.currentRecordIndex + 1 < this.recordList.length) {\n        this.recordList.splice(this.currentRecordIndex + 1);\n      }\n      this.recordList.push(JSON.parse(JSON.stringify(item)));\n      this.currentRecordIndex++;\n      if (this.recordList.length > this.recordLimit) {\n        this.recordList.shift();\n        this.currentRecordIndex--;\n      }\n    },\n    handleUndo: function handleUndo(callback) {\n      if (!this.getCanUndo) return;\n      this.currentRecordIndex--;\n      var currRecord = this.recordList[this.currentRecordIndex];\n      callback(currRecord);\n    },\n    handleRedo: function handleRedo(callback) {\n      if (!this.getCanRedo) return;\n      this.currentRecordIndex++;\n      var currRecord = this.recordList[this.currentRecordIndex];\n      callback(currRecord);\n    }\n  }\n};",null]}