{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RTable/AddTableForm.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RTable/AddTableForm.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDrawingList } from '@/components/Generator/utils/db'\nimport InterfaceDialog from '@/components/Process/PropPanel/InterfaceDialog'\nimport { getDataInterfaceInfo } from '@/api/systemData/dataInterface'\nimport iconBox from '@/components/JNPF-iconBox'\nimport { getFeatureSelector, getFormDataFields } from '@/api/onlineDev/visualDev'\nimport { systemComponentsList, noAllowRelationList } from '@/components/Generator/generator/comConfig'\nconst noFieldList = ['relationForm', 'popupSelect']\nconst butTypeOptions = [\n  { fullName: '默认按钮', id: '' },\n  { fullName: '主要按钮', id: 'primary' },\n  { fullName: '成功按钮', id: 'success' },\n  { fullName: '信息按钮', id: 'info' },\n  { fullName: '警告按钮', id: 'warning' },\n  { fullName: '危险按钮', id: 'danger' },\n  { fullName: '文字按钮', id: 'text' },\n]\nexport default {\n  components: { InterfaceDialog, iconBox },\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      childList: [],\n      dataForm: {\n        value: '',\n        label: '',\n        show: false,\n        showConfirm: false,\n        btnIcon: '',\n        btnType: '',\n      },\n      dataRule: {\n        label: { required: true, message: '按钮名称不能为空', trigger: 'blur' },\n      },\n      popupWidthOptions: ['600px', '800px', '1000px', '40%', '50%', '60%', '70%', '80%'],\n      fieldJsonList: [],\n      butTypeOptions,\n      iconsVisible: false,\n      actionConfig: {\n        dataSource: '',\n        interfaceId: '',\n        interfaceName: '',\n        templateJson: [],\n        hasPage: true,\n        pageSize: 20,\n        columnOptions: [],\n        relationOptions: []\n      },\n      treeData: [],\n      fieldOptions: []\n    }\n  },\n  computed: {\n    formFieldsOptions() {\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.jnpfKey !== 'table' && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__vModel__ && !noAllowRelationList.includes(data.__config__.jnpfKey)) list.push(data)\n      }\n      loop(getDrawingList())\n      return list\n    }\n  },\n  methods: {\n    init(item, actionConfig, children) {\n      this.visible = true\n      this.getFeatureSelector()\n      this.getFieldOptions()\n      this.dataForm = { ...this.dataForm, ...item }\n      this.actionConfig = {}\n      this.$refs.dataForm && this.$refs.dataForm.clearValidate()\n      if (['copy', 'remove', 'add', 'batchRemove'].includes(item.value)) return\n      this.actionConfig = { ...this.actionConfig, ...actionConfig }\n      this.childList = children.filter(o => o.__vModel__ && ![...systemComponentsList, ...noFieldList, ...noAllowRelationList].includes(o.__config__.jnpfKey))\n      this.getDataInterfaceInfo()\n      this.getFieldOptions()\n    },\n    getFeatureSelector() {\n      getFeatureSelector({ type: 1, webType: '2', isRelease: 1 }).then(res => {\n        this.treeData = res.data.list\n      })\n    },\n    getFieldOptions() {\n      if (!this.actionConfig.modelId) return\n      getFormDataFields(this.actionConfig.modelId, 1).then(res => {\n        this.fieldOptions = res.data.list || []\n      })\n    },\n    onModeIdChange(val) {\n      if (!val) return this.fieldOptions = []\n      this.actionConfig.templateJson = this.actionConfig.templateJson ? this.actionConfig.templateJson.map(o => ({\n        ...o,\n        relationField: '',\n        value: ''\n      })) : []\n      this.getFieldOptions()\n    },\n    onInterfaceChange(id, row) {\n      if (!id) return this.handleNull()\n      if (this.dataForm.interfaceId === id) return\n      this.actionConfig.interfaceId = id\n      this.actionConfig.interfaceName = row.fullName\n      this.actionConfig.templateJson = row.templateJson ? row.templateJson.map(o => ({\n        ...o,\n        relationField: '',\n        value: ''\n      })) : []\n      this.getDataInterfaceInfo()\n    },\n    handleNull() {\n      this.actionConfig.interfaceId = ''\n      this.actionConfig.interfaceName = ''\n      this.actionConfig.templateJson = []\n      this.fieldJsonList = []\n      this.actionConfig.modelId = ''\n      this.actionConfig.columnOptions = []\n      this.actionConfig.templateJson = this.actionConfig.templateJson ? this.actionConfig.templateJson.map(o => ({\n        ...o,\n        relationField: '',\n        value: ''\n      })) : []\n    },\n    onRelationFieldChange(val, row) {\n      if (!val) return row.jnpfKey = ''\n      let list = this.formFieldsOptions.filter(o => o.__vModel__ === val)\n      if (!list.length) return row.jnpfKey = ''\n      let item = list[0]\n      row.jnpfKey = item.__config__.jnpfKey\n    },\n    addColumn() {\n      this.actionConfig.columnOptions.push({\n        value: '',\n        label: ''\n      })\n    },\n    addRelationOption() {\n      this.actionConfig.relationOptions.push({\n        value: '',\n        field: '',\n        type: 1\n      })\n    },\n    handleDel(index, key) {\n      this.actionConfig[key].splice(index, 1)\n    },\n    onTypeChange(row) {\n      row.value = ''\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.$emit('submit', this.dataForm, this.actionConfig)\n          this.visible = false\n        }\n      })\n    },\n    getDataInterfaceInfo() {\n      getDataInterfaceInfo(this.dataForm.interfaceId).then(res => {\n        this.fieldJsonList = res.data && res.data.fieldJson && (JSON.parse(res.data.fieldJson) || []) || []\n      })\n    },\n    querySearch(queryString, cb) {\n      var restaurants = this.fieldJsonList || [];\n      var results = queryString ? restaurants.filter(this.createStateFilter(queryString)) : restaurants;\n      // 调用 callback 返回建议列表的数据\n      cb(results);\n    },\n    createStateFilter(queryString) {\n      return (state) => {\n        return (state.defaultValue.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\n      };\n    },\n    handleSelect(item, field) {\n      field.value = item.defaultValue\n    },\n    openIconsDialog() {\n      this.iconsVisible = true\n    },\n    setIcon(val) {\n      this.dataForm.btnIcon = val\n    },\n    headValue(index, val) {\n      if (!val) return this.actionConfig.columnOptions[index].label = ''\n      let item = this.fieldOptions.filter(o => o.vmodel == val)[0]\n      this.actionConfig.columnOptions[index].label = item.label\n    },\n  }\n}\n",null]}