{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ProcessMain from \"./main\"\nimport { NodeUtils, getMockData } from \"./FlowCard/util.js\";\nimport draggable from 'vuedraggable'\nimport { getFormInfo } from '@/api/workFlow/FormDesign'\nconst requiredDisabled = (jnpfKey) => {\n  return ['billRule', 'createUser', 'createTime', 'modifyTime', 'modifyUser', 'currPosition', 'currOrganize', 'table'].includes(jnpfKey)\n}\nconst getDataType = (data) => {\n  if (!data.__config__ || !data.__config__.jnpfKey) return ''\n  const jnpfKey = data.__config__.jnpfKey\n  if (['inputNumber', 'datePicker', 'rate', 'slider'].includes(jnpfKey)) {\n    return 'number'\n  } else if (['checkbox', 'uploadFile', 'uploadImg', 'cascader', 'organizeSelect', 'areaSelect'].includes(jnpfKey)) {\n    return 'array'\n  } else if (['select', 'depSelect', 'posSelect', 'userSelect', 'treeSelect', 'usersSelect', 'roleSelect', 'groupSelect', 'popupSelect', 'popupTableSelect'].includes(jnpfKey)) {\n    if (data.multiple) return 'array'\n  }\n  return ''\n}\n\nexport default {\n  name: 'Process',\n  props: ['tabName', 'conf', 'flowType', 'formInfo'],\n  data() {\n    return {\n      activeConf: null,\n      key: + new Date(),\n      loading: false,\n      verifyMode: false,\n      flowList: [],\n      visible: false,\n      handleType: '',\n      defaultData: {},\n      formFieldList: {},\n      dataForm: {\n        fullName: '',\n        id: '',\n        flowId: ''\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: '请输入流程名称', trigger: 'blur' }\n        ]\n      },\n      keyword: ''\n    };\n  },\n  components: {\n    ProcessMain,\n    draggable\n  },\n  created() {\n    this.$store.dispatch('base/getPositionList')\n    this.$store.dispatch('base/getRoleList')\n    this.$store.dispatch('generator/getDepTree')\n    this.$store.dispatch('generator/getGroupTree')\n    this.loading = true\n    if (this.formInfo.onlineDev && this.formInfo.onlineFormId) {\n      getFormInfo(this.formInfo.onlineFormId).then(res => {\n        const defaultData = getMockData()\n        defaultData.properties.formName = res.data.fullName\n        defaultData.properties.formId = res.data.id\n        let { propertyJson } = res.data\n        let formJson = {}, fieldList = []\n        if (propertyJson) formJson = JSON.parse(propertyJson)\n        fieldList = formJson.fields\n        this.formFieldList = this.transformFieldList(fieldList)\n        if (!defaultData.properties.allFormMap) defaultData.properties.allFormMap = {};\n        defaultData.properties.allFormMap['form_' + res.data.id] = this.formFieldList;\n        defaultData.properties.formOperates = this.initFormOperates(defaultData)\n        this.defaultData = defaultData\n        this.initData()\n      })\n    } else {\n      this.defaultData = getMockData()\n      this.initData()\n    }\n  },\n  computed: {\n    getFlowList() {\n      return this.keyword ? this.flowList.filter(o => o.fullName.indexOf(this.keyword) !== -1) : this.flowList\n    }\n  },\n  methods: {\n    initData() {\n      if (Array.isArray(this.conf) && this.conf !== null && JSON.stringify(this.conf) !== '[]') {\n        this.flowList = this.conf\n        this.updateData()\n      } else {\n        let item = {\n          id: '',\n          flowId: this.jnpf.idGenerator(),\n          fullName: this.formInfo.fullName,\n          flowTemplateJson: JSON.parse(JSON.stringify(this.defaultData))\n        }\n        this.flowList = [item]\n      }\n      this.activeConf = this.flowList[0]\n      this.$nextTick(() => {\n        this.loading = false\n      })\n    },\n    // 给父级组件提供的获取流程数据得方法\n    getData() {\n      this.verifyMode = true\n      let boo = true\n      let errorItem = {}\n      for (let i = 0; i < this.flowList.length; i++) {\n        boo = NodeUtils.checkAllNode(this.flowList[i].flowTemplateJson)\n        errorItem = this.flowList[i]\n        if (!boo) break;\n      }\n      if (boo) {\n        return Promise.resolve({ formData: this.flowList })\n      } else {\n        return Promise.reject({ target: 2, msg: `请完善${errorItem.fullName}的流程设计` })\n      }\n    },\n    addFlow() {\n      this.handleType = 'add'\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        let flowTemplateJson = JSON.parse(JSON.stringify(this.defaultData))\n        if (this.flowList.length) {\n          const defaultProperties = this.flowList[0].flowTemplateJson.properties;\n          flowTemplateJson.properties.formName = defaultProperties.formName;\n          flowTemplateJson.properties.formId = defaultProperties.formId;\n          const formFieldList = defaultProperties.allFormMap['form_' + defaultProperties.formId] || [];\n          flowTemplateJson.properties.allFormMap['form_' + defaultProperties.formId] = formFieldList;\n          this.formFieldList = formFieldList;\n          flowTemplateJson.properties.formOperates = this.initFormOperates(flowTemplateJson, true);\n        }\n        this.dataForm = {\n          id: '',\n          flowId: this.jnpf.idGenerator(),\n          fullName: '',\n          flowTemplateJson: flowTemplateJson\n        }\n      })\n    },\n    editFlow(item) {\n      this.handleType = 'edit'\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        this.dataForm = JSON.parse(JSON.stringify(item))\n      })\n    },\n    delFlow(index, isDelete) {\n      if (this.flowList.length === 1) return this.$message.warning(`最后一个流程不能删除`);\n      if (isDelete) return this.$message.warning(`流程已被使用，不能删除`);\n      this.$confirm('此操作将永久删除该流程，是否继续？', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.flowList.splice(index, 1)\n        this.activeConf = this.flowList[this.flowList.length - 1]\n        this.key = +new Date()\n      }).catch(() => { })\n    },\n    copyFlow(item) {\n      let itemCopy = JSON.parse(JSON.stringify(item))\n      this.$confirm('您确定要复制该流程，是否继续？', '提示', {\n        type: 'warning'\n      }).then(() => {\n        let flowId = this.jnpf.idGenerator()\n        let fullName = itemCopy.fullName + flowId\n        if (fullName.length > 50) {\n          fullName = fullName.substring(fullName.length - 50)\n        }\n        const data = {\n          id: '',\n          flowId,\n          fullName,\n          flowTemplateJson: itemCopy.flowTemplateJson\n        }\n        this.flowList.push(data)\n      }).catch(() => { })\n    },\n    changeFlow(item) {\n      if (item.flowId === this.activeConf.flowId) return\n      this.activeConf = item\n      this.key = +new Date()\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          if (this.handleType === 'add') {\n            let boo = this.flowList.some(o => o.fullName === this.dataForm.fullName)\n            if (boo) return this.$message.warning('流程名称重复，请重新输入')\n            this.flowList.push(JSON.parse(JSON.stringify(this.dataForm)))\n            this.activeConf = this.flowList[this.flowList.length - 1]\n            this.key = +new Date()\n          } else {\n            let boo = this.flowList.some(o => o.fullName === this.dataForm.fullName && o.flowId !== this.dataForm.flowId)\n            if (boo) return this.$message.warning('流程名称重复，请重新输入')\n            for (let i = 0; i < this.flowList.length; i++) {\n              if (this.dataForm.flowId === this.flowList[i].flowId) {\n                this.$set(this.flowList[i], 'fullName', this.dataForm.fullName)\n                break\n              }\n            }\n          }\n          this.visible = false\n        }\n      })\n    },\n    transformFieldList(formFieldList) {\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__vModel__) {\n          const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table'\n          let obj = {\n            ...data,\n            id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            __vModel__: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n            __config__: {\n              label: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n              jnpfKey: data.__config__.jnpfKey,\n              required: data.__config__.required,\n              isSubTable: data.__config__.isSubTable,\n            },\n          }\n          delete obj.on\n          delete obj.style\n          delete obj.options\n          delete obj.props\n          delete obj.templateJson\n          delete obj.columnOptions\n          delete obj.addTableConf\n          delete obj.tableConf\n          list.push(obj)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n      }\n      loop(formFieldList)\n      return list\n    },\n    initFormOperates(target, isUpdate, isSameForm) {\n      const formOperates = target.properties && target.properties.formOperates || []\n      let res = []\n      const getWriteById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].write : NodeUtils.isStartNode(target)\n      }\n      const getReadById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].read : true\n      }\n      const getRequiredById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].required : false\n      }\n      if (!formOperates.length || isUpdate) {\n        for (let i = 0; i < this.formFieldList.length; i++) {\n          const data = this.formFieldList[i];\n          res.push({\n            id: data.__vModel__,\n            name: data.__config__.label,\n            required: !isSameForm ? data.__config__.required : data.__config__.required || getRequiredById(data.__vModel__),\n            requiredDisabled: requiredDisabled(data.__config__.jnpfKey) || data.__config__.required,\n            jnpfKey: data.__config__.jnpfKey,\n            dataType: getDataType(data),\n            read: !isSameForm ? true : getReadById(data.__vModel__),\n            write: !isSameForm ? NodeUtils.isStartNode(target) : getWriteById(data.__vModel__),\n          })\n        }\n      } else {\n        res = formOperates\n      }\n      return res\n    },\n    updateData() {\n      for (let i = 0; i < this.flowList.length; i++) {\n        this.flowList[i].flowTemplateJson = Object.assign(NodeUtils.createNode('start'), this.flowList[i].flowTemplateJson)\n        this.updateAllFormMap(this.flowList[i].flowTemplateJson);\n      }\n    },\n    updateAllFormMap(flowTemplateJson) {\n      if (!flowTemplateJson.properties.allFormMap) flowTemplateJson.properties.allFormMap = {};\n      if (!flowTemplateJson.properties.formFieldList && (!this.formInfo.onlineDev || !this.formInfo.onlineFormId)) return;\n      if (this.formInfo.onlineDev && this.formInfo.onlineFormId) {\n        flowTemplateJson.properties.allFormMap['form_' + flowTemplateJson.properties.formId] = this.formFieldList;\n      }\n      const loop = data => {\n        if (Array.isArray(data)) data.forEach(d => loop(d))\n        if (data.type === 'approver' || data.type === 'start') {\n          // 兼容旧数据，将表单字段都整理到allFormMap\n          if (data.properties.formFieldList?.length) {\n            if (data.properties.formId) {\n              const formFieldList = data.properties.formFieldList.map(o => (o.id ? o : { ...o, id: o.__vModel__, fullName: o.__config__.label }));\n              flowTemplateJson.properties.allFormMap['form_' + data.properties.formId] = formFieldList;\n            }\n            delete data.properties.formFieldList;\n          }\n          if (this.formInfo.onlineDev && this.formInfo.onlineFormId) data.properties.formOperates = this.initFormOperates(data, true, true);\n        }\n        if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n        if (data.childNode) loop(data.childNode)\n      }\n      loop(flowTemplateJson)\n    },\n  }\n};\n",null]}