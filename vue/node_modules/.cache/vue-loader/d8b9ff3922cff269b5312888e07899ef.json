{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/msgCenter/msgTemplate/Detail.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/msgCenter/msgTemplate/Detail.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMsgTemplateDetail } from '@/api/msgCenter/msgTemplate'\nexport default {\n  name: 'msgTemplate-Detail',\n  data() {\n    return {\n      dataForm: {\n        id: '',\n        fullName: '',\n        enCode: '',\n        templateType: 0,\n        messageType: '',\n        messageSource: '',\n        enabledMark: 0,\n        sortCode: '',\n        description: '',\n        title: '',\n        content: '',\n        templateCode: '',\n      },\n      btnLoading: false,\n      loading: false,\n      messageSourceList: [],\n      messageTypeList: [],\n      smsList: [],\n      keyword: \"\",\n      parameterList: [],\n      allParameterList: [],\n    }\n  },\n  methods: {\n    init(id, messageTypeList) {\n      this.dataForm.id = id || ''\n      this.messageTypeList = messageTypeList || []\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        this.getConfig()\n      })\n    },\n    getConfig() {\n      this.loading = true\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSourceType' }).then((res) => {\n        this.messageSourceList = res\n        if (this.dataForm.id) {\n          getMsgTemplateDetail(this.dataForm.id).then(res => {\n            this.loading = false\n            this.dataForm = res.data\n            this.parameterList = res.data.templateParamList\n            this.allParameterList = this.parameterList\n            if (this.dataForm.enabledMark) this.dataForm.enabledMark = Number(this.dataForm.enabledMark)\n            this.smsList = res.data.smsFieldList\n            const sourceItem = this.messageSourceList.find(item => {\n              return item.enCode == this.dataForm.messageSource\n            })\n            const typeItem = this.messageTypeList.find(item => {\n              return item.enCode == this.dataForm.messageType\n            })\n            if (sourceItem) this.dataForm.messageSourceVal = sourceItem.fullName\n            if (typeItem) this.dataForm.messageTypeVal = typeItem.fullName\n          }).catch(() => {\n            this.loading = false\n          })\n        }\n      })\n    },\n    goBack() {\n      this.$emit('close')\n    },\n    searchParameter() {\n      this.parameterList = this.allParameterList.filter(item => {\n        if (item.field.toLowerCase().includes(this.keyword.toLowerCase()) || item.fieldName.toLowerCase().includes(this.keyword.toLowerCase())) {\n          return item\n        }\n      })\n    },\n  }\n}\n",null]}