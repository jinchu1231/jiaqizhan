{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/components/HasFreeApprover.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/components/HasFreeApprover.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { Candidates, FreeApprover } from '@/api/workFlow/FlowBefore'\nimport SignImgDialog from '@/components/SignImgDialog'\nimport CandidateUserSelect from './CandidateUserSelect'\nimport { mapGetters } from \"vuex\"\nexport default {\n  components: { CandidateUserSelect, SignImgDialog },\n  props: ['taskId', 'formData', 'properties'],\n  data() {\n    return {\n      key: +new Date(),\n      formConf: {},\n      currentView: '',\n      hasFreeApproverForm: {\n        freeApproverUserId: \"\",\n        freeApproverType: 1,\n        handleOpinion: '',\n        fileList: [],\n        branchList: [],\n        candidateList: []\n      },\n      branchList: [],\n      candidateType: 1,\n      btnLoading: false,\n      freeApproverUserId: '',\n      rules: {\n        freeApproverUserId: [\n          { required: true, message: '加签人员不能为空', trigger: 'change' }\n        ],\n        branchList: [{ required: true, message: `选择分支不能为空`, trigger: 'click' }]\n      },\n      signImg: '',\n      signVisible: false,\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo'])\n  },\n  methods: {\n    onOpen() {\n      this.signImg = \"\"\n      if (this.properties && this.properties.hasSign) this.signImg = this.userInfo.signImg\n      Candidates(this.taskId, this.formData).then(res => {\n        let data = res.data\n        this.candidateType = data.type\n        this.candidateLoading = false\n        this.branchList = []\n        if (data.type == 1) {\n          this.branchList = res.data.list.filter(o => o.isBranchFlow)\n          let list = res.data.list.filter(o => !o.isBranchFlow && o.isCandidates)\n          this.hasFreeApproverForm.candidateList = list.map(o => ({\n            ...o,\n            isDefault: true,\n            label: '审批人',\n            value: [],\n            rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n          }))\n          this.$nextTick(() => {\n            this.$refs['hasFreeApproverForm'].resetFields()\n          })\n        } else if (data.type == 2) {\n          let list = res.data.list.filter(o => o.isCandidates)\n          this.hasFreeApproverForm.candidateList = list.map(o => ({\n            ...o,\n            label: '审批人',\n            value: [],\n            rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n          }))\n          this.$nextTick(() => {\n            this.$refs['hasFreeApproverForm'].resetFields()\n          })\n        }\n      })\n    },\n    onClose() {\n      this.$emit('update:visible', false)\n    },\n    close(e) {\n      this.$emit('update:visible', false)\n    },\n    onBranchChange(val) {\n      const defaultList = this.hasFreeApproverForm.candidateList.filter(o => o.isDefault)\n      if (!val.length) return this.hasFreeApproverForm.candidateList = defaultList\n      let list = []\n      for (let i = 0; i < val.length; i++) {\n        inner: for (let j = 0; j < this.branchList.length; j++) {\n          let o = this.branchList[j]\n          if (val[i] === o.nodeId && o.isCandidates) {\n            list.push({\n              ...o,\n              label: '审批人',\n              value: [],\n              rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n            })\n            break inner\n          }\n        }\n      }\n      this.hasFreeApproverForm.candidateList = [...defaultList, ...list]\n    },\n    dataFormSubmit() {\n      this.$refs['hasFreeApproverForm'].validate((valid) => {\n        if (!valid) return\n        this.btnLoading = true\n        let query = {\n          handleOpinion: this.hasFreeApproverForm.handleOpinion,\n          fileList: this.hasFreeApproverForm.fileList,\n          freeApproverType: this.hasFreeApproverForm.freeApproverType,\n          freeApproverUserId: this.hasFreeApproverForm.freeApproverUserId,\n          branchList: this.hasFreeApproverForm.branchList,\n          formData: this.formData.formData\n        }\n        if (this.hasFreeApproverForm.candidateList.length) {\n          let candidateList = {}\n          for (let i = 0; i < this.hasFreeApproverForm.candidateList.length; i++) {\n            candidateList[this.hasFreeApproverForm.candidateList[i].nodeId] = this.hasFreeApproverForm.candidateList[i].value\n          }\n          query.candidateList = candidateList\n        }\n        if (this.signImg) {\n          query.signImg = this.signImg\n        }\n        FreeApprover(this.taskId, query).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.btnLoading = false\n              this.$emit('close', true)\n            }\n          })\n        }).catch(() => { this.btnLoading = false })\n      })\n    },\n    addSign() {\n      this.signVisible = true\n      this.$nextTick(() => {\n        this.$refs.SignImg.init()\n      })\n    },\n    signDialog(val) {\n      this.signVisible = false\n      if (val) {\n        this.signImg = val\n      }\n    },\n  }\n}\n",null]}