{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/FormScript.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/FormScript.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport JNPFCodeEditor from '@/components/JNPFEditor/monaco'\nimport ScriptDemo from './ScriptDemo';\nexport default {\n  components: { JNPFCodeEditor, ScriptDemo },\n  props: ['tpl', 'fields', 'type'],\n  inject: [\"getFormInfo\"],\n  data() {\n    return {\n      text: '',\n      treeData: [],\n      treeProps: {\n        children: 'children',\n        label: 'label',\n      },\n      treeData: [],\n      options: {\n        language: 'javascript'\n      },\n    }\n  },\n  methods: {\n    onOpen() {\n      this.text = this.tpl\n      this.getTree()\n      this.$nextTick(() => {\n        this.$refs.CodeEditor.changeEditor({\n          value: this.text,\n          options: this.options\n        })\n      });\n    },\n    getTree() {\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.jnpfKey !== 'table' && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__vModel__) {\n          if (data.__config__.jnpfKey === 'table') {\n            let item = {\n              value: data.__vModel__,\n              label: data.__config__.label,\n              children: []\n            }\n            let children = []\n            if (data.__config__.children && Array.isArray(data.__config__.children) && data.__config__.children.length) {\n              for (let i = 0; i < data.__config__.children.length; i++) {\n                const child = data.__config__.children[i]\n                if (child.__vModel__) {\n                  children.push({ value: data.__vModel__ + '.' + child.__vModel__, label: child.__config__.label })\n                }\n              }\n            }\n            item.children = children\n            list.push(item)\n          } else {\n            list.push({ value: data.__vModel__, label: data.__config__.label })\n          }\n        }\n      }\n      loop(this.fields)\n      let topItem = {\n        value: +new Date(),\n        label: this.getFormInfo().fullName,\n        top: true,\n        children: list\n      }\n      this.treeData = [topItem]\n    },\n    onClose() {\n      this.$emit('updateScript', this.text)\n      this.closeDialog()\n    },\n    closeDialog() {\n      this.$emit('update:visible', false)\n    },\n    handleNodeClick(item, node) {\n      if (item.top) return\n      if (item.children) return\n      this.$refs.CodeEditor.insert(item.value);\n    }\n  }\n}\n",null]}