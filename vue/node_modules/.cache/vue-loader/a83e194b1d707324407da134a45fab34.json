{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/OrgUsersSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/OrgUsersSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getImUserSelector, getSelectedList } from '@/api/permission/user'\nimport { getPositionSelector } from '@/api/permission/position'\nimport { getRoleSelector } from '@/api/permission/role'\nimport { getGroupSelector } from '@/api/permission/group'\nconst defaultSelectedList = [\n  {\n    id: \"department\",\n    type: \"department\",\n    fullName: \"部门\",\n    icon: \"icon-ym icon-ym-tree-department1\",\n    children: []\n  },\n  {\n    id: \"position\",\n    type: \"position\",\n    fullName: \"岗位\",\n    icon: \"icon-ym icon-ym-tree-position1\",\n    children: []\n  },\n  {\n    id: \"user\",\n    type: \"user\",\n    fullName: \"用户\",\n    icon: \"icon-ym icon-ym-tree-user2\",\n    children: []\n  },\n  {\n    id: \"group\",\n    type: \"group\",\n    fullName: \"分组\",\n    icon: \"icon-ym icon-ym-generator-group1\",\n    children: []\n  },\n  {\n    id: \"role\",\n    type: \"role\",\n    fullName: \"角色\",\n    icon: \"icon-ym icon-ym-generator-role\",\n    children: []\n  }\n]\nexport default {\n  name: 'JNPF-userTransfer',\n  data() {\n    return {\n      allLoading: false,\n      loading: false,\n      roleLoading: true,\n      positionLoading: true,\n      groupLoading: true,\n      activeName: '',\n      treeData: [],\n      treeData2: [],\n      treeData3: [],\n      treeData4: [],\n      selectedData: [],\n      props: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      nodeId: '0',\n      ids: [],\n      total: 0,\n      isAsync: false,\n      finish: false,\n      pagination: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20,\n      },\n      selectedList: defaultSelectedList\n    }\n  },\n  props: {\n    height: {\n      type: String,\n      default: \"400px\"\n    },\n    dynamicList: {\n      type: Array,\n      default: () => []\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    activeName(val) {\n      this.pagination.keyword = ''\n      this.isAsync = false\n      if (!val) return\n      this.nodeId = '0'\n      this.treeData = []\n      this.getData()\n    },\n    selectedData(val) {\n      if (!this.multiple) return\n      this.selectedList = JSON.parse(JSON.stringify(defaultSelectedList))\n      for (let i = 0; i < this.selectedData.length; i++) {\n        const item = this.selectedData[i];\n        const type = item.type == 'company' ? 'department' : item.type\n        this.selectedList.map(res => {\n          if (res.type == type) {\n            const obj = {\n              fullName: item.fullName,\n              type: type,\n              headIcon: item.headIcon,\n              organize: item.organize,\n              id: item.id\n            }\n            res.children.push(obj)\n          }\n        })\n      }\n    }\n  },\n  methods: {\n    init() {\n      this.getOtherData()\n      this.selectedData = []\n      this.ids = []\n      this.pagination.keyword = ''\n      this.activeName = ''\n      this.nodeId = '0'\n      this.isAsync = false\n      this.finish = false\n      this.$nextTick(() => {\n        this.activeName = 'department'\n        this.getSelectList()\n      })\n    },\n    bindScroll() {\n      let _this = this,\n        vBody = _this.$refs.infiniteBody;\n      vBody.addEventListener(\"scroll\", function () {\n        if (vBody.scrollHeight - vBody.clientHeight - vBody.scrollTop <= 200 && !_this.loading && !_this.finish) {\n          _this.pagination.currentPage += 1\n          _this.getList()\n        }\n      });\n    },\n    getData() {\n      if (this.activeName === 'department') {\n        this.getList()\n      } else if (['role', 'position', 'group'].includes(this.activeName)) {\n        this.$refs[this.activeName + 'Tree'] && this.$refs[this.activeName + 'Tree'].filter(this.pagination.keyword)\n      } else {\n        this.loading = false\n      }\n    },\n    getSelectList() {\n      this.allLoading = true\n      if (!this.value.length) return this.allLoading = false\n      getSelectedList(this.value).then(res => {\n        this.selectedData = res.data.list.map(o => ({\n          ...o, id: o.type ? o.id + '--' + o.type : o.id, icon: o.type === 'system' ? 'icon-ym icon-ym-tree-user2' : o.icon,\n          organize: o.organize\n        }))\n        this.ids = this.selectedData.map(o => o.id)\n        this.allLoading = false\n      })\n    },\n    getOtherData() {\n      this.roleLoading = true\n      this.positionLoading = true\n      this.groupLoading = true\n      getRoleSelector().then(res => {\n        this.treeData2 = res.data.list\n        this.roleLoading = false\n      })\n      getPositionSelector().then(res => {\n        this.treeData3 = res.data.list\n        this.positionLoading = false\n      })\n      getGroupSelector().then(res => {\n        this.treeData4 = res.data\n        this.groupLoading = false\n      })\n    },\n    search() {\n      this.nodeId = '0'\n      this.treeData = []\n      this.pagination.currentPage = 1\n      this.isAsync = !!this.pagination.keyword\n      this.finish = false\n      if (this.isAsync && this.activeName === 'department') {\n        this.$nextTick(() => {\n          this.bindScroll()\n        })\n      }\n      this.getData()\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    getList() {\n      this.loading = true\n      if (this.pagination.keyword) this.nodeId = '0'\n      getImUserSelector(this.nodeId, this.pagination).then(res => {\n        if (this.pagination.keyword) {\n          if (res.data.list.length < this.pagination.pageSize) {\n            this.finish = true\n          }\n          this.treeData = [...this.treeData, ...res.data.list]\n          this.total = res.data.pagination.total\n        } else {\n          this.treeData = res.data.list\n        }\n        this.loading = false\n      })\n    },\n    loadNode(node, resolve) {\n      if (node.level === 0) {\n        this.nodeId = '0'\n        return resolve(this.treeData)\n      }\n      this.nodeId = node.data.id\n      getImUserSelector(this.nodeId).then(res => {\n        resolve(res.data.list)\n      })\n    },\n    handleNodeClick(data) {\n      const usableList = this.multiple ? ['company', 'department', 'role', 'position', 'group', 'user', 'system'] : ['user']\n      if (!usableList.includes(data.type)) return\n      const boo = this.selectedData.some(o => o.id === data.id + '--' + data.type)\n      let item = JSON.parse(JSON.stringify(data))\n      item.id += '--' + item.type\n      if (boo) return\n      this.multiple ? this.selectedData.push(item) : this.selectedData = [item]\n      this.multiple ? this.ids.push(item.id) : this.ids = [item.id]\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeAll() {\n      this.selectedData = []\n      this.ids = []\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeMulData(id) {\n      const index = this.selectedData.findIndex((item) => {\n        return item.id == id\n      })\n      if (index != -1) this.selectedData.splice(index, 1)\n      this.ids = this.selectedData.map(o => o.id)\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n  }\n};\n",null]}