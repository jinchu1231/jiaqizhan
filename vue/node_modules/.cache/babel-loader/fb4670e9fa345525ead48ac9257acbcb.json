{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HSchedule/calendar.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HSchedule/calendar.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calendar = void 0;\nrequire(\"core-js/modules/es6.regexp.to-string\");\n/**\n * @1900-2100区间内的公历、农历互转\n * @charset UTF-8\n * @Author  Jea杨(JJonline@JJonline.Cn)\n * @Time    2014-7-21\n * @Time    2016-8-13 Fixed 2033hex、Attribution Annals\n * @Time    2016-9-25 Fixed lunar LeapMonth Param Bug\n * @Time    2017-7-24 Fixed use getTerm Func Param Error.use solar year,NOT lunar year\n * @Version 1.0.3\n * @公历转农历：calendar.solar2lunar(1987,11,01); //[you can ignore params of prefix 0]\n * @农历转公历：calendar.lunar2solar(1987,09,10); //[you can ignore params of prefix 0]\n */\nvar calendar = exports.calendar = {\n  /**\n   * 农历1900-2100的润大小信息表\n   * @Array Of Property\n   * @return Hex\n   */\n  lunarInfo: [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2,\n  //1900-1909\n  0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977,\n  //1910-1919\n  0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970,\n  //1920-1929\n  0x06566, 0x0d4a0, 0x0ea50, 0x16a95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950,\n  //1930-1939\n  0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557,\n  //1940-1949\n  0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0,\n  //1950-1959\n  0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0,\n  //1960-1969\n  0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6,\n  //1970-1979\n  0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570,\n  //1980-1989\n  0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x05ac0, 0x0ab60, 0x096d5, 0x092e0,\n  //1990-1999\n  0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5,\n  //2000-2009\n  0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930,\n  //2010-2019\n  0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530,\n  //2020-2029\n  0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45,\n  //2030-2039\n  0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0,\n  //2040-2049\n  /**Add By JJonline@JJonline.Cn**/\n  0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0,\n  //2050-2059\n  0x092e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4,\n  //2060-2069\n  0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0,\n  //2070-2079\n  0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160,\n  //2080-2089\n  0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252,\n  //2090-2099\n  0x0d520],\n  //2100\n\n  /**\n   * 公历每个月份的天数普通表\n   * @Array Of Property\n   * @return Number\n   */\n  solarMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  /**\n   * 天干地支之天干速查表\n   * @Array Of Property trans[\"甲\",\"乙\",\"丙\",\"丁\",\"戊\",\"己\",\"庚\",\"辛\",\"壬\",\"癸\"]\n   * @return Cn string\n   */\n  Gan: [\"\\u7532\", \"\\u4E59\", \"\\u4E19\", \"\\u4E01\", \"\\u620A\", \"\\u5DF1\", \"\\u5E9A\", \"\\u8F9B\", \"\\u58EC\", \"\\u7678\"],\n  /**\n   * 天干地支之地支速查表\n   * @Array Of Property\n   * @trans[\"子\",\"丑\",\"寅\",\"卯\",\"辰\",\"巳\",\"午\",\"未\",\"申\",\"酉\",\"戌\",\"亥\"]\n   * @return Cn string\n   */\n  Zhi: [\"\\u5B50\", \"\\u4E11\", \"\\u5BC5\", \"\\u536F\", \"\\u8FB0\", \"\\u5DF3\", \"\\u5348\", \"\\u672A\", \"\\u7533\", \"\\u9149\", \"\\u620C\", \"\\u4EA5\"],\n  /**\n   * 天干地支之地支速查表<=>生肖\n   * @Array Of Property\n   * @trans[\"鼠\",\"牛\",\"虎\",\"兔\",\"龙\",\"蛇\",\"马\",\"羊\",\"猴\",\"鸡\",\"狗\",\"猪\"]\n   * @return Cn string\n   */\n  Animals: [\"\\u9F20\", \"\\u725B\", \"\\u864E\", \"\\u5154\", \"\\u9F99\", \"\\u86C7\", \"\\u9A6C\", \"\\u7F8A\", \"\\u7334\", \"\\u9E21\", \"\\u72D7\", \"\\u732A\"],\n  /**\n   * 阳历节日\n   */\n  festival: {\n    '1-1': {\n      title: '元旦节'\n    },\n    '2-14': {\n      title: '情人节'\n    },\n    '5-1': {\n      title: '劳动节'\n    },\n    '5-4': {\n      title: '青年节'\n    },\n    '6-1': {\n      title: '儿童节'\n    },\n    '9-10': {\n      title: '教师节'\n    },\n    '10-1': {\n      title: '国庆节'\n    },\n    '12-25': {\n      title: '圣诞节'\n    },\n    '3-8': {\n      title: '妇女节'\n    },\n    '3-12': {\n      title: '植树节'\n    },\n    '4-1': {\n      title: '愚人节'\n    },\n    '5-12': {\n      title: '护士节'\n    },\n    '7-1': {\n      title: '建党节'\n    },\n    '8-1': {\n      title: '建军节'\n    },\n    '12-24': {\n      title: '平安夜'\n    }\n  },\n  /**\n   * 农历节日\n   */\n  lFestival: {\n    '12-30': {\n      title: '除夕'\n    },\n    '1-1': {\n      title: '春节'\n    },\n    '1-15': {\n      title: '元宵节'\n    },\n    '2-2': {\n      title: '龙抬头'\n    },\n    '5-5': {\n      title: '端午节'\n    },\n    '7-7': {\n      title: '七夕节'\n    },\n    '7-15': {\n      title: '中元节'\n    },\n    '8-15': {\n      title: '中秋节'\n    },\n    '9-9': {\n      title: '重阳节'\n    },\n    '10-1': {\n      title: '寒衣节'\n    },\n    '10-15': {\n      title: '下元节'\n    },\n    '12-8': {\n      title: '腊八节'\n    },\n    '12-23': {\n      title: '北方小年'\n    },\n    '12-24': {\n      title: '南方小年'\n    }\n  },\n  /**\n   * 返回默认定义的阳历节日\n   */\n  getFestival: function getFestival() {\n    return this.festival;\n  },\n  /**\n   * 返回默认定义的内容里节日\n   */\n  getLunarFestival: function getLunarFestival() {\n    return this.lFestival;\n  },\n  /**\n   *\n   * @param param {Object} 按照festival的格式输入数据，设置阳历节日\n   */\n  setFestival: function setFestival() {\n    var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.festival = param;\n  },\n  /**\n   *\n   * @param param {Object} 按照lFestival的格式输入数据，设置农历节日\n   */\n  setLunarFestival: function setLunarFestival() {\n    var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.lFestival = param;\n  },\n  /**\n   * 24节气速查表\n   * @Array Of Property\n   * @trans[\"小寒\",\"大寒\",\"立春\",\"雨水\",\"惊蛰\",\"春分\",\"清明\",\"谷雨\",\"立夏\",\"小满\",\"芒种\",\"夏至\",\"小暑\",\"大暑\",\"立秋\",\"处暑\",\"白露\",\"秋分\",\"寒露\",\"霜降\",\"立冬\",\"小雪\",\"大雪\",\"冬至\"]\n   * @return Cn string\n   */\n  solarTerm: [\"\\u5C0F\\u5BD2\", \"\\u5927\\u5BD2\", \"\\u7ACB\\u6625\", \"\\u96E8\\u6C34\", \"\\u60CA\\u86F0\", \"\\u6625\\u5206\", \"\\u6E05\\u660E\", \"\\u8C37\\u96E8\", \"\\u7ACB\\u590F\", \"\\u5C0F\\u6EE1\", \"\\u8292\\u79CD\", \"\\u590F\\u81F3\", \"\\u5C0F\\u6691\", \"\\u5927\\u6691\", \"\\u7ACB\\u79CB\", \"\\u5904\\u6691\", \"\\u767D\\u9732\", \"\\u79CB\\u5206\", \"\\u5BD2\\u9732\", \"\\u971C\\u964D\", \"\\u7ACB\\u51AC\", \"\\u5C0F\\u96EA\", \"\\u5927\\u96EA\", \"\\u51AC\\u81F3\"],\n  /**\n   * 1900-2100各年的24节气日期速查表\n   * @Array Of Property\n   * @return 0x string For splice\n   */\n  sTermInfo: ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e', '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722'],\n  /**\n   * 数字转中文速查表\n   * @Array Of Property\n   * @trans ['日','一','二','三','四','五','六','七','八','九','十']\n   * @return Cn string\n   */\n  nStr1: [\"\\u65E5\", \"\\u4E00\", \"\\u4E8C\", \"\\u4E09\", \"\\u56DB\", \"\\u4E94\", \"\\u516D\", \"\\u4E03\", \"\\u516B\", \"\\u4E5D\", \"\\u5341\"],\n  /**\n   * 日期转农历称呼速查表\n   * @Array Of Property\n   * @trans ['初','十','廿','卅']\n   * @return Cn string\n   */\n  nStr2: [\"\\u521D\", \"\\u5341\", \"\\u5EFF\", \"\\u5345\"],\n  /**\n   * 月份转农历称呼速查表\n   * @Array Of Property\n   * @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']\n   * @return Cn string\n   */\n  nStr3: [\"\\u6B63\", \"\\u4E8C\", \"\\u4E09\", \"\\u56DB\", \"\\u4E94\", \"\\u516D\", \"\\u4E03\", \"\\u516B\", \"\\u4E5D\", \"\\u5341\", \"\\u51AC\", \"\\u814A\"],\n  /**\n   * 返回农历y年一整年的总天数\n   * @param y lunar Year\n   * @return Number\n   * @eg:var count = calendar.lYearDays(1987) ;//count=387\n   */\n  lYearDays: function lYearDays(y) {\n    var i,\n      sum = 348;\n    for (i = 0x8000; i > 0x8; i >>= 1) {\n      sum += this.lunarInfo[y - 1900] & i ? 1 : 0;\n    }\n    return sum + this.leapDays(y);\n  },\n  /**\n   * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0\n   * @param y lunar Year\n   * @return Number (0-12)\n   * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6\n   */\n  leapMonth: function leapMonth(y) {\n    //闰字编码 \\u95f0\n    return this.lunarInfo[y - 1900] & 0xf;\n  },\n  /**\n   * 返回农历y年闰月的天数 若该年没有闰月则返回0\n   * @param y lunar Year\n   * @return Number (0、29、30)\n   * @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29\n   */\n  leapDays: function leapDays(y) {\n    if (this.leapMonth(y)) {\n      return this.lunarInfo[y - 1900] & 0x10000 ? 30 : 29;\n    }\n    return 0;\n  },\n  /**\n   * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法\n   * @param y lunar Year\n   * @param m lunar Month\n   * @return Number (-1、29、30)\n   * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29\n   */\n  monthDays: function monthDays(y, m) {\n    if (m > 12 || m < 1) {\n      return -1;\n    } //月份参数从1至12，参数错误返回-1\n    return this.lunarInfo[y - 1900] & 0x10000 >> m ? 30 : 29;\n  },\n  /**\n   * 返回公历(!)y年m月的天数\n   * @param y solar Year\n   * @param m solar Month\n   * @return Number (-1、28、29、30、31)\n   * @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30\n   */\n  solarDays: function solarDays(y, m) {\n    if (m > 12 || m < 1) {\n      return -1;\n    } //若参数错误 返回-1\n    var ms = m - 1;\n    if (ms === 1) {\n      //2月份的闰平规律测算后确认返回28或29\n      return y % 4 === 0 && y % 100 !== 0 || y % 400 === 0 ? 29 : 28;\n    } else {\n      return this.solarMonth[ms];\n    }\n  },\n  /**\n   * 农历年份转换为干支纪年\n   * @param  lYear 农历年的年份数\n   * @return Cn string\n   */\n  toGanZhiYear: function toGanZhiYear(lYear) {\n    var ganKey = (lYear - 3) % 10;\n    var zhiKey = (lYear - 3) % 12;\n    if (ganKey === 0) ganKey = 10; //如果余数为0则为最后一个天干\n    if (zhiKey === 0) zhiKey = 12; //如果余数为0则为最后一个地支\n    return this.Gan[ganKey - 1] + this.Zhi[zhiKey - 1];\n  },\n  /**\n   * 公历月、日判断所属星座\n   * @param  cMonth [description]\n   * @param  cDay [description]\n   * @return Cn string\n   */\n  toAstro: function toAstro(cMonth, cDay) {\n    var s = \"\\u6469\\u7FAF\\u6C34\\u74F6\\u53CC\\u9C7C\\u767D\\u7F8A\\u91D1\\u725B\\u53CC\\u5B50\\u5DE8\\u87F9\\u72EE\\u5B50\\u5904\\u5973\\u5929\\u79E4\\u5929\\u874E\\u5C04\\u624B\\u6469\\u7FAF\";\n    var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22];\n    return s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + \"\\u5EA7\"; //座\n  },\n  /**\n   * 传入offset偏移量返回干支\n   * @param offset 相对甲子的偏移量\n   * @return Cn string\n   */\n  toGanZhi: function toGanZhi(offset) {\n    return this.Gan[offset % 10] + this.Zhi[offset % 12];\n  },\n  /**\n   * 传入公历(!)y年获得该年第n个节气的公历日期\n   * @param y y公历年(1900-2100)\n   * @param n n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起\n   * @return day Number\n   * @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春\n   */\n  getTerm: function getTerm(y, n) {\n    if (y < 1900 || y > 2100 || n < 1 || n > 24) {\n      return -1;\n    }\n    var _table = this.sTermInfo[y - 1900];\n    var _calcDay = [];\n    for (var index = 0; index < _table.length; index += 5) {\n      var chunk = parseInt('0x' + _table.substr(index, 5)).toString();\n      _calcDay.push(chunk[0], chunk.substr(1, 2), chunk[3], chunk.substr(4, 2));\n    }\n    return parseInt(_calcDay[n - 1]);\n  },\n  /**\n   * 传入农历数字月份返回汉语通俗表示法\n   * @param m lunar month\n   * @return Cn string\n   * @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'\n   */\n  toChinaMonth: function toChinaMonth(m) {\n    // 月 => \\u6708\n    if (m > 12 || m < 1) {\n      return -1;\n    } //若参数错误 返回-1\n    var s = this.nStr3[m - 1];\n    s += \"\\u6708\"; //加上月字\n    return s;\n  },\n  /**\n   * 传入农历日期数字返回汉字表示法\n   * @param d lunar day\n   * @return Cn string\n   * @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'\n   */\n  toChinaDay: function toChinaDay(d) {\n    //日 => \\u65e5\n    var s;\n    switch (d) {\n      case 10:\n        s = \"\\u521D\\u5341\";\n        break;\n      case 20:\n        s = \"\\u4E8C\\u5341\";\n        break;\n      case 30:\n        s = \"\\u4E09\\u5341\";\n        break;\n      default:\n        s = this.nStr2[Math.floor(d / 10)];\n        s += this.nStr1[d % 10];\n    }\n    return s;\n  },\n  /**\n   * 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”\n   * @param y year\n   * @return Cn string\n   * @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'\n   */\n  getAnimal: function getAnimal(y) {\n    return this.Animals[(y - 4) % 12];\n  },\n  /**\n   * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON\n   * !important! 公历参数区间1900.1.31~2100.12.31\n   * @param yPara  solar year\n   * @param mPara  solar month\n   * @param dPara  solar day\n   * @return JSON object\n   * @eg:console.log(calendar.solar2lunar(1987,11,01));\n   */\n  solar2lunar: function solar2lunar(yPara, mPara, dPara) {\n    var y = parseInt(yPara);\n    var m = parseInt(mPara);\n    var d = parseInt(dPara);\n    //年份限定、上限\n    if (y < 1900 || y > 2100) {\n      return -1; // undefined转换为数字变为NaN\n    }\n    //公历传参最下限\n    if (y === 1900 && m === 1 && d < 31) {\n      return -1;\n    }\n\n    //未传参  获得当天\n    var objDate;\n    if (!y) {\n      objDate = new Date();\n    } else {\n      objDate = new Date(y, parseInt(m) - 1, d);\n    }\n    var i,\n      leap = 0,\n      temp = 0;\n    //修正ymd参数\n    y = objDate.getFullYear();\n    m = objDate.getMonth() + 1;\n    d = objDate.getDate();\n    var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) / 86400000;\n    for (i = 1900; i < 2101 && offset > 0; i++) {\n      temp = this.lYearDays(i);\n      offset -= temp;\n    }\n    if (offset < 0) {\n      offset += temp;\n      i--;\n    }\n\n    //是否今天\n    var isTodayObj = new Date(),\n      isToday = false;\n    if (isTodayObj.getFullYear() === y && isTodayObj.getMonth() + 1 === m && isTodayObj.getDate() === d) {\n      isToday = true;\n    }\n    //星期几\n    var nWeek = objDate.getDay(),\n      cWeek = this.nStr1[nWeek];\n    //数字表示周几顺应天朝周一开始的惯例\n    if (nWeek === 0) {\n      nWeek = 7;\n    }\n    //农历年\n    var year = i;\n    leap = this.leapMonth(i); //闰哪个月\n    var isLeap = false;\n\n    //效验闰月\n    for (i = 1; i < 13 && offset > 0; i++) {\n      //闰月\n      if (leap > 0 && i === leap + 1 && isLeap === false) {\n        --i;\n        isLeap = true;\n        temp = this.leapDays(year); //计算农历闰月天数\n      } else {\n        temp = this.monthDays(year, i); //计算农历普通月天数\n      }\n      //解除闰月\n      if (isLeap === true && i === leap + 1) {\n        isLeap = false;\n      }\n      offset -= temp;\n    }\n    // 闰月导致数组下标重叠取反\n    if (offset === 0 && leap > 0 && i === leap + 1) {\n      if (isLeap) {\n        isLeap = false;\n      } else {\n        isLeap = true;\n        --i;\n      }\n    }\n    if (offset < 0) {\n      offset += temp;\n      --i;\n    }\n    //农历月\n    var month = i;\n    //农历日\n    var day = offset + 1;\n    //天干地支处理\n    var sm = m - 1;\n    var gzY = this.toGanZhiYear(year);\n\n    // 当月的两个节气\n    // bugfix-2017-7-24 11:03:38 use lunar Year Param `y` Not `year`\n    var firstNode = this.getTerm(y, m * 2 - 1); //返回当月「节」为几日开始\n    var secondNode = this.getTerm(y, m * 2); //返回当月「节」为几日开始\n\n    // 依据12节气修正干支月\n    var gzM = this.toGanZhi((y - 1900) * 12 + m + 11);\n    if (d >= firstNode) {\n      gzM = this.toGanZhi((y - 1900) * 12 + m + 12);\n    }\n\n    //传入的日期的节气与否\n    var isTerm = false;\n    var Term = null;\n    if (firstNode === d) {\n      isTerm = true;\n      Term = this.solarTerm[m * 2 - 2];\n    }\n    if (secondNode === d) {\n      isTerm = true;\n      Term = this.solarTerm[m * 2 - 1];\n    }\n    //日柱 当月一日与 1900/1/1 相差天数\n    var dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10;\n    var gzD = this.toGanZhi(dayCyclical + d - 1);\n    //该日期所属的星座\n    var astro = this.toAstro(m, d);\n    var solarDate = y + '-' + m + '-' + d;\n    var lunarDate = year + '-' + month + '-' + day;\n    var festival = this.festival;\n    var lFestival = this.lFestival;\n    var festivalDate = m + '-' + d;\n    var lunarFestivalDate = month + '-' + day;\n\n    // bugfix https://github.com/jjonline/calendar.js/issues/29\n    // 农历节日修正：农历12月小月则29号除夕，大月则30号除夕\n    // 此处取巧修正：当前为农历12月29号时增加一次判断并且把lunarFestivalDate设置为12-30以正确取得除夕\n    // 天朝农历节日遇闰月过前不过后的原则，此处取农历12月天数不考虑闰月\n    // 农历润12月在本工具支持的200年区间内仅1574年出现\n    if (month === 12 && day === 29 && this.monthDays(year, month) === 29) {\n      lunarFestivalDate = '12-30';\n    }\n    return {\n      date: solarDate,\n      lunarDate: lunarDate,\n      festival: festival[festivalDate] ? festival[festivalDate].title : null,\n      lunarFestival: lFestival[lunarFestivalDate] ? lFestival[lunarFestivalDate].title : null,\n      'lYear': year,\n      'lMonth': month,\n      'lDay': day,\n      'Animal': this.getAnimal(year),\n      'IMonthCn': (isLeap ? \"\\u95F0\" : '') + this.toChinaMonth(month),\n      'IDayCn': this.toChinaDay(day),\n      'cYear': y,\n      'cMonth': m,\n      'cDay': d,\n      'gzYear': gzY,\n      'gzMonth': gzM,\n      'gzDay': gzD,\n      'isToday': isToday,\n      'isLeap': isLeap,\n      'nWeek': nWeek,\n      'ncWeek': \"\\u661F\\u671F\" + cWeek,\n      'isTerm': isTerm,\n      'Term': Term,\n      'astro': astro\n    };\n  },\n  /**\n   * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON\n   * !important! 参数区间1900.1.31~2100.12.1\n   * @param y  lunar year\n   * @param m  lunar month\n   * @param d  lunar day\n   * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]\n   * @return JSON object\n   * @eg:console.log(calendar.lunar2solar(1987,9,10));\n   */\n  lunar2solar: function lunar2solar(y, m, d, isLeapMonth) {\n    y = parseInt(y);\n    m = parseInt(m);\n    d = parseInt(d);\n    isLeapMonth = !!isLeapMonth;\n    var leapOffset = 0;\n    var leapMonth = this.leapMonth(y);\n    var leapDay = this.leapDays(y);\n    if (isLeapMonth && leapMonth !== m) {\n      return -1;\n    } //传参要求计算该闰月公历 但该年得出的闰月与传参的月份并不同\n    if (y === 2100 && m === 12 && d > 1 || y === 1900 && m === 1 && d < 31) {\n      return -1;\n    } //超出了最大极限值\n    var day = this.monthDays(y, m);\n    var _day = day;\n    //bugFix 2016-9-25\n    //if month is leap, _day use leapDays method\n    if (isLeapMonth) {\n      _day = this.leapDays(y, m);\n    }\n    if (y < 1900 || y > 2100 || d > _day) {\n      return -1;\n    } //参数合法性效验\n\n    //计算农历的时间差\n    var offset = 0;\n    var i;\n    for (i = 1900; i < y; i++) {\n      offset += this.lYearDays(i);\n    }\n    var leap = 0,\n      isAdd = false;\n    for (i = 1; i < m; i++) {\n      leap = this.leapMonth(y);\n      if (!isAdd) {\n        //处理闰月\n        if (leap <= i && leap > 0) {\n          offset += this.leapDays(y);\n          isAdd = true;\n        }\n      }\n      offset += this.monthDays(y, i);\n    }\n    //转换闰月农历 需补充该年闰月的前一个月的时差\n    if (isLeapMonth) {\n      offset += day;\n    }\n    //1900年农历正月一日的公历时间为1900年1月30日0时0分0秒(该时间也是本农历的最开始起始点)\n    var strap = Date.UTC(1900, 1, 30, 0, 0, 0);\n    var calObj = new Date((offset + d - 31) * 86400000 + strap);\n    var cY = calObj.getUTCFullYear();\n    var cM = calObj.getUTCMonth() + 1;\n    var cD = calObj.getUTCDate();\n    return this.solar2lunar(cY, cM, cD);\n  }\n};",null]}