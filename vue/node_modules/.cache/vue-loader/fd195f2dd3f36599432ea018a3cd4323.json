{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/FieldDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/FieldDialog.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { DataModelInfo, addTableFields } from '@/api/systemData/dataModel'\nexport default {\n  data() {\n    return {\n      visible: false,\n      listLoading: true,\n      btnLoading: false,\n      options: [\n        { label: '字符串', value: 'varchar' },\n        { label: '整型', value: 'int' },\n        { label: '日期时间', value: 'datetime' },\n        { label: '浮点', value: 'decimal' },\n        { label: '长整型', value: 'bigint' },\n        { label: '文本', value: 'text' }\n      ],\n      list: [],\n      dataForm: {},\n      dataBase: '0'\n    }\n  },\n  methods: {\n    init(dataBase, table) {\n      this.visible = true\n      this.dataBase = dataBase\n      if (!dataBase || !table) return\n      this.initData(table)\n    },\n    closeDialog() {\n      this.$emit('close')\n      this.visible = false\n    },\n    initData(table) {\n      this.listLoading = true\n      DataModelInfo(this.dataBase, table).then(res => {\n        this.dataForm = res.data.tableInfo\n        this.$set(this.dataForm, 'newTable', this.dataForm.table)\n        this.list = res.data.tableFieldList.map((o, i) => ({ disabled: true, ...o }))\n        this.listLoading = false\n      })\n    },\n    dataFormSubmit() {\n      let tableFieldList = this.list.filter(o => !o.disabled)\n      if (!tableFieldList.length) {\n        this.$message({\n          message: `请至少新增一个字段`,\n          type: 'error',\n          duration: 1000\n        });\n        return\n      }\n      if (!this.exist()) return\n      this.btnLoading = true\n      let query = {\n        tableFieldList,\n        tableInfo: this.dataForm\n      }\n      addTableFields(this.dataBase, query).then((res) => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            this.visible = false\n            this.btnLoading = false\n            this.$emit('updateOptions', this.list)\n            this.$emit('close')\n          }\n        })\n      }).catch(() => { this.btnLoading = false })\n    },\n    exist() {\n      let isOk = true;\n      //  遍历数组，判断非空\n      for (let i = 0; i < this.list.length; i++) {\n        const e = this.list[i];\n        if (e.disabled) continue\n        if (!e.field) {\n          this.$message({\n            message: `第${i + 1}行列名不能为空`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n        let reg = /(^_([a-zA-Z0-9]_?)*$)|(^[a-zA-Z](_?[a-zA-Z0-9])*_?$)/\n        if (!reg.test(e.field)) {\n          this.$message({\n            message: `第${i + 1}行列名格式错误，请重新输入`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n        let num = this.list.filter(o => o.field == e.field)\n        if (num.length > 1) {\n          this.$message({\n            message: `第${i + 1}行列名'${e.field}'已重复`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n        if (!e.fieldName) {\n          this.$message({\n            message: `第${i + 1}行说明不能为空`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n      }\n      return isOk;\n    },\n    handleDel(index) {\n      this.list.splice(index, 1)\n    },\n    addHandle(row) {\n      let item = {}\n      if (!row) {\n        item = {\n          field: \"\", dataType: \"varchar\", dataLength: 50, allowNull: 1, primaryKey: 0, fieldName: \"\", disabled: false\n        }\n      } else {\n        item = {\n          field: row.field,\n          dataType: row.dataType,\n          dataLength: row.dataLength,\n          allowNull: row.allowNull,\n          fieldName: row.fieldName,\n          primaryKey: 0,\n          disabled: false\n        }\n      }\n      this.list.push(item)\n    }\n  }\n}\n",null]}