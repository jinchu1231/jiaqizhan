{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/msgCenter/sendConfig/TemplateForm.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/msgCenter/sendConfig/TemplateForm.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TemplateDialog from './TemplateDialog'\nimport { deepClone } from '../../../utils'\nexport default {\n  components: { TemplateDialog },\n  name: 'sendConfig-TemplateForm',\n  data() {\n    return {\n      dataForm: {\n        id: \"\",\n        enabledMark: 1,\n        sortCode: 0,\n        description: \"\",\n        messageType: \"\",\n        templateName: '',\n        accountName: ''\n      },\n      dataRule: {\n        messageType: [\n          { required: true, message: '消息类型不能为空', trigger: 'blur' },\n        ],\n        templateName: [\n          { required: true, message: '模板名称不能为空', trigger: 'change' },\n        ],\n        accountName: [\n          { required: true, message: '账号名称不能为空', trigger: 'change' },\n        ],\n      },\n      msgTypeList: [],\n      visible: false,\n      btnLoading: false,\n      editIndex: '',\n      messageSource: ''\n    }\n  },\n  methods: {\n    init(row, index, messageSource) {\n      this.editIndex = index\n      this.messageSource = messageSource\n      this.getConfig()\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        this.dataForm = { ...this.dataForm, ...row }\n      })\n    },\n    getConfig() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSendType' }).then((res) => {\n        this.msgTypeList = res\n      })\n    },\n    onTemplateChange(id, item) {\n      this.dataForm.templateName = item.fullName\n      this.dataForm.templateId = id\n      this.dataForm.templateCode = item.enCode\n    },\n    onAccountChange(id, item) {\n      this.dataForm.accountName = item.fullName\n      this.dataForm.accountConfigId = id\n      this.dataForm.accountCode = item.enCode\n    },\n    onMessageTypeChange(e) {\n      this.$set(this.dataForm, 'accountName', '')\n      this.$set(this.dataForm, 'accountConfigId', '')\n      this.$set(this.dataForm, 'accountCode', '')\n      this.$set(this.dataForm, 'templateId', '')\n      this.$set(this.dataForm, 'templateName', '')\n      this.$set(this.dataForm, 'templateCode', '')\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const item = deepClone(this.dataForm)\n          this.$emit('submit', item, this.editIndex)\n          this.visible = false\n        }\n      })\n    }\n  }\n}\n",null]}