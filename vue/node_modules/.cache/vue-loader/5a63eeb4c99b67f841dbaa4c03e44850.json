{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/formShortLink/list/detail/Item.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/formShortLink/list/detail/Item.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDownloadUrl } from '@/api/common'\nimport { getAmountChinese, thousandsFormat } from '@/components/Generator/utils/index.js'\n\nexport default {\n  name: 'Item',\n  props: {\n    item: {\n      type: Object,\n      required: true\n    },\n    formConf: {\n      type: Object,\n      required: true\n    },\n    formValue: {\n      type: Object,\n    },\n  },\n  data() {\n    return {\n      complexHeaderList: [],\n      childColumns: [],\n    }\n  },\n  created() {\n    if (this.item.__config__.jnpfKey === 'table') {\n      this.item.__config__.children = this.item.__config__.children.filter(column => !column.__config__.noShow && (!column.__config__.visibility || (Array.isArray(column.__config__.visibility) && column.__config__.visibility.includes('pc'))))\n      this.complexHeaderList = this.getComplexColumns(this.item.__config__.children)\n    }\n  },\n  methods: {\n    toDetail(item) {\n      this.$emit('toDetail', item)\n    },\n    toTableDetail(item, value) {\n      item.__config__.defaultValue = value\n      this.$emit('toDetail', item)\n    },\n    downloadFile(file) {\n      if (!file.fileId) return\n      getDownloadUrl('annex', file.fileId).then(res => {\n        this.jnpf.downloadFile(res.data.url, file.name)\n      })\n    },\n    getImgList(list) {\n      const newList = list.map(o => this.define.comUrl + o.url)\n      return newList\n    },\n    getValue(item) {\n      if (Array.isArray(item.__config__.defaultValue)) {\n        if (['timeRange', 'dateRange'].includes(item.__config__.jnpfKey)) {\n          return item.__config__.defaultValue.join('')\n        }\n        return item.__config__.defaultValue.join()\n      }\n      if (item.thousands) return thousandsFormat(item.__config__.defaultValue)\n      return item.__config__.defaultValue\n    },\n    amountChinese(val) {\n      return getAmountChinese(val)\n    },\n    getThousandsValue(item, val) {\n      if (item.thousands) return thousandsFormat(val)\n      return val\n    },\n    getSummaries(param) {\n      const summaryField = this.item.summaryField\n      const thousandsField = []\n      this.item.__config__.children.forEach(res => {\n        if (res.thousands) thousandsField.push(res.__vModel__)\n      })\n      const { columns, data } = param;\n      const sums = [];\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '合计';\n          return;\n        }\n        if (!summaryField.includes(column.property)) {\n          sums[index] = '';\n          return;\n        }\n        const values = data.map(item => Number(item[column.property]));\n        if (!values.every(value => isNaN(value))) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr);\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0).toFixed(2);\n          if (thousandsField.includes(column.property)) sums[index] = thousandsFormat(sums[index])\n        } else {\n          sums[index] = '';\n        }\n      });\n      return sums\n    },\n    getComplexColumns(columns) {\n      let complexHeaderList = this.item.__config__.complexHeaderList || [];\n      if (!complexHeaderList.length) return columns;\n      let childColumns = [];\n      for (let i = 0; i < complexHeaderList.length; i++) {\n        const e = complexHeaderList[i];\n        e.align = e.align;\n        e.children = [];\n        e.label = e.fullName\n        e.jnpfKey = 'complexHeader'\n        if (e.childColumns && e.childColumns.length) {\n          e.childColumns = e.childColumns.filter(o => columns.some(item => item.__config__.tableFixed == 'none' && item.__vModel__ == o))\n          childColumns.push(...e.childColumns);\n          for (let j = 0; j < columns.length; j++) {\n            const o = columns[j];\n            if (e.childColumns.includes(o.__vModel__)) e.children.push({ ...o, align: o.__config__.tableAlign });\n          }\n        }\n      }\n      complexHeaderList = complexHeaderList.filter(o => o.children.length);\n      // this.complexHeaderList = complexHeaderList\n      this.childColumns = childColumns\n      return complexHeaderList;\n    },\n  }\n}\n",null]}