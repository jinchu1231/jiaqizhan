{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/PortalDesign/RightComponents/common/ColumnData.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/PortalDesign/RightComponents/common/ColumnData.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Sortable from 'sortablejs'\nimport { getDataInterfaceInfo } from '@/api/systemData/dataInterface';\nexport default {\n  props: ['showType'],\n  components: {},\n  data() {\n    return {\n      visible: false,\n      list: [],\n      type: 1,\n      fixedOptions: [\n        {\n          value: 'none',\n          fullName: '无'\n        }, {\n          value: 'left',\n          fullName: '左冻结'\n        }, {\n          value: 'right',\n          fullName: '右冻结'\n        }],\n      alignOptions: [\n        {\n          value: 'left',\n          fullName: '左对齐'\n        }, {\n          value: 'center',\n          fullName: '居中对齐'\n        }, {\n          value: 'right',\n          fullName: '右对齐'\n        }],\n      interfaceId: '',\n      allOptions: []\n    }\n  },\n  methods: {\n    init(option, type, interfaceId) {\n      this.type = type || 1\n      this.list = option ? JSON.parse(JSON.stringify(option)) : []\n      this.visible = true\n      this.interfaceId = interfaceId || ''\n      this.$nextTick(() => {\n        this.setSort()\n        this.initFieldData();\n      });\n    },\n    closeDialog() {\n      if (!this.list.length) {\n        return this.$message.warning('数据不能为空')\n      }\n      for (let index = 0; index < this.list.length; index++) {\n        const element = this.list[index];\n        if (!element.fullName) return this.$message.warning('名称不能为空')\n        if (!element.filedName) return this.$message.warning('名称字段不能为空')\n      }\n      this.$emit('columnList', this.list)\n      this.visible = false\n    },\n    handleDel(index) {\n      this.list.splice(index, 1);\n    },\n    addHandle() {\n      let item = {}\n      if (this.showType === 'app') {\n        item = { fullName: \"\", filedName: \"\", id: this.jnpf.idGenerator() }\n      } else {\n        item = { fullName: \"\", filedName: \"\", sortable: false, fixed: \"none\", align: 'center', width: 0, id: this.jnpf.idGenerator() }\n      }\n      this.list.push(item)\n    },\n    setSort() {\n      const el = this.$refs.dragTable.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n      this.sortable = Sortable.create(el, {\n        ghostClass: 'sortable-ghost', // Class name for the drop placeholder,\n        setData: function (dataTransfer) {\n          dataTransfer.setData('Text', '')\n        },\n        onEnd: evt => {\n          const targetRow = this.list.splice(evt.oldIndex, 1)[0]\n          this.list.splice(evt.newIndex, 0, targetRow)\n        },\n        handle: '.drag-handler',\n      })\n    },\n    initFieldData() {\n      if (!this.interfaceId) return (this.allOptions = []);\n      getDataInterfaceInfo(this.interfaceId).then(res => {\n        const data = res.data;\n        this.allOptions = data.fieldJson ? JSON.parse(data.fieldJson) : [];\n      });\n    },\n    querySearchAsync(queryString, cb) {\n      var results = queryString ? this.allOptions.filter(this.createStateFilter(queryString)) : this.allOptions;\n      // 调用 callback 返回建议列表的数据\n      cb(results);\n    },\n    createStateFilter(queryString) {\n      return (state) => {\n        return (state.defaultValue.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\n      };\n    },\n    handleSelect(item, index) {\n      this.list[index].filedName = item.defaultValue\n    }\n  }\n}\n",null]}