{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/Preview.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/Preview.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport FlowCard from \"./FlowCard/Preview\";\nimport { NodeUtils, getMockData } from \"./FlowCard/util.js\";\n\nexport default {\n  name: 'Process',\n  props: ['tabName', 'conf'],\n  data() {\n    let data = {}\n    if (typeof this.conf === 'object' && this.conf !== null && JSON.stringify(this.conf) !== '{}') {\n      data = Object.assign(NodeUtils.createNode('start'), this.conf)\n    } else {\n      data = getMockData()\n    }\n    return {\n      data, // 流程图数据\n      scaleVal: 100, // 流程图缩放比例 100%\n      step: 5, // 缩放步长\n      updateId: 0, // key值 用于模拟$forceUpdate\n      activeData: null, // 被激活的流程卡片数据，用于属性面板编辑\n      isProcessCmp: true,\n      verifyMode: false\n    };\n  },\n  methods: {\n    // 给父级组件提供的获取流程数据得方法\n    getData() {\n      this.verifyMode = true\n      if (NodeUtils.checkAllNode(this.data)) {\n        return Promise.resolve({ formData: this.data })\n      } else {\n        return Promise.reject({ target: this.tabName })\n      }\n    },\n    /**\n     * 接收所有FlowCard事件触发\n     * @param { Object } data - 含有event(事件名称)/args(参数)两个属性\n     */\n    eventReceiver({ event, args }) {\n      this.$emit('subFlow', args[0].nodeId)\n      if (event === \"edit\") {\n        this.activeData = args[0]; // 打开属性面板\n        return;\n      }\n\n      // 本实例只监听了第一层数据（startNode）变动\n      // 为了实时更新  采用$forceUpdate刷新 但是由于某些条件下触发失效（未排除清除原因）\n      // 使用key + 监听父组件updateId方式强制刷新\n      NodeUtils[event](...args);\n      this.forceUpdate();\n    },\n\n    forceUpdate() {\n      this.updateId = this.updateId + 1;\n    },\n    /**\n     * 控制流程图缩放\n     * @param { Object } val - 缩放增量 是step的倍数 可正可负\n     */\n    changeScale(val) {\n      if (this.scaleVal >= 0 && this.scaleVal <= 200) {\n        if (this.scaleVal === 200 && this.scaleVal + val > 200) return\n        if (this.scaleVal === 0 && this.scaleVal + val < 0) return\n        // 缩放介于0%~200%\n        this.scaleVal += val;\n      }\n    },\n    /**\n     * 属性面板提交事件\n     * @param { Object } value - 被编辑的节点的properties属性对象\n     */\n    onPropEditConfirm(value, content) {\n      this.activeData.content = content || '请设置条件'\n      let oldProp = this.activeData.properties;\n      this.activeData.properties = value;\n      // 修改优先级\n      if (NodeUtils.isConditionNode(this.activeData)) {\n        value.priority !== oldProp.priority\n          && NodeUtils.resortPrioByCNode(\n            this.activeData,\n            oldProp.priority,\n            this.data\n          );\n        NodeUtils.setDefaultCondition(this.activeData, this.data)\n      }\n      if (NodeUtils.isStartNode(this.activeData)) this.$emit('startNodeChange', this.data)\n      this.onClosePanel();\n      this.forceUpdate();\n    },\n    /**\n     * 属性面板取消事件\n     */\n    onClosePanel() {\n      this.activeData = null;\n    },\n\n    // 传formIds 查询指定组件 未传时  判断所有组件\n    isFilledPCon(formIds) {\n      let res = false\n      const loopChild = (parent, callback) => parent.childNode && loop(parent.childNode, callback)\n      const loop = (data, callback) => {\n        if (res || !data) return // 查找到就退出\n        if (Array.isArray(data.conditionNodes)) {\n          const uesd = data.conditionNodes.some(c => {\n            const cons = c.properties.conditions || []\n            return Array.isArray(formIds)\n              ? cons.some(item => formIds.includes(item.formId)) // 查询特定组件\n              : cons.length > 0 // 只要有节点设置了条件 说明就有组件作为条件被使用\n          })\n          uesd ? callback() : data.conditionNodes.forEach(t => loopChild(t, callback))\n        }\n        loopChild(data, callback)\n      }\n      loop(this.data, () => res = true)\n      return res\n    }\n  },\n  render: function (h) {\n    return (\n      <div class=\"flow-container flow-container-preview\">\n        <div class=\"scale-slider\">\n          <i class=\"btn el-icon-minus\"\n            onClick={this.changeScale.bind(this, -this.step)}></i>\n          <span style=\"font-size:14px;\">{this.scaleVal}%</span>\n          <i class=\"btn el-icon-plus\"\n            onClick={this.changeScale.bind(this, this.step)}></i>\n        </div>\n        <div class=\"tips\">\n          <div class=\"tips-item\"><span class=\"icon success\">●</span>已完成</div>\n          <div class=\"tips-item\"><span class=\"icon current\">●</span>进行中</div>\n          <div class=\"tips-item\"><span class=\"icon\">●</span>无/未处理</div>\n        </div>\n        <FlowCard\n          verifyMode={this.verifyMode}\n          key={this.updateId}\n          data={this.data}\n          onEmits={this.eventReceiver}\n          style={{ transform: `scale(${this.scaleVal / 100})` }}\n        />\n      </div>\n    );\n  }\n};\n",null]}