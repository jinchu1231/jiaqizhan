{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/OrgSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/OrgSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport OrgTransfer from '../OrgTransfer'\nimport { getUserInfoList, getSelectedList } from '@/api/permission/user'\nexport default {\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  components: { OrgTransfer },\n  name: 'org-select',\n  props: {\n    value: {\n      type: Array,\n      default: () => ([]),\n      required: true\n    },\n    title: {\n      type: String,\n      default: '组织机构'\n    },\n    inlet: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'user'\n    },\n    buttonType: {\n      type: String,\n      default: 'button'\n    }, // or input\n    tagConfig: {\n      type: Object,\n      default: () => ({\n        type: 'info',\n        closable: true,\n        'disable-transitions': false,\n        hit: false,\n        color: undefined,\n        size: 'small',\n        effect: 'light'\n      })\n    },\n    dynamicParameter: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      show: false,\n      innerValue: null,\n      selectedData: [],\n      dynamicList: [{ \"fullName\": '当前组织', \"organize\": '动态参数', \"organizeIds\": ['@currentOrg'], \"id\": '@currentOrg', \"type\": \"system\", \"icon\": \"icon-ym icon-ym-tree-user2\" }, { \"fullName\": '当前组织及子组织', \"organize\": '动态参数', \"organizeIds\": ['@currentOrgAndSubOrg'], \"id\": '@currentOrgAndSubOrg', \"type\": \"system\", \"icon\": \"icon-ym icon-ym-tree-user2\" }, { \"fullName\": '当前分管组织', \"organize\": '动态参数', \"organizeIds\": ['@currentGradeOrg'], \"id\": '@currentGradeOrg', \"type\": \"system\", \"icon\": \"icon-ym icon-ym-tree-user2\" }]\n    }\n  },\n  watch: {\n    value: {\n      handler: function (val) {\n        if (!val) return\n        this.reloadCmpData()\n      },\n      immediate: true,\n      deep: true\n    },\n  },\n  computed: {\n    selectedLabels() {\n      return this.selectedData.map(t => t.fullName).join(',')\n    },\n    allList() {\n      let list = []\n      if (this.type !== 'user' && this.type !== 'users') {\n        let type = this.type === 'organize' || this.type === 'department' ? 'department' : this.type\n        list = this.$store.getters[type + 'List']\n      }\n      return [...list, ...this.dynamicList]\n    }\n  },\n  methods: {\n    reloadCmpData() {\n      this.innerValue = this.value\n      // transfer 可能还未加载成功\n      this.$nextTick(_ => {\n        this.initSelectedData()\n      })\n    },\n    getText(id) {\n      let text = ''\n      if (this.type !== 'user' && this.type !== 'users') {\n        if (this.type === 'organize' && Array.isArray(id)) {\n          for (let i = 0; i < id.length; i++) {\n            let item = id[i];\n            inner: for (let ii = 0; ii < this.allList.length; ii++) {\n              if (item === this.allList[ii].id) {\n                text = this.allList[ii].type === 'system' ? this.allList[ii].fullName : this.allList[ii].organize\n                break inner\n              }\n            }\n          }\n        } else {\n          let arr = this.allList.filter(o => o.id === id)\n          if (!arr.length) return ''\n          text = arr[0].fullName || ''\n        }\n      }\n      return text\n    },\n    async initSelectedData() {\n      if (this.type === 'user') {\n        if (!this.innerValue.length) return this.selectedData = []\n        getUserInfoList(this.innerValue).then(res => {\n          this.selectedData = res.data.list\n        })\n      } else if (this.type === 'users') {\n        if (!this.innerValue.length) return this.selectedData = []\n        getSelectedList(this.innerValue).then(res => {\n          this.selectedData = res.data.list\n        })\n      } else {\n        if (this.type === 'position') {\n          getSelectedList(this.innerValue).then(res => {\n            this.selectedData = res.data.list\n          })\n        }\n        this.selectedData = this.innerValue.map(t => ({\n          id: t,\n          fullName: this.getText(t)\n        }))\n      }\n    },\n    onClose(item, i) {\n      this.innerValue.splice(i, 1)\n      this.selectedData.splice(i, 1)\n      this.$emit('change', this.innerValue)\n    },\n    onConfirm(data) {\n      this.innerValue = data\n      this.$emit('change', this.innerValue)\n    }\n  }\n}\n",null]}