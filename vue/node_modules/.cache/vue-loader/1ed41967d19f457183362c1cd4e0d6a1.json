{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/permission/gradeManage/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/permission/gradeManage/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport gradeUserSelect from \"./GradeUserSelect\"\nimport { mapGetters } from \"vuex\";\nimport { getSelectorOrgList, saveGradeManage } from '@/api/permission/gradeManage'\nexport default {\n  components: { gradeUserSelect },\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      dataForm: {\n        id: '',\n        userId: ''\n      },\n      activeName: 'module',\n      listLoading: false,\n      refreshTable: true,\n      treeList: [],\n      dataRule: {\n        userId: [\n          { required: true, message: '请选择管理员', trigger: 'click' }\n        ]\n      },\n      treeData: [],\n      menuTreeData: [],\n      systemData: [],\n      checkStrictly: false,\n      treeLoading: false,\n      defaultProps: { // 配置项（必选）\n        value: 'id',\n        label: 'fullName',\n        children: 'children'\n      },\n      moduleIds: [],\n      systemIds: [],\n      key: +new Date()\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo'])\n  },\n  methods: {\n    onChange(val) {\n      if (!val) return\n      this.initData()\n    },\n    handleClick() {\n      if (this.activeName === 'gradeManage') return\n      this.$nextTick(() => {\n        this.treeData = this.activeName == 'module' ? this.menuTreeData : this.systemData\n        const parentIds = this.parentIds(this.treeData)\n        const childrenIds = this[this.activeName + 'Ids'].filter(id => !parentIds.includes(id))\n        this.$refs.treeData.setCheckedKeys(childrenIds)\n      })\n    },\n    parentIds(treeDate) {\n      const arr = []\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const e = list[i]\n          const children = e.children\n          if (children && children.length > 0) {\n            arr.push(e.id)\n            loop(children)\n          }\n        }\n      }\n      loop(treeDate)\n      return arr\n    },\n    // 设置数据\n    selectTreeNodeClick() {\n      const parentIds = this.$refs.treeData.getHalfCheckedKeys()\n      const childrenIds = this.$refs.treeData.getCheckedKeys()\n      const newIds = [...parentIds, ...childrenIds]\n      const dataIds = [...new Set(newIds)]\n      this[this.activeName + 'Ids'] = dataIds\n    },\n    initData() {\n      this.activeName = 'module'\n      if (this.dataForm.userId) this.treeLoading = true\n      this.listLoading = true\n      getSelectorOrgList(this.dataForm.userId || '').then(res => {\n        this.treeList = res.data.orgAdminList || []\n        this.menuTreeData = res.data.modulePermissionList || []\n        this.systemData = res.data.systemPermissionList || []\n        this.moduleIds = res.data.moduleIds || []\n        this.systemIds = res.data.systemIds || []\n        this.handleClick()\n        this.listLoading = false\n        this.btnLoading = false\n        this.treeLoading = false\n      }).catch(() => {\n        this.listLoading = false\n        this.btnLoading = false\n        this.treeLoading = false\n        this.dataForm.userId = ''\n        this.key = +new Date()\n      })\n    },\n    onThisLayerSelectChange(val, row) {\n      if (val) return\n      if (row.thisLayerAdd === 1) this.$set(row, 'thisLayerAdd', 0)\n      if (row.thisLayerEdit === 1) this.$set(row, 'thisLayerEdit', 0)\n      if (row.thisLayerDelete === 1) this.$set(row, 'thisLayerDelete', 0)\n    },\n    onSubLayerSelectChange(val, row) {\n      if (val) return\n      if (row.subLayerAdd === 1) this.$set(row, 'subLayerAdd', 0)\n      if (row.subLayerEdit === 1) this.$set(row, 'subLayerEdit', 0)\n      if (row.subLayerDelete === 1) this.$set(row, 'subLayerDelete', 0)\n    },\n    init(id) {\n      this.treeList = []\n      this.treeData = []\n      this.dataForm.id = id || \"\"\n      this.dataForm.userId = id || \"\"\n      this.visible = true\n      this.formLoading = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        this.dataForm.id = id || \"\"\n        this.dataForm.userId = id || \"\"\n        this.initData()\n        this.formLoading = false\n      })\n      this.formLoading = false\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let query = {\n            ...this.dataForm,\n            orgAdminModel: this.treeList,\n            systemIds: this.systemIds,\n            moduleIds: this.moduleIds\n          }\n          this.btnLoading = true\n          saveGradeManage(query).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList')\n              }\n            })\n          }).catch(() => {\n            this.btnLoading = false\n          })\n        }\n      })\n    }\n  }\n}\n",null]}