{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/extend/saleOrder/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/extend/saleOrder/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { orderInfo, createOrder, updateOrder, getGoodsSelector, getCustomer, GoodsList } from '@/api/extend/saleOrder'\nimport GoodsBox from './GoodsBox'\nexport default {\n  components: { GoodsBox },\n  data() {\n    return {\n      dataForm: {\n        id: '',\n        address: \"\",\n        auditDate: '',\n        auditName: \"\",\n        business: \"\",\n        code: \"\",\n        contactTel: \"\",\n        customerId: \"\",\n        customerName: '',\n        description: \"\",\n        discountPrice: '',\n        gatheringType: \"\",\n        goodsDate: '',\n        goodsName: \"\",\n        goodsWarehouse: \"\",\n        harvestMsg: 0,\n        harvestWarehouse: \"\",\n        issuingName: \"\",\n        partPrice: '',\n        productEntryList: []\n      },\n      dataRule: {},\n      list: [],\n      loading: true,\n      total: 0,\n      options: ['现金', '转帐', '汇票'],\n      storeOptions: ['仓库1', '仓库2', '仓库3'],\n      goodsBoxVisible: false,\n      btnLoading: false,\n      orderType: ''\n    }\n  },\n  watch: {\n    'dataForm.productEntryList': {\n      handler(newVal, oldVal) {\n        let menoy = 0\n        for (let i = 0; i < newVal.length; i++) {\n          const e = newVal[i];\n          menoy += parseFloat(e.amount)\n        }\n        this.total = menoy\n      },\n      deep: true\n    }\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    init(id) {\n      this.dataForm.id = id || ''\n      this.loading = true\n      this.$nextTick(() => {\n        if (this.dataForm.id) {\n          this.$refs['dataForm'].resetFields()\n          orderInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            this.loading = false\n          })\n        } else {\n          this.loading = false\n          this.addItem()\n        }\n      })\n    },\n    addItem(index) {\n      let item = {\n        productId: '',\n        productCode: '',\n        productName: '',\n        productSpecification: '',\n        qty: 1,\n        money: 0,\n        amount: 0,\n        description: '',\n        type: ''\n      }\n      this.dataForm.productEntryList.splice(index + 1, 0, item)\n    },\n\n    delItem(index) {\n      this.dataForm.productEntryList.splice(index, 1);\n    },\n    count(row) {\n      row.amount = this.jnpf.toDecimal(parseFloat(row.money) * parseFloat(row.qty))\n    },\n    openGoodsBox() {\n      this.goodsBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.goodsBox.init()\n      })\n    },\n    onTypeChange(val) {\n      if (!val) return\n      for (let i = 0; i < this.dataForm.productEntryList.length; i++) {\n        this.dataForm.productEntryList[i].type = val\n      }\n    },\n    choice(list) {\n      for (let i = 0; i < list.length; i++) {\n        const e = list[i];\n        let item = {\n          productId: e.id,\n          productCode: e.code,\n          productName: e.fullName,\n          productSpecification: e.productSpecification,\n          qty: 1,\n          money: e.money,\n          amount: e.money,\n          description: '',\n          type: e.type\n        }\n        this.dataForm.productEntryList.push(item)\n      }\n    },\n    querySearchAsync(queryString, cb) {\n      getCustomer(queryString).then(res => {\n        cb(res.data.list)\n      })\n    },\n    goodsSearchAsync(queryString, cb) {\n      getGoodsSelector(queryString).then(res => {\n        cb(res.data.list)\n      })\n    },\n    goodsSelect(item, row) {\n      row.productId = item.id\n      row.productCode = item.code\n      row.productName = item.fullName\n      row.productSpecification = item.productSpecification\n      row.money = item.money\n      row.type = item.type\n      row.amount = this.jnpf.toDecimal(parseFloat(row.money) * parseFloat(row.qty))\n    },\n    handleSelect(item) {\n      this.dataForm.customerName = item.name\n      this.dataForm.customerId = item.id\n      this.dataForm.contactTel = item.contactTel\n      this.dataForm.address = item.address\n    },\n    submit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.btnLoading = true\n          const formMethod = this.dataForm.id ? updateOrder : createOrder\n          if (!this.dataForm.id) delete (this.dataForm.id)\n          formMethod(this.dataForm).then((res) => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.btnLoading = false\n                this.$emit('close', true)\n              }\n            })\n          }).catch(() => { this.btnLoading = false })\n        }\n      })\n    }\n  }\n}\n",null]}