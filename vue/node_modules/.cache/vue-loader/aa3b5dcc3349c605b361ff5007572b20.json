{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/ColumnDesign/main.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/ColumnDesign/main.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceInfo } from '@/api/systemData/dataInterface'\nimport { getPrintDevSelector } from '@/api/system/printDev'\nimport Condition from './FlowCondition'\nimport Sortable from 'sortablejs'\nimport draggable from 'vuedraggable'\nimport FormScript from './FormScript'\nimport CustomBtn from './CustomBtn'\nimport uploadBox from './uploadBox'\nimport InterfaceDialog from '@/components/Process/PropPanel/InterfaceDialog'\nimport { getDrawingList } from '@/components/Generator/utils/db'\nimport { noColumnShowList, noSearchList, useInputList, useDateList, useSelectList, dyOptionsList, noGroupList } from '@/components/Generator/generator/comConfig'\nimport { getDataInterfaceSelector } from '@/api/systemData/dataInterface'\nimport { noVModelList, systemComponentsList } from '@/components/Generator/generator/comConfig'\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport ComplexHeader from '@/components/Generator/components/ComplexHeader'\nimport DefaultSortConfigModal from './DefaultSortConfigModal.vue'\nimport ExtraConfigModal from './ExtraConfigModal.vue';\nconst excludeList = [...noVModelList, ...noGroupList, 'colorPicker', 'popupTableSelect', 'relationForm', 'popupSelect', 'calculate', 'groupTitle']\nconst getSearchMultiple = item => {\n  const jnpfKey = item.__config__.jnpfKey\n  const searchMultipleList = ['select', 'depSelect', 'roleSelect', 'userSelect', 'usersSelect', 'organizeSelect', 'posSelect', 'groupSelect']\n  if (searchMultipleList.includes(jnpfKey)) return true\n  return false\n}\nconst getDefaultValue = item => {\n  const jnpfKey = item.__config__.jnpfKey;\n  const list = ['areaSelect', 'datePicker', 'inputNumber', 'organizeSelect', 'calculate'];\n  return list.includes(jnpfKey) || item.multiple ? [] : undefined;\n};\nconst getSearchType = item => {\n  const jnpfKey = item.__config__.jnpfKey\n  // 等于-1  模糊-2  范围-3\n  const fuzzyList = [...useInputList, 'location']\n  const RangeList = [...useDateList, 'timePicker', 'datePicker', 'inputNumber', 'calculate', 'rate', 'slider']\n  if (RangeList.includes(jnpfKey)) return 3\n  if (fuzzyList.includes(jnpfKey)) return 2\n  return 1\n}\nconst defaultFunc = '({ data, index, refresh, onlineUtils }) => {\\r\\n   \\r\\n}'\nconst defaultFuncs = '({ data, tableRef, onlineUtils }) => {\\r\\n   \\r\\n}'\nconst rowStyleDefaultFunc = '({row,rowIndex}) => {\\r\\n   \\r\\n}'\nconst cellStyleDefaultFunc = '({row, column, rowIndex, columnIndex}) => {\\r\\n   \\r\\n}'\nconst defaultRule = { matchLogic: 'and', conditionList: [] }\nconst defaultColumnData = {\n  printIds: [],\n  ruleList: defaultRule, // 过滤规则\n  complexHeaderList: [],//复杂表头\n  searchList: [], // 查询字段\n  hasSuperQuery: true, // 高级查询\n  showOverflow: true, // 溢出省略\n  childTableStyle: 1, // 子表样式\n  showSummary: false, // 合计配置\n  summaryField: [], // 合计字段\n  thousands: false,//千位分割\n  thousandsField: [],//千位字段\n  columnList: [], // 字段列表\n  columnOptions: [], // 字段列表\n  defaultColumnList: [], // 所有可选择字段列表\n  type: 1, //列表类型\n  defaultSortConfig: [], // 默认排序配置\n  hasPage: true,  // 列表分页\n  pageSize: 20,  // 分页条数\n  hasTreeQuery: false, //左侧树查询\n  treeTitle: '左侧标题', // 树形标题\n  treeDataSource: 'dictionary',  // 树形数据来源\n  treeDictionary: '',//数据字典\n  treeRelation: '',  // 关联字段\n  treeSynType: 0, //数据加载 同步、异步\n  treeInterfaceId: '',\n  treeInterfaceName: '',\n  treeTemplateJson: [],\n  treePropsUrl: '',  // 数据选择\n  treePropsName: '',  // 数据名称\n  treePropsValue: 'id',  // 主键字段\n  treePropsChildren: 'children',  // 子级字段\n  treePropsLabel: 'fullName',  // 显示字段\n  groupField: '',  // 分组字段\n  parentField: '', // 父级字段\n  useColumnPermission: false,\n  useFormPermission: false,\n  useBtnPermission: false,\n  useDataPermission: false,\n  customBtnsList: [],\n  btnsList: [\n    { value: 'add', icon: 'icon-ym icon-ym-btn-add', label: '新增' }\n  ],  // 按钮\n  columnBtnsList: [\n    { value: 'edit', icon: 'icon-ym icon-ym-btn-edit', label: '编辑' },\n    { value: 'remove', icon: 'icon-ym icon-ym-btn-clearn', label: '删除' },\n    { value: 'detail', icon: 'icon-ym icon-ym-generator-menu', label: '详情' }\n  ], // 列按钮\n  funcs: {\n    afterOnload: \"\",\n    rowStyle: \"\",\n    cellStyle: \"\",\n  },\n  uploaderTemplateJson: {}\n}\nconst defaultFuncsData = {\n  afterOnload: \"\",\n  rowStyle: \"\",\n  cellStyle: \"\",\n}\nconst defaultBtnsOption = [\n  { value: 'add', icon: 'icon-ym icon-ym-btn-add', label: '新增' },\n  { value: 'download', icon: 'icon-ym icon-ym-btn-download', label: '导出' },\n  { value: 'upload', icon: 'icon-ym icon-ym-btn-upload', label: '导入' },\n  { value: 'batchRemove', icon: 'icon-ym icon-ym-btn-clearn', label: '批量删除' },\n  { value: 'batchPrint', icon: 'icon-ym icon-ym-report-icon-preview-printPreview', label: '批量打印' },\n]\nexport default {\n  name: 'columnDesign',\n  props: {\n    conf: {\n      type: Object,\n      default: () => { }\n    },\n    webType: '',\n    modelType: '',\n    interfaceId: '',\n    templateJson: {\n      type: Array,\n      default: () => []\n    },\n    viewFields: {\n      type: Array,\n      default: () => []\n    },\n  },\n  components: { draggable, FormScript, uploadBox, CustomBtn, InterfaceDialog, Condition, ComplexHeader, DefaultSortConfigModal, ExtraConfigModal },\n  data() {\n    return {\n      activeSearchRowIndex: 0,\n      key: +new Date(),\n      fieldJsonList: [],\n      hasPage: false,\n      currentTab: 'column',\n      alignOptions: ['left', 'center', 'right'],\n      fixedOptions: ['none', 'left', 'right'],\n      textBoxList: ['input', 'billRule'],\n      canSetKeyword: ['input', 'textarea', 'autoComplete'],\n      selectionBoxList: useSelectList,\n      list: [],\n      searchList: [],\n      columnList: [],\n      columnData: JSON.parse(JSON.stringify(defaultColumnData)),\n      btnsOption: defaultBtnsOption,\n      columnBtnsOption: [\n        { value: 'edit', icon: 'icon-ym icon-ym-btn-edit', label: '编辑' },\n        { value: 'remove', icon: 'icon-ym icon-ym-btn-clearn', label: '删除' },\n        { value: 'detail', icon: 'icon-ym icon-ym-generator-menu', label: '详情' }\n      ],\n      columnOptions: [],\n      printTplList: [],\n      searchOptions: [],\n      groupFieldOptions: [],\n      thousandsOptions: [],\n      treeFieldOptions: [],\n      btnsList: [],\n      columnBtnsList: [],\n      typeList: [\n        { url: require('@/assets/images/generator/columnType1.png'), value: 1, name: '普通表格' },\n        { url: require('@/assets/images/generator/columnType2.png'), value: 2, name: '左侧树+普通表格' },\n        { url: require('@/assets/images/generator/columnType4.png'), value: 4, name: '编辑表格' },\n        { url: require('@/assets/images/generator/columnType3.png'), value: 3, name: '分组表格' },\n        { url: require('@/assets/images/generator/columnType5.png'), value: 5, name: '树形表格' },\n      ],\n      dataInterfaceSelector: [],\n      formScriptVisible: false,\n      customBtnVisible: false,\n      dataFilterVisible: false,\n      activeItem: {},\n      funcName: '',\n      scriptKey: '',\n      uploadBoxVisible: false,\n      complexHeaderVisible: false,\n      searchConfigVisible: false,\n      ExtraConfigModalVisible: false,\n      viewJnpfKeyOptions: [\n        { id: 'input', fullName: '单行输入' },\n        { id: 'inputNumber', fullName: '数字输入' },\n        { id: 'select', fullName: '下拉选择' },\n        { id: 'datePicker', fullName: '日期选择' },\n        { id: 'timePicker', fullName: '时间选择' },\n        { id: 'organizeSelect', fullName: '组织选择' },\n        { id: 'depSelect', fullName: '部门选择' },\n        { id: 'roleSelect', fullName: '角色选择' },\n        { id: 'posSelect', fullName: '岗位选择' },\n        { id: 'groupSelect', fullName: '分组选择' },\n        { id: 'userSelect', fullName: '用户选择' },\n      ],\n      noGroupList\n    }\n  },\n  filters: {\n    btnText(key) {\n      let text = ''\n      switch (key) {\n        case 'download':\n          text = '导出'\n          break;\n        case 'batchRemove':\n          text = '批量删除'\n          break;\n        case 'batchPrint':\n          text = '批量打印'\n          break;\n        case 'edit':\n          text = '编辑'\n          break;\n        case 'remove':\n          text = '删除'\n          break;\n        case 'detail':\n          text = '详情'\n          break;\n        case 'upload':\n          text = '导入'\n          break;\n        default:\n          text = '新增'\n          break;\n      }\n      return text\n    }\n  },\n  watch: {\n    'columnData.type': {\n      handler(val) {\n        if (val == 5) this.columnData.printIds = []\n      },\n      deep: true,\n      immediate: true\n    },\n    'columnData.ruleList': {\n      handler() {\n        if (Array.isArray(this.columnData.ruleList) && this.columnData.ruleList.length == 0) return this.columnData.ruleList = defaultRule\n        let ruleData = this.$store.getters.ruleData;\n        if (ruleData && ruleData.conditionList && ruleData.conditionList.length > 0 && this.columnData.ruleList.conditionList.length == 0) {\n          this.columnData.ruleList.conditionList = ruleData.conditionList\n          this.columnData.ruleList.matchLogic = ruleData.matchLogic\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    btnsList(val) {\n      let list = []\n      outer: for (let i = 0; i < this.btnsOption.length; i++) {\n        inter: for (let ii = 0; ii < val.length; ii++) {\n          if (val[ii] === this.btnsOption[i].value) {\n            list.push(this.btnsOption[i])\n            break inter;\n          }\n        }\n      }\n      this.columnData.btnsList = list\n    },\n    columnBtnsList(val) {\n      let list = []\n      outer: for (let i = 0; i < this.columnBtnsOption.length; i++) {\n        inter: for (let ii = 0; ii < val.length; ii++) {\n          if (val[ii] === this.columnBtnsOption[i].value) {\n            list.push(this.columnBtnsOption[i])\n            break inter;\n          }\n        }\n      }\n      this.columnData.columnBtnsList = list\n    }\n  },\n  created() {\n    this.getDataInterfaceSelector()\n    if (typeof this.conf === 'object' && this.conf !== null) {\n      this.columnData = Object.assign({}, defaultColumnData, this.conf)\n      this.columnData.funcs = Object.assign({}, defaultFuncsData, this.columnData.funcs)\n    }\n    if ([1, 2, 4].includes(this.columnData.type)) {\n      if (this.columnData.complexHeaderList.length) {\n        let childColumns = []\n        for (let i = 0; i < this.columnData.complexHeaderList.length; i++) {\n          const e = this.columnData.complexHeaderList[i];\n          for (let j = 0; j < e.childColumns.length; j++) {\n            const element = e.childColumns[j];\n            childColumns.push(element)\n          }\n        }\n        if (childColumns.length) {\n          this.$store.commit(\"generator/SET_HEADER_DATA\", JSON.parse(JSON.stringify(this.columnData.complexHeaderList)))\n          this.columnData.complexHeaderList = this.$store.getters.complexHeaderData\n        }\n      }\n    }\n    if (this.webType != 4) {\n      if (this.columnData.type == 5) this.updateBtnsList(5)\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__config__ && data.__config__.jnpfKey) {\n          const visibility = !data.__config__.visibility || (Array.isArray(data.__config__.visibility) && data.__config__.visibility.includes('pc'))\n          if (data.__config__.layout === 'colFormItem' && data.__vModel__ && visibility) {\n            const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table';\n            list.push({\n              id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n              fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n              ...data,\n            });\n          }\n        }\n      }\n      loop(getDrawingList())\n      this.list = list\n      let columnOptions = list.filter(o => noColumnShowList.indexOf(o.__config__.jnpfKey) < 0 || o.isStorage == 1)\n      let searchOptions = list.filter(o => noSearchList.indexOf(o.__config__.jnpfKey) < 0)\n      this.groupFieldOptions = list.filter(o => o.id.indexOf('-') < 0 && ![...noGroupList, 'editor'].includes(o.__config__.jnpfKey))\n      this.treeFieldOptions = list.filter(o => o.id.indexOf('-') < 0 && o.__config__.jnpfKey == 'treeSelect')\n      this.columnOptions = columnOptions.map(o => ({\n        label: o.fullName,\n        prop: o.id,\n        fixed: 'none',\n        align: 'left',\n        jnpfKey: o.__config__.jnpfKey,\n        sortable: false,\n        width: null,\n        ...o\n      }));\n      this.searchOptions = searchOptions.map(o => ({\n        label: o.fullName,\n        prop: o.id,\n        jnpfKey: o.__config__.jnpfKey,\n        value: getDefaultValue(o),\n        searchType: getSearchType(o),\n        searchMultiple: getSearchMultiple(o),\n        isKeyword: false,\n        ...o\n      }));\n      this.searchList = this.searchOptions\n      this.columnData.columnOptions = columnOptions\n      if (!this.columnOptions.length) this.columnData.columnList = []\n      if (!this.searchOptions.length) this.columnData.searchList = []\n      this.setBtnValue(this.columnData.btnsList, this.btnsOption)\n      this.setBtnValue(this.columnData.columnBtnsList, this.columnBtnsOption)\n      this.btnsList = this.columnData.btnsList.map(o => o.value)\n    }\n    if (this.webType == 4) {\n      this.btnsOption = [{ value: 'download', icon: 'icon-ym icon-ym-btn-download', label: '导出' }]\n      this.columnBtnsOption = []\n      this.typeList = this.typeList.filter((ele) => ele.value == 1 || ele.value == 3)\n      if (!this.interfaceId) return\n      let fieldsList = this.viewFields\n      this.columnOptions = fieldsList.map(o => ({\n        label: o.field,\n        prop: o.defaultValue,\n        fixed: 'none',\n        align: 'left',\n        jnpfKey: 'input',\n        sortable: false,\n        width: null,\n        __vModel__: o.defaultValue,\n        id: o.defaultValue,\n        fullName: o.field,\n        __config__: {\n          jnpfKey: 'input',\n        }\n      }));\n      const interfaceParam = (this.templateJson || [])\n        .filter(o => o.useSearch)\n        .map(o => {\n          let jnpfKey = 'input';\n          if (o.dataType === 'int' || o.dataType === 'decimal') jnpfKey = 'inputNumber';\n          if (o.dataType === 'datetime') jnpfKey = 'datePicker';\n          return {\n            id: o.field,\n            fullName: o.fieldName,\n            label: o.fieldName,\n            prop: o.field,\n            jnpfKey,\n            __vModel__: o.field,\n            __config__: { isFromParam: true, jnpfKey },\n          };\n        });\n      this.searchOptions = fieldsList.map(o => ({\n        label: o.field,\n        prop: o.defaultValue,\n        jnpfKey: 'input',\n        value: '',\n        searchType: 1,\n        __vModel__: o.defaultValue,\n        id: o.defaultValue,\n        fullName: o.field,\n        searchMultiple: false,\n        __config__: {\n          label: o.field,\n          jnpfKey: 'input',\n        },\n        ...o,\n      }));\n      let searchOptions = this.searchOptions.filter(o => !interfaceParam.some(e => e.id === o.id));\n      this.searchOptions = [...interfaceParam, ...searchOptions];\n      this.groupFieldOptions = fieldsList.map(o => ({\n        label: o.field,\n        prop: o.defaultValue,\n        jnpfKey: 'input',\n        __vModel__: o.defaultValue,\n        id: o.defaultValue,\n        fullName: o.field,\n        __config__: {\n          label: o.field,\n          jnpfKey: 'input',\n        }\n      }));\n      if (!this.columnOptions.length) this.columnData.columnList = []\n      if (!this.searchOptions.length) this.columnData.searchList = []\n      this.$nextTick(() => {\n        this.columnData.columnList = this.setListValue(this.columnData.columnList, JSON.parse(JSON.stringify(this.columnOptions)), 'column')\n        this.columnData.searchList = this.setListValue(this.columnData.searchList, JSON.parse(JSON.stringify(this.searchOptions)), \"search\")\n      })\n    }\n    this.columnBtnsList = this.columnData.columnBtnsList.map(o => o.value)\n    this.setBtnValue(this.columnData.btnsList, this.btnsOption)\n    this.btnsList = this.columnData.btnsList.map(o => o.value)\n  },\n  mounted() {\n    this.getDataInterfaceInfo('', '', 1)\n    this.setSort()\n    this.$nextTick(() => {\n      this.columnData.columnList = this.setListValue(this.columnData.columnList, JSON.parse(JSON.stringify(this.columnOptions)), 'column')\n      this.columnData.searchList = this.setListValue(this.columnData.searchList, JSON.parse(JSON.stringify(this.searchOptions)), \"search\")\n      this.getPrintTplList()\n      if (this.btnsList.indexOf('upload') != -1) this.setDefaultUpLoadData()\n      this.buildOptions(this.columnData.searchList)\n    })\n  },\n  computed: {\n    getSearchOptions() {\n      if (this.columnData.type == 2 && this.columnData.treeRelation) return this.searchOptions.filter(o => o.id !== this.columnData.treeRelation);\n      return this.searchOptions;\n    },\n    getIsKeywordDisabled() {\n      return this.columnData.searchList.filter(o => o.isKeyword).length >= 3\n    }\n  },\n  methods: {\n    getDataInterfaceInfo(val, item, type) {\n      if (type != 1) this.columnData.treePropsName = item.fullName\n      if (!this.columnData.treePropsUrl) return\n      getDataInterfaceInfo(this.columnData.treePropsUrl).then(res => {\n        this.fieldJsonList = res.data && res.data.fieldJson && (JSON.parse(res.data.fieldJson) || []) || []\n        this.hasPage = res.data.hasPage == 1 ? true : false\n      })\n    },\n    querySearch(queryString, cb) {\n      var restaurants = this.fieldJsonList || [];\n      var results = queryString ? restaurants.filter(this.createStateFilter(queryString)) : restaurants;\n      // 调用 callback 返回建议列表的数据\n      cb(results);\n    },\n    createStateFilter(queryString) {\n      return (state) => {\n        return (state.defaultValue.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\n      };\n    },\n    handleSelect(item) {\n      this.columnData.treePropsLabel = item.defaultValue\n    },\n    onTreeRelationChange(val) {\n      if (!val) return;\n      const searchList = this.columnData.searchList\n      let list = JSON.parse(JSON.stringify(this.searchList))\n      this.searchOptions = this.columnData.type == 2 ? list.filter(o => o.id !== val) : list\n      this.$nextTick(() => {\n        this.columnData.searchList = this.setListValue(searchList, JSON.parse(JSON.stringify(this.searchOptions)), 'search');\n      })\n    },\n    buildOptions(componentList) {\n      if (this.webType == 4) return;\n      componentList.forEach(cur => {\n        const config = cur.__config__;\n        if (dyOptionsList.includes(config.jnpfKey)) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            cur.options = [];\n            getDictionaryDataSelector(config.dictionaryType).then(res => {\n              cur.options = res.data.list;\n            });\n          }\n          if (config.dataType === 'dynamic' && config.propsUrl) {\n            cur.options = [];\n            const query = { paramList: config.templateJson || [] };\n            getDataInterfaceRes(config.propsUrl, query).then(res => {\n              cur.options = Array.isArray(res.data) ? res.data : [];\n            });\n          }\n        }\n      });\n    },\n    onSearchMultipleChange(record, index) {\n      this.columnData.searchList[index].value = getDefaultValue(record);\n      this.columnData.searchList[index].__config__.renderKey = +new Date();\n    },\n    updateDefaultSortConfig(data) {\n      this.columnData.defaultSortConfig = data;\n    },\n    closeForm(val) {\n      if (val) this.columnData.complexHeaderList = val\n      this.complexHeaderVisible = false\n    },\n    addComplexHeader() {\n      this.complexHeaderVisible = true\n      const list = JSON.parse(JSON.stringify(this.columnOptions))\n      const columnOptions = list.filter(o => o.fixed === 'none' && o.id.indexOf('-') < 0);\n      this.$nextTick(() => {\n        this.$refs.ComplexHeader.init(this.columnData.complexHeaderList, columnOptions)\n      })\n    },\n    editDefaultSortConfig() {\n      this.searchConfigVisible = true\n      this.$nextTick(() => {\n        this.$refs.SearchConfig.init({ list: this.columnData.defaultSortConfig, columnOptions: this.groupFieldOptions.filter(o => o.id.indexOf('_jnpf_') < 0) })\n      })\n    },\n    refreshPrintOptions() {\n      getPrintDevSelector(2).then(res => {\n        let data = res.data.list\n        let list = data.filter(o => o.children && o.children.length)\n        this.printTplList = list.map(o => ({\n          ...o,\n          hasChildren: true\n        }))\n      }).catch(error => {\n        reject(error)\n      })\n    },\n    open(url) {\n      window.open(url, \"_blank\");\n    },\n    updateSearchRow(data) {\n      this.ExtraConfigModalVisible = false\n      this.columnData.searchList[this.activeSearchRowIndex] = data;\n    },\n    openPrint() {\n      let routeUrl = this.$router.resolve({\n        path: '/system/printDev?open=true'\n      });\n      this.open(routeUrl.href)\n    },\n    getPrintTplList() {\n      this.$store.dispatch('base/getPrintFormTree').then(res => {\n        let list = res.filter(o => o.children && o.children.length)\n        this.printTplList = list.map(o => ({\n          ...o,\n          hasChildren: true\n        }))\n      })\n    },\n    filterPanelShow() {\n      this.$refs.conditionpane.show(this.columnData.ruleList)\n    },\n    ruleConfig(data) {\n      this.columnData.ruleList = data\n    },\n    setBtnValue(replacedData, data, key) {\n      key = key ? key : 'value'\n      outer: for (let i = 0; i < replacedData.length; i++) {\n        inter: for (let ii = 0; ii < data.length; ii++) {\n          if (replacedData[i][key] === data[ii][key]) {\n            data[ii] = replacedData[i]\n            break inter\n          }\n        }\n      }\n    },\n    setListValue(data, defaultData, type) {\n      data = data.filter(o => defaultData.some(e => o.prop == e.prop));\n      if (type == 'search') data = data.filter(o => o.id !== this.columnData.treeRelation);\n      outer: for (let i = 0; i < data.length; i++) {\n        inter: for (let ii = 0; ii < defaultData.length; ii++) {\n          if (data[i].prop === defaultData[ii].prop) {\n            if (type === 'column') {\n              defaultData[ii].fixed = data[i].fixed;\n              defaultData[ii].align = data[i].align;\n              defaultData[ii].width = data[i].width;\n              defaultData[ii].sortable = data[i].sortable;\n              if (this.webType == 4) defaultData[ii].label = data[i].label;\n            }\n            if (type === 'search') {\n              if (data[i].jnpfKey === defaultData[ii].jnpfKey) {\n                defaultData[ii].searchType = data[i].searchType;\n                defaultData[ii].searchMultiple = data[i].searchMultiple;\n                defaultData[ii].value = data[i].value;\n              }\n              defaultData[ii].label = data[i].label;\n              defaultData[ii].isKeyword = data[i].isKeyword;\n              if (this.webType == 4) defaultData[ii] = data[i];\n            }\n            data[i] = defaultData[ii];\n            break inter;\n          }\n        }\n      }\n      for (let i = 0; i < data.length; i++) {\n        for (let ii = 0; ii < this[type + 'Options'].length; ii++) {\n          if (data[i].prop === this[type + 'Options'][ii].prop) {\n            this.$refs[type + 'Table'].toggleRowSelection(this[type + 'Options'][ii], true)\n          }\n        }\n      }\n      return data;\n    },\n    updateListValue(selectedRows, type) {\n      if (!selectedRows.length) return (this.columnData[type + 'List'] = []);\n      const selectedRowKeys = selectedRows.map(o => o.prop);\n      this.columnData[type + 'List'] = this.columnData[type + 'List'].filter(o => selectedRowKeys.some(e => o.prop == e));\n      for (let i = 0; i < selectedRows.length; i++) {\n        if (!this.columnData[type + 'List'].some(o => o.prop === selectedRows[i].prop)) {\n          this.columnData[type + 'List'].push(JSON.parse(JSON.stringify(selectedRows[i])));\n          if (type == 'search') this.buildOptions([selectedRows[i]]);\n        }\n      }\n    },\n    openExtraConfig(record, index) {\n      this.ExtraConfigModalVisible = true;\n      this.activeSearchRowIndex = index;\n      this.$nextTick(() => {\n        this.$refs.ExtraConfigModal.init(record, index);\n      })\n    },\n    onJnpfKeyChange(val, record, i) {\n      record.__config__.jnpfKey = val;\n      let defaultItem = {\n        id: record.id,\n        fullName: record.fullName,\n        label: record.label,\n        prop: record.prop,\n        jnpfKey: val,\n        value: getDefaultValue(record),\n        searchType: getSearchType(record),\n        __vModel__: record.__vModel__,\n        searchMultiple: getSearchMultiple(record),\n        isKeyword: false,\n        __config__: {\n          label: record.label,\n          jnpfKey: val,\n        },\n      };\n      if (val === 'datePicker') defaultItem.format = 'yyyy-MM-dd';\n      if (val === 'timePicker') defaultItem.format = 'HH:mm:ss';\n      if (val === 'select') {\n        defaultItem.options = [];\n        defaultItem.props = { label: 'fullName', value: 'id' };\n        defaultItem.__config__ = {\n          ...defaultItem.__config__,\n          dataType: 'static',\n          propsUrl: '',\n          propsName: '',\n          templateJson: [],\n          dictionaryType: '',\n        };\n      }\n      if (['organizeSelect', 'depSelect', 'userSelect'].includes(val)) {\n        defaultItem.isIncludeSubordinate = false;\n      }\n      this.columnData.searchList[i] = JSON.parse(JSON.stringify(defaultItem));\n      this.key = +new Date();\n    },\n    setDefaultUpLoadData() {\n      let selectKey = this.columnData.uploaderTemplateJson.selectKey\n      const newList = []\n      for (let i = 0; i < selectKey.length; i++) {\n        const element = selectKey[i];\n        if (this.list.some(item => item.id == element)) newList.push(element)\n      }\n      for (let i = 0; i < this.list.length; i++) {\n        const element = this.list[i]\n        const required = element.__config__.required\n        const jnpfKey = element.__config__.jnpfKey\n        if (!excludeList.includes(jnpfKey)) {\n          if ((required || systemComponentsList.includes(jnpfKey))) {\n            if (!selectKey.includes(element.id)) {\n              newList.push(element.id)\n            }\n          }\n        }\n      }\n      this.columnData.uploaderTemplateJson.selectKey = newList\n    },\n    /**\n      * 供父组件使用 获取列表JSON\n    */\n    getData() {\n      if (this.btnsList.includes('batchPrint') && this.columnData.printIds.length === 0) {\n        return this.$message.warning('请选择打印模板')\n      }\n      if (!this.columnData.printIds) return this.$message.warning('请选择打印模板')\n      if (!this.columnData.columnList.length) return this.$message.warning('列表字段不允许为空')\n      if (!this.columnData.uploaderTemplateJson.selectKey && this.btnsList.indexOf('upload') != -1) return this.$message.warning('请设置导入模板')\n      if (this.columnData.type == 2) {\n        if (this.columnData.treeDataSource === 'dictionary' && !this.columnData.treeDictionary) return this.$message.warning('请选择数据字典')\n        if (this.columnData.treeDataSource === 'api') {\n          if (!this.columnData.treePropsValue) return this.$message.warning('请输入主键字段')\n          if (!this.columnData.treePropsLabel) return this.$message.warning('请输入显示字段')\n          if (!this.columnData.treePropsChildren) return this.$message.warning('请输入子级字段')\n        }\n        if (!this.columnData.treeRelation) return this.$message.warning('请选择关联字段')\n        if (!this.columnData.treeInterfaceId && this.columnData.treeSynType == 1) return this.$message.warning('请选择异步数据接口')\n      }\n      if (this.columnData.type == 3) {\n        if (!this.columnData.groupField) return this.$message.warning('请选择分组字段')\n      }\n      if (this.columnData.type == 5) {\n        if (!this.columnData.parentField) return this.$message.warning('请选择父级字段')\n      }\n      this.columnData.defaultColumnList = this.columnOptions.map(o => ({\n        ...o,\n        checked: this.columnData.columnList.some(i => i.prop === o.prop)\n      }))\n      return this.columnData\n    },\n    setSort() {\n      const el = this.$refs.dragTable.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n      this.sortable = Sortable.create(el, {\n        ghostClass: 'sortable-ghost', // Class name for the drop placeholder,\n        setData: function (dataTransfer) {\n          dataTransfer.setData('Text', '')\n        },\n        onEnd: evt => {\n          const targetRow = this.columnData.columnList.splice(evt.oldIndex, 1)[0]\n          this.columnData.columnList.splice(evt.newIndex, 0, targetRow)\n        },\n        handle: '.drag-handler',\n      })\n      const el2 = this.$refs.dragTableSearch.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n      Sortable.create(el2, {\n        ghostClass: 'sortable-ghost', // Class name for the drop placeholder,\n        setData: function (dataTransfer) {\n          dataTransfer.setData('Text', '')\n        },\n        onEnd: evt => {\n          const targetRow = this.columnData.searchList.splice(evt.oldIndex, 1)[0]\n          this.columnData.searchList.splice(evt.newIndex, 0, targetRow)\n        },\n        handle: '.drag-handler',\n      })\n    },\n    searchSelectionChange(val) {\n      this.updateListValue(val, 'search')\n    },\n    columnSelectionChange(val) {\n      this.updateListValue(val, 'column')\n      this.$nextTick(() => {\n        this.updateComplexHeader()\n      })\n    },\n    onFixedChange() {\n      this.updateComplexHeader()\n    },\n    updateComplexHeader() {\n      if (!this.columnData.complexHeaderList.length) return;\n      const columnOptions = this.columnData.columnList.filter(o => o.fixed === 'none' && o.id.indexOf('-') < 0);\n      for (let i = 0; i < this.columnData.complexHeaderList.length; i++) {\n        const e = this.columnData.complexHeaderList[i];\n        e.childColumns = e.childColumns.filter(o => columnOptions.some(item => item.id == o));\n      }\n    },\n    getDataInterfaceSelector() {\n      getDataInterfaceSelector().then(res => {\n        this.dataInterfaceSelector = res.data\n      })\n    },\n    dataTypeChange() {\n      this.columnData.treePropsValue = 'id'\n      this.columnData.treePropsChildren = 'children'\n      this.columnData.treePropsLabel = 'fullName'\n    },\n    addCustomBtn() {\n      const id = this.jnpf.idGenerator()\n      this.columnData.customBtnsList.push({\n        value: 'btn_' + id,\n        label: '按钮' + id,\n        event: ''\n      })\n    },\n    editFunc(item) {\n      if (!item.event.func) item.event = defaultFunc\n      this.activeItem = item\n      this.customBtnVisible = true\n      this.$nextTick(() => {\n        this.$refs.customBtn.init('pc', item.event, this.webType, this.columnOptions)\n      })\n    },\n    updateScript(data) {\n      this.columnData.funcs[this.funcName] = data;\n    },\n    updateCustomBtn(val) {\n      this.columnData.customBtnsList.forEach((ele, index) => {\n        if (ele.value == this.activeItem.value) this.$set(this.columnData.customBtnsList[index], 'event', val)\n      })\n    },\n    addFunc(item, type) {\n      if (!item && type == 'afterOnload') item = defaultFuncs\n      if (!item && type == 'rowStyle') item = rowStyleDefaultFunc\n      if (!item && type == 'cellStyle') item = cellStyleDefaultFunc\n      this.activeItem = item\n      this.funcName = type\n      this.formScriptVisible = true\n      this.$nextTick(() => {\n        this.$refs.formScript.init()\n      })\n    },\n    setUploaderTemplateJson() {\n      this.uploadBoxVisible = true\n      this.$nextTick(() => {\n        const selectData = this.columnData.uploaderTemplateJson.selectKey ? this.columnData.uploaderTemplateJson.selectKey : []\n        const dataType = this.columnData.uploaderTemplateJson.dataType ? this.columnData.uploaderTemplateJson.dataType : ''\n        const list = this.list.filter(o => o.__config__.jnpfKey != 'location')\n        this.$refs.uploadRef.init(list, selectData, dataType)\n      })\n    },\n    onConfirm(data) {\n      this.columnData.uploaderTemplateJson = data\n    },\n    onInterfaceChange(id, row) {\n      if (!id) {\n        this.columnData.treeInterfaceId = ''\n        this.columnData.treeInterfaceName = ''\n        this.columnData.treeTemplateJson = []\n        return\n      }\n      if (this.columnData.treeInterfaceId === id) return\n      this.columnData.treeInterfaceId = id\n      this.columnData.treeInterfaceName = row.fullName\n      this.columnData.treeTemplateJson = row.templateJson ? row.templateJson.map(o => ({\n        ...o,\n        relationField: ''\n      })) : []\n    },\n    goDataInterface() {\n      let src = window.location.protocol + \"//\" + window.location.host + \"/systemData/dataInterface\"\n      window.open(src, \"_blank\")\n    },\n    toggleType(val) {\n      if (this.columnData.type == val) return;\n      this.columnData.type = val;\n      this.onTreeRelationChange(this.columnData.treeRelation);\n      this.columnData.childTableStyle = 1\n      this.updateBtnsList(val)\n    },\n    updateBtnsList(val) {\n      if (this.webType == '4') return\n      if (val == 5) {\n        this.btnsOption = [defaultBtnsOption[0]]\n        this.btnsList = this.btnsList.filter(o => o === 'add');\n      } else {\n        this.btnsOption = defaultBtnsOption\n      }\n    }\n  }\n}\n",null]}