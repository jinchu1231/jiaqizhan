{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/interfaceOauth/Empower.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/interfaceOauth/Empower.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceSelector } from '@/api/systemData/dataInterface'\nimport { saveInterfaceList, getInfo } from '@/api/systemData/interfaceOauth'\n\nexport default {\n  data() {\n    return {\n      visible: false,\n      keyword: '',\n      loading: false,\n      props: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      treeData: [],\n      selectedData: [],\n      identId: '',\n    }\n  },\n  props: {\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    prop: {\n      type: Object,\n      default: () => {\n        return { value: \"id\", label: \"fullName\", children: \"children\" };\n      }\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  created() {\n\n  },\n  methods: {\n    init(data) {\n      this.identId = data.id\n      this.openDialog()\n    },\n    openDialog() {\n      this.visible = true\n      this.keyword = ''\n      this.selectedData = []\n      this.getData()\n      this.setDefault()\n    },\n    confirm() {\n      let arr = []\n      this.selectedData.forEach(item => { arr.push(item.id) })\n      let body = {\n        interfaceIdentId: this.identId,\n        dataInterfaceIds: arr.join(\",\")\n      }\n      saveInterfaceList(body).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1000,\n          onClose: () => {\n            this.visible = false\n            this.$emit('close')\n          }\n        })\n      })\n    },\n    setDefault() {\n      getInfo(this.identId).then(res => {\n        this.selectedData = res.data.list || []\n      })\n    },\n    searchData() {\n      this.$refs.tree && this.$refs.tree.filter(this.keyword)\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    getData() {\n      this.getAllList()\n    },\n    getAllList() {\n      this.expands = []\n      this.loading = true\n      getDataInterfaceSelector().then(res => {\n        this.treeData = res.data\n        this.loading = false\n      })\n    },\n    handleNodeClick(data) {\n      if (data.hasChildren) return\n      const boo = this.selectedData.some(o => o.id === data.id)\n      if (boo) return\n      this.multiple ? this.selectedData.push(data) : this.selectedData = [data]\n    },\n    removeAll() {\n      this.selectedData = []\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n    }\n  }\n}\n",null]}