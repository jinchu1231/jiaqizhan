{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/AutoComplete/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/AutoComplete/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceDataSelect } from '@/api/systemData/dataInterface'\nexport default {\n  name: 'JnpfAutoComplete',\n  components: {},\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    formData: {\n      type: Object\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    templateJson: {\n      type: Array,\n      default: () => []\n    },\n    interfaceId: {\n      type: String,\n      default: ''\n    },\n    relationField: {\n      type: String,\n      default: 'fullName'\n    },\n    total: {\n      type: Number,\n      default: 50\n    },\n  },\n  data() {\n    return {\n      innerValue: this.value,\n      timeout: null\n    }\n  },\n  watch: {\n    value(val) {\n      this.innerValue = val\n    },\n    innerValue(val) {\n      this.$emit('input', this.innerValue)\n      this.$emit('change', this.innerValue)\n    }\n  },\n  methods: {\n    getParamList() {\n      let templateJson = this.templateJson\n      for (let i = 0; i < templateJson.length; i++) {\n        if (templateJson[i].relationField && this.formData) {\n          if (templateJson[i].relationField.includes('-')) {\n            let tableVModel = templateJson[i].relationField.split('-')[0]\n            let childVModel = templateJson[i].relationField.split('-')[1]\n            templateJson[i].defaultValue = this.formData[tableVModel] && this.formData[tableVModel][this.rowIndex] && this.formData[tableVModel][this.rowIndex][childVModel] || ''\n          } else {\n            templateJson[i].defaultValue = this.formData[templateJson[i].relationField] || ''\n          }\n        }\n      }\n      return templateJson\n    },\n    querySearchAsync(queryString, cb) {\n      if (!this.interfaceId) return\n      const paramList = this.getParamList()\n      paramList.forEach(res => {\n        res.defaultValue = res.relationField === '@keyword' ? queryString : res.defaultValue\n      })\n      let query = {\n        interfaceId: this.interfaceId,\n        propsValue: this.propsValue,\n        relationField: this.relationField,\n        pageSize: this.total || 50,\n        paramList\n      }\n      getDataInterfaceDataSelect(this.interfaceId, query).then(res => {\n        let list = res.data.list || []\n        if (list.length) list = this.unique(list, this.relationField)\n        cb(list)\n      }).catch(() => {\n        this.list = []\n        cb(this.list)\n      })\n    },\n    unique(arr, attrName) {\n      const res = new Map();\n      // 根据对象的某个属性值去重\n      return arr.filter(o => !res.has(o[attrName]) && res.set(o[attrName], 1));\n    },\n    handleSelect(item) {\n      this.innerValue = item[this.relationField] || ''\n    }\n  }\n\n}\n",null]}