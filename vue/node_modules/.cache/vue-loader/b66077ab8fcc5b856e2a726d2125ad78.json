{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/JNPFCustom/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/JNPFCustom/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Parser from '@/components/Generator/parser/Parser'\nimport { getConfigData, getModelInfo, createModel } from '@/api/onlineDev/visualDev'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: 'popup',\n  components: { Parser },\n  props: {},\n  data() {\n    return {\n      visible: false,\n      btnLoading: false,\n      loading: false,\n      config: {},\n      formConf: {},\n      formData: {},\n      isPreview: false,\n      key: +new Date(),\n      id: \"\",\n      dataForm: {\n        id: \"\",\n        data: \"\"\n      },\n      modelId: \"\",\n      isAdd: false\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n  },\n  methods: {\n    init(config, modelId, id, isPreview = true, row) {\n      this.loading = true\n      this.config = config\n      this.id = id\n      this.isPreview = isPreview\n      this.modelId = modelId\n      this.isAdd = true\n      this.$nextTick(() => {\n        if (this.config.modelId) this.getConfigData(row)\n      })\n    },\n    getConfigData(row) {\n      getConfigData(this.config.modelId).then(res => {\n        if (res.code !== 200 || !res.data) {\n          this.$message({\n            message: res.msg || '请求出错，请重试',\n            type: 'error',\n            duration: 1500,\n          })\n          return\n        }\n        this.formConf = JSON.parse(res.data.formData)\n        const setDataFun = (formData) => {\n          if (this.config.formOptions.length) {\n            for (let k in formData) {\n              for (let i = 0; i < this.config.formOptions.length; i++) {\n                const e = this.config.formOptions[i]\n                if (e.currentField == '@formId') this.formData[e.field] = formData.id;\n                if (e.currentField == k) this.formData[e.field] = formData[k];\n              }\n            }\n          }\n          this.fillFormData(this.formConf, this.formData)\n          this.$nextTick(() => {\n            this.visible = true\n            this.loading = false\n          })\n        }\n        if (this.id) {\n          getModelInfo(this.modelId, this.id).then(res => {\n            let dataForm = res.data\n            if (!dataForm.data) return\n            const formData = JSON.parse(dataForm.data)\n            this.formData = {}\n            setDataFun({ ...formData, id: this.id })\n          })\n        } else {\n          const formData = row\n          setDataFun(formData)\n        }\n      }).catch(() => { })\n    },\n    fillFormData(form, data) {\n      const loop = (list, parent) => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__) {\n            let val = data.hasOwnProperty(item.__vModel__) ? data[item.__vModel__] : item.__config__.defaultValue\n            if (!item.__config__.isSubTable) item.__config__.defaultValue = val\n            if (this.isAdd || item.__config__.isSubTable) {//新增时候，默认当前\n              if (item.__config__.defaultCurrent) {\n                if (item.__config__.jnpfKey === 'datePicker') {\n                  let format = item.format\n                  let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n                  let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n                    ' 00:00:00' : ''\n                  item.__config__.defaultValue = new Date(dateStr + time).getTime()\n                }\n                if (item.__config__.jnpfKey === 'timePicker') {\n                  item.__config__.defaultValue = this.jnpf.toDate(new Date(), item.format)\n                }\n                if (item.__config__.jnpfKey === 'organizeSelect' && (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0)) {\n                  item.__config__.defaultValue = item.multiple == true ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n                }\n                if (item.__config__.jnpfKey === 'depSelect' && this.userInfo.departmentId) {\n                  item.__config__.defaultValue = item.multiple ? [this.userInfo.departmentId] : this.userInfo.departmentId;\n                }\n                if (item.__config__.jnpfKey === 'posSelect' && (this.userInfo.positionIds instanceof Array && this.userInfo.positionIds.length > 0)) {\n                  item.__config__.defaultValue = item.multiple ? this.userInfo.positionIds.map(o => o.id) : this.userInfo.positionIds[0].id\n                }\n                if (item.__config__.jnpfKey === 'roleSelect' && (this.userInfo.roleIds instanceof Array && this.userInfo.roleIds.length > 0)) {\n                  item.__config__.defaultValue = item.multiple ? this.userInfo.roleIds : this.userInfo.roleIds[0];\n                }\n                if (item.__config__.jnpfKey === 'groupSelect' && (this.userInfo.groupIds instanceof Array && this.userInfo.groupIds.length > 0)) {\n                  item.__config__.defaultValue = item.multiple ? this.userInfo.groupIds : this.userInfo.groupIds[0];\n                }\n                if (['userSelect'].includes(item.__config__.jnpfKey) && this.userInfo.userId) {\n                  item.__config__.defaultValue = item.multiple ? [this.userInfo.userId] : this.userInfo.userId;\n                }\n                if (item.__config__.jnpfKey === 'usersSelect' && this.userInfo.userId) {\n                  item.__config__.defaultValue = item.multiple ? [this.userInfo.userId + '--user'] : this.userInfo.userId + '--user';\n                }\n                if (item.__config__.jnpfKey == 'sign' && this.userInfo.signImg) item.__config__.defaultValue = this.userInfo.signImg\n              }\n            }\n          }\n          if (!this.isPreview && this.useFormPermission) {\n            let id = item.__config__.isSubTable ? parent.__vModel__ + '-' + item.__vModel__ : item.__vModel__\n            let noShow = true\n            if (this.formOperates && this.formOperates.length) {\n              noShow = !this.formOperates.some(o => o.enCode === id)\n            }\n            noShow = item.__config__.noShow ? item.__config__.noShow : noShow\n            this.$set(item.__config__, 'noShow', noShow)\n          }\n          if (item.__config__ && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children, item)\n          }\n        }\n      }\n      loop(form.fields)\n      form.formData = data\n    },\n    submitForm(data, callback) {\n      console.log(data)\n      if (!data) return\n      this.btnLoading = true\n      const successFun = (res, callback) => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            if (callback && typeof callback === \"function\") callback()\n            this.visible = false\n            this.btnLoading = false\n          }\n        })\n      }\n      if (this.config.customBtn) {\n        if (this.config.templateJson && this.config.templateJson.length) {\n          this.config.templateJson.forEach((ele) => {\n            const value = data[ele.relationField] || data[ele.relationField] == 0 || data[ele.relationField] == false ? data[ele.relationField] : '';\n            ele.defaultValue = (ele.relationField === '@formId' && ele.sourceType == 1) ? data.id : ele.sourceType == 1 ? value : ele.relationField;\n          })\n        }\n        const query = {\n          paramList: this.config.templateJson || [],\n        }\n        getDataInterfaceRes(this.config.interfaceId, query).then(res => {\n          successFun(res, callback)\n        }).catch(() => { this.btnLoading = false })\n      } else {\n        const formData = { ...this.formData, ...data }\n        this.dataForm.data = JSON.stringify(formData)\n        createModel(this.config.modelId, this.dataForm).then(res => {\n          successFun(res, callback)\n        }).catch(() => { this.btnLoading = false })\n      }\n    },\n    dataFormSubmit() {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.$refs.dynamicForm && this.$refs.dynamicForm.submitForm()\n    }\n  }\n}\n",null]}