{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/DraggableItemApp.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/DraggableItemApp.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport draggable from 'vuedraggable'\nimport render from '@/components/Generator/render/render'\n\nlet activeData = {}\nconst components = {\n  itemBtns(h, element, index, parent) {\n    const gutter = element.__config__.layout === 'colFormItem' && this.formConf.gutter ? this.formConf.gutter : 15\n    const rightDistance = gutter / 2\n    const { copyItem, deleteItem } = this.$listeners\n    return [\n      <span class=\"drawing-item-copy\" style={{ '--rightDistance': rightDistance + 50 + 'px' }} title=\"复制\" onClick={event => {\n        copyItem(element, parent); event.stopPropagation()\n      }}>\n        <i class=\"el-icon-copy-document\" />\n      </span>,\n      <el-popconfirm title=\"确定删除该组件？\" style={{ '--rightDistance': rightDistance + 18 + 'px' }} class=\"drawing-item-delete\" onConfirm={event => {\n        deleteItem(index, parent)\n      }}>\n        <span title=\"删除\" slot=\"reference\" style=\"width:100%;height:100%;display:inline-block\">\n          <i class=\"el-icon-delete\" />\n        </span>\n      </el-popconfirm>\n    ]\n  }\n}\nconst layouts = {\n  colFormItem(h, element, index, parent) {\n    const { activeItem } = this.$listeners\n    const config = element.__config__\n    const __vModel__ = element.__vModel__\n    let className = this.activeId === config.formId ? 'drawing-item active-from-item' : 'drawing-item'\n    if (this.formConf.unFocusedComponentBorder) className += ' unfocus-bordered'\n    let labelWidth = config.labelWidth ? `${config.labelWidth}px` : null\n    let label = config.label ? config.parentVModel ? config.label : config.label + (this.formConf.labelSuffix || '') : ''\n    if (config.showLabel === false) labelWidth = '0'\n    if (config.jnpfKey === 'text') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width={labelWidth}\n            label={config.showLabel ? label : ''} required={config.required}>\n            {element.content}\n          </el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    if (config.jnpfKey === 'link') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width=\"0\">\n            <jnpf-link content={element.content} href={element.href} target={element.target}\n              textStyle={element.textStyle} />\n          </el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    if (config.jnpfKey === 'alert') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width=\"0\">\n            <el-alert title={element.title} type={element.type} closable={element.closable}\n              show-icon={element.showIcon} />\n          </el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    if (config.jnpfKey === 'groupTitle') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width=\"0\">{element.content}</el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    if (config.jnpfKey === 'barcode') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width={labelWidth}\n            label={config.showLabel ? config.label : ''} required={config.required}>\n            <jnpf-barcode format={element.format} lineColor={element.lineColor} background={element.background} width={element.width} height={element.height} staticText={element.staticText}></jnpf-barcode>\n          </el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    if (config.jnpfKey === 'qrcode') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width={labelWidth}\n            label={config.showLabel ? label : ''} required={config.required}>\n            <jnpf-qrcode size={element.size} colorLight={element.colorLight} colorDark={element.colorDark} staticText={element.staticText}></jnpf-qrcode>\n          </el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    if (config.jnpfKey === 'button') {\n      return (\n        <el-col span={24} class={className}\n          nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n          <el-form-item label-width=\"0\">\n            <jnpf-button align={element.align} buttonText={element.buttonText} type={element.type} disabled={element.disabled}></jnpf-button>\n          </el-form-item>\n          {components.itemBtns.apply(this, arguments)}\n        </el-col>\n      )\n    }\n    return (\n      <el-col span={24} class={className}\n        nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n        <jnpf-form-tip-item label-width={labelWidth} tip-label={config.label && config.showLabel ? config.tipLabel : ''}\n          label={config.showLabel ? label : ''} required={config.required}>\n          {__vModel__}\n        </jnpf-form-tip-item>\n        {components.itemBtns.apply(this, arguments)}\n      </el-col>\n    )\n  },\n  rowFormItem(h, element, index, parent) {\n    const { activeItem } = this.$listeners\n    const { put, end } = this.$attrs\n    const className = this.activeId === element.__config__.formId\n      ? 'drawing-row-item active-from-item'\n      : 'drawing-row-item'\n    if (element.__config__.jnpfKey === 'tab') {\n      return (\n        <el-col span={24}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <el-tabs type={element.type} tab-position={element.tabPosition} vModel={element.__config__.active}>\n              {\n                element.__config__.children.map((item, i) => {\n                  let child = renderChildren.apply(this, [h, item, i, element])\n                  let childgroup = { name: 'componentsGroup', put: (...arg) => put(...arg, item) }\n                  const onChildEnd = (...arg) => end(...arg, activeData, item)\n                  let tip = ''\n                  if (!item.__config__.children.length) {\n                    tip = <div class=\"table-tip tab-tip\">请将组件拖到此区域(可拖多个组件)</div>\n                  }\n                  return (\n                    <el-tab-pane key={item.name} name={item.name} label={item.title} >\n                      <el-col >\n                        {tip}\n                        <el-row gutter={element.__config__.gutter} style=\"padding-top:15px\">\n                          <draggable list={item.__config__.children} animation={340} group={childgroup} onEnd={onChildEnd} class=\"drag-wrapper\">\n                            {child}\n                          </draggable>\n                        </el-row>\n                      </el-col>\n                    </el-tab-pane>\n                  )\n                })\n              }\n            </el-tabs>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'collapse') {\n      return (\n        <el-col span={24}>\n          <el-row gutter={element.__config__.gutter} class={className}\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <el-collapse vModel={element.__config__.active} accordion={element.accordion}>\n              {\n                element.__config__.children.map((item, i) => {\n                  let child = renderChildren.apply(this, [h, item, i, element])\n                  let childgroup = { name: 'componentsGroup', put: (...arg) => put(...arg, item) }\n                  const onChildEnd = (...arg) => end(...arg, activeData, item)\n                  let tip = ''\n                  if (!item.__config__.children.length) {\n                    tip = <div class=\"table-tip card-tip\">请将组件拖到此区域(可拖多个组件)</div>\n                  }\n                  return (\n                    <el-collapse-item key={item.name} title={item.title} name={item.name} >\n                      <el-col style=\"position:relative\">\n                        {tip}\n                        <el-row gutter={element.__config__.gutter} style=\"padding-top:15px\">\n                          <draggable list={item.__config__.children} animation={340} group={childgroup} onEnd={onChildEnd} class=\"drag-wrapper\">\n                            {child}\n                          </draggable>\n                        </el-row>\n                      </el-col>\n                    </el-collapse-item>\n                  )\n                })\n              }\n            </el-collapse>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'tableGrid') {\n      return (\n        <el-col span={24}>\n          <el-row gutter={element.__config__.gutter} class={className} style=\"padding-top:30px\"\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <span class=\"component-name\">{element.__config__.label}</span>\n            <div class=\" drag-wrapper table-wrapper\">\n              <div class=\"table-tip\">请在桌面端设计表格（移动端不支持）</div>\n            </div>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    let child = renderChildren.apply(this, arguments)\n    const group = { name: 'componentsGroup', put: (...arg) => put(...arg, element) }\n    const onEnd = (...arg) => end(...arg, activeData, element)\n    if (element.__config__.jnpfKey === 'row') {\n      if (element.type === 'flex') {\n        child = <el-row type={element.type} justify={element.justify} align={element.align}>\n          {child}\n        </el-row>\n      }\n      let tip = ''\n      if (!element.__config__.children.length) {\n        tip = <div class=\"table-tip\">请将组件拖到此区域(可拖多个组件)</div>\n      }\n      return (\n        <el-col span={24}>\n          <el-row gutter={element.__config__.gutter} class={className} style=\"padding-top:30px\"\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <span class=\"component-name\">{element.__config__.componentName}</span>\n            {tip}\n            <draggable list={element.__config__.children} animation={340} group={group} onEnd={onEnd} class=\"drag-wrapper\">\n              {child}\n            </draggable>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'card') {\n      let tip = ''\n      if (!element.__config__.children.length) {\n        tip = <div class=\"table-tip\">请将组件拖到此区域(可拖多个组件)</div>\n      }\n      let toolTip = element.header\n      if (element.__config__.tipLabel) {\n        toolTip = <span slot=\"label\">{element.header}\n          <el-tooltip placement=\"top\" content={element.__config__.tipLabel}>\n            <a class='el-icon-question tooltip-question content-name'></a>\n          </el-tooltip>\n        </span >\n      }\n      return (\n        <el-col span={24}>\n          <el-row gutter={element.__config__.gutter} class={className} style=\"padding-top:30px\"\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <span class=\"component-name\">{toolTip}</span>\n            {tip}\n            <draggable list={element.__config__.children} animation={340} group={group} onEnd={onEnd} class=\"drag-wrapper\">\n              {child}\n            </draggable>\n            {components.itemBtns.apply(this, arguments)}\n          </el-row>\n        </el-col>\n      )\n    }\n    if (element.__config__.jnpfKey === 'table') {\n      let tip = ''\n      if (!element.__config__.children.length) {\n        tip = <div class=\"table-tip\">请将组件拖到此区域(可拖多个组件)</div>\n      }\n      let toolTip = element.__config__.label\n      if (element.__config__.tipLabel) {\n        toolTip = <span slot=\"label\">{element.__config__.label}\n          <el-tooltip placement=\"top\" content={element.__config__.tipLabel}>\n            <a class='el-icon-question tooltip-question content-name'></a>\n          </el-tooltip>\n        </span >\n      }\n      return (\n        <el-col span={24}>\n          <el-row gutter={element.__config__.gutter} class={className} style=\"padding-top:30px\"\n            nativeOnClick={event => { activeItem(element); event.stopPropagation() }}>\n            <span class=\"component-name\">{toolTip}</span>\n            {tip}\n            <draggable list={element.__config__.children} animation={340} group={group} class=\"drag-wrapper table-wrapper\" onEnd={onEnd} clone={cloneComponent}>\n              {child}\n            </draggable>\n            {components.itemBtns.apply(this, arguments)}\n            {\n              // <div style=\"text-align: center;background: white;color: #4e79ff;padding: .4rem 1rem;\">\n              //   <i class=\"el-icon-plus\"></i> {element.actionText}\n              // </div>\n            }\n          </el-row>\n        </el-col>\n      )\n    }\n  }\n}\nfunction cloneComponent(origin) {\n  activeData = origin\n}\n\nfunction renderChildren(h, element, index, parent) {\n  const config = element.__config__\n  if (!Array.isArray(config.children)) return null\n  return config.children.map((el, i) => {\n    const layout = layouts[el.__config__.layout]\n    if (layout) {\n      return layout.call(this, h, el, i, config.children)\n    }\n    return layoutIsNotFound.call(this)\n  })\n}\n\nfunction layoutIsNotFound() {\n  throw new Error(`没有与${this.element.__config__.layout}匹配的layout`)\n}\n\nexport default {\n  components: {\n    render,\n    draggable\n  },\n  props: [\n    'element',\n    'index',\n    'drawingList',\n    'activeId',\n    'formConf'\n  ],\n  render(h) {\n    const layout = layouts[this.element.__config__.layout]\n\n    if (layout) {\n      return layout.call(this, h, this.element, this.index, this.drawingList)\n    }\n    return layoutIsNotFound.call(this)\n  }\n}\n",null]}