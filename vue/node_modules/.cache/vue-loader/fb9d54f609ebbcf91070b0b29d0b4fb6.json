{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/PortalDesign/components/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/PortalDesign/components/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VueGridLayout from 'vue-grid-layout'\nimport { deepClone } from '@/utils'\nimport {\n  layoutComponents,\n  systemComponents,\n  basicComponents,\n  chartComponents,\n  noNeedMaskList,\n  needDefaultList,\n} from './config'\nimport {\n  chartData,\n  mapChartData,\n  rankList,\n  timeAxisList,\n  tableList\n} from '@/components/VisualPortal/PortalDesign/components/data'\nimport Preview from './Preview'\nimport CardHeader from '@/components/VisualPortal/CardHeader'\nimport RightPanel from './RightPanel'\nimport parser from './parser'\nimport draggable from 'vuedraggable'\nimport { validURL } from '@/utils/validate'\n\nconst defaultConf = {\n  layoutId: 100,\n  layout: [],\n  refresh: {\n    autoRefresh: false,\n    autoRefreshTime: '5',\n  }\n}\nexport default {\n  name: 'JNPF-PortalDesigner',\n  props: ['conf', 'showType'],\n  components: {\n    GridLayout: VueGridLayout.GridLayout,\n    GridItem: VueGridLayout.GridItem,\n    Preview,\n    RightPanel,\n    draggable,\n    CardHeader,\n    parser\n  },\n  data() {\n    return {\n      componentsList: [\n        { title: '布局控件', list: layoutComponents },\n        { title: '基础控件', list: basicComponents },\n        { title: '系统控件', list: systemComponents },\n        { title: '图表控件', list: chartComponents }\n      ],\n      layout: [],\n      activeId: null,\n      activeData: null,\n      refresh: {},\n      previewVisible: false,\n      noNeedMaskList,\n      config: {},\n      copyDrawingList: ''\n    }\n  },\n  mounted() {\n    if (typeof this.conf === 'object' && this.conf !== null) {\n      this.config = { ...defaultConf, ...this.conf }\n    } else {\n      this.config = deepClone(defaultConf)\n      this.config.layoutId = 100\n    }\n    this.layout = this.config.layout || []\n    this.refresh = this.config.refresh || {}\n    setTimeout(() => {\n      this.addLocalRecord(this.layout)\n      this.setActiveData()\n    }, 50);\n    this.$eventBus.$on('addComponent', (val, currentVal, index) => {\n      this.addComponent(val, '', currentVal, index)\n    })\n    this.$eventBus.$on('handlerActive', val => {\n      this.handleClick(val)\n    })\n  },\n  beforeDestroy() {\n    if (this.activeData && this.activeData.i) this.$eventBus.$off('eChart' + this.activeData.i)\n    this.$eventBus.$off('addComponent')\n    this.$eventBus.$off('handlerActive')\n  },\n  methods: {\n    handleData(data) {\n      this.layout = JSON.parse(JSON.stringify(data));\n      this.copyDrawingList = JSON.stringify(this.layout);\n      let boo = false;\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const e = list[i];\n          if (e.i === this.activeId) {\n            this.activeData = e;\n            this.activeId = e.i\n            boo = true;\n          }\n          if (e.children && Array.isArray(e.children)) loop(e.children);\n        }\n      };\n      loop(this.layout);\n      if (!boo) {\n        this.activeData = {};\n        this.activeId = null;\n      }\n    },\n    addLocalRecord(val) {\n      if (JSON.stringify(val) != this.copyDrawingList) {\n        this.copyDrawingList = JSON.stringify(val);\n        this.$emit('addRecord', val)\n      }\n    },\n    setActiveData(i = 0) {\n      this.activeId = null\n      this.activeData = {}\n      if (this.layout.length) {\n        this.activeData = this.layout[i]\n        this.activeId = this.layout[i].i\n      }\n    },\n    getData() {\n      return new Promise((resolve, reject) => {\n        const loop = list => {\n          for (let i = 0; i < list.length; i++) {\n            const e = list[i]\n            const option = e.option || {}\n            const card = e.card || {}\n            if (card.cardRightBtn) {\n              if (card.linkType === '1' && !card.urlAddress) {\n                reject({ msg: `${e.label}控件“菜单名称”属性不能为空`, target: 1 })\n                break\n              }\n              if (card.linkType === '2') {\n                if (!card.urlAddress) {\n                  reject({ msg: `${e.label}控件“链接地址”属性不能为空`, target: 1 })\n                  break\n                }\n                if (!validURL(card.urlAddress)) {\n                  reject({ msg: '请输入正确的链接地址', target: 1 })\n                  break\n                }\n              }\n              if (card.appLinkType === '1' && !card.appUrlAddress) {\n                reject({ msg: `${e.label}控件“菜单名称”属性不能为空`, target: 1 })\n                break\n              }\n              if (card.appLinkType === '2') {\n                if (!card.appUrlAddress) {\n                  reject({ msg: `${e.label}控件“链接地址”属性不能为空`, target: 1 })\n                  break\n                }\n                if (!validURL(card.appUrlAddress)) {\n                  reject({ msg: '请输入正确的链接地址', target: 1 })\n                  break\n                }\n              }\n            }\n            if (option.linkType === '1' && !option.urlAddress) {\n              reject({ msg: `${e.label}控件“菜单名称”属性不能为空`, target: 1 })\n              break\n            }\n            if (option.linkType === '2') {\n              if (!option.urlAddress) {\n                reject({ msg: `${e.label}控件“链接地址”属性不能为空`, target: 1 })\n                break\n              }\n              if (!validURL(option.urlAddress)) {\n                reject({ msg: '请输入正确的链接地址', target: 1 })\n                break\n              }\n            }\n            if (option.appLinkType === '1' && !option.appUrlAddress) {\n              reject({ msg: `${e.label}控件“菜单名称”属性不能为空`, target: 1 })\n              break\n            }\n            if (option.appLinkType === '2') {\n              if (!option.appUrlAddress) {\n                reject({ msg: `${e.label}控件“链接地址”属性不能为空`, target: 1 })\n                break\n              }\n              if (!validURL(option.appUrlAddress)) {\n                reject({ msg: '请输入正确的链接地址', target: 1 })\n                break\n              }\n            }\n            if ((e.jnpfKey == 'video' || e.jnpfKey == 'image') && option.styleType == 2) {\n              const val = e.jnpfKey == 'video' ? '视频' : '图片'\n              if (!option.defaultValue) {\n                reject({ msg: `${e.label}控件“${val}地址”属性不能为空`, target: 1 })\n                break\n              }\n              if (!validURL(option.defaultValue)) {\n                reject({ msg: `请输入正确的${val}地址`, target: 1 })\n                break\n              }\n            }\n            if (e.jnpfKey == 'iframe') {\n              if (!option.defaultValue) {\n                reject({ msg: `${e.label}控件“链接地址”属性不能为空`, target: 1 })\n                break\n              }\n              if (!validURL(option.defaultValue)) {\n                reject({ msg: '请输入正确的链接地址', target: 1 })\n                break\n              }\n            }\n            if (e.children && Array.isArray(e.children)) loop(e.children)\n          }\n        }\n        loop(this.layout)\n        this.config.layout = this.layout\n        resolve({ formData: this.config, target: 1 })\n      })\n    },\n    addComponent(item, type, currentItem, index) {\n\n      let clone = deepClone(item)\n      let x = 0, y = 0, i = this.config.layoutId\n      if (this.layout.length) {\n        let maxYItem = { y: 0, h: 0 };\n        for (let i = 0; i < this.layout.length; i++) {\n          if (this.layout[i].y >= maxYItem.y) maxYItem = this.layout[i];\n        }\n        y = maxYItem.y + maxYItem.h;\n      }\n      let row = { ...clone, i, x, y }\n      if (needDefaultList.includes(row.jnpfKey) && type != 'copy') row.option.defaultValue = this.getDefaultValue(row)\n      if (currentItem) {\n        if (currentItem.jnpfKey == 'card') currentItem.children.push(row)\n        if (currentItem.jnpfKey == 'collapse') currentItem.children[index].children.push(row)\n        if (currentItem.jnpfKey == 'tab') {\n          currentItem.children.forEach(element => {\n            if (element.name == currentItem.active) element.children.push(row)\n          });\n        }\n      } else {\n        this.layout.push(row)\n      }\n      this.activeId = this.config.layoutId\n      this.activeData = row\n      this.config.layoutId++\n      this.addLocalRecord(this.layout)\n    },\n    getDefaultValue(row) {\n      const jnpfKey = row.jnpfKey\n      if (jnpfKey == 'text') return \"JNPF快速开发平台\"\n      if (jnpfKey == 'image') return \"https://app.cdn.jnpfsoft.com/image/3.2/banner1.png\"\n      if (jnpfKey == 'video') return \"https://cdn.jnpfsoft.com/2022/video/index_video.mp4\"\n      if (jnpfKey == 'barChart' || jnpfKey == 'lineChart' || jnpfKey == 'pieChart') return chartData.baseBarData\n      if (jnpfKey == 'radarChart') return chartData.radarData\n      if (jnpfKey == 'mapChart') return mapChartData\n      if (jnpfKey == 'rankList') return rankList\n      if (jnpfKey == 'timeAxis') return timeAxisList\n      if (jnpfKey == 'tableList') return tableList\n    },\n    handleRemoveItem(i) {\n      this.layout = this.layout.filter(item => item.i !== i);\n      this.activeId = null\n      this.activeData = {}\n      this.addLocalRecord(this.layout)\n      this.$nextTick(() => {\n        const len = this.layout.length\n        if (len) this.setActiveData(len - 1)\n      })\n    },\n    empty() {\n      this.$confirm('确定要清空所有吗？', '提示', { type: 'warning' }).then(() => {\n        this.layout = []\n        this.config.layoutId = 100\n        this.activeId = null\n        this.activeData = {}\n        this.addLocalRecord(this.layout)\n      }).catch(() => { })\n    },\n    preview() {\n      this.previewVisible = true\n    },\n    handleClick(item) {\n      this.activeId = item.i\n      this.activeData = item\n    },\n    resizedEvent(i, item) {\n      this.$eventBus.$emit('eChart' + i)\n      const loop = (data) => {\n        if (data.children && item.children.length) {\n          data.children.map(ele => {\n            if (ele.jnpfKey) this.$eventBus.$emit('eChart' + ele.i)\n            if (ele.children && ele.children.length) loop(ele)\n          })\n        }\n      }\n      loop(item)\n      this.addLocalRecord(this.layout)\n    },\n    movedEvent() {\n      this.addLocalRecord(this.layout)\n    }\n  }\n}\n",null]}