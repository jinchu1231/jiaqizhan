{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/PortalDesign/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/PortalDesign/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getPortalInfo, Update, Create } from '@/api/onlineDev/portal'\nimport PortalDesigner from './components'\nimport useRedoMixins from '@/components/VisualPortal/mixins/useRedo'\nimport ReleaseDialog from '@/views/onlineDev/visualPortal/releaseDialog'\nexport default {\n  mixins: [useRedoMixins],\n  components: { PortalDesigner, ReleaseDialog },\n  data() {\n    return {\n      currRow: {},\n      visible: false,\n      loading: false,\n      formVisible: false,\n      btnLoading: false,\n      formData: null,\n      categoryList: [],\n      showType: 'pc',\n      fullName: '',\n      id: '',\n      key: false,\n      showFullName: false,\n      releaseDialog: false,\n    }\n  },\n  methods: {\n    init(row) {\n      this.currRow = row\n      this.visible = true\n      this.loading = false\n      this.formData = null\n      this.fullName = row.fullName\n      this.btnLoading = false\n      this.showType = 'pc'\n      this.initRedo()\n      this.$nextTick(() => {\n        if (this.currRow.id) {\n          this.loading = true\n          getPortalInfo(this.currRow.id).then(res => {\n            this.loading = false\n            this.formData = JSON.parse(res.data.formData)\n          }).catch(() => { this.loading = false })\n        }\n      })\n    },\n    dataFormSubmit(type) {\n      this.$refs['portalDesigner'].getData().then(res => {\n        this.btnLoading = true\n        this.formData = res.formData\n        let query = {\n          type: this.currRow.type,\n          formData: JSON.stringify(this.formData),\n          id: this.currRow.id\n        }\n        const formMethod = this.currRow.id ? Update : Create\n        formMethod(query).then((res) => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.btnLoading = false\n              if (type == 1) {\n                this.$nextTick(() => {\n                  this.releaseDialog = true\n                  this.$refs.release.openRelease(this.currRow)\n                })\n              } else {\n                this.closeDialog(true)\n              }\n            }\n          })\n        }).catch(() => { this.btnLoading = false })\n      }).catch(err => {\n        err.msg && this.$message.warning(err.msg)\n      })\n    },\n    closeDialog(isRefresh) {\n      this.visible = false\n      this.$emit('close', isRefresh)\n    },\n    handleRedoAndUndo(func) {\n      this[func](this.$refs.portalDesigner.handleData)\n    },\n    preview() {\n      this.$refs.portalDesigner.preview()\n    },\n    empty() {\n      this.$refs.portalDesigner.empty()\n    },\n    handleAddRecord(val) {\n      this.addRecord(val)\n    }\n  }\n}\n",null]}