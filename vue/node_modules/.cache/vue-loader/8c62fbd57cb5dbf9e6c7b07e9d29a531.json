{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RLocation/MapModal.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RLocation/MapModal.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AMapLoader from '@amap/amap-jsapi-loader';\nimport { getInputTips } from '@/api/common'\nexport default {\n  components: {},\n  data() {\n    return {\n      visible: false,\n      AMap: null,\n      map: null,\n      innerValue: {\n        lng: '',\n        lat: '',\n        name: '',\n        radius: 500,\n      },\n      options: [],\n      marker: undefined,\n      keyword: ''\n    }\n  },\n  methods: {\n    init(data) {\n      this.visible = true\n      this.keyword = ''\n      this.innerValue = {\n        lng: '',\n        lat: '',\n        radius: 500,\n      };\n      if (data.item) {\n        this.innerValue = data.item;\n        this.keyword = this.innerValue.name\n      }\n      this.$nextTick(() => {\n        this.initMap();\n      })\n    },\n    initMap() {\n      AMapLoader.reset()\n      AMapLoader.load({\n        key: this.define.aMapJsKey,\n        version: '2.0',\n        plugins: ['AMap.PlaceSearch', 'AMap.Geolocation', 'AMap.Geocoder'],\n      }).then((AMap) => {\n        this.AMap = AMap;\n        const query = {\n          viewMode: '3D',\n          zoom: 16,\n        };\n        const isEdit = this.innerValue && this.innerValue.lng && this.innerValue.lat;\n        if (isEdit) query.center = [this.innerValue.lng, this.innerValue.lat];\n        this.map = new AMap.Map('container', query);\n        if (isEdit) this.handleMarker(this.innerValue.lng, this.innerValue.lat);\n        this.map.on('click', this.handleCenter);\n      });\n    },\n    handleCenter(e) {\n      const { lng, lat } = e.lnglat;\n      this.handleMarker(lng, lat);\n      this.handleGetAddress([lng, lat]);\n    },\n    onSearch(searchText, cb) {\n      const query = {\n        key: this.define.aMapWebKey,\n        keywords: searchText,\n      };\n      getInputTips(query).then((res) => {\n        this.options = res.data.tips || [];\n        cb(this.options)\n      });\n    },\n    onSelect(item) {\n      this.keyword = item.name;\n      if (!item.location || !item.location.length) {\n        this.handleGetLngLat(item.name);\n      } else {\n        const [lng, lat] = item.location.split(',');\n        this.handleMarker(lng, lat);\n      }\n    },\n    handleMarker(lng, lat) {\n      this.innerValue.lng = lng;\n      this.innerValue.lat = lat;\n      this.marker && this.map.remove(this.marker);\n      this.marker = new this.AMap.Marker({\n        icon: 'https://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n        position: [lng, lat],\n        offset: new this.AMap.Pixel(-12, -30),\n      });\n      this.map.add(this.marker);\n      this.map.setFitView();\n    },\n    handleGetAddress(position) {\n      var geocoder = new this.AMap.Geocoder();\n      let that = this\n      geocoder.getAddress(position, function (status, res) {\n        if (status === 'complete' && res.info === 'OK') {\n          that.keyword = res.regeocode.formattedAddress;\n          that.$forceUpdate()\n        }\n      });\n    },\n    handleGetLngLat(address) {\n      var geocoder = new this.AMap.Geocoder();\n      let that = this\n      geocoder.getLocation(address, function (status, res) {\n        if (status === 'complete' && res.info === 'OK') {\n          const { lng, lat } = res.geocodes[0].location;\n          that.handleMarker(lng, lat);\n        }\n      });\n    },\n    handleSubmit() {\n      this.innerValue.name = this.keyword\n      if (!this.innerValue.lat || !this.innerValue.lng) return this.$message.error('请输入定位中心');\n      if (!this.innerValue.radius) return this.$message.warning('定位范围不能为空');\n      this.$emit('confirm', this.innerValue);\n      this.handleCancel()\n    },\n    onDropdownVisibleChange(e) {\n      if (e) options = [];\n    },\n    handleCancel() {\n      this.visible = false\n      this.$nextTick(() => {\n        this.map && this.map.destroy();\n      })\n    },\n    handleNumber(val) {\n      this.$nextTick(() => { this.innerValue.radius = val && val > 0 ? Number(val) : 1 })\n    },\n  }\n}\n",null]}