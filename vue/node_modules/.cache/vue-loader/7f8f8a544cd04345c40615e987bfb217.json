{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/msgCenter/sendConfig/TestSend.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/msgCenter/sendConfig/TestSend.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { testSendConfigInfo, testSendConfig } from '@/api/msgCenter/sendConfig'\nimport SendResults from './SendResults'\nimport Detail from '@/components/Process/PropPanel/TemplateDetail'\nimport { deepClone } from '../../../components/Generator/utils'\n\nexport default {\n  components: { SendResults, Detail },\n  name: 'sendConfig-TestSend',\n  data() {\n    return {\n      btnLoading: false,\n      loading: false,\n      resultsVisible: false,\n      viewVisible: false,\n      resultData: [],\n      testSendData: [],\n      resultList: []\n    }\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    init(id) {\n      this.$nextTick(() => {\n        if (id) {\n          this.loading = true\n          testSendConfigInfo(id).then(res => {\n            this.testSendData = res.data\n            for (let index = 0; index < this.testSendData.length; index++) {\n              const item = this.testSendData[index]\n              item.paramJson = item.paramJson || []\n              item.toUser = item.toUser || []\n            }\n            this.loading = false\n          }).catch(() => {\n            this.loading = false\n          })\n        }\n      })\n    },\n    dataFormSubmit() {\n      for (let i = 0; i < this.testSendData.length; i++) {\n        const item = this.testSendData[i]\n        if (item.toUser && !item.toUser.length && item.messageType != 'webhook') {\n          return this.$message.error(`${item.msgTemplateName}的接收人为空！`)\n        }\n        if (item.paramJson && item.paramJson.length) {\n          for (let j = 0; j < item.paramJson.length; j++) {\n            const cur = item.paramJson[j];\n            if (!cur.value) {\n              return this.$message.error(`${item.msgTemplateName}参数对应的变量为空！`)\n            }\n          }\n        }\n      }\n      let data = deepClone(this.testSendData)\n      this.btnLoading = true\n      testSendConfig(data).then(res => {\n        this.btnLoading = false\n        this.resultList = res.data\n        this.showSendResults()\n      }).catch(() => {\n        this.btnLoading = false\n      })\n    },\n    showSendResults() {\n      this.resultsVisible = true\n      this.$nextTick(() => {\n        this.$refs.ResultsDialog && this.$refs.ResultsDialog.init(this.resultList)\n      })\n    },\n    goDetail(id) {\n      this.viewVisible = true\n      this.$nextTick(() => {\n        this.$refs.View.init(id)\n      })\n    }\n  }\n}\n",null]}