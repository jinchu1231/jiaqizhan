{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/permission/group/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/permission/group/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getGroupInfo, createGroup, updateGroup } from '@/api/permission/group'\n\nexport default {\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      typeOptions: [],\n      dataForm: {\n        id: '',\n        fullName: '',\n        enCode: '',\n        type: '',\n        sortCode: 0,\n        enabledMark: 1,\n        description: ''\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: '请输入分组名称', trigger: 'blur' },\n          { validator: this.formValidate('fullName', '分组名称不能含有特殊符号'), trigger: 'blur' }\n        ],\n        enCode: [\n          { required: true, message: '请输入分组编码', trigger: 'blur' },\n          { validator: this.formValidate('enCode', '分组编码只能输入英文、数字和小数点且小数点不能放在首尾'), trigger: 'blur' },\n          { max: 50, message: '分组编码最多为50个字符！', trigger: 'blur' }\n        ],\n        type: [\n          { required: true, message: '请选择分组类型', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  methods: {\n    init(id) {\n      this.dataForm.id = id || ''\n      this.visible = true\n      this.formLoading = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        this.$store.dispatch('base/getDictionaryData', { sort: 'groupType' }).then(res => {\n          this.typeOptions = res\n        })\n        if (this.dataForm.id) {\n          getGroupInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n          })\n        }\n      })\n      this.formLoading = false\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.btnLoading = true\n          const formMethod = this.dataForm.id ? updateGroup : createGroup\n          formMethod(this.dataForm).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.$store.commit('generator/SET_GROUP_TREE', [])\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList')\n              }\n            })\n          }).catch(() => {\n            this.btnLoading = false\n          })\n        }\n      })\n    }\n  }\n}\n",null]}