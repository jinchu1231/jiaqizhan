{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/Upload/vue-simple-uploader/fileItem.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/Upload/vue-simple-uploader/fileItem.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.number.constructor\");\nrequire(\"core-js/modules/es6.object.keys\");\nrequire(\"core-js/modules/web.dom.iterable\");\nvar _simpleUploader = _interopRequireDefault(require(\"simple-uploader.js\"));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar COMPONENT_NAME = 'uploader-file';\nvar secondsToStr = function secondsToStr(temp) {\n  var years = Math.floor(temp / 31536000);\n  if (years) {\n    return years + ' year' + numberEnding(years);\n  }\n  var days = Math.floor((temp %= 31536000) / 86400);\n  if (days) {\n    return days + ' day' + numberEnding(days);\n  }\n  var hours = Math.floor((temp %= 86400) / 3600);\n  if (hours) {\n    return hours + ' hour' + numberEnding(hours);\n  }\n  var minutes = Math.floor((temp %= 3600) / 60);\n  if (minutes) {\n    return minutes + ' minute' + numberEnding(minutes);\n  }\n  var seconds = temp % 60;\n  return seconds + ' second' + numberEnding(seconds);\n  function numberEnding(number) {\n    return number > 1 ? 's' : '';\n  }\n};\nvar events = ['fileProgress', 'fileSuccess', 'fileComplete', 'fileError'];\nvar _default2 = exports.default = {\n  name: COMPONENT_NAME,\n  props: {\n    file: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    list: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      response: null,\n      paused: false,\n      error: false,\n      averageSpeed: 0,\n      currentSpeed: 0,\n      isComplete: false,\n      isUploading: false,\n      size: 0,\n      formatedSize: '',\n      uploadedSize: 0,\n      progress: 0,\n      timeRemaining: 0,\n      type: '',\n      extension: '',\n      progressingClass: '',\n      successProgressStyle: {\n        progress: '100%',\n        webkitTransform: 'translateX(0)',\n        mozTransform: 'translateX(0)',\n        msTransform: 'translateX(0)',\n        transform: 'translateX(0)'\n      }\n    };\n  },\n  computed: {\n    fileCategory: function fileCategory() {\n      var extension = this.extension;\n      var isFolder = this.file.isFolder;\n      var type = isFolder ? 'folder' : 'unknown';\n      var categoryMap = this.file.uploader.opts.categoryMap;\n      var typeMap = categoryMap || {\n        image: ['gif', 'jpg', 'jpeg', 'png', 'bmp', 'webp'],\n        video: ['mp4', 'm3u8', 'rmvb', 'avi', 'swf', '3gp', 'mkv', 'flv'],\n        audio: ['mp3', 'wav', 'wma', 'ogg', 'aac', 'flac'],\n        document: ['doc', 'txt', 'docx', 'pages', 'epub', 'pdf', 'numbers', 'csv', 'xls', 'xlsx', 'keynote', 'ppt', 'pptx']\n      };\n      Object.keys(typeMap).forEach(function (_type) {\n        var extensions = typeMap[_type];\n        if (extensions.indexOf(extension) > -1) {\n          type = _type;\n        }\n      });\n      return type;\n    },\n    progressStyle: function progressStyle() {\n      var realProgress = this.progress === 1 ? .99 : this.progress;\n      var progress = Math.floor(realProgress * 100);\n      var style = \"translateX(\".concat(Math.floor(progress - 100), \"%)\");\n      return {\n        progress: \"\".concat(progress, \"%\"),\n        webkitTransform: style,\n        mozTransform: style,\n        msTransform: style,\n        transform: style\n      };\n    },\n    formatedAverageSpeed: function formatedAverageSpeed() {\n      return \"\".concat(_simpleUploader.default.utils.formatSize(this.averageSpeed), \" / s\");\n    },\n    status: function status() {\n      var isUploading = this.isUploading;\n      var isComplete = this.isComplete;\n      var isError = this.error;\n      var paused = this.paused;\n      if (isComplete) {\n        return 'success';\n      } else if (isError) {\n        return 'error';\n      } else if (isUploading) {\n        return 'uploading';\n      } else if (paused) {\n        return 'paused';\n      } else {\n        return 'waiting';\n      }\n    },\n    statusText: function statusText() {\n      var status = this.status;\n      var fileStatusText = this.file.uploader.fileStatusText;\n      var txt = status;\n      if (typeof fileStatusText === 'function') {\n        txt = fileStatusText(status, this.response);\n      } else {\n        txt = fileStatusText[status];\n      }\n      return txt || status;\n    },\n    formatedTimeRemaining: function formatedTimeRemaining() {\n      var timeRemaining = this.timeRemaining;\n      var file = this.file;\n      if (timeRemaining === Number.POSITIVE_INFINITY || timeRemaining === 0) {\n        return '';\n      }\n      var parsedTimeRemaining = secondsToStr(timeRemaining);\n      var parseTimeRemaining = file.uploader.opts.parseTimeRemaining;\n      if (parseTimeRemaining) {\n        parsedTimeRemaining = parseTimeRemaining(timeRemaining, parsedTimeRemaining);\n      }\n      return parsedTimeRemaining;\n    }\n  },\n  watch: {\n    status: function status(newStatus, oldStatus) {\n      var _this = this;\n      if (oldStatus && newStatus === 'uploading' && oldStatus !== 'uploading') {\n        this.tid = setTimeout(function () {\n          _this.progressingClass = 'uploader-file-progressing';\n        }, 200);\n      } else {\n        clearTimeout(this.tid);\n        this.progressingClass = '';\n      }\n    }\n  },\n  methods: {\n    _actionCheck: function _actionCheck() {\n      this.paused = this.file.paused;\n      this.error = this.file.error;\n      this.isUploading = this.file.isUploading();\n    },\n    pause: function pause() {\n      this.file.pause();\n      this._actionCheck();\n      this._fileProgress();\n    },\n    resume: function resume() {\n      this.file.resume();\n      this._actionCheck();\n    },\n    remove: function remove() {\n      this.file.cancel();\n    },\n    retry: function retry() {\n      this.file.retry();\n      this._actionCheck();\n    },\n    processResponse: function processResponse(message) {\n      var res = message;\n      try {\n        res = JSON.parse(message);\n      } catch (e) {}\n      this.response = res;\n    },\n    fileEventsHandler: function fileEventsHandler(event, args) {\n      var rootFile = args[0];\n      var file = args[1];\n      var target = this.list ? rootFile : file;\n      if (this.file === target) {\n        if (this.list && event === 'fileSuccess') {\n          this.processResponse(args[2]);\n          return;\n        }\n        this[\"_\".concat(event)].apply(this, args);\n      }\n    },\n    _fileProgress: function _fileProgress() {\n      this.progress = this.file.progress();\n      this.averageSpeed = this.file.averageSpeed;\n      this.currentSpeed = this.file.currentSpeed;\n      this.timeRemaining = this.file.timeRemaining();\n      this.uploadedSize = this.file.sizeUploaded();\n      this._actionCheck();\n    },\n    _fileSuccess: function _fileSuccess(rootFile, file, message) {\n      if (rootFile) {\n        this.processResponse(message);\n      }\n      this._fileProgress();\n      this.error = false;\n      this.isComplete = true;\n      this.isUploading = false;\n    },\n    _fileComplete: function _fileComplete() {\n      this._fileSuccess();\n    },\n    _fileError: function _fileError(rootFile, file, message) {\n      this._fileProgress();\n      this.processResponse(message);\n      this.error = true;\n      this.isComplete = false;\n      this.isUploading = false;\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n    var staticProps = ['paused', 'error', 'averageSpeed', 'currentSpeed'];\n    var fnProps = ['isComplete', 'isUploading', {\n      key: 'size',\n      fn: 'getSize'\n    }, {\n      key: 'formatedSize',\n      fn: 'getFormatSize'\n    }, {\n      key: 'uploadedSize',\n      fn: 'sizeUploaded'\n    }, 'progress', 'timeRemaining', {\n      key: 'type',\n      fn: 'getType'\n    }, {\n      key: 'extension',\n      fn: 'getExtension'\n    }];\n    staticProps.forEach(function (prop) {\n      _this2[prop] = _this2.file[prop];\n    });\n    fnProps.forEach(function (fnProp) {\n      if (typeof fnProp === 'string') {\n        _this2[fnProp] = _this2.file[fnProp]();\n      } else {\n        _this2[fnProp.key] = _this2.file[fnProp.fn]();\n      }\n    });\n    var handlers = this._handlers = {};\n    var eventHandler = function eventHandler(event) {\n      handlers[event] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        _this2.fileEventsHandler(event, args);\n      };\n      return handlers[event];\n    };\n    events.forEach(function (event) {\n      _this2.file.uploader.on(event, eventHandler(event));\n    });\n  },\n  destroyed: function destroyed() {\n    var _this3 = this;\n    events.forEach(function (event) {\n      _this3.file.uploader.off(event, _this3._handlers[event]);\n    });\n    this._handlers = null;\n  }\n};",null]}