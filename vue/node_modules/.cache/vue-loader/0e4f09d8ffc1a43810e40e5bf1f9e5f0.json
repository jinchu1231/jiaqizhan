{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/menuForm.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/menuForm.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMenuSelector, createMenu, updateMenu, getMenuInfo } from '@/api/system/menu'\nimport { getFeatureSelector } from '@/api/onlineDev/visualDev'\nimport { getDictionaryType } from '@/api/systemData/dictionary'\nimport { getDataReportSelector } from '@/api/onlineDev/dataReport'\nimport { getDataVSelector } from '@/api/onlineDev/dataV'\nimport { getPortalSelector } from '@/api/onlineDev/portal'\nimport iconBox from '@/components/JNPF-iconBox'\n\nconst appTypeData = [{\n  enCode: 1,\n  fullName: \"目录\"\n}, {\n  enCode: 2,\n  fullName: \"页面\"\n}, {\n  enCode: 3,\n  fullName: \"功能\"\n}, {\n  enCode: 5,\n  fullName: \"报表\"\n}, {\n  enCode: 8,\n  fullName: \"门户\"\n}, {\n  enCode: 7,\n  fullName: \"外链\"\n}]\nconst typeData = [\n  {\n    enCode: 1,\n    fullName: \"目录\"\n  }, {\n    enCode: 2,\n    fullName: \"页面\"\n  }, {\n    enCode: 3,\n    fullName: \"功能\"\n  }, {\n    enCode: 4,\n    fullName: \"字典\"\n  }, {\n    enCode: 5,\n    fullName: \"报表\"\n  }, {\n    enCode: 6,\n    fullName: \"大屏\"\n  }, {\n    enCode: 8,\n    fullName: \"门户\"\n  }, {\n    enCode: 7,\n    fullName: \"外链\"\n  }]\n\nconst defaultDataForm = {\n  id: '',\n  parentId: '',\n  fullName: '',\n  enCode: '',\n  sortCode: 0,\n  icon: '',\n  type: null,\n  urlAddress: '',\n  category: 'Web',\n  linkTarget: '_self',\n  isButtonAuthorize: 0,\n  isColumnAuthorize: 0,\n  isFormAuthorize: 0,\n  isDataAuthorize: 0,\n  enabledMark: 1,\n  description: '',\n  systemId: '',//系统id\n  propertyJson: {\n    moduleId: '',\n    iconBackgroundColor: '',\n    isTree: 0\n  }\n}\n\nexport default {\n  components: { iconBox },\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      treeData: [],\n      typeData: [],\n      featureWebData: [],\n      dictionaryData: [],\n      reportData: [],\n      screenData: [],\n      portalData: [],\n      tempData: [],\n      labelName: '',\n      related: false,\n      oldUrlAddress: '',\n      dataForm: {\n        id: '',\n        parentId: '',\n        fullName: '',\n        enCode: '',\n        sortCode: 0,\n        icon: '',\n        type: null,\n        urlAddress: '',\n        category: 'Web',\n        linkTarget: '_self',\n        isButtonAuthorize: 0,\n        isColumnAuthorize: 0,\n        isFormAuthorize: 0,\n        isDataAuthorize: 0,\n        enabledMark: 1,\n        description: '',\n        systemId: '',//系统id\n        propertyJson: {\n          moduleId: '',\n          iconBackgroundColor: '',\n          isTree: 0\n        }\n      },\n      iconBoxVisible: false,\n      dataRule: {\n        parentId: [\n          { required: true, message: '上级菜单不能为空', trigger: 'input' }\n        ],\n        fullName: [\n          { required: true, message: '菜单名称不能为空', trigger: 'blur' },\n          { max: 50, message: '菜单名称最多为50个字符！', trigger: 'blur' }\n        ],\n        enCode: [\n          { required: true, message: '菜单编码不能为空', trigger: 'blur' },\n          { max: 50, message: '菜单编码最多为50个字符！', trigger: 'blur' }\n        ],\n        icon: [\n          { required: true, message: '菜单图标不能为空', trigger: 'click' }\n        ],\n        type: [\n          { required: true, message: '请选择菜单类型', trigger: 'change' }\n        ],\n        category: [\n          { required: true, message: '请选择菜单分类', trigger: 'input' }\n        ],\n        urlAddress: [\n          { required: true, message: '地址不能为空', trigger: 'blur' },\n        ],\n        'propertyJson.moduleId': [\n          { required: true, message: '关联不能为空', trigger: 'blur' }\n        ],\n      }\n    }\n  },\n  watch: {\n    'dataForm.parentId'(val) {\n      this.onChange(val)\n    }\n  },\n  methods: {\n    init(id, category, systemId, parentId) {\n      this.dataForm = JSON.parse(JSON.stringify(defaultDataForm))\n      this.dataForm.id = id || ''\n      this.related = false\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        this.dataForm.category = category\n        this.dataForm.systemId = systemId\n        this.featureWebData = [];\n        this.dictionaryData = [];\n        this.reportData = [];\n        this.screenData = [];\n        this.portalData = [];\n\n        // 获取上级菜单\n        getMenuSelector({ category }, id || 0, systemId).then(res => {\n          let topItem = {\n            fullName: \"顶级节点\",\n            hasChildren: true,\n            id: \"-1\",\n            children: res.data.list\n          }\n          this.treeData = [topItem]\n        })\n        this.dataForm.parentId = parentId || ''\n        // 获取菜单类型\n        this.typeData = this.dataForm.category === 'App' ? appTypeData : typeData\n        // 获取表单数据\n        if (this.dataForm.id) {\n          this.formLoading = true\n          getMenuInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            const propertyJson = res.data.propertyJson ? JSON.parse(res.data.propertyJson) : null\n            this.dataForm.propertyJson = propertyJson || { moduleId: '', iconBackgroundColor: '' }\n            const menuType = this.dataForm.type\n            if ([2, 3, 4].includes(menuType)) {\n              this.dataForm.isButtonAuthorize = 1\n              this.dataForm.isColumnAuthorize = 1\n              this.dataForm.isFormAuthorize = 1\n              this.dataForm.isDataAuthorize = 1\n            }\n            this.oldUrlAddress = res.data.urlAddress\n            this.switchType(menuType)\n            this.$nextTick(() => { this.formLoading = false })\n          }).catch(() => { })\n        }\n      })\n    },\n    // 功能列表\n    fetchFeatureList() {\n      if (!this.featureWebData.length) {\n        getFeatureSelector({ type: 1, isRelease: 1 }).then(res => {\n          this.featureWebData = res.data.list\n          this.tempData = this.featureWebData\n        })\n        return\n      }\n      this.tempData = this.featureWebData\n    },\n    // 字典类型\n    fetchDictionaryType() {\n      if (!this.dictionaryData.length) {\n        getDictionaryType().then(res => {\n          this.dictionaryData = res.data.list\n          this.tempData = this.dictionaryData\n        })\n        return\n      }\n      this.tempData = this.dictionaryData\n    },\n    // 报表列表\n    fetchDataReportList() {\n      if (!this.reportData.length) {\n        this.$store.dispatch('base/getDictionaryData', { sort: 'ReportSort' }).then(t => {\n          const ReportSortTypeList = JSON.parse(JSON.stringify(t))\n          getDataReportSelector().then(res => {\n            let reportData = res.data.list\n            this.reportData = ReportSortTypeList\n            this.$nextTick(() => {\n              for (let i = 0; i < this.reportData.length; i++) {\n                let child = reportData.filter(o => this.reportData[i].id === o.categoryId)\n                this.$set(this.reportData[i], 'children', child)\n              }\n              this.reportData = this.reportData.filter(o => o.children.length)\n              this.tempData = this.reportData\n            })\n          })\n        })\n        return\n      }\n      this.tempData = this.reportData\n    },\n    // 大屏列表\n    fetchDataVList() {\n      if (!this.screenData.length) {\n        getDataVSelector().then(res => {\n          this.screenData = res.data.list\n          this.tempData = this.screenData\n        })\n        return\n      }\n      this.tempData = this.screenData\n    },\n    // 门户列表\n    fetchPortalList() {\n      if (!this.portalData.length) {\n        getPortalSelector().then(res => {\n          this.portalData = res.data.list.filter(o => o.children && o.children.length)\n          this.tempData = this.portalData\n        })\n        return\n      }\n      this.tempData = this.portalData\n    },\n    switchType(val) {\n      switch (val) {\n        case 3:\n          this.fetchFeatureList()\n          break\n        case 4:\n          this.fetchDictionaryType()\n          break\n        case 5:\n          this.fetchDataReportList()\n          break\n        case 6:\n          this.fetchDataVList()\n          break\n        case 8:\n          this.fetchPortalList()\n          break\n      }\n    },\n    onChange(val) {\n      if (this.dataForm.category !== 'App') return\n      if (val === '-1') {\n        this.typeData = appTypeData.filter(o => o.enCode == 1)\n        if (this.dataForm.type && this.dataForm.type != 1) this.dataForm.type = ''\n      } else {\n        this.typeData = appTypeData.filter(o => o.enCode != 1)\n        if (this.dataForm.type == 1) this.dataForm.type = ''\n      }\n    },\n    // 切换类型\n    changeMenuType(val) {\n      // 重置关联下拉框的值及链接处理\n      this.dataForm.propertyJson.moduleId = ''\n      const menuId = this.dataForm.id\n      if (menuId) this.dataForm.urlAddress = ''\n      if ([2, 3, 4].includes(val)) {\n        this.dataForm.isButtonAuthorize = 1\n        this.dataForm.isColumnAuthorize = 1\n        this.dataForm.isFormAuthorize = 1\n        this.dataForm.isDataAuthorize = 1\n      } else {\n        this.dataForm.isButtonAuthorize = 0\n        this.dataForm.isColumnAuthorize = 0\n        this.dataForm.isFormAuthorize = 0\n        this.dataForm.isDataAuthorize = 0\n      }\n      if (val == 6) {\n        this.dataForm.linkTarget = '_blank'\n      } else {\n        this.dataForm.linkTarget = '_self'\n      }\n      this.switchType(this.dataForm.type)\n    },\n    // 树转数组\n    treeToArray(list, newArr = []) {\n      list.forEach((item) => {\n        const { children } = item\n        if (children) {\n          // delete item.children\n          if (children.length) {\n            newArr.push(item)\n            return this.treeToArray(children, newArr)\n          }\n        }\n        newArr.push(item)\n      });\n      return newArr\n    },\n    handleSelectModule(val) {\n      if (this.dataForm.type == 4) {\n        const item = this.treeToArray(this.dictionaryData).filter(o => o.id === val)\n        this.dataForm.propertyJson.isTree = item[0].isTree\n      }\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        const menuEnCode = (this.dataForm.enCode).replace('.', '')\n        const moduleId = this.dataForm.propertyJson.moduleId\n        if (this.dataForm.category === 'Web') {\n          switch (this.dataForm.type) {\n            case 3: // 功能\n              this.dataForm.urlAddress = `model/${menuEnCode}`\n              break\n            case 4: // 字典\n              this.dataForm.urlAddress = `dictionary/${menuEnCode}`\n              break\n            case 5: // 报表\n              this.dataForm.urlAddress = `dataReport/${menuEnCode}`\n              break\n            case 6: // 大屏\n              this.dataForm.urlAddress = `dataScreen/${menuEnCode}`\n              break\n            case 8: // 门户\n              this.dataForm.urlAddress = `portal/${menuEnCode}`\n              break\n          }\n        } else {\n          if (this.dataForm.type == 3) {\n            this.dataForm.urlAddress = `/pages/apply/dynamicModel/index?id=${moduleId}`\n          }\n          if (this.dataForm.type == 5) {\n            this.dataForm.urlAddress = menuEnCode\n          }\n          if (this.dataForm.type == 8) {\n            this.dataForm.urlAddress = menuEnCode\n          }\n        }\n        if (valid) {\n          this.btnLoading = true\n          const formMethod = this.dataForm.id ? updateMenu : createMenu\n          const query = {\n            ...this.dataForm,\n            propertyJson: JSON.stringify(this.dataForm.propertyJson)\n          }\n          formMethod(query).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList')\n              }\n            })\n          }).catch(() => {\n            this.btnLoading = false\n          })\n        }\n      })\n    },\n    openIconBox() {\n      this.iconBoxVisible = true\n    },\n    choiceIcon(value) {\n      this.dataForm.icon = value\n    }\n  }\n}\n",null]}