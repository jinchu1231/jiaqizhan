{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/portalManagement/permissionGroup.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/portalManagement/permissionGroup.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Selector } from '@/api/permission/authorize'\nexport default {\n  name: 'JNPF-userTransfer',\n  data() {\n    return {\n      allLoading: false,\n      loading: false,\n      positionLoading: false,\n      activeName: 'position',\n      selectedData: [],\n      props: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      ids: [],\n      keyword: '',\n      treeData: []\n    }\n  },\n  props: {\n    height: {\n      type: String,\n      default: \"400px\"\n    },\n    dynamicList: {\n      type: Array,\n      default: () => []\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    init(ids) {\n      this.keyword = ''\n      this.allLoading = true\n      this.selectedData = []\n      Selector().then(res => {\n        this.treeData = res.data.list\n        this.treeData.forEach(element => {\n          if (ids.includes(element.id)) this.selectedData.push(element)\n        })\n        this.ids = this.selectedData.map(o => o.id)\n        this.allLoading = false\n      })\n    },\n    search() {\n      this.$refs.position.filter(this.keyword);\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    handleNodeClick(data) {\n      if (!data.id) return\n      let ids = this.selectedData.filter(o => o.id === data.id)\n      let id = ''\n      if (ids.length) id = ids[0].id\n      if (id) return\n      let item = JSON.parse(JSON.stringify(data))\n      this.selectedData.push(item)\n      this.ids.push(data.id)\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeAll() {\n      this.selectedData = []\n      this.ids = []\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n      this.ids.splice(index, 1)\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n  }\n};\n",null]}