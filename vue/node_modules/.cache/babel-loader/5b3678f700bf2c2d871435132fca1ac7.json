{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/web.dom.iterable\");\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/asyncToGenerator.js\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/toConsumableArray.js\"));\nvar _util = require(\"../FlowCard/util\");\nvar _config = _interopRequireDefault(require(\"../FlowCard/config\"));\nvar _StartNode = _interopRequireDefault(require(\"./StartNode\"));\nvar _AddDataNode = _interopRequireDefault(require(\"./AddDataNode\"));\nvar _UpdateDataNode = _interopRequireDefault(require(\"./UpdateDataNode\"));\nvar _DeleteDataNode = _interopRequireDefault(require(\"./DeleteDataNode\"));\nvar _DataInterfaceNode = _interopRequireDefault(require(\"./DataInterfaceNode\"));\nvar _MessageNode = _interopRequireDefault(require(\"./MessageNode\"));\nvar _GetDataNode = _interopRequireDefault(require(\"./GetDataNode\"));\nvar _LaunchFlowNode = _interopRequireDefault(require(\"./LaunchFlowNode\"));\nvar _visualDev = require(\"@/api/onlineDev/visualDev\");\nvar _FlowEngine = require(\"@/api/workFlow/FlowEngine\");\nvar _integrate = require(\"@/api/onlineDev/integrate\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  props: [/*当前节点数据*/\"value\", /*整个节点数据*/\"processData\", \"flowType\", 'formInfo'],\n  components: {\n    StartNode: _StartNode.default,\n    AddDataNode: _AddDataNode.default,\n    UpdateDataNode: _UpdateDataNode.default,\n    DeleteDataNode: _DeleteDataNode.default,\n    DataInterfaceNode: _DataInterfaceNode.default,\n    MessageNode: _MessageNode.default,\n    GetDataNode: _GetDataNode.default,\n    LaunchFlowNode: _LaunchFlowNode.default\n  },\n  data: function data() {\n    return {\n      properties: {},\n      // 当前节点数据\n      activeKey: '1',\n      startForm: JSON.parse(JSON.stringify(_config.default.defaultStartForm)),\n      addDataForm: {},\n      updateDataForm: {},\n      deleteDataForm: {},\n      dataInterfaceForm: {},\n      integrateType: this.formInfo.type || 1,\n      messageForm: {},\n      getDataForm: {},\n      launchFlowForm: {},\n      visible: false,\n      // 控制面板显隐\n      formFieldList: [],\n      flowOptions: [],\n      key: '',\n      key2: ''\n    };\n  },\n  computed: {\n    // 未使用的条件个数\n    notUseConNum: function notUseConNum() {\n      // 发起人是默认就有得  所以需要加 1\n      return this.pconditions.length - this.showingPCons.length + 1;\n    },\n    formFieldsOptions: function formFieldsOptions() {\n      var formFieldsList = [];\n      formFieldsList = this.integrateType != 2 ? this.processData.properties.formFieldList || [] : this.processData.childNode.properties.formFieldList || [];\n      var boo = formFieldsList.some(function (o) {\n        return o.id === '@formId';\n      });\n      if (!boo) formFieldsList.unshift({\n        fullName: '@表单ID',\n        id: '@formId',\n        label: '@formId(@表单ID)'\n      });\n      return formFieldsList;\n    },\n    usedFormItems: function usedFormItems() {\n      return this.formFieldsOptions.filter(function (o) {\n        return o.id.indexOf('-') < 0;\n      });\n    },\n    funcOptions: function funcOptions() {\n      var options = [].concat((0, _toConsumableArray2.default)(systemFieldOptions), (0, _toConsumableArray2.default)(this.formFieldsOptions));\n      return options;\n    },\n    funcRequiredOptions: function funcRequiredOptions() {\n      return this.formFieldsOptions.filter(function (o) {\n        return o.__config__ && o.__config__.required;\n      });\n    },\n    rejectStepOptions: function rejectStepOptions() {\n      var options = [];\n      var list = [{\n        nodeId: '2',\n        properties: {\n          title: '自选审批节点'\n        }\n      }];\n      options = [].concat((0, _toConsumableArray2.default)(defaultStep), list, (0, _toConsumableArray2.default)(this.realNodeList));\n      if (this.approverForm.rejectType == 2) {\n        options = options.filter(function (o) {\n          return o.nodeId != 1;\n        });\n      }\n      return options;\n    }\n  },\n  methods: {\n    initCommonNodeData: function initCommonNodeData(key) {\n      var _this = this;\n      var properties = JSON.parse(JSON.stringify(this.value.properties));\n      Object.assign(this[key + 'Form'], properties);\n      this.$nextTick( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var emptyChildItem, emptyItem, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if ((key === 'addData' || key === 'updateData' || key == 'launchFlow') && _this[key + 'Form'].enableFlow && _this[key + 'Form'].formId) {\n                _this.getFlowOptions(_this[key + 'Form'].formId);\n              }\n              if (_this.integrateType == 2 && ['addData', 'updateData', 'deleteData'].includes(key) && !_this[key + 'Form'].ruleList.length) {\n                emptyChildItem = {\n                  field: '',\n                  symbol: '==',\n                  fieldValueType: 1,\n                  fieldValue: undefined,\n                  jnpfKey: '',\n                  fieldValueJnpfKey: '',\n                  cellKey: +new Date()\n                };\n                emptyItem = {\n                  logic: 'and',\n                  groups: [emptyChildItem]\n                };\n                _this[key + 'Form'].ruleList.push(JSON.parse(JSON.stringify(emptyItem)));\n                _this.key = +new Date();\n              }\n              if (!(_this.integrateType == 3 && key === 'start' && !_this[key + 'Form'].webhookUrl)) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 5;\n              return (0, _integrate.getWebhookUrl)(_this.formInfo.id);\n            case 5:\n              res = _context.sent;\n              if (res) {\n                _context.next = 8;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 8:\n              _this[key + 'Form'].webhookUrl = res.data.webhookUrl;\n              _this[key + 'Form'].webhookGetFieldsUrl = res.data.requestUrl;\n              _this[key + 'Form'].webhookRandomStr = res.data.randomStr;\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })));\n    },\n    // 字段设置验证\n    transferExist: function transferExist(form) {\n      var list = this[form + 'Form'].transferList;\n      var isOk = true;\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i];\n        if (e.required) {\n          if (!e.sourceValue) {\n            this.$message.warning(\"\".concat(e.targetFieldLabel, \"\\u7684\\u503C\\u4E0D\\u80FD\\u4E3A\\u7A7A\"));\n            isOk = false;\n            break;\n          }\n        } else {\n          if (!e.targetField) {\n            this.$message.warning(\"\\u76EE\\u6807\\u8868\\u5355\\u5B57\\u6BB5\\u4E0D\\u80FD\\u4E3A\\u7A7A\");\n            isOk = false;\n            break;\n          }\n        }\n      }\n      return isOk;\n    },\n    conditionExist: function conditionExist(form) {\n      var list = this[form + 'Form'].ruleList;\n      var isOk = true;\n      outer: for (var i = 0; i < list.length; i++) {\n        var e = list[i];\n        var label = '';\n        if (this.integrateType == 1) {\n          if (form === 'updateData') label = '更新条件';\n          if (form === 'deleteData') label = '删除条件';\n        }\n        if (this.integrateType == 2) {\n          label = '目标表单';\n        }\n        for (var j = 0; j < e.groups.length; j++) {\n          var child = e.groups[j];\n          if (!child.field) {\n            this.$message.warning(\"\\u6761\\u4EF6\\u5B57\\u6BB5\\u4E0D\\u80FD\\u4E3A\\u7A7A\");\n            isOk = false;\n            break outer;\n          }\n          if (!child.symbol) {\n            this.$message.warning('条件符号不能为空');\n            isOk = false;\n            break;\n          }\n          if (!['null', 'notNull'].includes(child.symbol) && !['switch'].includes(child.jnpfKey) && (!child.fieldValue || this.jnpf.isEmpty(child.fieldValue)) && (!['inputNumber', 'calculate', 'rate'].includes(child.jnpfKey) || ['inputNumber', 'calculate', 'rate'].includes(child.jnpfKey) && child.fieldValue !== 0)) {\n            this.$message.warning('数据值不能为空');\n            isOk = false;\n            break;\n          }\n        }\n      }\n      return isOk;\n    },\n    getFormFieldList: function getFormFieldList(id, form) {\n      var _this2 = this;\n      this.flowOptions = [];\n      (0, _visualDev.getConfigData)(id).then(function (res) {\n        var _res$data = res.data,\n          formData = _res$data.formData,\n          enableFlow = _res$data.enableFlow,\n          flowId = _res$data.flowId;\n        var formJson = {},\n          fieldList = [];\n        if (formData) formJson = JSON.parse(formData);\n        fieldList = formJson.fields || [];\n        var list = _this2.transformFieldList(fieldList);\n        _this2[form + 'Form'].formFieldList = list.map(function (o) {\n          return _objectSpread(_objectSpread({}, o), {}, {\n            label: o.fullName ? o.id + '(' + o.fullName + ')' : o.id\n          });\n        });\n        if (enableFlow == 1) _this2.getFlowOptions(flowId);\n        if (form === 'addData' || form === 'launchFlow') _this2.updateTransferList(form);\n        _this2.key = +new Date();\n      });\n    },\n    // 获取流程表单字段\n    getFlowFormFieldList: function getFlowFormFieldList(id, form) {\n      var _this3 = this;\n      this.flowOptions = [];\n      (0, _FlowEngine.getFlowFormInfo)(id).then(function (res) {\n        var _res$data2 = res.data,\n          _res$data2$formType = _res$data2.formType,\n          formType = _res$data2$formType === void 0 ? 1 : _res$data2$formType,\n          propertyJson = _res$data2.propertyJson;\n        var formJson = {},\n          fieldList = [];\n        if (propertyJson) formJson = JSON.parse(propertyJson);\n        if (formType == 1) {\n          fieldList = _this3.transformFormJson(formJson);\n        } else {\n          fieldList = formJson.fields;\n        }\n        var list = _this3.transformFieldList(fieldList);\n        _this3[form + 'Form'].formFieldList = list.map(function (o) {\n          return _objectSpread(_objectSpread({}, o), {}, {\n            label: o.fullName ? o.id + '(' + o.fullName + ')' : o.id\n          });\n        });\n        if (form === 'launchFlow') _this3.updateTransferList(form);\n      });\n    },\n    // 获取流程列表\n    getFlowOptions: function getFlowOptions(id) {\n      var _this4 = this;\n      (0, _FlowEngine.getFlowList)(id, '1').then(function (res) {\n        _this4.flowOptions = res.data;\n      });\n    },\n    transformFormJson: function transformFormJson(list) {\n      var fieldList = list.map(function (o) {\n        return {\n          __config__: {\n            label: o.filedName,\n            jnpfKey: o.jnpfKey || '',\n            required: o.required || false\n          },\n          __vModel__: o.filedId,\n          multiple: o.multiple || false\n        };\n      });\n      return fieldList;\n    },\n    transformFieldList: function transformFieldList(formFieldList) {\n      var list = [];\n      var loop = function loop(data, parent) {\n        if (!data) return;\n        if (data.__vModel__ && data.__config__.jnpfKey !== 'table') {\n          var isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table';\n          list.push(_objectSpread({\n            id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label\n          }, data));\n        }\n        if (Array.isArray(data)) data.forEach(function (d) {\n          return loop(d, parent);\n        });\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data);\n        }\n      };\n      loop(formFieldList);\n      return list;\n    },\n    updateTransferList: function updateTransferList(form) {\n      var formFieldList = this[form + 'Form'].formFieldList;\n      var list = [];\n      for (var i = 0; i < formFieldList.length; i++) {\n        if (formFieldList[i].__config__.required) {\n          list.push({\n            targetField: formFieldList[i].id,\n            targetFieldLabel: formFieldList[i].fullName,\n            sourceType: 1,\n            sourceValue: '',\n            required: true\n          });\n        }\n      }\n      this[form + 'Form'].transferList = list;\n      this.key = +new Date();\n    },\n    // 判断是否是发起节点\n    isStartNode: function isStartNode() {\n      return this.value ? _util.NodeUtils.isStartNode(this.value) : false;\n    },\n    // 判断是否是新增数据节点\n    isAddDataNode: function isAddDataNode() {\n      return this.value ? _util.NodeUtils.isAddDataNode(this.value) : false;\n    },\n    // 判断是否是更新数据节点\n    isUpdateDataNode: function isUpdateDataNode() {\n      return this.value ? _util.NodeUtils.isUpdateDataNode(this.value) : false;\n    },\n    // 判断是否是删除数据节点\n    isDeleteDataNode: function isDeleteDataNode() {\n      return this.value ? _util.NodeUtils.isDeleteDataNode(this.value) : false;\n    },\n    // 判断是否是数据接口节点\n    isDataInterfaceNode: function isDataInterfaceNode() {\n      return this.value ? _util.NodeUtils.isDataInterfaceNode(this.value) : false;\n    },\n    // 判断是否是消息通知节点\n    isMessageNode: function isMessageNode() {\n      return this.value ? _util.NodeUtils.isMessageNode(this.value) : false;\n    },\n    // 判断是否是数据节点节点\n    isGetDataNode: function isGetDataNode() {\n      return this.value ? _util.NodeUtils.isGetDataNode(this.value) : false;\n    },\n    // 判断是否是发起审批节点\n    isLaunchFlowNode: function isLaunchFlowNode() {\n      return this.value ? _util.NodeUtils.isLaunchFlowNode(this.value) : false;\n    },\n    // 发起人节点确认保存\n    startNodeConfirm: function startNodeConfirm() {\n      var formConf = this.$refs && this.$refs.startNodeRef.getFormConf();\n      if (!formConf) return;\n      this.startForm = formConf;\n      if (this.integrateType == 1) {\n        Object.assign(this.properties, this.startForm);\n        var eventName = this.startForm.triggerEvent == 1 ? '新增数据' : this.startForm.triggerEvent == 2 ? '修改数据' : '删除数据';\n        var content = \"\\u5F53[\".concat(this.startForm.formName, \"]\\u8868\\u5355[\").concat(eventName, \"]\\u6210\\u529F\\u65F6\");\n        this.$emit('confirm', this.properties, content);\n      } else if (this.integrateType == 2) {\n        Object.assign(this.properties, this.startForm);\n        this.$emit('confirm', this.properties, this.startForm.cron);\n      } else {\n        Object.assign(this.properties, this.startForm);\n        this.$emit('confirm', this.properties, '已设置');\n      }\n      this.cancel();\n    },\n    // 新增数据节点确认保存\n    addDataNodeConfirm: function addDataNodeConfirm() {\n      var item = this.$refs && this.$refs.addNodeRef.getItem();\n      this.addDataForm.transferList = item.transferList;\n      this.addDataForm.ruleList = item.ruleList;\n      if (this.integrateType == 2) this.addDataForm.addRule = item.addRule;\n      if (!this.addDataForm.formId) return this.$message.error('请选择目标表单');\n      if (this.addDataForm.enableFlow && !this.addDataForm.flowId) return this.$message.error('请选择流程');\n      if (!this.transferExist('addData')) return;\n      if (this.integrateType != 1 && !this.conditionExist('addData')) return;\n      Object.assign(this.properties, this.addDataForm);\n      var content = \"\\u5728[\".concat(this.addDataForm.formName, \"]\\u8868\\u5355\\u4E2D\\u65B0\\u589E\\u6570\\u636E\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 更新数据节点确认保存\n    updateDataNodeConfirm: function updateDataNodeConfirm() {\n      var item = this.$refs && this.$refs.updateNodeRef.getTransferList();\n      this.updateDataForm.transferList = item.transferList;\n      this.updateDataForm.ruleList = item.ruleList;\n      this.updateDataForm.unFoundRule = item.unFoundRule;\n      this.updateDataForm.ruleMatchLogic = item.ruleMatchLogic;\n      if (!this.updateDataForm.formId) return this.$message.error('请选择目标表单');\n      if (this.updateDataForm.enableFlow && !this.updateDataForm.flowId) return this.$message.error('请选择流程');\n      if (!this.transferExist('updateData')) return;\n      if (!this.conditionExist('updateData')) return;\n      Object.assign(this.properties, this.updateDataForm);\n      var content = \"\\u5728[\".concat(this.updateDataForm.formName, \"]\\u8868\\u5355\\u4E2D\\u66F4\\u65B0\\u6570\\u636E\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 删除数据节点确认保存\n    deleteDataNodeConfirm: function deleteDataNodeConfirm() {\n      if (!this.deleteDataForm.formId) return this.$message.error('请选择目标表单');\n      var ruleList = this.$refs.deleteNodeRef.getRuleList();\n      this.deleteDataForm.ruleList = ruleList;\n      if (!this.conditionExist('deleteData')) return;\n      Object.assign(this.properties, this.deleteDataForm);\n      var content = \"\\u6267\\u884C[\".concat(this.deleteDataForm.formName, \"]\\u8868\\u5355\\u4E2D[\\u5220\\u9664\\u6570\\u636E]\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 数据接口节点确认保存\n    dataInterfaceNodeConfirm: function dataInterfaceNodeConfirm() {\n      if (!this.dataInterfaceForm.formId) return this.$message.error('请选择执行数据接口');\n      Object.assign(this.properties, this.dataInterfaceForm);\n      var content = \"\\u6267\\u884C[\".concat(this.dataInterfaceForm.formName, \"]\\u6570\\u636E\\u63A5\\u53E3\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 消息通知节点确认保存\n    messageNodeConfirm: function messageNodeConfirm() {\n      this.messageForm = this.$refs && this.$refs.messageNodeRef.getDataForm();\n      if (!this.messageForm.msgUserIds || !this.messageForm.msgUserIds.length) return this.$message.error('请选择接收人');\n      if (!this.messageForm.msgId) return this.$message.error('请选择发送配置');\n      Object.assign(this.properties, this.messageForm);\n      var content = \"\\u6267\\u884C[\".concat(this.messageForm.msgName, \"]\\u7684\\u6D88\\u606F\\u53D1\\u9001\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 获取数据节点确认保存\n    getDataNodeConfirm: function getDataNodeConfirm() {\n      var item = this.$refs && this.$refs.getDataNodeRef.getItem();\n      if (!item) return;\n      this.getDataForm = item;\n      var msg = this.getDataForm.formType == 3 ? '请选择数据接口' : '请选择表单';\n      if (!this.getDataForm.formId) return this.$message.error(msg);\n      Object.assign(this.properties, this.getDataForm);\n      var content = \"\\u4ECE[\".concat(this.getDataForm.formName, \"]\\u4E2D\\u83B7\\u53D6\\u6570\\u636E\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    //获取发起审批确认保存\n    launchFlowConfirm: function launchFlowConfirm() {\n      var item = this.$refs.getLaunchFlowRef.getItem();\n      this.launchFlowForm.transferList = item.transferList || [];\n      if (!item.flowId) return this.$message.error('请选择流程');\n      this.launchFlowForm.flowId = item.flowId;\n      if (!item.initiator.length) return this.$message.error('请选择发起人');\n      this.launchFlowForm.initiator = item.initiator;\n      if (!this.transferExist('launchFlow')) return;\n      Object.assign(this.properties, this.launchFlowForm);\n      var content = \"\\u53D1\\u8D77[\".concat(this.launchFlowForm.flowName, \"]\\u6D41\\u7A0B\");\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 关闭抽屉\n    cancel: function cancel() {\n      var _this5 = this;\n      setTimeout(function () {\n        _this5.$emit(\"cancel\");\n        _this5.visible = false;\n      }, 0);\n    },\n    handleOk: function handleOk() {\n      this.isStartNode() && this.startNodeConfirm();\n      this.isAddDataNode() && this.addDataNodeConfirm();\n      this.isUpdateDataNode() && this.updateDataNodeConfirm();\n      this.isDeleteDataNode() && this.deleteDataNodeConfirm();\n      this.isDataInterfaceNode() && this.dataInterfaceNodeConfirm();\n      this.isMessageNode() && this.messageNodeConfirm();\n      this.isGetDataNode() && this.getDataNodeConfirm();\n      this.isLaunchFlowNode() && this.launchFlowConfirm();\n    }\n  },\n  watch: {\n    visible: function visible(val) {\n      if (!val) {\n        this.addDataForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm)); // 重置数据为默认状态\n        this.startForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm));\n        this.updateDataForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm));\n        this.deleteDataForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm));\n        this.dataInterfaceForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm));\n        this.messageForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm));\n        this.getDataForm = JSON.parse(JSON.stringify(_config.default.defaultStartForm));\n        return;\n      }\n      this.isStartNode() && this.initCommonNodeData('start');\n      this.isAddDataNode() && this.initCommonNodeData('addData');\n      this.isUpdateDataNode() && this.initCommonNodeData('updateData');\n      this.isDeleteDataNode() && this.initCommonNodeData('deleteData');\n      this.isDataInterfaceNode() && this.initCommonNodeData('dataInterface');\n      this.isMessageNode() && this.initCommonNodeData('message');\n      this.isGetDataNode() && this.initCommonNodeData('getData');\n      this.isLaunchFlowNode() && this.initCommonNodeData('launchFlow');\n    },\n    value: function value(newVal) {\n      if (newVal && newVal.properties) {\n        this.visible = true;\n        this.properties = JSON.parse(JSON.stringify(newVal.properties));\n        if (this.properties) {\n          _util.NodeUtils.isConditionNode(newVal) && this.getPriorityLength();\n        }\n      }\n    }\n  }\n};",null]}