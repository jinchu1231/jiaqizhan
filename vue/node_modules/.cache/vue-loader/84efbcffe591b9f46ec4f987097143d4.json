{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/PropPanel/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/PropPanel/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getPrintDevSelector } from '@/api/system/printDev'\nimport { getFlowFormInfo } from '@/api/workFlow/FlowEngine'\nimport { getFormInfo } from '@/api/workFlow/FormDesign'\nimport { NodeUtils } from \"../FlowCard/util\"\nimport nodeConfig from \"../FlowCard/config\"\nimport OrgSelect from '../OrgSelect'\nimport MsgDialog from './msgDialog'\nimport InterfaceDialog from './InterfaceDialog'\nimport FormulaDialog from './formulaDialog'\nimport FlowDialog from './FlowDialog'\nimport Detail from './TemplateDetail'\nimport FlowFormDialog from \"./FlowFormDialog\"\nimport ApproversSortDialog from \"./ApproversSortDialog\"\nconst requiredDisabled = (jnpfKey) => {\n  return ['billRule', 'createUser', 'createTime', 'modifyTime', 'modifyUser', 'currPosition', 'currOrganize', 'table'].includes(jnpfKey)\n}\nconst getDataType = (data) => {\n  if (!data.__config__ || !data.__config__.jnpfKey) return ''\n  const jnpfKey = data.__config__.jnpfKey\n  if (['inputNumber', 'datePicker', 'rate', 'slider'].includes(jnpfKey)) {\n    return 'number'\n  } else if (['checkbox', 'uploadFile', 'uploadImg', 'cascader', 'organizeSelect', 'areaSelect'].includes(jnpfKey)) {\n    return 'array'\n  } else if (['select', 'depSelect', 'posSelect', 'userSelect', 'usersSelect', 'treeSelect', 'roleSelect', 'groupSelect'].includes(jnpfKey)) {\n    if (data.multiple) return 'array'\n  }\n  return ''\n}\nconst defaultSubFlowForm = {\n  errorRule: 1, // 异常处理规则\n  errorRuleUser: [], // 指定人员处理异常\n  formFieldType: 1,// 表单字段审核方式的类型(1-用户 2-部门)\n  initiateType: 6,\n  managerLevel: 1,\n  departmentLevel: 1,\n  formField: '',\n  nodeId: '',\n  getUserUrl: '',\n  initiator: [],\n  flowId: '',\n  flowName: '',\n  assignList: [],\n  prevNodeList: [],\n  launchMsgConfig: {\n    on: 3,\n    msgId: '',\n    msgName: '',\n    templateJson: []\n  },\n  isAsync: false,\n  autoSubmit: false,\n}\nconst defaultApproverForm = {\n  extraRule: 1, // 审批人范围,默认无审批人范围\n  extraCopyRule: 1, // 抄送审批人范围,默认无审批人范围\n  hasAgreeRule: false, // 自动同意规则,默认不启用\n  agreeRules: [], // 自动同意规则数组\n  formFieldType: 1,// 表单字段审核方式的类型(1-用户 2-部门)\n  approvers: [], // 审批人集合\n  assigneeType: 6, // 指定审批人\n  userType: 'role', //role,position,user\n  formOperates: [], // 表单权限集合\n  circulateRole: [],   // 抄送角色集合\n  circulateUser: [],  // 抄送人集合\n  isFormFieldCopy: false,\n  copyFormFieldType: 1,\n  copyFormField: '',\n  isCustomCopy: false,\n  isInitiatorCopy: false,\n  progress: '50',  // 进度\n  rejectType: 1, //退回\n  rejectStep: '0',  // 退回步骤\n  description: '',  // 节点描述\n  managerLevel: 1,\n  departmentLevel: 1,\n  counterSignConfig: {\n    auditType: 1,\n    auditRatio: 100,\n    auditNum: 1,\n    rejectType: 0,\n    rejectRatio: 10,\n    rejectNum: 1,\n  },\n  formField: '',\n  nodeId: '',\n  getUserUrl: '',\n  counterSign: 0,\n  noApproverHandler: true,\n  hasFreeApproverBtn: false,\n  hasFreeApproverBtnText: '加 签',\n  hasSaveBtn: false,\n  saveBtnText: '暂 存',\n  hasAuditBtn: true,\n  auditBtnText: '通 过',\n  hasRejectBtn: true,\n  rejectBtnText: '退 回',\n  hasRevokeBtn: true,\n  revokeBtnText: '撤 回',\n  hasTransferBtn: true,\n  transferBtnText: '转 审',\n  hasCancelBtn: false,\n  cancelBtnText: '驳 回',\n  hasPrintBtn: false,\n  printBtnText: '打 印',\n  printId: '', // 打印模板\n  hasSign: false,\n  hasOpinion: true,\n  formId: \"\",\n  formName: \"\",\n  prevNodeList: [],\n  assignList: [],\n  funcConfigRule: 0,\n  approversSortList: [],\n  timeLimitConfig: {\n    on: 2,  // 开启\n    nodeLimit: 0, // 节点限定时长起始值类型\n    duringDeal: 24, // 节点处理限定时长(时)\n    formField: '',  // 请选择字段\n  },\n  overTimeConfig: {\n    on: 2, // 开启\n    firstOver: 0, // 第一次超时时间(时)\n    overTimeDuring: 2, // 超时间隔(时)\n    overNotice: false, // 超时事务-超时通知\n    overAutoApprove: false, // 超时事务-超时自动审批\n    overAutoApproveTime: 5, // 自动审批超时次数(次)\n    overEvent: false, // 超时事件\n    overEventTime: 5, // 超时事件超时次数(次)\n  },\n  noticeConfig: {\n    on: 2, // 开启\n    firstOver: 1, // 第一次提醒时间(时)\n    overTimeDuring: 2, // 提醒间隔(时)\n    overNotice: false, // 提醒事务-提醒通知\n    overEvent: false, // 提醒事件\n    overEventTime: 5, // 提醒次数(次)\n  },\n  // 节点事件\n  overTimeFuncConfig: {\n    on: false,     // 开启\n    interfaceId: '', // 接口id\n    interfaceName: '', // 接口名称\n    templateJson: [] // 模块json\n  },\n  noticeFuncConfig: {\n    on: false,     // 开启\n    interfaceId: '', // 接口id\n    interfaceName: '', // 接口名称\n    templateJson: [] // 模块json\n  },\n  overTimeMsgConfig: {\n    on: 2,\n    msgId: '',\n    msgName: '',\n    templateJson: []\n  },\n  noticeMsgConfig: {\n    on: 2,\n    msgId: '',\n    msgName: '',\n    templateJson: []\n  },\n  approveMsgConfig: {\n    on: 2,\n    msgId: '',\n    msgName: '',\n    templateJson: []\n  },\n  rejectMsgConfig: {\n    on: 2,\n    msgId: '',\n    msgName: '',\n    templateJson: []\n  },\n  copyMsgConfig: {\n    on: 2,\n    msgId: '',\n    msgName: '',\n    templateJson: []\n  },\n  approveFuncConfig: {\n    on: false,\n    interfaceId: '',\n    interfaceName: '',\n    templateJson: []\n  },\n  rejectFuncConfig: {\n    on: false,\n    interfaceId: '',\n    interfaceName: '',\n    templateJson: []\n  },\n  recallFuncConfig: {\n    on: false,\n    interfaceId: '',\n    interfaceName: '',\n    templateJson: []\n  },\n}\nconst defaultStep = [{\n  nodeId: '0',\n  properties: { title: '流程发起' }\n\n}, {\n  nodeId: '1',\n  properties: { title: '上级审批节点' }\n}]\nconst typeOptions = [\n  {\n    label: '指定成员',\n    value: 6\n  },\n  {\n    label: '发起者本人',\n    value: 3\n  },\n  {\n    label: '发起者主管',\n    value: 1\n  },\n  {\n    label: '部门主管',\n    value: 2\n  },\n  {\n    label: '表单变量',\n    value: 4\n  },\n  {\n    label: '流程环节',\n    value: 5\n  },\n  {\n    label: '接口服务',\n    value: 9\n  },\n  {\n    label: '候选人员',\n    value: 7\n  }]\nconst noticeOptions = [{\n  value: 1,\n  label: '自定义'\n}, {\n  value: 0,\n  label: '关闭'\n}]\nconst overTimeOptions = [{\n  value: 0,\n  label: '接收时间'\n}, {\n  value: 1,\n  label: '发起时间'\n}, {\n  value: 2,\n  label: '表单变量'\n},]\nconst extraRuleOptions = [\n  {\n    value: 1,\n    label: '无审批人范围'\n  },\n  {\n    value: 6,\n    label: '同一公司'\n  },\n  {\n    value: 2,\n    label: '同一部门'\n  },\n  {\n    value: 3,\n    label: '同一岗位'\n  },\n  {\n    value: 4,\n    label: '发起人上级'\n  },\n  {\n    value: 5,\n    label: '发起人下属'\n  }\n]\nconst nodeNoticeOptions = [\n  {\n    value: 2,\n    label: '同步发起配置'\n  },\n  ...noticeOptions\n]\nconst noticeOptionsData = [\n  {\n    value: 3,\n    label: '默认'\n  },\n  ...noticeOptions\n]\nconst nodeNoticeOptionsData = [\n  {\n    value: 2,\n    label: '同步发起配置'\n  },\n  ...noticeOptionsData\n]\nconst systemFieldOptions = [{\n  __config__: {\n    label: '流程ID',\n    required: true\n  },\n  __vModel__: '@flowId',\n},\n{\n  __config__: {\n    label: '任务ID',\n    required: true\n  },\n  __vModel__: '@taskId',\n},\n{\n  __config__: {\n    label: '节点ID',\n    required: true\n  },\n  __vModel__: '@taskNodeId',\n},\n{\n  __config__: {\n    label: '流程名称',\n    required: true\n  },\n  __vModel__: '@flowFullName',\n},\n{\n  __config__: {\n    label: '任务标题',\n    required: true\n  },\n  __vModel__: '@taskFullName',\n},\n{\n  __config__: {\n    label: '发起用户ID',\n    required: true\n  },\n  __vModel__: '@launchUserId',\n},\n{\n  __config__: {\n    label: '发起用户名',\n    required: true\n  },\n  __vModel__: '@launchUserName',\n},\n{\n  __config__: {\n    label: '当前操作用户ID',\n    required: true\n  },\n  __vModel__: '@flowOperatorUserId',\n},\n{\n  __config__: {\n    label: '当前操作用户名',\n    required: true\n  },\n  __vModel__: '@flowOperatorUserName',\n}]\nconst auditTypeOptions = [\n  { id: 1, fullName: '按百分比' },\n  { id: 2, fullName: '按人数' },\n];\nconst rejectTypeOptions = [{ id: 0, fullName: '无' }, ...auditTypeOptions];\nexport default {\n  props: [/*当前节点数据*/\"value\", /*整个节点数据*/\"processData\", \"flowType\", 'formInfo'],\n  components: { OrgSelect, MsgDialog, InterfaceDialog, FormulaDialog, FlowDialog, Detail, FlowFormDialog, ApproversSortDialog },\n  data() {\n    return {\n      parameterSource: [{\n        value: 1,\n        label: '字段'\n      }, {\n        value: 2,\n        label: '自定义'\n      }, {\n        value: 3,\n        label: '为空'\n      }],\n      temporaryContent: '',\n      visible: false,  // 控制面板显隐\n      activeName: \"config\", // or formAuth  Tab面板key\n      showingPCons: [], // 用户选择了得条件  被选中的才会被展示在面板上编辑\n      pconditions: [], // 从vuex中获取的可以作为流程图条件的集合\n      // 当前节点数据\n      properties: {\n        title: ''\n      },\n      // 发起人  start节点和condition节点需要\n      initiator: [],\n      priorityLength: 0, // 当为条件节点时  显示节点优先级选项的数据\n      startForm: JSON.parse(JSON.stringify(nodeConfig.defaultStartForm)),\n      ruleVisible: false,\n      subFlowForm: JSON.parse(JSON.stringify(defaultSubFlowForm)),\n      approverForm: JSON.parse(JSON.stringify(defaultApproverForm)),\n      initiateTypeOptions: typeOptions,\n      assigneeTypeOptions: typeOptions,\n      noticeOptions,\n      nodeNoticeOptions,\n      noticeOptionsData,\n      nodeNoticeOptionsData,\n      systemFieldOptions,\n      overTimeOptions,\n      extraRuleOptions,\n      auditTypeOptions,\n      rejectTypeOptions,\n      realNodeList: [],\n      progressOptions: ['10', '20', '30', '40', '50', '60', '70', '80', '90'],\n      symbolOptions: [\n        {\n          label: '大于等于',\n          value: \">=\"\n        },\n        {\n          label: '大于',\n          value: \">\"\n        },\n        {\n          label: '等于',\n          value: \"==\"\n        },\n        {\n          label: '小于等于',\n          value: \"<=\"\n        },\n        {\n          label: '小于',\n          value: \"<\"\n        },\n        {\n          label: '不等于',\n          value: \"<>\"\n        },\n        {\n          label: '包含',\n          value: \"like\"\n        },\n        {\n          label: '不包含',\n          value: \"notLike\"\n        }],\n      logicOptions: [\n        {\n          label: 'and',\n          value: \"and\"\n        },\n        {\n          label: 'or',\n          value: \"or\"\n        }],\n      conditionTypeOptions: [{\n        label: '字段',\n        value: 1\n      },\n      {\n        label: '公式',\n        value: 3\n      }],\n      conditionTypeOptions1: [{\n        label: '字段',\n        value: 1\n      },\n      {\n        label: '自定义',\n        value: 2\n      }],\n      assignList: [],\n      printTplList: [],\n      childFieldOptions: [],\n      nodeOptions: [],\n      formulaVisible: false,\n      activeItem: {},\n      viewVisible: false,\n      formFieldList: [],\n      approverTransmitRuleVisible: false,\n      prevNodeList: [],\n      isPrevNodeWithSubForm: false,\n      formOperatesList: [],\n      indeterminateReadFlag: false,\n      readAllChecked: false,\n      indeterminateWriteFlag: false,\n      writeAllChecked: false,\n      requiredAllChecked: false,\n      indeterminateRequiredFlag: false,\n      oldFormId: '',\n      registerApproversSortVisible: false,\n      beforeNodeOptions: [],\n    };\n  },\n  computed: {\n    // 未使用的条件个数\n    notUseConNum() {\n      // 发起人是默认就有得  所以需要加 1\n      return this.pconditions.length - this.showingPCons.length + 1;\n    },\n    formFieldsOptions() {\n      return this.formFieldList.filter(o => o.__config__.jnpfKey !== 'table')\n    },\n    usedFormItems() {\n      return this.formFieldsOptions.filter(o => o.__vModel__.indexOf('-') < 0)\n    },\n    funcOptions() {\n      let options = [\n        ...systemFieldOptions,\n        ...this.formFieldsOptions\n      ]\n      return options\n    },\n    funcRequiredOptions() {\n      return this.formFieldsOptions.filter(o => o.__config__ && o.__config__.required)\n    },\n    rejectStepOptions() {\n      let options = []\n      const list = [{\n        nodeId: '2',\n        properties: { title: '自选审批节点' }\n      }]\n      options = [...defaultStep, ...list, ...this.realNodeList]\n      if (this.approverForm.rejectType == 2) {\n        options = options.filter(o => o.nodeId != 1)\n      }\n      return options\n    },\n    getCanSetApproversSort() {\n      return (\n        this.approverForm.assigneeType === 6 &&\n        this.approverForm.approvers.length &&\n        this.approverForm.approvers.every(o => o.indexOf('--user') !== -1) &&\n        this.approverForm.counterSign == 2\n      );\n    }\n  },\n  methods: {\n    onSwerveNodeChange(id) {\n      if (!id) return\n      let item = this.beforeNodeOptions.filter(o => o.id == id)[0]\n      this.properties.swerveLabel = item.fullName\n    },\n    onSignNumberChange(val, key) {\n      if (val) return;\n      this.$nextTick(() => { this.$set(this.approverForm.counterSignConfig, key, 1) })\n    },\n    updateApproversSortList(data) {\n      this.approverForm.approversSortList = data\n    },\n    openApproversSortListModal() {\n      this.registerApproversSortVisible = true\n      this.approversSort\n      this.$nextTick(() => {\n        this.$refs.approversSort.init({ ids: this.approverForm.approversSortList })\n      })\n    },\n    onApproversChange(val) {\n      console.log(val)\n      if (this.approverForm.assigneeType != 6 || !val || !val.length || !val.every(o => o.indexOf('--user') !== -1)) return (this.approverForm.approversSortList = []);\n      if (!this.approverForm.approversSortList.length) return (this.approverForm.approversSortList = val);\n      const arr = this.approverForm.approversSortList.filter(o => val.indexOf(o) !== -1);\n      const updated = val.filter(o => this.approverForm.approversSortList.indexOf(o) === -1);\n      this.approverForm.approversSortList = [...arr, ...updated];\n    },\n    handleCheckedCitiesChange(val, index) {\n      let totalCount = this.formOperatesList.length\n      let requiredDisabledCount = this.formOperatesList.filter(o => !o.requiredDisabled).length\n      let readCount = 0\n      let writeCount = 0\n      let requiredCount = 0\n      this.formOperatesList.forEach(item => {\n        if (item.read && index == 1) {\n          readCount++\n        }\n        if (item.write && index == 2) {\n          writeCount++\n        }\n        if (item.required && index == 3) {\n          requiredCount++\n        }\n      })\n      if (index == 1) this.readAllChecked = readCount === totalCount\n      if (index == 2) this.writeAllChecked = writeCount === totalCount\n      if (index == 3) this.requiredAllChecked = requiredCount === requiredDisabledCount\n      if (index == 1) this.indeterminateReadFlag = readCount > 0 && readCount < totalCount\n      if (index == 2) this.indeterminateWriteFlag = writeCount > 0 && writeCount < totalCount\n      if (index == 3) this.indeterminateRequiredFlag = requiredCount > 0 && requiredCount < requiredDisabledCount\n    },\n    updateReadAllSelected(val, index) {\n      if (index == 1) this.indeterminateReadFlag = false\n      if (index == 2) this.indeterminateWriteFlag = false\n      if (index == 3) this.indeterminateRequiredFlag = false\n      this.formOperatesList.forEach(item => {\n        if (index == 1) item.read = val;\n        if (index == 2) item.write = val;\n        if (index == 3 && !item.requiredDisabled) item.required = val;\n      })\n    },\n    onChangeRelationField(index, form, type) {\n      let item = this[form][type].templateJson[index]\n      if (item.relationField) item.relationField = undefined\n      this.$set(this[form][type].templateJson, index, item);\n    },\n    refreshPrintOptions() {\n      getPrintDevSelector(1).then(res => {\n        let data = res.data.list\n        let list = data.filter(o => o.children && o.children.length)\n        this.printTplList = list.map(o => ({\n          ...o,\n          hasChildren: true\n        }))\n      }).catch(error => {\n        reject(error)\n      })\n    },\n    open(url) {\n      window.open(url, \"_blank\");\n    },\n    openPrint() {\n      let routeUrl = this.$router.resolve({\n        path: '/system/printDev?open=true'\n      });\n      this.open(routeUrl.href)\n    },\n    handleSelect(item) {\n      this.temporaryContent += \"{\" + item.id + \"}\"\n      this.startForm.titleContent = this.temporaryContent\n    },\n    querySearch(queryString, cb) {\n      let systemParams = [{\n        id: '@flowFullName',\n        value: '@flowFullName(流程名称)'\n      },\n      {\n        id: '@flowFullCode',\n        value: '@flowFullCode(流程编码)'\n      },\n      {\n        id: '@launchUserName',\n        value: '@launchUserName(发起用户名)'\n      },\n      {\n        id: '@launchTime',\n        value: '@launchTime(发起时间)'\n      }]\n      let items = []\n      items = this.usedFormItems.filter(o => o.__config__.jnpfKey === 'input' || o.__config__.jnpfKey === 'textarea' || o.__config__.jnpfKey === 'inputNumber')\n      const params = items.map(o => ({ id: o.__vModel__, value: o.__vModel__ + \"(\" + o.__config__.label + \")\" }))\n\n      cb([...systemParams, ...params]);\n    },\n    getFormOperates() {\n      let res = []\n      this.isApproverNode() && (res = this.approverForm.formOperates)\n      this.isStartNode() && (res = this.startForm.formOperates)\n      this.formOperatesList = res\n      let requiredDisabledCount = this.formOperatesList.filter(o => !o.requiredDisabled).length\n      let readCount = 0\n      let writeCount = 0\n      let requiredCount = 0\n      if (!this.formOperatesList.length) return res\n      this.formOperatesList.forEach(item => {\n        if (item.read) {\n          readCount++\n        }\n        if (item.write) {\n          writeCount++\n        }\n        if (item.required) {\n          requiredCount++\n        }\n      })\n      this.readAllChecked = readCount === this.formOperatesList.length\n      this.writeAllChecked = writeCount === this.formOperatesList.length\n      this.requiredAllChecked = requiredCount === requiredDisabledCount\n      this.indeterminateReadFlag = readCount > 0 && readCount < this.formOperatesList.length\n      this.indeterminateWriteFlag = writeCount > 0 && writeCount < this.formOperatesList.length\n      this.indeterminateRequiredFlag = requiredCount > 0 && requiredCount < requiredDisabledCount\n      return res\n    },\n    resetOrgColl() {\n      this.approverForm.approvers = []\n      this.subFlowForm.initiator = []\n      this.approverForm.approversSortList = [];\n    },\n    onOrgChange(data, key) {\n\n    },\n    timeRangeLabel(item) {\n      const index = ['fc-time-duration', 'fc-date-duration'].findIndex(t => t === item.tag)\n      if (index > -1) {\n        return '时长' + ['(小时)', '(天)'][index]\n      } else {\n        return item.label\n      }\n    },\n    getAssignTypeLabel() {\n      const res = this.assigneeTypeOptions.find(t => t.value === this.approverForm.assigneeType)\n      return res ? res.label : ''\n    },\n    changeAllFormOperate(val) {\n      const target = this.isStartNode() ? this.startForm : this.approverForm\n      target.formOperates.forEach(t => t.formOperate = val)\n    },\n    // 是否可以显示当前条件组件\n    couldShowIt(item, ...tag) {\n      return tag.includes(item.tag) && this.showingPCons.includes(item.formId);\n    },\n    initFormOperates(target, isUpdate, isSameForm) {\n      const formOperates = target.properties && target.properties.formOperates || []\n      let res = []\n      const getWriteById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].write : NodeUtils.isStartNode(target)\n      }\n      const getReadById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].read : true\n      }\n      const getRequiredById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].required : false\n      }\n      if (!formOperates.length || isUpdate) {\n        for (let i = 0; i < this.formFieldList.length; i++) {\n          const data = this.formFieldList[i];\n          res.push({\n            id: data.__vModel__,\n            name: data.__config__.label,\n            required: !isSameForm ? data.__config__.required : data.__config__.required || getRequiredById(data.__vModel__),\n            requiredDisabled: requiredDisabled(data.__config__.jnpfKey) || data.__config__.required,\n            jnpfKey: data.__config__.jnpfKey,\n            dataType: getDataType(data),\n            read: !isSameForm ? true : getReadById(data.__vModel__),\n            write: !isSameForm ? NodeUtils.isStartNode(target) : getWriteById(data.__vModel__),\n          })\n        }\n      } else {\n        res = formOperates\n      }\n      return res\n    },\n    initCopyNode() {\n      this.properties = this.value.properties\n    },\n\n    initStartNodeData() {\n      this.initInitiator()\n    },\n\n    copyNodeConfirm() {\n      this.$emit(\"confirm\", this.properties, this.getOrgSelectLabel('copy') || '发起人自选');\n      this.visible = false;\n    },\n\n    /**\n     * 条件节点确认保存得回调\n     */\n    conditionNodeConfirm() {\n      if (!this.exist()) return\n      if (this.properties.conditionType == 1 && !this.properties.swerveNode) return this.$message.error('请设置转向节点');\n      this.properties.conditions = this.pconditions\n      let content = '';\n      for (let i = 0; i < this.properties.conditions.length; i++) {\n        const e = this.properties.conditions[i];\n        content += this.properties.conditions.length == 1 ? '' : (i == 0 ? '' : ` ${this.properties.matchLogic} `) + '( ';\n        for (let j = 0; j < e.groups.length; j++) {\n          const groups = e.groups[j];\n          const logic = j == 0 ? '' : ` ${e.logic} `;\n          const text = `[ ${groups.fieldName} ${groups.symbolName}\n        ${groups.fieldLabel ? groups.fieldLabel : groups.fieldValue || groups.fieldValue === 0 ? groups.fieldValue : ''} ]`;\n          content += logic + text;\n        }\n        content += this.properties.conditions.length == 1 ? '' : ' )';\n      }\n      if (this.properties.conditionType == 1) content += ' 转向' + this.properties.swerveLabel;\n      this.$emit(\"confirm\", this.properties, content || '请设置条件');\n      this.visible = false;\n    },\n\n    getOrgSelectLabel(type) {\n      return this.$refs[type + '-org'] && this.$refs[type + '-org']['selectedLabels']\n    },\n    /**\n     * 开始节点确认保存\n     */\n    startNodeConfirm() {\n      if (this.startForm.errorRule == 2 && !this.startForm.errorRuleUser.length) {\n        this.$message({\n          message: '请选择异常处理人',\n          type: 'error',\n        })\n        return\n      }\n      if (this.startForm.hasPrintBtn && !this.startForm.printId) {\n        this.$message.warning('请选择打印模板')\n        return this.value\n      }\n      let titleObj = {\n        title: this.properties.title\n      }\n      Object.assign(this.properties, this.startForm, titleObj)\n      this.properties.initiator = this.initiator\n      let content = '',\n        initiatorText = this.getOrgSelectLabel('start-user')\n      if (!initiatorText) {\n        content = \"所有人\"\n      } else {\n        content += (content && initiatorText ? ',' : '') + initiatorText\n      }\n      this.$emit(\"confirm\", this.properties, content);\n      this.visible = false;\n    },\n    /**\n     * 定时器节点确认保存\n     */\n    timerNodeConfirm() {\n      let content = ''\n      let { day, hour, minute, second } = this.properties\n      if (!day && !hour && !minute && !second) {\n        content = '请设置时间'\n      } else {\n        content = `将于${day ? day + '天' : ''}${hour ? hour + '小时' : ''}${minute ? minute + '分钟' : ''}${second ? second + '秒' : ''}后流转`\n      }\n      this.$emit(\"confirm\", this.properties, content);\n      this.visible = false;\n    },\n    /**\n     * 子流程节点确认保存\n     */\n    subFlowNodeConfirm() {\n      if (!this.properties.title) {\n        this.$message({\n          message: '请输入子流程名称',\n          type: 'error',\n        })\n        return\n      }\n      let content = ''\n      if (this.subFlowForm.initiateType === 6) {\n        if (!this.subFlowForm.initiator.length) {\n          this.$message({\n            message: '请设置发起人',\n            type: 'error',\n          })\n          return\n        }\n        let initiatorText = this.getOrgSelectLabel('subFlow-user')\n        content += (content && initiatorText ? ',' : '') + initiatorText\n      } else {\n        content = this.initiateTypeOptions.find(t => t.value === this.subFlowForm.initiateType).label\n      }\n      if (this.subFlowForm.initiateType == 4 && !this.subFlowForm.formField) {\n        this.$message({\n          message: '请选择表单字段',\n          type: 'error',\n        })\n        return\n      }\n      if (this.subFlowForm.initiateType == 5 && !this.subFlowForm.nodeId) {\n        this.$message({\n          message: '请选择节点',\n          type: 'error',\n        })\n        return\n      }\n      if (this.subFlowForm.initiateType == 9 && !this.subFlowForm.getUserUrl) {\n        this.$message({\n          message: '请输入接口路径',\n          type: 'error',\n        })\n        return\n      }\n      if (!this.subFlowForm.flowId) {\n        this.$message({\n          message: '请选择子流程表单',\n          type: 'error',\n        })\n        return\n      }\n      if (this.subFlowForm.errorRule == 2 && !this.subFlowForm.errorRuleUser.length) {\n        this.$message({\n          message: '请选择异常处理人',\n          type: 'error',\n        })\n        return\n      }\n      let titleObj = {\n        title: this.properties.title\n      }\n      Object.assign(this.properties, this.subFlowForm, titleObj)\n      this.$emit(\"confirm\", this.properties, content || '请设置发起人');\n      this.visible = false;\n    },\n    /**\n     * 审批节点确认保存\n     */\n    approverNodeConfirm() {\n      if (!this.properties.title) {\n        this.$message({\n          message: '请输入节点名称',\n          type: 'error',\n        })\n        return\n      }\n      if (this.approverForm.hasPrintBtn && !this.approverForm.printId) {\n        this.$message.warning('请选择打印模板')\n        return this.value\n      }\n      const assigneeType = this.approverForm.assigneeType\n      let content = ''\n      if (assigneeType == 6) {\n        if (!this.approverForm.approvers.length) {\n          this.$message({\n            message: '请设置审批人',\n            type: 'error',\n          })\n          return\n        }\n        // approver\n        let approverText = this.getOrgSelectLabel('approver-user');\n        content += (content && approverText ? ',' : '') + approverText\n      } else {\n        content = this.assigneeTypeOptions.find(t => t.value === assigneeType).label\n      }\n      if (assigneeType == 4 && !this.approverForm.formField) {\n        this.$message({\n          message: '请选择表单字段',\n          type: 'error',\n        })\n        return\n      }\n      if (assigneeType == 5 && !this.approverForm.nodeId) {\n        this.$message({\n          message: '请选择节点',\n          type: 'error',\n        })\n        return\n      }\n      if (assigneeType == 9 && !this.approverForm.getUserUrl) {\n        this.$message({\n          message: '请输入接口路径',\n          type: 'error',\n        })\n        return\n      }\n      if (this.approverForm.hasAgreeRule && !this.approverForm.agreeRules.length) {\n        this.$message({\n          message: '请选择同意规则配置',\n          type: 'error',\n        })\n        return\n      }\n      let titleObj = {\n        title: this.properties.title\n      }\n      Object.assign(this.properties, this.approverForm, titleObj)\n      this.$emit(\"confirm\", this.properties, content || '请设置审批人')\n      this.visible = false\n\n    },\n    // 确认修改\n    confirm() {\n      this.isCopyNode() && this.copyNodeConfirm()\n      this.isStartNode() && this.startNodeConfirm()\n      this.isTimerNode() && this.timerNodeConfirm()\n      this.isSubFlowNode() && this.subFlowNodeConfirm()\n      this.isApproverNode() && this.approverNodeConfirm()\n      this.isConditionNode() && this.conditionNodeConfirm()\n    },\n    // 关闭抽屉\n    cancel() {\n      setTimeout(() => {\n        this.$emit(\"cancel\");\n        this.visible = false;\n      }, 0)\n    },\n    /**\n     * 删除流程条件\n     */\n    onDelCondition(index) {\n      this.pconditions.splice(index, 1)\n    },\n    // 配合getPriorityLength 获取前一个节点条件数组长度 用于设置优先级\n    getPrevData() {\n      return NodeUtils.getPreviousNode(this.value.prevId, this.processData);\n    },\n    // 用于获取节点优先级范围\n    getPriorityLength() {\n      this.priorityLength = this.getPrevData().conditionNodes.length;\n    },\n    // 判断是否是条件节点\n    isConditionNode() {\n      return this.value ? NodeUtils.isConditionNode(this.value) : false;\n    },\n    /** 判断是否是审批节点*/\n    isApproverNode() {\n      return this.value ? NodeUtils.isApproverNode(this.value) : false;\n    },\n\n    isStartNode() {\n      return this.value ? NodeUtils.isStartNode(this.value) : false;\n    },\n    isCopyNode() {\n      return this.value ? NodeUtils.isCopyNode(this.value) : false\n    },\n    isTimerNode() {\n      return this.value ? NodeUtils.isTimerNode(this.value) : false\n    },\n    isSubFlowNode() {\n      return this.value ? NodeUtils.isSubFlowNode(this.value) : false\n    },\n    // 初始化发起人节点\n    initInitiator() {\n      this.initiator = this.value.properties && this.value.properties.initiator\n      let properties = JSON.parse(JSON.stringify(this.value.properties))\n      Object.assign(this.startForm, properties)\n      this.oldFormId = this.startForm.formId;\n      if (!this.oldFormId) return;\n      let formFieldList = [];\n      if (this.startForm.allFormMap && this.startForm.allFormMap['form_' + this.oldFormId]) {\n        formFieldList = this.startForm.allFormMap['form_' + this.oldFormId] || [];\n      }\n      this.formFieldList = formFieldList;\n      this.getFormOperates()\n    },\n    /**\n    * 初始化审批节点所需数据\n    */\n    initApproverNodeData() {\n      this.activeName = 'config'\n      this.isPrevNodeWithSubForm = false\n      let properties = JSON.parse(JSON.stringify(this.value.properties))\n      let formFieldList = [];\n      const formId = properties.formId || this.processData.properties.formId;\n      this.oldFormId = formId;\n      if (formId && this.processData.properties.allFormMap && this.processData.properties.allFormMap['form_' + formId]) {\n        formFieldList = this.processData.properties.allFormMap['form_' + formId] || [];\n      }\n      this.formFieldList = formFieldList;\n      this.approverForm.formOperates = this.initFormOperates(this.value)\n      Object.assign(this.approverForm, properties)\n      this.getNodeOption()\n      this.getPrevNodeOption()\n      this.approverForm.approveMsgConfig.on = typeof this.approverForm.approveMsgConfig.on === 'number' ? this.approverForm.approveMsgConfig.on : 2\n      this.approverForm.rejectMsgConfig.on = typeof this.approverForm.rejectMsgConfig.on === 'number' ? this.approverForm.rejectMsgConfig.on : 2\n      this.getFormOperates()\n    },\n    initSubFlowData() {\n      this.getNodeOption()\n      this.getPrevNodeOption()\n      let properties = JSON.parse(JSON.stringify(this.value.properties))\n      Object.assign(this.subFlowForm, properties)\n      const prevNode = this.prevNodeList[0]\n      let formFieldList = [];\n      const formId = prevNode.properties.formId || this.processData.properties.formId;\n      if (formId && this.processData.properties.allFormMap && this.processData.properties.allFormMap['form_' + formId]) {\n        formFieldList = this.processData.properties.allFormMap['form_' + formId] || [];\n      }\n      this.formFieldList = formFieldList;\n      this.subFlowForm.launchMsgConfig.on = typeof this.subFlowForm.launchMsgConfig.on === 'number' ? this.subFlowForm.launchMsgConfig.on : 0\n    },\n    openApproverTransmitRuleBox() {\n      let assignList = this.approverForm.assignList ? JSON.parse(JSON.stringify(this.approverForm.assignList)) : []\n      this.getRealAssignList(assignList)\n      this.approverTransmitRuleVisible = true\n    },\n    getRealAssignList(assignList) {\n      let newAssignList = this.prevNodeList.map(o => {\n        let formFieldList = [];\n        const formId = o.properties.formId || this.processData.properties.formId;\n        if (formId && this.processData.properties.allFormMap && this.processData.properties.allFormMap['form_' + formId]) {\n          formFieldList = this.processData.properties.allFormMap['form_' + formId] || [];\n        }\n        formFieldList = formFieldList.filter(o => o.__config__.jnpfKey !== 'table');\n        return {\n          nodeId: o.nodeId,\n          title: o.properties.title,\n          formFieldList,\n          ruleList: []\n        }\n      })\n      if (!assignList.length) {\n        this.assignList = newAssignList\n      } else {\n        let list = []\n        // 去掉被删掉的节点\n        for (let i = 0; i < assignList.length; i++) {\n          const e = assignList[i];\n          inter: for (let j = 0; j < newAssignList.length; j++) {\n            if (e.nodeId === newAssignList[j].nodeId) {\n              const item = {\n                nodeId: e.nodeId,\n                title: newAssignList[j].title,\n                formFieldList: newAssignList[j].formFieldList,\n                ruleList: e.ruleList\n              }\n              list.push(item)\n              break inter\n            }\n          }\n        }\n        let addList = newAssignList.filter(o => !assignList.some(item => item.nodeId === o.nodeId))\n        this.assignList = [...list, ...addList]\n      }\n    },\n    addTransmitRule(i) {\n      this.assignList[i].ruleList.push({\n        parentField: '',\n        childField: '',\n        childFieldOptions: []\n      })\n    },\n    delTransmitRule(i, cIndex) {\n      this.assignList[i].ruleList.splice(cIndex, 1)\n    },\n    saveApproverTransmitRule() {\n      let boo = true\n      for (let i = 0; i < this.assignList.length; i++) {\n        const e = this.assignList[i]\n        const ruleList = e.ruleList;\n        for (let j = 0; j < ruleList.length; j++) {\n          if (!ruleList[j].parentField) {\n            boo = false\n            this.$message({\n              message: `请选择${e.title}的上节点字段`,\n              type: 'error',\n            })\n            break\n          }\n          if (!ruleList[j].childField) {\n            boo = false\n            this.$message({\n              message: `请选择${e.title}的本节点字段`,\n              type: 'error',\n            })\n            break\n          }\n        }\n      }\n      if (!boo) return\n      this.approverForm.assignList = this.assignList\n      this.approverTransmitRuleVisible = false\n      this.assignList = []\n    },\n    openRuleBox() {\n      if (!this.subFlowForm.flowId) {\n        this.$message({\n          message: '请选择子流程表单',\n          type: 'error',\n        })\n        return\n      }\n      getFlowFormInfo(this.subFlowForm.flowId).then(res => {\n        let { formType = 1, propertyJson } = res.data\n        let formJson = {}, fieldList = []\n        if (propertyJson) formJson = JSON.parse(propertyJson)\n        if (formType == 1) {\n          fieldList = this.transformFormJson(formJson)\n        } else {\n          fieldList = formJson.fields\n        }\n        this.childFieldOptions = this.transformFieldList(fieldList).filter(o => o.__config__.jnpfKey !== 'table')\n        let assignList = this.subFlowForm.assignList ? JSON.parse(JSON.stringify(this.subFlowForm.assignList)) : []\n        this.getRealAssignList(assignList)\n        this.ruleVisible = true\n      })\n    },\n    saveRule() {\n      let boo = true\n      for (let i = 0; i < this.assignList.length; i++) {\n        const e = this.assignList[i]\n        const ruleList = e.ruleList;\n        for (let j = 0; j < ruleList.length; j++) {\n          if (!ruleList[j].parentField) {\n            boo = false\n            this.$message({\n              message: `请选择${e.title}的父流程字段`,\n              type: 'error',\n            })\n            break\n          }\n          if (!ruleList[j].childField) {\n            boo = false\n            this.$message({\n              message: `请选择${e.title}的子流程字段`,\n              type: 'error',\n            })\n            break\n          }\n        }\n      }\n      if (!boo) return\n      this.subFlowForm.assignList = this.assignList\n      this.ruleVisible = false\n      this.assignList = []\n    },\n    // 获取上一节数据\n    getPrevNodeOption() {\n      let prevNode = NodeUtils.getPreviousNode(this.value.prevId, this.processData)\n      let node = JSON.parse(JSON.stringify(prevNode))\n      delete node.childNode\n      let prevNodeList = []\n      const loop = nodeData => {\n        if (nodeData.conditionNodes) {\n          let hasCondition = nodeData.conditionNodes.some(o => o.nodeId === this.value.nodeId)\n          if (hasCondition) return prevNodeList.push(nodeData)\n        }\n        if (nodeData.childNode) {\n          loop(nodeData.childNode)\n        } else if (nodeData.conditionNodes && !nodeData.childNode) {\n          for (let c of nodeData.conditionNodes) {\n            loop(c)\n          }\n        } else {\n          prevNodeList.push(nodeData)\n        }\n      }\n      loop(node)\n      this.prevNodeList = prevNodeList\n      this.getPrevNodeRealList()\n    },\n    getPrevNodeRealList() {\n      const loop = (data) => {\n        inner: for (let i = 0; i < data.length; i++) {\n          if (['condition', 'subFlow', 'timer'].includes(data[i].type)) {\n            if (data[i].type === 'subFlow') this.isPrevNodeWithSubForm = true\n            let prevNode = NodeUtils.getPreviousNode(data[i].prevId, this.processData)\n            let node = JSON.parse(JSON.stringify(prevNode))\n            delete node.childNode\n            let prevNodeList = []\n            const getPrevNodeAllList = nodeData => {\n              if (nodeData.conditionNodes) {\n                let hasCondition = nodeData.conditionNodes.some(o => o.nodeId === data[i].nodeId)\n                if (hasCondition) return prevNodeList.push(nodeData)\n              }\n              if (nodeData.childNode) {\n                getPrevNodeAllList(nodeData.childNode)\n              } else if (nodeData.conditionNodes && !nodeData.childNode) {\n                for (let c of nodeData.conditionNodes) {\n                  getPrevNodeAllList(c)\n                }\n              } else {\n                prevNodeList.push(nodeData)\n              }\n            }\n            getPrevNodeAllList(node)\n            data.splice(i, 1, ...prevNodeList)\n            loop(data)\n            break inner\n          }\n        }\n      }\n      loop(this.prevNodeList)\n      this.prevNodeList = this.unique(this.prevNodeList, 'nodeId')\n    },\n    // 去重\n    unique(arr, attrName) {\n      const res = new Map()\n      // 根据对象的某个属性值去重\n      return arr.filter(o => !res.has(o[attrName]) && res.set(o[attrName], 1))\n    },\n    // 获取退回步骤选项\n    getNodeOption() {\n      let list = [], _this = this\n      const loop = data => {\n        if (Array.isArray(data)) data.forEach(d => loop(d))\n        if (data.type === 'approver') list.push(data)\n        if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n        if (data.childNode) loop(data.childNode)\n      }\n      loop(this.processData)\n      let beforeNodeList = [];\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].nodeId === _this.value.nodeId) break;\n        beforeNodeList.push(list[i]);\n      }\n      this.beforeNodeOptions = beforeNodeList.map(o => ({ id: o.nodeId, fullName: o.properties.title }));\n      let realList = []\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].nodeId === _this.value.nodeId) break\n        realList.push(list[i])\n      }\n      this.realNodeList = realList\n      let nodeOptions = list.filter(o => o.nodeId !== _this.value.nodeId)\n      this.nodeOptions = nodeOptions\n    },\n    getSwerveNodeOption() {\n      let list = [];\n      const loop = data => {\n        if (Array.isArray(data)) data.forEach(d => loop(d));\n        if (data.type === 'approver' || data.type === 'start') list.push(data);\n        if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes);\n        if (data.childNode) loop(data.childNode);\n      };\n      loop(this.processData);\n      const prevNode = this.prevNodeList[0];\n      let beforeNodeList = [];\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].nodeId === prevNode.nodeId) break;\n        beforeNodeList.push(list[i]);\n      }\n      this.beforeNodeOptions = beforeNodeList.map(o => ({ id: o.nodeId, fullName: o.properties.title }));\n    },\n    /**\n     * 初始化条件节点数据\n     */\n    initConditionNodeData() {\n      this.getConditionNodeFieldList()\n      this.getSwerveNodeOption()\n      // 初始化条件表单数据\n      let nodeConditions = this.value.properties && this.value.properties.conditions\n      for (let i = 0; i < nodeConditions.length; i++) {\n        for (let j = 0; j < this.usedFormItems.length; j++) {\n          if (nodeConditions[i].__vModel__ === this.usedFormItems[j].__vModel__) {\n            nodeConditions[i] = { ...nodeConditions[i], ...this.usedFormItems[j] }\n          }\n        }\n      }\n      this.pconditions = JSON.parse(JSON.stringify(nodeConditions))\n      this.pconditions.matchLogic = this.properties.matchLogic || 'and';\n    },\n    addCondition() {\n      let item = {\n        logic: \"&&\",\n        groups: [{\n          fieldValue: \"\",\n          props: {},\n          fieldType: 1,\n          fieldValueType: 2,\n          fieldLabel: \"\",\n          dataOptions: [],\n          dataLabel: \"\",\n          dataValue: \"\",\n          field: \"\",\n          symbol: \"\",\n          jnpfKey: \"\"\n        }]\n      }\n      this.pconditions.push(item)\n    },\n    getConditionNodeFieldList() {\n      this.getPrevNodeOption()\n      if (!this.prevNodeList.length) {\n        this.formFieldList = []\n      } else {\n        let prevNode = this.prevNodeList[0]\n        let formFieldList = [];\n        const formId = prevNode.properties.formId || this.processData.properties.formId;\n        if (formId && this.processData.properties.allFormMap && this.processData.properties.allFormMap['form_' + formId]) {\n          formFieldList = this.processData.properties.allFormMap['form_' + formId] || [];\n        }\n        this.formFieldList = formFieldList.filter(o => o.__config__.jnpfKey !== 'table');\n      }\n    },\n    fieldNameChange(val, item, i, childIndex) {\n      let obj = this.usedFormItems.filter(o => o.__vModel__ == val)[0]\n      item.fieldName = obj.__config__.label\n      item.jnpfKey = obj.__config__.jnpfKey\n      item = { ...item, ...obj }\n      item.fieldValue = undefined\n      item.fieldLabel = ''\n      item.fieldValueJnpfKey = ''\n      this.$set(this.pconditions[i].groups, childIndex, item)\n    },\n    symbolChange(val, item) {\n      let obj = this.symbolOptions.filter(o => o.value == val)[0]\n      item.symbolName = obj.label\n    },\n    logicChange(val, item) {\n      let obj = this.logicOptions.filter(o => o.value == val)[0]\n      item.logicName = obj.label\n    },\n    fieldValueTypeChange(item) {\n      item.fieldValue = ''\n      item.fieldLabel = ''\n      item.fieldValueJnpfKey = ''\n    },\n    fieldTypeChange(item) {\n      item.field = ''\n      item.fieldName = ''\n      item.jnpfKey = ''\n      item.fieldValue = ''\n    },\n    fieldValueChange(val, item) {\n      let obj = this.usedFormItems.filter(o => o.__vModel__ == val)[0]\n      item.fieldLabel = obj.__config__.label\n      item.fieldValueJnpfKey = obj.__config__.jnpfKey || ''\n    },\n    // 条件字段验证\n    exist() {\n      let isOk = true;\n      //  遍历数组，判断非空\n      for (let i = 0; i < this.pconditions.length; i++) {\n        const e = this.pconditions[i];\n        if (!e.groups.length) return this.$message.warning('条件配置不能为空')\n        for (let index = 0; index < e.groups.length; index++) {\n          const element = e.groups[index];\n          if (!element.field && element.fieldType == 1) {\n            this.$message({\n              showClose: true,\n              message: '条件字段不能为空',\n              type: 'error',\n              duration: 1000\n            });\n            isOk = false\n            break\n          }\n          if (!element.symbol) {\n            this.$message({\n              showClose: true,\n              message: '比较不能为空',\n              type: 'error',\n              duration: 1000\n            });\n            isOk = false\n            break\n          }\n        }\n      }\n      return isOk;\n    },\n    getPrintTplList() {\n      this.$store.dispatch('base/getPrintFlowTree').then(res => {\n        let list = res.filter(o => o.children && o.children.length)\n        this.printTplList = list.map(o => ({\n          ...o,\n          hasChildren: true\n        }))\n      })\n    },\n    onMsgChange(obj, key, params) {\n      const [id, item] = params\n      if (!id) {\n        this[obj][key].msgId = ''\n        this[obj][key].msgName = ''\n        this[obj][key].templateJson = []\n        return\n      }\n      if (this[obj][key].msgId === id) return\n      this[obj][key].msgId = id\n      this[obj][key].msgName = item.fullName\n      this[obj][key].templateJson = item.templateJson\n    },\n    onFuncChange(obj, key, params) {\n      const [id, item] = params\n      if (!id) {\n        this[obj][key].interfaceId = ''\n        this[obj][key].interfaceName = ''\n        this[obj][key].templateJson = []\n        return\n      }\n      if (this[obj][key].interfaceId === id) return\n      this[obj][key].interfaceId = id\n      this[obj][key].interfaceName = item.fullName\n      this[obj][key].templateJson = item.templateJson.map(o => ({ ...o, sourceType: 1 }))\n    },\n    onRelationFieldChange(val, item) {\n      if (!val) return\n      let list = this.funcOptions.filter(o => val === o.__vModel__)\n      if (!list.length) return\n      let obj = list[0]\n      this.$set(item, 'isSubTable', obj.__config__ && obj.__config__.isSubTable ? obj.__config__.isSubTable : false)\n    },\n    onSubFlowIdChange(id, item) {\n      if (!id) {\n        this.subFlowForm.flowId = ''\n        this.subFlowForm.flowName = ''\n        return\n      }\n      if (this.subFlowForm.flowId === id) return\n      this.subFlowForm.flowId = id\n      this.subFlowForm.flowName = item.fullName\n      this.subFlowForm.assignList = []\n    },\n    addGroup() {\n      let item = {\n        logic: \"and\",\n        groups: [{\n          fieldName: '',\n          symbolName: '',\n          fieldValue: undefined,\n          fieldType: 1,\n          fieldValueType: 2,\n          fieldLabel: '',\n          fieldValueJnpfKey: '',\n          logicName: '并且',\n          field: '',\n          symbol: '',\n          logic: '&&',\n          jnpfKey: '',\n          cellKey: +new Date(),\n        }]\n      }\n      this.pconditions.push(item)\n    },\n    addItem(index) {\n      this.pconditions[index].groups.push({\n        fieldName: '',\n        symbolName: '',\n        fieldValue: undefined,\n        fieldType: 1,\n        fieldValueType: 2,\n        fieldLabel: '',\n        fieldValueJnpfKey: '',\n        logicName: '并且',\n        field: '',\n        symbol: '',\n        logic: '&&',\n        jnpfKey: '',\n        cellKey: +new Date(),\n      })\n    },\n    delGroup(index) {\n      this.pconditions.splice(index, 1)\n    },\n    delItem(index, childIndex) {\n      this.pconditions[index].groups.splice(childIndex, 1)\n    },\n    // 条件节点\n    onConditionDateChange(val, item) {\n      if (!val) return item.fieldLabel = ''\n      let format = item.format || 'yyyy-MM-dd HH:mm:ss'\n      item.fieldLabel = this.jnpf.toDate(val, format)\n    },\n    onConditionListChange(data, item) {\n      if (!data || !data[1]) return item.fieldLabel = ''\n      let labelList = data[1].map(o => o.fullName)\n      item.fieldLabel = labelList.join('/')\n    },\n    onConditionObjChange(data, item) {\n      if (!data || !data[1]) return item.fieldLabel = ''\n      item.fieldLabel = data[1].fullName || ''\n    },\n    editFormula(item) {\n      this.activeItem = item\n      this.$nextTick(() => {\n        this.formulaVisible = true\n      })\n    },\n    updateFormula(formula) {\n      this.activeItem.field = formula\n      this.activeItem.fieldName = formula\n    },\n    goDetail(id) {\n      this.viewVisible = true\n      this.$nextTick(() => {\n        this.$refs.View.init(id)\n      })\n    },\n    onStartFormIdChange(id, item) {\n      if (!id) return this.handleNull('startForm')\n      let isSameForm = this.startForm.formId === id\n      this.startForm.formName = item.fullName\n      this.startForm.formId = id\n      this.getFormFieldList(id, 'startForm', isSameForm)\n    },\n    onApproverFormIdChange(id, item) {\n      if (!id) return this.handleNull('approverForm')\n      let isSameForm = this.startForm.formId === id\n      this.approverForm.formName = item.fullName\n      this.approverForm.formId = id\n      this.approverForm.assignList = []\n      this.getFormFieldList(id, 'approverForm', isSameForm)\n    },\n    handleNull(form) {\n      this[form].formName = ''\n      this[form].formId = ''\n      let formFieldList = []\n      if (form === 'approverForm') {\n        const formId = this.processData.properties.formId;\n        if (formId && this.processData.properties.allFormMap && this.processData.properties.allFormMap['form_' + formId]) {\n          formFieldList = this.processData.properties.allFormMap['form_' + formId] || [];\n        }\n      }\n      this.formFieldList = formFieldList\n      this[form].formOperates = this.initFormOperates(this.value, true)\n      if (form === 'startForm') this.updateAllNodeFormOperates()\n      this.updateAllFormMap('', form, formFieldList);\n    },\n    getFormFieldList(id, form, isSameForm) {\n      getFormInfo(id).then(res => {\n        let { formType = 1, propertyJson } = res.data\n        let formJson = {}, fieldList = []\n        if (propertyJson) formJson = JSON.parse(propertyJson)\n        if (formType == 1) {\n          fieldList = this.transformFormJson(formJson)\n        } else {\n          fieldList = formJson.fields\n        }\n        let list = this.transformFieldList(fieldList)\n        this.formFieldList = list\n        this[form].formOperates = this.initFormOperates(this.value, true, isSameForm)\n        this.updateAllFormMap(id, form, list);\n        // 更新所有没设置表单的节点的表单权限\n        if (form === 'startForm') this.updateAllNodeFormOperates(isSameForm)\n        this.getFormOperates()\n      })\n    },\n    // 更新allFormMap\n    updateAllFormMap(id, form, list) {\n      if (form === 'startForm') {\n        if (!this[form].allFormMap) this[form].allFormMap = {};\n        if (this.oldFormId && !this.getHasSameFormId(this.oldFormId)) delete this[form].allFormMap['form_' + this.oldFormId];\n        if (id) this[form].allFormMap['form_' + id] = list;\n      } else {\n        if (!this.processData.properties.allFormMap) this.processData.properties.allFormMap = {};\n        if (this.oldFormId && !this.getHasSameFormId(this.oldFormId)) delete this.processData.properties.allFormMap['form_' + this.oldFormId];\n        if (id) this.processData.properties.allFormMap['form_' + id] = list;\n      }\n      this.oldFormId = id;\n    },\n    // 判断其他节点是否跟当前节点旧表单同一表单\n    getHasSameFormId(formId) {\n      if (!formId) return false;\n      let hasSameFormId = false;\n      const loop = data => {\n        if (Array.isArray(data)) data.forEach(d => loop(d));\n        if ((data.type === 'approver' || data.type === 'start') && data.nodeId !== this.value.nodeId && data.properties.formId === formId) {\n          return (hasSameFormId = true);\n        }\n        if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes);\n        if (data.childNode) loop(data.childNode);\n      };\n      loop(this.processData);\n      return hasSameFormId;\n    },\n    transformFormJson(list) {\n      let fieldList = list.map(o => ({\n        __config__: {\n          label: o.filedName,\n          jnpfKey: o.jnpfKey || '',\n          required: o.required || false\n        },\n        __vModel__: o.filedId,\n        multiple: o.multiple || false\n      }))\n      return fieldList\n    },\n    transformFieldList(formFieldList) {\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__vModel__) {\n          const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table'\n          let obj = {\n            ...data,\n            id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            __vModel__: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n            __config__: {\n              label: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n              jnpfKey: data.__config__.jnpfKey,\n              required: data.__config__.required,\n              isSubTable: data.__config__.isSubTable,\n            },\n          }\n          delete obj.on\n          delete obj.style\n          delete obj.options\n          delete obj.props\n          delete obj.templateJson\n          delete obj.columnOptions\n          delete obj.addTableConf\n          delete obj.tableConf\n          list.push(obj)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n      }\n      loop(formFieldList)\n      return list\n    },\n    updateAllNodeFormOperates(isSameForm) {\n      const loop = data => {\n        if (Array.isArray(data)) data.forEach(d => loop(d))\n        if (data.type === 'approver' && !data.properties.formId) {\n          data.properties.formOperates = this.initFormOperates(data, true, isSameForm)\n        }\n        if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n        if (data.childNode) loop(data.childNode)\n      }\n      loop(this.processData)\n    },\n    radioInput(val) {\n      this.approverForm.rejectStep = '0'\n    },\n  },\n  watch: {\n    visible(val) {\n      if (!val) {\n        this.approverForm = JSON.parse(JSON.stringify(defaultApproverForm)) // 重置数据为默认状态\n        this.subFlowForm = JSON.parse(JSON.stringify(defaultSubFlowForm))\n        this.startForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        return\n      }\n      this.isStartNode() && this.initStartNodeData()\n      this.isSubFlowNode() && this.initSubFlowData()\n      this.isApproverNode() && this.initApproverNodeData()\n      this.isConditionNode() && this.initConditionNodeData()\n      this.getPrintTplList()\n    },\n    'startForm.titleContent'(newVal) {\n      this.temporaryContent = newVal\n    },\n    value(newVal) {\n      if (newVal && newVal.properties) {\n        this.visible = true;\n        this.properties = JSON.parse(JSON.stringify(newVal.properties));\n        if (this.properties) {\n          NodeUtils.isConditionNode(newVal) && this.getPriorityLength();\n        }\n      }\n    }\n  },\n};\n",null]}