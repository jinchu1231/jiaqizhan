{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/utils/index.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/utils/index.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addClass = addClass;\nexports.byteLength = byteLength;\nexports.cleanArray = cleanArray;\nexports.createUniqueString = createUniqueString;\nexports.debounce = debounce;\nexports.deepClone = deepClone;\nexports.formatTime = formatTime;\nexports.getQueryObject = getQueryObject;\nexports.getTime = getTime;\nexports.hasClass = hasClass;\nexports.html2Text = html2Text;\nexports.objectMerge = objectMerge;\nexports.param = param;\nexports.param2Obj = param2Obj;\nexports.parseTime = parseTime;\nexports.removeClass = removeClass;\nexports.toggleClass = toggleClass;\nexports.uniqueArr = uniqueArr;\nrequire(\"core-js/modules/es6.regexp.match\");\nrequire(\"core-js/modules/es6.set\");\nrequire(\"core-js/modules/es6.string.iterator\");\nrequire(\"core-js/modules/es6.array.from\");\nvar _typeof2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/typeof.js\"));\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nrequire(\"core-js/modules/es7.string.pad-start\");\nrequire(\"core-js/modules/es6.regexp.to-string\");\nrequire(\"core-js/modules/es6.regexp.constructor\");\nrequire(\"core-js/modules/es6.regexp.replace\");\n/**\n * Parse the time to string\n * @param {(Object|string|number)} time\n * @param {string} cFormat\n * @returns {string | null}\n */\nfunction parseTime(time, cFormat) {\n  if (arguments.length === 0 || !time) {\n    return null;\n  }\n  var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n  var date;\n  if (typeof time === 'string') {\n    if (/^[0-9]+$/.test(time)) {\n      // support \"1548221490638\"\n      time = parseInt(time);\n    } else {\n      // support safari\n      // https://stackoverflow.com/questions/4310953/invalid-date-in-safari\n      time = time.replace(new RegExp(/-/gm), '/');\n    }\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time);\n    }\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000;\n    }\n    date = new Date(time);\n  }\n  var formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  };\n  var time_str = format.replace(/{([ymdhisa])+}/g, function (result, key) {\n    var value = formatObj[key];\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value];\n    }\n    return value.toString().padStart(2, '0');\n  });\n  return time_str;\n}\n\n/**\n * @param {number} time\n * @param {string} option\n * @returns {string}\n */\nfunction formatTime(time, option) {\n  if (('' + time).length === 10) {\n    time = parseInt(time) * 1000;\n  } else {\n    time = +time;\n  }\n  var d = new Date(time);\n  var now = Date.now();\n  var diff = (now - d) / 1000;\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return d.getMonth() + 1 + '月' + d.getDate() + '日' + d.getHours() + '时' + d.getMinutes() + '分';\n  }\n}\n\n/**\n * @param {string} url\n * @returns {Object}\n */\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n\n/**\n * @param {string} input value\n * @returns {number} output value\n */\nfunction byteLength(str) {\n  // returns the byte length of an utf8 string\n  var s = str.length;\n  for (var i = str.length - 1; i >= 0; i--) {\n    var code = str.charCodeAt(i);\n    if (code > 0x7f && code <= 0x7ff) s++;else if (code > 0x7ff && code <= 0xffff) s += 2;\n    if (code >= 0xDC00 && code <= 0xDFFF) i--;\n  }\n  return s;\n}\n\n/**\n * @param {Array} actual\n * @returns {Array}\n */\nfunction cleanArray(actual) {\n  var newArray = [];\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\n\n/**\n * @param {Object} json\n * @returns {Array}\n */\nfunction param(json) {\n  if (!json) return '';\n  return cleanArray(Object.keys(json).map(function (key) {\n    if (json[key] === undefined) return '';\n    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n  })).join('&');\n}\n\n/**\n * @param {string} url\n * @returns {Object}\n */\nfunction param2Obj(url) {\n  var search = decodeURIComponent(url.split('?')[1]).replace(/\\+/g, ' ');\n  if (!search) {\n    return {};\n  }\n  var obj = {};\n  var searchArr = search.split('&');\n  searchArr.forEach(function (v) {\n    var index = v.indexOf('=');\n    if (index !== -1) {\n      var name = v.substring(0, index);\n      var val = v.substring(index + 1, v.length);\n      obj[name] = val;\n    }\n  });\n  return obj;\n}\n\n/**\n * @param {string} val\n * @returns {string}\n */\nfunction html2Text(val) {\n  var div = document.createElement('div');\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\n\n/**\n * Merges two objects, giving the last one precedence\n * @param {Object} target\n * @param {(Object|Array)} source\n * @returns {Object}\n */\nfunction objectMerge(target, source) {\n  if ((0, _typeof2.default)(target) !== 'object') {\n    target = {};\n  }\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n  Object.keys(source).forEach(function (property) {\n    var sourceProperty = source[property];\n    if ((0, _typeof2.default)(sourceProperty) === 'object') {\n      target[property] = objectMerge(target[property], sourceProperty);\n    } else {\n      target[property] = sourceProperty;\n    }\n  });\n  return target;\n}\n\n/**\n * @param {HTMLElement} element\n * @param {string} className\n */\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n  var classString = element.className;\n  var nameIndex = classString.indexOf(className);\n  if (nameIndex === -1) {\n    classString += '' + className;\n  } else {\n    classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);\n  }\n  element.className = classString;\n}\n\n/**\n * @param {string} type\n * @returns {Date}\n */\nfunction getTime(type) {\n  if (type === 'start') {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\n\n/**\n * @param {Function} func\n * @param {number} wait\n * @param {boolean} immediate\n * @return {*}\n */\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    // 据上一次触发时间间隔\n    var last = +new Date() - timestamp;\n\n    // 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    context = this;\n    timestamp = +new Date();\n    var callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n\n/**\n * This is just a simple version of deep copy\n * Has a lot of edge cases bug\n * If you want to use a perfect deep copy, use lodash's _.cloneDeep\n * @param {Object} source\n * @returns {Object}\n */\nfunction deepClone(source) {\n  if (!source && (0, _typeof2.default)(source) !== 'object') {\n    throw new Error('error arguments', 'deepClone');\n  }\n  var targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(function (keys) {\n    if (source[keys] && (0, _typeof2.default)(source[keys]) === 'object') {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\n\n/**\n * @param {Array} arr\n * @returns {Array}\n */\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr));\n}\n\n/**\n * @returns {string}\n */\nfunction createUniqueString() {\n  var timestamp = +new Date() + '';\n  var randomNum = parseInt((1 + Math.random()) * 65536) + '';\n  return (+(randomNum + timestamp)).toString(32);\n}\n\n/**\n * Check if an element has a class\n * @param {HTMLElement} elm\n * @param {string} cls\n * @returns {boolean}\n */\nfunction hasClass(ele, cls) {\n  return !!ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\n/**\n * Add class to element\n * @param {HTMLElement} elm\n * @param {string} cls\n */\nfunction addClass(ele, cls) {\n  if (!hasClass(ele, cls)) ele.className += ' ' + cls;\n}\n\n/**\n * Remove class from element\n * @param {HTMLElement} elm\n * @param {string} cls\n */\nfunction removeClass(ele, cls) {\n  if (hasClass(ele, cls)) {\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n    ele.className = ele.className.replace(reg, ' ');\n  }\n}",null]}