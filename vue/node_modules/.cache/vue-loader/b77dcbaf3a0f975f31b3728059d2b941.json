{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport { NodeUtils } from \"./util.js\";\nconst isCondition = data => data.type === \"condition\" || (data.type === \"approver\" && (data.isInterflow || data.isBranchFlow));\nconst notEmptyArray = arr => Array.isArray(arr) && arr.length > 0;\nconst hasBranch = data => notEmptyArray(data.conditionNodes);\nconst stopPro = ev => ev.stopPropagation();\n\nfunction createNormalCard(ctx, conf, h) {\n  const classList = ['flow-path-card']\n  const afterTrue = (isTrue, name) => (isTrue && classList.push(name), isTrue)\n  const isStartNode = afterTrue(NodeUtils.isStartNode(conf), 'start-node')\n  const isApprNode = afterTrue(NodeUtils.isApproverNode(conf), 'approver')\n  const isCopyNode = afterTrue(NodeUtils.isCopyNode(conf), 'copy')\n  const isTimerNode = afterTrue(NodeUtils.isTimerNode(conf), 'timer')\n  const isSubFlowNode = afterTrue(NodeUtils.isSubFlowNode(conf), 'subFlow')\n  return (\n    <section class={classList.join(' ')} onClick={this.eventLauncher.bind(ctx, \"edit\", conf)} >\n      <header class=\"header\">\n        <div class=\"title-box\" style=\"height: 100%;width:190px;\">\n          <span class=\"title-text\">{conf.properties.title}</span>\n          {(!isTimerNode) && (\n            <input vModel_trim={conf.properties.title} class=\"title-input\" onClick={stopPro} />\n          )}\n        </div>\n        <div class=\"actions\">\n          <i class=\"el-icon-close icon\" onClick={this.eventLauncher.bind(ctx, \"deleteNode\", conf, ctx.data)} ></i>\n        </div>\n        {(isSubFlowNode) && (\n          <el-tag class=\"async-state\" size=\"mini\" effect=\"plain\">{conf.properties.isAsync ? '异步' : '同步'}</el-tag>\n        )}\n      </header>\n      <div class=\"body\">\n        <span class=\"text\">{conf.content}</span>\n        {\n          //  <div class=\"icon-wrapper right\">\n          //   <i class=\"el-icon-arrow-right icon right-arrow\"></i>\n          // </div>\n        }\n      </div>\n    </section>\n  );\n}\n// arg = ctx, data, h\nconst createFunc = (...arg) => createNormalCard.call(arg[0], ...arg)\nlet nodes = {\n  start: createFunc,\n  approver: createFunc,\n  copy: createFunc,\n  timer: createFunc,\n  subFlow: createFunc,\n  interflow: createFunc,\n  branchFlow: createFunc,\n  empty: _ => '',\n  condition: function (ctx, conf, h) {\n    // <i\n    //    class=\"el-icon-document-copy icon\"\n    //    onClick={this.eventLauncher.bind(ctx, \"copyNode\", conf, ctx.data)}\n    //  ></i>\n    return (\n      <section\n        class=\"flow-path-card condition\"\n        onClick={this.eventLauncher.bind(ctx, \"edit\", conf)}\n      >\n        <header class=\"header\">\n          <div class=\"title-box\" style=\"height:20px;width:160px;\">\n            <span class=\"title-text\">{conf.properties.title}</span>\n            <input vModel_trim={conf.properties.title} class=\"title-input\" onClick={stopPro} />\n          </div>\n          {\n            // <span class=\"priority\">优先级{conf.properties.priority + 1}</span> \n          }\n          <div class=\"actions\">\n            <i class=\"el-icon-close icon\" onClick={this.eventLauncher.bind(ctx, \"deleteNode\", conf, ctx.data)}></i>\n          </div>\n        </header>\n        <div class=\"body\">\n          <div class=\"text\">{conf.content}</div>\n        </div>\n        {\n          //  <div\n          //   class=\"icon-wrapper left\"\n          //   onClick={ctx.eventLauncher.bind(\n          //     ctx,\n          //     \"increasePriority\",\n          //     conf,\n          //     ctx.data\n          //   )}\n          // >\n          // <i class=\"el-icon-arrow-left icon left-arrow\"></i>\n          // </div>\n          //  <div\n          //   class=\"icon-wrapper right\"\n          //   onClick={ctx.eventLauncher.bind(\n          //     ctx,\n          //     \"decreasePriority\",\n          //     conf,\n          //     ctx.data\n          //   )}\n          // >\n          //  <i class=\"el-icon-arrow-right icon right-arrow\"></i>\n          // </div>\n        }\n      </section>\n    );\n  }\n};\n\nfunction addNodeButton(ctx, data, h, isBranch = false) {\n  if (data.type === 'condition' && data.properties.conditionType === 1) {\n    return (\n      <div class=\"add-node-btn-box flex justify-center\">\n        <div class=\"add-node-btn\">\n          <button class=\"btn disabled-btn\" type=\"button\">\n            <i class=\"icon-ym icon-ym-nav-close icon\"></i>\n          </button>\n        </div>\n      </div>\n    );\n  }\n  // 只有非条件节点和条件分支树下面的那个按钮 才能添加新分支树\n  let couldAddBranch = !hasBranch(data) || isBranch;\n  let canAddAppendBranch = true\n  let canAddAppendInterflow = true\n  let canAddAppendBranchFlowBranch = true\n  let canAddSubFlow = true\n  let canAddTimerNode = true\n  if (Array.isArray(data.conditionNodes) && data.conditionNodes.length) {\n    canAddAppendBranch = false\n    canAddAppendInterflow = false\n    canAddAppendBranchFlowBranch = false\n    canAddSubFlow = false\n    canAddTimerNode = false\n  }\n  if (data.type === 'timer' || (data.childNode && data.childNode.type === 'timer')) {\n    canAddTimerNode = false\n  }\n  if (data.type === 'subFlow') {\n    canAddAppendBranch = false\n  }\n  let isEmpty = data.type === \"empty\";\n  if (isEmpty && !isBranch) {\n    return \"\";\n  }\n  return (\n    <div class=\"add-node-btn-box flex justify-center\">\n      <div class=\"add-node-btn\">\n        <el-popover placement=\"right\" trigger=\"click\" width=\"440\">\n          <el-alert title=\"增加节点后可能会导致下面节点配置的数据传递规则失效\" type=\"warning\" closable={false} show-icon />\n          <div class=\"condition-box\">\n            <div>\n              <div class=\"condition-icon\" onClick={ctx.eventLauncher.bind(ctx, \"addApprovalNode\", data, isBranch)} >\n                <i class=\"icon-ym icon-ym-flowTodo\"></i>\n              </div>\n              审批节点\n            </div>\n            <div class={{ 'condition-disabled': !canAddSubFlow && !isBranch }}>\n              <div class=\"condition-icon\" onClick={ctx.eventLauncher.bind(ctx, \"addSubFlowNode\", data, isBranch, !canAddSubFlow && !isBranch)} >\n                <i class=\"icon-ym icon-ym-generator-subFlow\"></i>\n              </div>\n              子流程\n            </div>\n            <div class={{ 'condition-disabled': !canAddAppendBranch }}>\n              <div class=\"condition-icon\" onClick={this.eventLauncher.bind(ctx, \"appendBranch\", data, isBranch, !canAddAppendBranch)}>\n                <i class=\"ym-custom ym-custom-sitemap\"></i>\n              </div>\n              条件分支\n            </div>\n            <div class={{ 'condition-disabled': !canAddAppendBranchFlowBranch }}>\n              <div class=\"condition-icon\" onClick={this.eventLauncher.bind(ctx, \"appendBranchFlowBranch\", data, isBranch, !canAddAppendBranchFlowBranch)}>\n                <i class=\"icon-ym icon-ym-branch\"></i>\n              </div>\n              选择分支\n            </div>\n            <div class={{ 'condition-disabled': !canAddAppendInterflow }}>\n              <div class=\"condition-icon\" onClick={this.eventLauncher.bind(ctx, \"appendInterflowBranch\", data, isBranch, !canAddAppendInterflow)}>\n                <i class=\"icon-ym icon-ym-node\"></i>\n              </div>\n              并行分支\n            </div>\n            <div class={{ 'condition-disabled': !canAddTimerNode }}>\n              <div class=\"condition-icon\" onClick={ctx.eventLauncher.bind(ctx, \"addTimerNode\", data, isBranch, !canAddTimerNode)} >\n                <i class=\"icon-ym icon-ym-timer\"></i>\n              </div>\n              定时器\n            </div>\n          </div>\n\n          <button class=\"btn\" type=\"button\" slot=\"reference\">\n            <i class=\"el-icon-plus icon\"></i>\n          </button>\n        </el-popover>\n      </div>\n    </div>\n  );\n}\n\nfunction NodeFactory(ctx, data, h) {\n  if (!data) return\n  const showErrorTip = ctx.verifyMode && NodeUtils.checkNode(data) === false\n  let content = \"未设置审批人\"\n  if (NodeUtils.isStartNode(data)) content = `未设置${this.flowType == 1 ? \"功能\" : \"表单\"}配置`\n  if (NodeUtils.isConditionNode(data)) content = \"未设置条件\"\n  if (NodeUtils.isSubFlowNode(data)) content = \"未设置发起人\"\n  let res = [],\n    branchNode = \"\",\n    selfNode = (\n      <div class=\"node-wrap\">\n        <div class={`node-wrap-box ${data.type} ${NodeUtils.isInterflowNode(data) ? 'interflow' : ''} ${NodeUtils.isBranchFlowNode(data) ? 'branchFlow' : ''} ${showErrorTip ? 'error' : ''}`}>\n          <el-tooltip content={content} placement=\"top\" effect=\"dark\">\n            <div class=\"error-tip\" onClick={this.eventLauncher.bind(ctx, \"edit\", data)}>!!!</div>\n          </el-tooltip>\n          {nodes[data.type].call(ctx, ctx, data, h)}\n          {addNodeButton.call(ctx, ctx, data, h)}\n        </div>\n      </div>\n    );\n\n  if (hasBranch(data)) {\n    // 如果节点是数组 一定为条件分支 添加分支样式包裹\n    // {data.childNode && NodeFactory.call(ctx, ctx, data.childNode, h)}\n    if (NodeUtils.isConditionNode(data.conditionNodes[0])) {\n      branchNode = (\n        <div class=\"branch-wrap\">\n          <div class=\"branch-box-wrap\">\n            <div class=\"branch-box flex justify-center relative\">\n              <el-popover placement=\"right\" trigger=\"click\" width=\"180\" class='popover'>\n                <div class=\"add-popover-main add-condition-popover-main\">\n                  <div class=\"condition-box\">\n                    <div onClick={this.eventLauncher.bind(null, 'appendConditionNode', data, 0)}>\n                      <div class=\"condition-icon\">\n                        <i class=\"icon-ym icon-ym icon-ym-condition\"></i>\n                      </div>\n                      条件逻辑\n                    </div>\n                    <div onClick={this.eventLauncher.bind(null, 'appendConditionNode', data, 1)}>\n                      <div class=\"condition-icon\">\n                        <i class=\"icon-ym icon-ym icon-ym-turn\"></i>\n                      </div>\n                      转向逻辑\n                    </div>\n                  </div>\n                </div>\n                <button class=\"btn\" type=\"button\" slot=\"reference\">\n                  添加条件\n                </button>\n              </el-popover>\n              {data.conditionNodes.map(d => NodeFactory.call(ctx, ctx, d, h))}\n            </div>\n          </div>\n          {addNodeButton.call(ctx, ctx, data, h, true)}\n        </div >\n      );\n    }\n    if (NodeUtils.isInterflowNode(data.conditionNodes[0])) {\n      branchNode = (\n        <div class=\"branch-wrap\">\n          <div class=\"branch-box-wrap\">\n            <div class=\"branch-box flex justify-center relative\">\n              <button onClick={this.eventLauncher.bind(ctx, \"appendInterflowNode\", data)}\n                class=\"btn\">\n                添加分流\n              </button>\n              {data.conditionNodes.map(d => NodeFactory.call(ctx, ctx, d, h))}\n            </div>\n          </div>\n          {addNodeButton.call(ctx, ctx, data, h, true)}\n        </div>\n      );\n    }\n    if (NodeUtils.isBranchFlowNode(data.conditionNodes[0])) {\n      branchNode = (\n        <div class=\"branch-wrap\">\n          <div class=\"branch-box-wrap\">\n            <div class=\"branch-box flex justify-center relative\">\n              <button onClick={this.eventLauncher.bind(ctx, \"appendBranchFlowNode\", data)}\n                class=\"btn\">\n                添加分支\n              </button>\n              {data.conditionNodes.map(d => NodeFactory.call(ctx, ctx, d, h))}\n            </div>\n          </div>\n          {addNodeButton.call(ctx, ctx, data, h, true)}\n        </div>\n      );\n    }\n  }\n\n  if (isCondition(data)) {\n    return (\n      <div class=\"col-box\">\n        <div class=\"center-line\"></div>\n        <div class=\"top-cover-line\"></div>\n        <div class=\"bottom-cover-line\"></div>\n        {selfNode}\n        {branchNode}\n        {NodeFactory.call(ctx, ctx, data.childNode, h)}\n      </div>\n    );\n  }\n  res.push(selfNode);\n  branchNode && res.push(branchNode);\n  data.childNode && res.push(NodeFactory.call(ctx, ctx, data.childNode, h));\n  return res;\n}\n\nfunction addEndNode(h) {\n  return <section class=\"end-node\">流程结束</section>;\n}\n\nexport default {\n  props: {\n    data: { type: Object, required: true },\n    // 点击发布时需要校验节点数据完整性 此时打开校验模式\n    verifyMode: { type: Boolean, default: true },\n  },\n  watch: {\n\n  },\n  methods: {\n    /**\n     *事件触发器 统筹本组件所有事件并转发到父组件中\n     * @param { Object } 包含event（事件名）和args（事件参数）两个参数\n     */\n    eventLauncher(event, ...args) {\n      stopPro(args[args.length - 1])\n      let list = ['appendBranch', 'appendBranchFlowBranch', 'appendInterflowBranch', 'addTimerNode']\n      if (list.includes(event) && args[args.length - 2]) return\n      // args.slice(0,-1) vue 会注入MouseEvent到最后一个参数 去除事件对象\n      let param = { event, args: args.slice(0, -1) };\n      if (event === 'deleteNode') {\n        this.$confirm('此操作将永久删除该节点，删除后可能会导致下面节点配置的数据传递规则失效，是否继续?', '提示', {\n          type: 'warning'\n        }).then(() => {\n          this.$emit(\"emits\", param);\n        }).catch(() => { });\n      } else {\n        this.$emit(\"emits\", param);\n      }\n    }\n  },\n  render(h) {\n    return (\n      <div style=\"display: inline-flex; flex-direction: column; align-items: center;\">\n        {this.data && NodeFactory.call(this, this, this.data, h)}\n        {addEndNode(h)}\n      </div>\n    );\n  }\n};\n",null]}