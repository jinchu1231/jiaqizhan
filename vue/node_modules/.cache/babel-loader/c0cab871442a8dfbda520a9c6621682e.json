{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/util.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/util.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\nrequire(\"core-js/modules/es6.symbol\");\nrequire(\"core-js/modules/es6.string.iterator\");\nrequire(\"core-js/modules/es6.array.from\");\nrequire(\"core-js/modules/es6.function.name\");\nrequire(\"core-js/modules/es6.regexp.to-string\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeUtils = void 0;\nexports.getMockData = getMockData;\nrequire(\"core-js/modules/es6.array.find-index\");\nrequire(\"core-js/modules/web.dom.iterable\");\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/createClass.js\"));\nvar _config = _interopRequireDefault(require(\"./config.js\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar isEmpty = function isEmpty(data) {\n  return data === null || data === undefined || data === '';\n};\nvar isEmptyArray = function isEmptyArray(data) {\n  return Array.isArray(data) ? data.length === 0 : true;\n};\nvar NodeUtils = exports.NodeUtils = /*#__PURE__*/function () {\n  function NodeUtils() {\n    (0, _classCallCheck2.default)(this, NodeUtils);\n  }\n  return (0, _createClass2.default)(NodeUtils, null, [{\n    key: \"idGenerator\",\n    value:\n    /**\n     * 根据自增数生成64进制id\n     * @returns 64进制id字符串\n     */\n    function idGenerator() {\n      var quotient = new Date() - new Date('2020-08-01');\n      quotient += Math.ceil(Math.random() * 1000); // 防止重複\n      var chars = '0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz';\n      var charArr = chars.split(\"\");\n      var radix = chars.length;\n      var res = [];\n      do {\n        var mod = quotient % radix;\n        quotient = (quotient - mod) / radix;\n        res.push(charArr[mod]);\n      } while (quotient);\n      return res.join('');\n    }\n\n    /**\n     * 判断节点类型\n     * @param {Node} node - 节点数据\n     * @returns Boolean\n     */\n  }, {\n    key: \"isConditionNode\",\n    value: function isConditionNode(node) {\n      return node && node.type === 'condition';\n    }\n  }, {\n    key: \"isCopyNode\",\n    value: function isCopyNode(node) {\n      return node && node.type === 'copy';\n    }\n  }, {\n    key: \"isStartNode\",\n    value: function isStartNode(node) {\n      return node && node.type === 'start';\n    }\n  }, {\n    key: \"isApproverNode\",\n    value: function isApproverNode(node) {\n      return node && node.type === 'approver';\n    }\n  }, {\n    key: \"isTimerNode\",\n    value: function isTimerNode(node) {\n      return node && node.type === 'timer';\n    }\n  }, {\n    key: \"isSubFlowNode\",\n    value: function isSubFlowNode(node) {\n      return node && node.type === 'subFlow';\n    }\n  }, {\n    key: \"isInterflowNode\",\n    value: function isInterflowNode(node) {\n      return node && node.type === 'approver' && node.isInterflow;\n    }\n  }, {\n    key: \"isBranchFlowNode\",\n    value: function isBranchFlowNode(node) {\n      return node && node.type === 'approver' && node.isBranchFlow;\n    }\n    /**\n     * 创建指定节点\n     * @param { String } type - 节点类型\n     * @param { Object } previousNodeId - 父节点id\n     * @returns { Object } 节点数据\n     */\n  }, {\n    key: \"createNode\",\n    value: function createNode(type, previousNodeId) {\n      var res = JSON.parse(JSON.stringify(_config.default[type]));\n      res.nodeId = this.idGenerator();\n      if (type !== 'start' && type !== 'timer') res.properties.title += res.nodeId;\n      res.prevId = previousNodeId;\n      return res;\n    }\n    /**\n     * 获取指定节点的父节点（前一个节点）\n     * @param { String } prevId - 父节点id\n     * @param { Object } processData - 流程图全部数据\n     * @returns { Object } 父节点\n     */\n  }, {\n    key: \"getPreviousNode\",\n    value: function getPreviousNode(prevId, processData) {\n      if (processData.nodeId === prevId) return processData;\n      if (processData.childNode) {\n        var r1 = this.getPreviousNode(prevId, processData.childNode);\n        if (r1) {\n          return r1;\n        }\n      }\n      if (processData.conditionNodes) {\n        var _iterator = _createForOfIteratorHelper(processData.conditionNodes),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n            var r2 = this.getPreviousNode(prevId, c);\n            if (r2) {\n              return r2;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n\n    /**\n     * 删除节点\n     * @param { Object  } nodeData - 被删除节点的数据\n     * @param { Object  } processData - 流程图的所有节点数据\n     */\n  }, {\n    key: \"deleteNode\",\n    value: function deleteNode(nodeData, processData) {\n      var checkEmpty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var prevNode = this.getPreviousNode(nodeData.prevId, processData);\n      if (checkEmpty && prevNode.type === 'empty') {\n        if (this.isConditionNode(nodeData) || this.isInterflowNode(nodeData) || this.isBranchFlowNode(nodeData)) {\n          var willDelBranch = prevNode.conditionNodes.length === 2;\n          var target = willDelBranch ? prevNode : nodeData;\n          this.deleteNode(target, processData, willDelBranch);\n        } else {\n          if (isEmptyArray(prevNode.conditionNodes)) {\n            this.deleteNode(prevNode, processData);\n          }\n          this.deleteNode(nodeData, processData, false);\n        }\n        // this.deleteNode( prevNode, processData )\n        // !this.isConditionNode(nodeData) && this.deleteNode(nodeData, processData)\n        return;\n      }\n      var concatChild = function concatChild(prev, delNode) {\n        prev.childNode = delNode.childNode;\n        isEmptyArray(prev.conditionNodes) && (prev.conditionNodes = delNode.conditionNodes);\n        prev.childNode && (prev.childNode.prevId = prev.nodeId);\n        prev.conditionNodes && prev.conditionNodes.forEach(function (c) {\n          return c.prevId = prev.nodeId;\n        });\n      };\n      if (this.isConditionNode(nodeData) || this.isInterflowNode(nodeData) || this.isBranchFlowNode(nodeData)) {\n        var cons = prevNode.conditionNodes;\n        var index = cons.findIndex(function (c) {\n          return c.nodeId === nodeData.nodeId;\n        });\n        if (cons.length > 2) {\n          cons.splice(index, 1);\n        } else {\n          var anotherCon = cons[+!index];\n          delete prevNode.conditionNodes;\n          delete prevNode.conditionType;\n          if (prevNode.childNode) {\n            var endNode = anotherCon;\n            while (endNode.childNode) {\n              endNode = endNode.childNode;\n            }\n            endNode.childNode = prevNode.childNode;\n            endNode.childNode.prevId = endNode.nodeId;\n          }\n          concatChild(prevNode, anotherCon);\n          if (prevNode.childNode && prevNode.childNode.type === 'empty') {\n            this.deleteNode(prevNode.childNode, prevNode);\n          }\n        }\n        // 重新编排优先级\n        cons.forEach(function (c, i) {\n          return c.properties.priority = i;\n        });\n        return;\n      }\n      concatChild(prevNode, nodeData);\n    }\n    // TODO:\n    // static copyNode ( nodeData, processData ) {\n    //   let prevNode = this.getPreviousNode( nodeData.prevId, processData )\n    //   let index = prevNode.conditionNodes.findIndex( c => c.nodeId === nodeData.nodeId )\n\n    // }\n    /**\n     * 添加审计节点（普通节点 approver）\n     * @param { Object } data - 目标节点数据，在该数据节点之后添加审计节点\n     * @param { Object } isBranchAction - 目标节点数据，是否是条件分支\n     * @param { Object } newChildNode - 传入的新的节点 用户操作均为空  删除操作/添加抄送人 会传入该参数 以模拟添加节点\n     */\n  }, {\n    key: \"addApprovalNode\",\n    value: function addApprovalNode(data, isBranchAction) {\n      var newChildNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var oldChildNode = data.childNode;\n      newChildNode = newChildNode || this.createNode(\"approver\", data.nodeId);\n      data.childNode = newChildNode;\n      if (oldChildNode) {\n        newChildNode.childNode = oldChildNode;\n        oldChildNode.prevId = newChildNode.nodeId;\n      }\n      var conditionNodes = data.conditionNodes;\n      if (Array.isArray(conditionNodes) && !isBranchAction && conditionNodes.length) {\n        newChildNode.conditionNodes = conditionNodes.map(function (c) {\n          c.prevId = newChildNode.nodeId;\n          return c;\n        });\n        delete data.conditionNodes;\n      }\n      if (oldChildNode && oldChildNode.type === 'empty' && newChildNode.type !== 'empty' && oldChildNode.conditionNodes.length === 0) {\n        this.deleteNode(oldChildNode, data);\n      }\n    }\n    /**\n     * 添加空节点\n     * @param { Object } data - 空节点的父级节点\n     * @return { Object } emptyNode - 空节点数据\n     */\n  }, {\n    key: \"addEmptyNode\",\n    value: function addEmptyNode(data) {\n      var emptyNode = this.createNode('empty', data.nodeId);\n      this.addApprovalNode(data, true, emptyNode);\n      return emptyNode;\n    }\n  }, {\n    key: \"addCopyNode\",\n    value: function addCopyNode(data, isBranchAction) {\n      // 复用addApprovalNode  因为抄送人和审批人基本一致\n      this.addApprovalNode(data, isBranchAction, this.createNode('copy', data.nodeId));\n    }\n  }, {\n    key: \"addTimerNode\",\n    value: function addTimerNode(data, isBranchAction) {\n      // 复用addApprovalNode  因为和审批人基本一致\n      this.addApprovalNode(data, isBranchAction, this.createNode('timer', data.nodeId));\n    }\n  }, {\n    key: \"addSubFlowNode\",\n    value: function addSubFlowNode(data, isBranchAction) {\n      // 复用addApprovalNode  因为和审批人基本一致\n      this.addApprovalNode(data, isBranchAction, this.createNode('subFlow', data.nodeId));\n    }\n    /**\n     * 添加条件节点 condition 通过点击添加条件进入该操作\n     * @param { Object } data - 目标节点所在分支数据，在该分支最后添加条件节点\n     */\n  }, {\n    key: \"appendConditionNode\",\n    value: function appendConditionNode(data, isSwerve) {\n      var conditions = data.conditionNodes;\n      var node = this.createNode('condition', data.nodeId);\n      if (isSwerve) {\n        node.properties.title = '转向' + node.properties.title;\n        node.properties.conditionType = 1;\n      }\n      var defaultNodeIndex = conditions.findIndex(function (node) {\n        return node.properties.isDefault;\n      });\n      node.properties.priority = conditions.length;\n      if (defaultNodeIndex > -1) {\n        conditions.splice(-1, 0, node); // 插在倒数第二个\n        //更新优先级\n        node.properties.priority = conditions.length - 2;\n        conditions[conditions.length - 1].properties.priority = conditions.length - 1;\n      } else {\n        conditions.push(node);\n      }\n      this.setDefaultCondition(node, data);\n    }\n    // 添加分流/合流 branch\n  }, {\n    key: \"appendInterflowNode\",\n    value: function appendInterflowNode(data) {\n      var conditions = data.conditionNodes;\n      var node = this.createNode('interflow', data.nodeId);\n      var defaultNodeIndex = conditions.findIndex(function (node) {\n        return node.properties.isDefault;\n      });\n      node.properties.priority = conditions.length;\n      if (defaultNodeIndex > -1) {\n        conditions.splice(-1, 0, node); // 插在倒数第二个\n        //更新优先级\n        node.properties.priority = conditions.length - 2;\n        conditions[conditions.length - 1].properties.priority = conditions.length - 1;\n      } else {\n        conditions.push(node);\n      }\n    }\n    // 添加选择分支 branch\n  }, {\n    key: \"appendBranchFlowNode\",\n    value: function appendBranchFlowNode(data) {\n      var conditions = data.conditionNodes;\n      var node = this.createNode('branchFlow', data.nodeId);\n      var defaultNodeIndex = conditions.findIndex(function (node) {\n        return node.properties.isDefault;\n      });\n      node.properties.priority = conditions.length;\n      if (defaultNodeIndex > -1) {\n        conditions.splice(-1, 0, node); // 插在倒数第二个\n        //更新优先级\n        node.properties.priority = conditions.length - 2;\n        conditions[conditions.length - 1].properties.priority = conditions.length - 1;\n      } else {\n        conditions.push(node);\n      }\n    }\n    /**\n     * 添加条件分支 branch \n     * @param { Object } data - 目标节点所在节点数据，在该节点最后添加分支节点\n     */\n  }, {\n    key: \"appendBranch\",\n    value: function appendBranch(data, isBottomBtnOfBranch) {\n      // isBottomBtnOfBranch 用户点击的是分支树下面的按钮\n      var nodeData = data;\n      // 由于conditionNodes是数组 不能添加下级分支 故在两个分支树之间添加一个不会显示的正常节点 兼容此种情况\n      if (Array.isArray(data.conditionNodes) && data.conditionNodes.length) {\n        if (isBottomBtnOfBranch) {\n          // 添加一个模拟用的空白节点并返回这个节点，作为新分支的父节点\n          nodeData = this.addEmptyNode(nodeData, true);\n        } else {\n          var emptyNode = this.addEmptyNode(nodeData, true);\n          emptyNode.conditionNodes = nodeData.conditionNodes;\n          emptyNode.conditionType = \"condition\";\n          emptyNode.conditionNodes.forEach(function (n) {\n            n.prevId = emptyNode.nodeId;\n          });\n        }\n      }\n      var conditionNodes = [this.createNode(\"condition\", nodeData.nodeId), this.createNode(\"condition\", nodeData.nodeId)].map(function (c, i) {\n        c.properties.priority = i;\n        return c;\n      });\n      nodeData.conditionNodes = conditionNodes;\n      nodeData.conditionType = \"condition\";\n    }\n  }, {\n    key: \"appendInterflowBranch\",\n    value: function appendInterflowBranch(data, isBottomBtnOfBranch) {\n      // isBottomBtnOfBranch 用户点击的是分支树下面的按钮\n      var nodeData = data;\n      // 由于conditionNodes是数组 不能添加下级分支 故在两个分支树之间添加一个不会显示的正常节点 兼容此种情况\n      if (Array.isArray(data.conditionNodes) && data.conditionNodes.length) {\n        if (isBottomBtnOfBranch) {\n          // 添加一个模拟用的空白节点并返回这个节点，作为新分支的父节点\n          nodeData = this.addEmptyNode(nodeData, true);\n        } else {\n          var emptyNode = this.addEmptyNode(nodeData, true);\n          emptyNode.conditionNodes = nodeData.conditionNodes;\n          emptyNode.conditionType = \"interflow\";\n          emptyNode.conditionNodes.forEach(function (n) {\n            n.prevId = emptyNode.nodeId;\n          });\n        }\n      }\n      var conditionNodes = [this.createNode(\"interflow\", nodeData.nodeId), this.createNode(\"interflow\", nodeData.nodeId)];\n      nodeData.conditionNodes = conditionNodes;\n      nodeData.conditionType = \"interflow\";\n    }\n    // 新增选择分支节点\n  }, {\n    key: \"appendBranchFlowBranch\",\n    value: function appendBranchFlowBranch(data, isBottomBtnOfBranch) {\n      // isBottomBtnOfBranch 用户点击的是分支树下面的按钮\n      var nodeData = data;\n      // 由于conditionNodes是数组 不能添加下级分支 故在两个分支树之间添加一个不会显示的正常节点 兼容此种情况\n      if (Array.isArray(data.conditionNodes) && data.conditionNodes.length) {\n        if (isBottomBtnOfBranch) {\n          // 添加一个模拟用的空白节点并返回这个节点，作为新分支的父节点\n          nodeData = this.addEmptyNode(nodeData, true);\n        } else {\n          var emptyNode = this.addEmptyNode(nodeData, true);\n          emptyNode.conditionNodes = nodeData.conditionNodes;\n          emptyNode.conditionType = \"branchFlow\";\n          emptyNode.conditionNodes.forEach(function (n) {\n            n.prevId = emptyNode.nodeId;\n          });\n        }\n      }\n      var conditionNodes = [this.createNode(\"branchFlow\", nodeData.nodeId), this.createNode(\"branchFlow\", nodeData.nodeId)];\n      nodeData.conditionNodes = conditionNodes;\n      nodeData.conditionType = \"branchFlow\";\n    }\n    /**\n     * 重设节点优先级（条件节点）\n     * @param {Node} cnode - 当前节点\n     * @param {Number} oldPriority - 替换前的优先级（在数组中的顺序）\n     * @param {Node} processData - 整个流程图节点数据\n     */\n  }, {\n    key: \"resortPrioByCNode\",\n    value: function resortPrioByCNode(cnode, oldPriority, processData) {\n      // 当前节点为默认节点 取消修改优先级\n      if (cnode.properties.isDefault) {\n        cnode.properties.priority = oldPriority;\n        return;\n      }\n      var prevNode = this.getPreviousNode(cnode.prevId, processData);\n      var newPriority = cnode.properties.priority;\n      // 替换节点为默认节点 取消修改优先级\n      if (prevNode.conditionNodes[newPriority].properties.isDefault) {\n        cnode.properties.priority = oldPriority;\n        return;\n      }\n      var delNode = prevNode.conditionNodes.splice(newPriority, 1, cnode)[0];\n      delNode.properties.priority = oldPriority;\n      prevNode.conditionNodes[oldPriority] = delNode;\n    }\n\n    /**\n     * 提升条件节点优先级——排序在前\n     * @param { Object } data - 目标节点数据\n     * @param { Object  } processData - 流程图的所有节点数据\n     */\n  }, {\n    key: \"increasePriority\",\n    value: function increasePriority(data, processData) {\n      if (data.properties.isDefault) {\n        // 默认节点不能修改优先级\n        return;\n      }\n      // 分支节点数据 包含该分支所有的条件节点\n      var prevNode = this.getPreviousNode(data.prevId, processData);\n      var branchData = prevNode.conditionNodes;\n      var index = branchData.findIndex(function (c) {\n        return c === data;\n      });\n      if (index) {\n        // 和前一个数组项交换位置 Array.prototype.splice会返回包含被删除的项的集合（数组）\n        branchData[index - 1].properties.priority = index;\n        branchData[index].properties.priority = index - 1;\n        branchData[index - 1] = branchData.splice(index, 1, branchData[index - 1])[0];\n      }\n    }\n    /**\n     * 降低条件节点优先级——排序在后\n     * @param { Object } data - 目标节点数据\n     * @param { Object  } processData - 流程图的所有节点数据\n     */\n  }, {\n    key: \"decreasePriority\",\n    value: function decreasePriority(data, processData) {\n      // 分支节点数据 包含该分支所有的条件节点\n      var prevNode = this.getPreviousNode(data.prevId, processData);\n      var branchData = prevNode.conditionNodes;\n      var index = branchData.findIndex(function (c) {\n        return c.nodeId === data.nodeId;\n      });\n      if (index < branchData.length - 1) {\n        var lastNode = branchData[index + 1];\n        if (lastNode.properties.isDefault) {\n          // 默认节点不能修改优先级\n          return;\n        }\n        // 和后一个数组项交换位置 Array.prototype.splice会返回包含被删除的项的集合（数组）\n        lastNode.properties.priority = index;\n        branchData[index].properties.priority = index + 1;\n        branchData[index + 1] = branchData.splice(index, 1, branchData[index + 1])[0];\n      }\n    }\n    /**\n     * 当有其他条件节点设置条件后 检查并设置最后一个节点为默认节点\n     * @param {Node} cnode  - 当前节点\n     * @param {Node} processData - 整个流程图节点数据或父级节点数据\n     */\n  }, {\n    key: \"setDefaultCondition\",\n    value: function setDefaultCondition(cnode, processData) {\n      var DEFAULT_TEXT = '其他情况进入此流程';\n      var conditions = this.getPreviousNode(cnode.prevId, processData).conditionNodes;\n      var hasCondition = function hasCondition(node) {\n        return node.properties && (node.properties.initiator || !isEmptyArray(node.properties.conditions));\n      };\n      var clearDefault = function clearDefault(node) {\n        node.properties.isDefault = false;\n        node.content === DEFAULT_TEXT && (node.content = '请设置条件');\n      };\n      var setDefault = function setDefault(node) {\n        node.properties.isDefault = true;\n        node.content = DEFAULT_TEXT;\n      };\n      var count = 0;\n      conditions.slice(0, -1).forEach(function (node) {\n        hasCondition(node) && count++;\n        clearDefault(node);\n      });\n      var lastNode = conditions[conditions.length - 1];\n      count > 0 && !hasCondition(lastNode) ? setDefault(lastNode) : clearDefault(lastNode);\n    }\n    /**\n     * 校验单个节点必填项完整性\n     * @param {Node} node - 节点数据\n     */\n  }, {\n    key: \"checkNode\",\n    value: function checkNode(node, parent) {\n      var valid = true;\n      var props = node.properties;\n      this.isStartNode(node) && !props.formId && (valid = false);\n      if (this.isConditionNode(node)) {\n        if (!props.isDefault && isEmptyArray(props.conditions)) valid = false;\n        if (props.conditionType == 1 && !props.swerveNode) valid = false;\n      }\n      this.isSubFlowNode(node) && (!props.flowId || props.initiateType === 6 && isEmptyArray(props.initiator) && isEmptyArray(props.initiatePos) && isEmptyArray(props.initiateRole) && isEmptyArray(props.initiateOrg) && isEmptyArray(props.initiateGroup)) && (valid = false);\n      this.isApproverNode(node) && (!props.assigneeType || props.assigneeType === 6) && isEmptyArray(props.approvers) && isEmptyArray(props.approverPos) && isEmptyArray(props.approverRole) && isEmptyArray(props.approverOrg) && isEmptyArray(props.approverGroup) && (valid = false);\n      return valid;\n    }\n    /**\n     * 判断所有节点是否信息完整\n     * @param {Node} processData - 整个流程图数据\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"checkAllNode\",\n    value: function checkAllNode(processData) {\n      var _this = this;\n      var valid = true;\n      var loop = function loop(node, callback, parent) {\n        !_this.checkNode(node, parent) && callback();\n        if (node.childNode) loop(node.childNode, callback, parent);\n        if (!isEmptyArray(node.conditionNodes)) {\n          node.conditionNodes.forEach(function (n) {\n            return loop(n, callback, node);\n          });\n        }\n      };\n      loop(processData, function () {\n        return valid = false;\n      });\n      return valid;\n    }\n  }]);\n}();\n/**\n * 添模拟数据\n */\nfunction getMockData() {\n  var startNode = NodeUtils.createNode(\"start\");\n  startNode.childNode = NodeUtils.createNode(\"approver\", startNode.nodeId);\n  return startNode;\n}",null]}