{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/OrgTransfer/positionTransfer.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/OrgTransfer/positionTransfer.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getSelectedList } from '@/api/permission/user'\nexport default {\n  name: 'JNPF-userTransfer',\n  data() {\n    return {\n      allLoading: false,\n      loading: false,\n      positionLoading: false,\n      activeName: 'position',\n      selectedData: [],\n      props: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      ids: [],\n      keyword: '',\n    }\n  },\n  props: {\n    height: {\n      type: String,\n      default: \"400px\"\n    },\n    dynamicList: {\n      type: Array,\n      default: () => []\n    },\n    treeData: {\n      type: Array,\n      default: () => []\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    init(ids) {\n      this.allLoading = true\n      getSelectedList(ids).then(res => {\n        this.selectedData = res.data.list.map(o => ({\n          ...o,\n          id: o.type ? o.id + '--' + o.type : o.id,\n          icon: o.type === 'system' ? 'icon-ym icon-ym-tree-user2' : o.icon,\n          organize: o.type === 'system' ? '动态参数' : o.organize\n        }))\n        this.ids = this.selectedData.map(o => o.id)\n        this.allLoading = false\n      })\n    },\n    search() {\n      this.$refs[this.activeName].filter(this.keyword);\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    handleNodeClick(data) {\n      const boo = this.selectedData.some(o => o.id === data.id + '--' + data.type)\n      let item = JSON.parse(JSON.stringify(data))\n      item.id += '--' + item.type\n      if (boo) return\n      this.selectedData.push(item)\n      this.ids.push(item.id)\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeAll() {\n      this.selectedData = []\n      this.ids = []\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n      this.ids.splice(index, 1)\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n  }\n};\n",null]}