{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataInterface/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataInterface/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.array.find-index\");\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/toConsumableArray.js\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nvar _dataInterface = require(\"@/api/systemData/dataInterface\");\nvar _dataSource = require(\"@/api/systemData/dataSource\");\nvar _dataModel = require(\"@/api/systemData/dataModel\");\nvar _monaco = _interopRequireDefault(require(\"@/components/JNPFEditor/monaco\"));\nvar _FieldForm = _interopRequireDefault(require(\"./FieldForm\"));\nvar _FormScript = _interopRequireDefault(require(\"./FormScript\"));\nvar _PageExplain = _interopRequireDefault(require(\"./PageExplain\"));\nvar _CommonTable = _interopRequireDefault(require(\"./components/CommonTable\"));\nvar _utils = require(\"@/utils\");\nvar _RightTable = _interopRequireDefault(require(\"./components/RightTable\"));\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar defaultDataJsJson = '(data) => {\\r\\n    // 处理数据逻辑\\r\\n\\r\\n    // 返回所需的数据\\r\\n    return data\\r\\n}';\nvar defaultDataExceptionJson = '(data) => {\\r\\n    // 返回true表示接口验证成功！\\r\\n\\r\\n    // 返回flase表示接口验证失败！\\r\\n    return data\\r\\n}';\nvar defaultJson = {\n  staticData: '',\n  sqlData: {\n    dbLinkId: '0',\n    sql: ''\n  },\n  apiData: {\n    method: 1,\n    url: '',\n    header: [],\n    query: [],\n    body: '',\n    bodyType: 0,\n    bodyJson: '',\n    bodyXml: ''\n  }\n};\nvar _default = exports.default = {\n  components: {\n    SQLEditor: _monaco.default,\n    JSONEditor: _monaco.default,\n    FieldForm: _FieldForm.default,\n    FormScript: _FormScript.default,\n    PageExplain: _PageExplain.default,\n    JNPFCodeEditor: _monaco.default,\n    RightTable: _RightTable.default,\n    CommonTable: _CommonTable.default\n  },\n  data: function data() {\n    return {\n      apiData: defaultJson.apiData,\n      dataConfigJson: (0, _utils.deepClone)(defaultJson),\n      dataCountJson: (0, _utils.deepClone)(defaultJson),\n      dataEchoJson: (0, _utils.deepClone)(defaultJson),\n      dataJsJson: defaultDataJsJson,\n      dataExceptionJson: defaultDataExceptionJson,\n      fieldJson: [],\n      parameterJson: [],\n      activeKey: '0',\n      active: 0,\n      treeLoading: false,\n      formLoading: false,\n      btnLoading: false,\n      fieldFormVisible: false,\n      pageExplainVisible: false,\n      selectData: [],\n      sqlOptions: {\n        language: 'sql'\n      },\n      jsonOptions: {\n        language: 'json'\n      },\n      jsOptions: {\n        language: 'javascript'\n      },\n      props: {\n        label: 'fullName',\n        children: 'children',\n        value: 'id'\n      },\n      commonTableData: [],\n      defHasPage: 0,\n      dataForm: {\n        fullName: '',\n        enCode: '',\n        category: '',\n        type: 2,\n        hasPage: 0,\n        sortCode: 0,\n        enabledMark: 1,\n        description: '',\n        action: 3,\n        isPostPosition: 0\n      },\n      sourceData: [],\n      method: 1,\n      apiRequestMethod: '6',\n      dbOptions: [],\n      treeData: [],\n      defaultProps: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      dataRule: {\n        fullName: [{\n          required: true,\n          message: '名称不能为空',\n          trigger: 'blur'\n        }],\n        enCode: [{\n          required: true,\n          message: '编码不能为空',\n          trigger: 'blur'\n        }],\n        category: [{\n          required: true,\n          message: '请选择分类',\n          trigger: 'blur'\n        }],\n        url: [{\n          required: true,\n          message: '请填写接口路径',\n          trigger: 'blur'\n        }]\n      },\n      key: +new Date(),\n      key2: +new Date(),\n      sqlType: 0,\n      keyword: \"\",\n      filterText: '',\n      pagingParameters: []\n    };\n  },\n  watch: {\n    filterText: function filterText(val) {\n      var _this = this;\n      this.$nextTick(function () {\n        _this.$refs.bodyTree.filter(val);\n      });\n    },\n    active: {\n      handler: function handler(newVal, oldVal) {\n        if (this.dataForm.type !== 3) return;\n        if (oldVal == 1) this.dataConfigJson.apiData = JSON.parse(JSON.stringify(this.apiData));\n        if (oldVal == 2 && this.dataForm.hasPage) this.dataEchoJson.apiData = JSON.parse(JSON.stringify(this.apiData));\n        if (newVal === 1) {\n          this.apiData = JSON.parse(JSON.stringify(this.dataConfigJson.apiData));\n          if (this.apiData.bodyType != 3 && this.apiData.bodyType != 4) {\n            this.$set(this.apiData, 'body', JSON.parse(this.apiData.body));\n          } else {\n            if (this.apiData.bodyType == 3) {\n              this.$set(this.apiData, 'bodyJson', this.dataConfigJson.apiData.body);\n            } else {\n              this.$set(this.apiData, 'bodyXml', this.dataEchoJson.apiData.body);\n            }\n          }\n        }\n        if (newVal === 2 && this.dataForm.hasPage) this.apiData = JSON.parse(JSON.stringify(this.dataEchoJson.apiData));\n      },\n      deep: true\n    }\n  },\n  computed: {\n    getList: function getList() {\n      if (this.activeKey === '0') this.list = this.apiData.header || [];\n      if (this.activeKey === '1') this.list = this.apiData.query || [];\n      if (this.activeKey === '2') this.list = this.apiData.body || [];\n      return this.list;\n    },\n    hasPageDisabled: function hasPageDisabled() {\n      if (this.dataForm.id && this.dataForm.isPostPosition == 1) return true;\n      if (this.dataForm.id && this.defHasPage == 1) return true;\n    },\n    jsonTxt: function jsonTxt() {\n      return this.apiData.bodyType == 3 ? 'JSON Body' : 'XML Body';\n    },\n    sourceOptions: function sourceOptions() {\n      if (this.dataForm.hasPage && this.active == 1) return [{\n        label: '接口参数',\n        value: 1\n      }, {\n        label: '分页参数',\n        value: 4\n      }, {\n        label: '变量',\n        value: 2\n      }, {\n        label: '自定义',\n        value: 3\n      }];\n      if (this.dataForm.hasPage && this.active == 2) return [{\n        label: '接口参数',\n        value: 1\n      }, {\n        label: '回显参数',\n        value: 5\n      }, {\n        label: '变量',\n        value: 2\n      }, {\n        label: '自定义',\n        value: 3\n      }];\n      return [{\n        label: '接口参数',\n        value: 1\n      }, {\n        label: '变量',\n        value: 2\n      }, {\n        label: '自定义',\n        value: 3\n      }];\n    },\n    stepList: function stepList() {\n      this.key = +new Date();\n      this.pagingParameters = [];\n      this.active == 1 ? this.pagingParameters = [{\n        value: 'currentPage',\n        label: 'currentPage'\n      }, (0, _defineProperty2.default)({\n        value: 'pageSize'\n      }, \"value\", 'pageSize'), (0, _defineProperty2.default)({\n        value: 'keyword'\n      }, \"value\", 'keyword')] : this.pagingParameters = [(0, _defineProperty2.default)({\n        value: 'showKey'\n      }, \"value\", 'showKey'), (0, _defineProperty2.default)({\n        value: 'showValue'\n      }, \"value\", 'showValue')];\n      var base = ['基本信息', '数据配置'];\n      if (this.dataForm.type === 2) return base;\n      if (this.dataForm.type === 1 && this.dataForm.hasPage === 1) base = [].concat((0, _toConsumableArray2.default)(base), ['数量统计', '数据回显']);\n      if (this.dataForm.type === 3 && this.dataForm.hasPage === 0) base = [].concat((0, _toConsumableArray2.default)(base), ['异常验证']);\n      if (this.dataForm.type === 3 && this.dataForm.hasPage === 1) base = [].concat((0, _toConsumableArray2.default)(base), ['数据回显', '异常验证']);\n      if (this.dataForm.type === 3 && this.dataForm.isPostPosition === 1) return base;\n      return [].concat((0, _toConsumableArray2.default)(base), ['数据处理']);\n    },\n    sysVariableList: function sysVariableList() {\n      var list = [{\n        value: '@lotSnowID',\n        tips: '批量生成不同雪花ID'\n      }, {\n        value: '@snowFlakeID',\n        tips: \"系统生成雪花ID\"\n      }, {\n        value: '@currentUser',\n        tips: \"当前用户\"\n      }, {\n        value: '@currentUsersAndSubordinates',\n        tips: \"当前用户及下属\"\n      }, {\n        value: '@organization',\n        tips: \"当前组织\"\n      }, {\n        value: '@currentOrganizationAndSuborganization',\n        tips: \"当前组织及子组织\"\n      }, {\n        value: '@chargeorganization',\n        tips: \"当前分管组织\"\n      }];\n      var dataConfigList = [{\n        value: '@offsetSize',\n        tips: \"开始数据条数\"\n      }, {\n        value: '@pageSize',\n        tips: \"返回数据条数\"\n      }];\n      var dataEchoList = [{\n        value: '@showKey',\n        tips: \"回显字段查询key\"\n      }, {\n        value: '@showValue',\n        tips: \"回显字段值\"\n      }];\n      var keyword = {\n        value: '@keyword',\n        tips: \"关键词搜索\"\n      };\n      if (!this.dataForm.hasPage) return list;\n      if (this.active === 2) return [].concat(list, [keyword]);\n      if (this.active === 3) return [].concat(list, dataEchoList);\n      return [].concat(list, dataConfigList, [keyword]);\n    },\n    getTreeData: function getTreeData() {\n      var parameterJson = this.parameterJson.map(function (o) {\n        return _objectSpread(_objectSpread({}, o), {}, {\n          fullName: o.field,\n          parameter: 1,\n          type: 1\n        });\n      });\n      var tree = [{\n        id: 1,\n        fullName: '接口参数',\n        hasChildren: true,\n        children: parameterJson\n      }, {\n        id: 2,\n        fullName: '变量',\n        hasChildren: true,\n        children: this.sourceData\n      }];\n      tree = tree.filter(function (o) {\n        return o.children && o.children.length;\n      });\n      if (!this.dataForm.hasPage) return tree;\n      var page = {\n        id: 3,\n        fullName: '分页参数',\n        hasChildren: true,\n        children: [{\n          fullName: 'currentPage',\n          id: 'currentPage',\n          parameter: 1,\n          type: 1\n        }, {\n          fullName: 'pageSize',\n          id: 'pageSize',\n          parameter: 1,\n          type: 1\n        }, {\n          fullName: 'keyword',\n          id: 'keyword',\n          parameter: 1,\n          type: 1\n        }]\n      };\n      var echo = {\n        id: 2,\n        fullName: '回显参数',\n        hasChildren: true,\n        children: [{\n          fullName: 'showKey',\n          id: 'showKey',\n          parameter: 1,\n          type: 1\n        }, {\n          fullName: 'showValue',\n          id: 'showValue',\n          parameter: 1,\n          type: 1\n        }]\n      };\n      return [].concat((0, _toConsumableArray2.default)(tree), [this.active == 1 ? page : echo]);\n    }\n  },\n  methods: {\n    onIsPostPositionChange: function onIsPostPositionChange(e) {\n      this.dataForm.isPostPosition = e;\n      if (this.dataForm.isPostPosition && this.dataForm.hasPage) this.dataForm.hasPage = 0;\n    },\n    onHasPageChange: function onHasPageChange(e) {\n      this.dataForm.hasPage = e;\n      if (this.dataForm.isPostPosition && this.dataForm.hasPage) this.dataForm.isPostPosition = 0;\n    },\n    getShowApiBox: function getShowApiBox() {\n      if (this.active == 1 && this.dataForm.type == 3) return true;\n      if (this.active == 2 && this.dataForm.type == 3 && this.dataForm.hasPage) return true;\n      return false;\n    },\n    getShowCodeBox: function getShowCodeBox() {\n      if (this.getIsLastStep() && this.dataForm.type != 2) return true;\n      if (this.dataForm.type === 3) {\n        if (this.active === this.stepList.length - 1 && this.dataForm.isPostPosition == 1) return true;\n        if (this.active === this.stepList.length - 2 && this.dataForm.isPostPosition !== 1) return true;\n      }\n      return false;\n    },\n    getIsLastStep: function getIsLastStep() {\n      return this.active === this.stepList.length - 1 && !(this.dataForm.type === 3 && this.dataForm.isPostPosition == 1) ? true : false;\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.fullName.indexOf(value) !== -1;\n    },\n    init: function init(id, category) {\n      var _this2 = this;\n      this.filterText = '';\n      Object.assign(this.$data, this.$options.data());\n      this.active = 0;\n      this.dataForm.id = id || '';\n      this.formLoading = true;\n      this.$nextTick(function () {\n        _this2.$refs['dataForm'].resetFields();\n        // 获取分类\n        _this2.$store.dispatch('base/getDictionaryData', {\n          sort: 'DataInterfaceType'\n        }).then(function (res) {\n          _this2.selectData = res;\n        });\n        // 获取数据库\n        (0, _dataSource.getDataSourceListAll)().then(function (res) {\n          var list = res.data.list || [];\n          _this2.dbOptions = list.filter(function (o) {\n            return o.children && o.children.length;\n          });\n          if (_this2.dataForm.id) {\n            _this2.formLoading = false;\n            _this2.getFormData();\n          } else {\n            _this2.dataForm.category = category;\n            _this2.formLoading = false;\n            _this2.getTableList();\n          }\n          _this2.getSelector();\n        });\n      });\n    },\n    getFormData: function getFormData() {\n      var _this3 = this;\n      (0, _dataInterface.getDataInterfaceInfo)(this.dataForm.id).then(function (res) {\n        _this3.dataForm = res.data;\n        _this3.defHasPage = _this3.dataForm.hasPage;\n        if (!_this3.dataForm.action) _this3.dataForm.action = 3;\n        _this3.dataConfigJson = res.data.dataConfigJson ? JSON.parse(res.data.dataConfigJson) : JSON.parse(JSON.stringify(defaultJson));\n        _this3.dataCountJson = res.data.dataCountJson ? JSON.parse(res.data.dataCountJson) : JSON.parse(JSON.stringify(defaultJson));\n        _this3.dataEchoJson = res.data.dataEchoJson ? JSON.parse(res.data.dataEchoJson) : JSON.parse(JSON.stringify(defaultJson));\n        _this3.parameterJson = res.data.parameterJson ? JSON.parse(res.data.parameterJson) : [];\n        _this3.fieldJson = res.data.fieldJson ? JSON.parse(res.data.fieldJson) : [];\n        _this3.dataJsJson = res.data.dataJsJson;\n        _this3.dataExceptionJson = res.data.dataExceptionJson;\n        _this3.getTableList();\n        _this3.formLoading = false;\n      });\n    },\n    getTableList: function getTableList() {\n      var _this4 = this;\n      this.treeLoading = true;\n      var query = {\n        linkId: this.dataConfigJson.sqlData.dbLinkId,\n        keyword: this.keyword,\n        pageSize: 1000000\n      };\n      (0, _dataModel.DataModelListAll)(query).then(function (res) {\n        _this4.treeLoading = false;\n        _this4.treeData = res.data.list.map(function (o) {\n          return _objectSpread(_objectSpread({}, o), {}, {\n            fullName: o.tableName ? o.table + '(' + o.tableName + ')' : o.table,\n            isLeaf: false,\n            id: o.table,\n            icon: o.type == 1 ? 'icon-ym icon-ym-view' : 'icon-ym icon-ym-generator-tableGrid'\n          });\n        });\n      }).catch(function () {\n        _this4.treeLoading = false;\n        _this4.treeData = [];\n      });\n    },\n    handleApiData: function handleApiData(apiData) {\n      if (apiData.bodyXml) apiData.body = apiData.bodyXml;\n      if (apiData.bodyJson) apiData.body = apiData.bodyJson;\n      if (Array.isArray(apiData.body)) apiData.body = JSON.stringify(apiData.body);\n    },\n    handleSubmit: function handleSubmit() {\n      var _this5 = this;\n      if (!this.dataConfigJson.staticData && this.dataForm.type == 2) return this.$message.warning('请输入静态数据');\n      this.btnLoading = true;\n      if (this.dataForm.type === 3) {\n        this.handleApiData(this.dataConfigJson.apiData);\n        if (this.dataForm.hasPage === 1) {\n          this.handleApiData(this.dataEchoJson.apiData);\n        }\n      }\n      var query = _objectSpread(_objectSpread({}, this.dataForm), {}, {\n        id: this.dataForm.id,\n        dataConfigJson: JSON.stringify(this.dataConfigJson),\n        dataCountJson: JSON.stringify(this.dataCountJson),\n        dataEchoJson: JSON.stringify(this.dataEchoJson),\n        dataJsJson: this.dataJsJson,\n        dataExceptionJson: this.dataExceptionJson,\n        fieldJson: JSON.stringify(this.fieldJson),\n        parameterJson: JSON.stringify(this.parameterJson)\n      });\n      var formMethod = this.dataForm.id ? _dataInterface.updateDataInterface : _dataInterface.createDataInterface;\n      formMethod(query).then(function (res) {\n        _this5.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: function onClose() {\n            _this5.btnLoading = false;\n            _this5.$emit('close', true);\n          }\n        });\n      }).catch(function () {\n        _this5.btnLoading = false;\n      });\n    },\n    handlePrev: function handlePrev() {\n      this.active -= 1;\n      this.activeKey = '0';\n      if (this.dataForm.type == 1) this.setSqlData();\n    },\n    handleNext: function handleNext() {\n      var _this6 = this;\n      if (this.active == 0) {\n        this.$refs['dataForm'].validate(function (valid) {\n          if (valid) _this6.handleNextFun();\n        });\n      } else {\n        if (this.dataForm.type === 1) {\n          if (!this.dataConfigJson.sqlData.sql && this.active == 1) return this.$message.warning('请输入SQL语句');\n          if (!this.dataCountJson.sqlData.sql && this.active == 2) return this.$message.warning('请输入SQL语句');\n          if (!this.dataEchoJson.sqlData.sql && this.active == 3) return this.$message.warning('请输入SQL语句');\n          this.handleNextFun();\n        } else if (this.dataForm.type == 3) {\n          if (this.active == 1 || this.active == 2 && this.dataForm.hasPage) {\n            this.$refs['dataForm'].validate(function (valid) {\n              if (valid) _this6.handleValidate();\n            });\n          } else {\n            this.handleNextFun();\n          }\n        }\n      }\n    },\n    handleNextFun: function handleNextFun() {\n      this.active += 1;\n      // SQL操作\n      if (this.dataForm.type === 1 && this.getIsLastStep()) this.setDataJsJson();\n      // API操作\n      if (this.dataForm.type === 3) {\n        if (this.active === 1 || this.active === 2 && this.dataForm.hasPage) this.activeKey = '0';\n        if (this.getIsLastStep()) this.setDataJsJson();\n        if (this.active === this.stepList.length - 2) this.setDataExceptionJson();\n      }\n      if (this.dataForm.type == 1) this.setSqlData();\n    },\n    handleValidate: function handleValidate() {\n      var headerList = this.apiData.header || [];\n      var queryList = this.apiData.query || [];\n      for (var i = 0; i < headerList.length; i++) {\n        if (!headerList[i].field) return this.$message.warning('参数名称不能为空');\n      }\n      for (var _i = 0; _i < queryList.length; _i++) {\n        if (!queryList[_i].field) return this.$message.warning('参数名称不能为空');\n      }\n      if ((this.apiData.bodyType === 1 || this.apiData.bodyType === 2) && Array.isArray(this.apiData.body) && this.apiData.body.length) {\n        for (var _i2 = 0; _i2 < this.apiData.body.length; _i2++) {\n          if (!this.apiData.body[_i2].field) return this.$message.warning('参数名称不能为空');\n        }\n      }\n      this.handleNextFun();\n    },\n    setDataExceptionJson: function setDataExceptionJson() {\n      if (!this.dataExceptionJson) this.dataExceptionJson = defaultDataExceptionJson;\n    },\n    setDataJsJson: function setDataJsJson() {\n      if (!this.dataJsJson) this.dataJsJson = (0, _utils.deepClone)(defaultDataJsJson);\n    },\n    getShowTableBox: function getShowTableBox() {\n      if (this.activeKey == '0' || this.activeKey == '1') return true;\n      if (this.activeKey == '2' && (this.apiData.bodyType == 1 || this.apiData.bodyType == 2)) {\n        this.$set(this.apiData, 'body', '');\n        return true;\n      }\n      return false;\n    },\n    /**左侧事件处理 start */handleSelectTable: function handleSelectTable(val) {\n      this.dataConfigJson.sqlData.dbLinkId = val;\n      this.dataEchoJson.sqlData.dbLinkId = val;\n      this.dataCountJson.sqlData.dbLinkId = val;\n      this.getTableList();\n    },\n    handleNodeClick: function handleNodeClick(data) {\n      var content = data.isLeaf ? data.field : data.table;\n      if (this.active == 1) this.$refs.SQLEditorRef && this.$refs.SQLEditorRef.insert(content);\n      if (this.active == 2 || this.active == 3) this.$refs[this.active == 2 ? 'dataCountJson' : 'dataEchoJson'] && this.$refs[this.active == 2 ? 'dataCountJson' : 'dataEchoJson'].insert(content);\n    },\n    /**左侧事件处理 end */getSelector: function getSelector() {\n      var _this7 = this;\n      (0, _dataInterface.getSelector)().then(function (res) {\n        _this7.sourceData = res.data || [];\n      });\n    },\n    setSqlData: function setSqlData() {\n      var _this8 = this;\n      this.$nextTick(function () {\n        if (_this8.active == 1) _this8.$refs.SQLEditorRef && _this8.$refs.SQLEditorRef.changeEditor({\n          value: _this8.dataConfigJson.sqlData.sql,\n          options: _this8.sqlOptions\n        });\n        if (_this8.dataForm.hasPage && (_this8.active === 2 || _this8.active === 3)) {\n          var key = _this8.active === 2 ? 'dataCountJson' : 'dataEchoJson';\n          var data = _this8[key].sqlData.sql || '';\n          _this8.$refs[key] && _this8.$refs[key].changeEditor({\n            value: data,\n            options: _this8.sqlOptions\n          });\n        }\n      });\n    },\n    removeCommonTable: function removeCommonTable(index) {\n      var _this9 = this;\n      this.$confirm('此操作删除该参数, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        var ref = _this9.activeKey == 0 ? 'header' : _this9.activeKey == 1 ? 'query' : 'body';\n        _this9.apiData[ref].splice(index, 1);\n      }).catch(function () {});\n    },\n    bodyTreeNodeClick: function bodyTreeNodeClick(data) {\n      if (data.hasChildren || data.type != 1) return;\n      var val = data.field || data.fullName;\n      var insertVal = data.parameter == 1 ? '{' + val + '}' : '{@' + val + '}';\n      this.$refs.JSONEditorRef.insert(insertVal, true);\n    },\n    handleItemClick: function handleItemClick(item) {\n      if (!item.field) return;\n      if (this.dataForm.type == 1) {\n        if (this.active == 1) this.$refs.SQLEditorRef.insert('{' + item.field + '}');\n        if (this.active === 2 || this.active === 3) {\n          var key = this.active === 2 ? 'dataCountJson' : 'dataEchoJson';\n          this.$refs[key].insert('{' + item.field + '}');\n        }\n      }\n      if (this.dataForm.type === 3) this.$refs.JSONEditorRef.insert('{' + item.field + '}');\n    },\n    onBtnTypeChange: function onBtnTypeChange(val) {\n      this.filterText = \"\";\n      this.apiData.bodyType = val;\n      this.apiData.bodyJson = '';\n      this.apiData.bodyXml = '';\n      this.apiData.body = [];\n      this.key2 = +new Date();\n    },\n    tabsHandleClick: function tabsHandleClick(e) {\n      var _this10 = this;\n      this.activeKey = e.index;\n      this.addTableName = this.activeKey == '1' ? '添加Query参数' : this.activeKey == '2' ? '添加Body参数' : '添加Header参数';\n      var data = {\n        addTableName: this.addTableName,\n        activeKey: this.activeKey\n      };\n      this.$nextTick(function () {\n        _this10.$refs.CommonTable && _this10.$refs.CommonTable.changTable(data);\n      });\n    },\n    onDataTypeChange: function onDataTypeChange(val) {\n      this.dataForm.hasPage = 0;\n      this.dataForm.action = 3;\n      this.dataForm.type = val;\n    },\n    onMethodChange: function onMethodChange(val) {\n      if (val != 3) this.dataForm.hasPage = 0;\n      this.dataForm.action = val;\n    },\n    loadNode: function loadNode(node, resolve) {\n      if (node.level === 0) {\n        return resolve(this.treeData);\n      }\n      (0, _dataModel.DataModelFieldList)(this.dataConfigJson.sqlData.dbLinkId, node.data.table).then(function (res) {\n        resolve(res.data.list.map(function (o) {\n          return _objectSpread(_objectSpread({}, o), {}, {\n            isLeaf: true\n          });\n        }));\n      });\n    },\n    goBack: function goBack() {\n      this.$emit('close');\n    },\n    /**右侧表格操作 start */addOrUpdateHandle: function addOrUpdateHandle(item, type) {\n      var _this11 = this;\n      this.sqlType = type || 0;\n      var data = item ? JSON.parse(JSON.stringify(item)) : null;\n      var parameters = type == 1 ? this.parameterJson : this.fieldJson;\n      this.fieldFormVisible = true;\n      this.$nextTick(function () {\n        _this11.$refs.fieldForm.init(data, parameters, type);\n      });\n    },\n    addParameter: function addParameter(type, item, tableType) {\n      var targetJson = tableType == 1 ? this.parameterJson : this.fieldJson;\n      if (type === 'add') return targetJson.push((0, _utils.deepClone)(item));\n      var index = targetJson.findIndex(function (obj) {\n        return obj.id === item.id;\n      });\n      if (index !== -1) this.$set(targetJson, index, (0, _utils.deepClone)(item));\n    },\n    removeParameter: function removeParameter(index, type) {\n      var _this12 = this;\n      this.$confirm('此操作删除该参数, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this12[type == 1 ? 'parameterJson' : 'fieldJson'].splice(index, 1);\n      }).catch(function () {});\n    },\n    /**右侧表格操作 end */handleShowPageExplain: function handleShowPageExplain() {\n      var _this13 = this;\n      this.pageExplainVisible = true;\n      this.$nextTick(function () {\n        _this13.$refs.pageExplain.init();\n      });\n    },\n    getShowSqlBox: function getShowSqlBox() {\n      if (this.dataForm.type !== 1) return false;\n      if (this.active === 1) return true;\n      if (this.dataForm.hasPage && (this.active === 2 || this.active === 3)) return true;\n    },\n    search: function search() {\n      this.getTableList();\n    },\n    addHandle: function addHandle() {\n      this.list.push({\n        field: '',\n        defaultValue: '',\n        dataType: 'varchar',\n        source: this.dataForm.isPostPosition ? 3 : 1\n      });\n    },\n    handleSysNodeClick: function handleSysNodeClick(data) {\n      this.$refs.SQLEditorRef && this.$refs.SQLEditorRef.insert(data);\n    }\n  }\n};",null]}