{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/formShortLink/form/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/formShortLink/form/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Parser from '@/components/Generator/parser/Parser'\nimport FlowBox from '@/views/workFlow/components/FlowBox'\nimport { getFlowList } from '@/api/workFlow/FlowEngine'\nimport { getConfig, checkPwd, createModel } from '@/api/onlineDev/webDesign'\nimport QRCode from 'qrcodejs2'\nimport md5 from 'js-md5';\nconst getFormDataFields = item => {\n  if (!item.__config__ || !item.__config__.jnpfKey) return true\n  const jnpfKey = item.__config__.jnpfKey\n  const list = [\n    'input',\n    'textarea',\n    'inputNumber',\n    'switch',\n    'datePicker',\n    'timePicker',\n    'colorPicker',\n    'rate',\n    'slider',\n    'editor',\n    'link',\n    'text',\n    'alert',\n    'table',\n    'collapse',\n    'collapseItem',\n    'tabItem',\n    'tab',\n    'row',\n    'card',\n    'groupTitle',\n    'divider',\n    'tableGrid',\n    'tableGridTr',\n    'tableGridTd',\n    'sign',\n    'rate',\n    'slider',\n    'iframe',\n    'location'\n  ]\n  const fieldsSelectList = [\"radio\", \"checkbox\", \"select\", \"cascader\", \"treeSelect\"]\n  if (list.includes(jnpfKey) || (fieldsSelectList.includes(jnpfKey) && item.__config__.dataType ===\n    'static')) return true\n  return false\n}\nexport default {\n  components: { Parser, FlowBox },\n  props: ['config', 'modelId', 'isPreview', 'encryption'],\n  data() {\n    return {\n      visible: false,\n      dataForm: {\n        data: ''\n      },\n      btnLoading: false,\n      loading: true,\n      key: +new Date(),\n      formConf: {},\n      flowVisible: false,\n      flowListVisible: false,\n      flowList: [],\n      flowItem: {},\n      formLink: '',\n      formPassUse: 1,\n      password: '',\n      passwordLoading: false,\n      id: ''\n    }\n  },\n  created() {\n    getConfig(this.modelId, this.encryption).then(res => {\n      this.formLink = res.data.formLink || ''\n      this.id = res.data.id || 0\n      this.formPassUse = res.data.formPassUse || 0\n      if (this.formPassUse == 1) return\n      this.init()\n    })\n  },\n  methods: {\n    init(flag) {\n      if (this.config.enableFlow) {\n        this.getFlowList(flag)\n      } else {\n        this.formConf = JSON.parse(this.config.formData)\n        this.formConf.fields = this.recurSiveFilter(this.formConf.fields)\n        this.fillFormData(this.formConf, {})\n        this.loading = true\n        this.$nextTick(() => {\n          this.visible = true\n          this.loading = false\n          this.key = +new Date()\n        })\n      }\n    },\n    fillFormData(form, data, flag) {\n      const loop = (list, parent) => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__) {\n            if (item.__config__.defaultCurrent) {\n              if (item.__config__.jnpfKey === 'datePicker') {\n                let format = item.format\n                let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n                let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n                  ' 00:00:00' : ''\n                item.__config__.defaultValue = new Date(dateStr + time).getTime()\n              }\n              if (item.__config__.jnpfKey === 'timePicker') {\n                item.__config__.defaultValue = this.jnpf.toDate(new Date(), item.format)\n              }\n            }\n          }\n          if (item.__config__ && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children, item)\n          }\n        }\n      }\n      loop(form.fields)\n      form.formData = data\n    },\n    getFlowList(flag) {\n      getFlowList(this.config.flowId, '1').then(res => {\n        this.flowList = res.data\n        if (flag && this.flowItem.id) return this.selectFlow(this.flowItem)\n        if (!this.flowList.length) return this.$message({ type: 'error', message: '流程不存在' })\n        if (this.flowList.length === 1) return this.selectFlow(this.flowList[0])\n        this.flowListVisible = true\n      })\n    },\n    handleLogin() {\n      this.passwordLoading = true\n      if (!this.password) {\n        this.$message({\n          message: '请输入验证码',\n          type: 'error'\n        })\n        this.passwordLoading = false\n        return\n      }\n      let param = {\n        id: this.id,\n        type: 0,\n        encryption: this.encryption,\n        password: md5(this.password)\n      }\n      checkPwd(param).then((res) => {\n        this.passwordLoading = false\n        if (res.code == 200) {\n          this.formPassUse = 0\n          this.init()\n        }\n      }).catch(() => {\n        this.passwordLoading = false\n      })\n    },\n    recurSiveFilter(getDrawingList) {\n      let newColumn = getDrawingList.filter(item => getFormDataFields(item))\n      newColumn.forEach(x =>\n        x.__config__ && x.__config__.children && Array.isArray(x.__config__.children) && (x\n          .__config__.children = this.recurSiveFilter(x.__config__.children))\n      )\n      return newColumn\n    },\n    isIncludesTable(data) {\n      if ((!data.__config__.layout || data.__config__.layout === 'rowFormItem') && data.__config__.jnpfKey !== 'table') return true\n      return data.__config__.jnpfKey == 'table'\n    },\n    selectFlow(item) {\n      this.flowItem = item\n      let data = {\n        id: '',\n        enCode: this.config.flowEnCode,\n        flowId: item.id,\n        formType: 2,\n        opType: '-1',\n        type: 1,\n        modelId: this.modelId,\n        isPreview: this.isPreview,\n        fromForm: 1,\n        hideCancelBtn: true\n      }\n      this.flowListVisible = false\n      this.flowVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowBox.init(data)\n      })\n    },\n    submitForm(data, callback) {\n      if (!data) return\n      this.btnLoading = true\n      this.dataForm.data = JSON.stringify(data)\n      createModel(this.modelId, this.dataForm, this.encryption).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            if (callback && typeof callback === \"function\") callback()\n            this.btnLoading = false\n            this.resetForm()\n          }\n        })\n      }).catch(() => { this.btnLoading = false })\n    },\n    getQRimg() {\n      if (!this.formLink) {\n        return\n      }\n      this.$refs.qrCode.innerHTML = \"\";\n      this.qrcode = new QRCode(this.$refs.qrCode, {\n        width: 150,\n        height: 150, // 高度\n        text: this.formLink, // 二维码内容\n        // render: 'canvas' // 设置渲染方式（有两种方式 table和canvas，默认是canvas）\n        // background: '#f0f'\n        // foreground: '#ff0'\n        correctLevel: QRCode.CorrectLevel.H //容错级别 容错级别有：（1）QRCode.CorrectLevel.L （2）QRCode.CorrectLevel.M （3）QRCode.CorrectLevel.Q （4）QRCode.CorrectLevel.H\n      })\n    },\n    dataFormSubmit() {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.$refs.dynamicForm && this.$refs.dynamicForm.submitForm()\n    },\n    resetForm() {\n      this.formConf = JSON.parse(this.config.formData)\n      this.fillFormData(this.formConf, {})\n      this.formConf.fields = this.recurSiveFilter(this.formConf.fields)\n      this.$nextTick(() => {\n        this.$refs.dynamicForm && this.$refs.dynamicForm.resetForm()\n      })\n    },\n    closeFlow(isRefresh) {\n      if (isRefresh) this.init(true)\n    },\n  }\n}\n",null]}