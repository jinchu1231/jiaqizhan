{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RInput.vue?vue&type=template&id=66e97844","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RInput.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"el-row\",\n    [\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"控件标题\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入控件标题\" },\n            model: {\n              value: _vm.activeData.__config__.label,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"label\", $$v)\n              },\n              expression: \"activeData.__config__.label\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"显示标题\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.showLabel,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"showLabel\", $$v)\n              },\n              expression: \"activeData.__config__.showLabel\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"标题提示\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { type: \"textarea\", rows: 2, placeholder: \"请输入标题提示\" },\n            model: {\n              value: _vm.activeData.__config__.tipLabel,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"tipLabel\", $$v)\n              },\n              expression: \"activeData.__config__.tipLabel\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"占位提示\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入占位提示\" },\n            model: {\n              value: _vm.activeData.placeholder,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"placeholder\", $$v)\n              },\n              expression: \"activeData.placeholder\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"默认值\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入默认值\" },\n            model: {\n              value: _vm.activeData.__config__.defaultValue,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"defaultValue\", $$v)\n              },\n              expression: \"activeData.__config__.defaultValue\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"前缀\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入前缀\" },\n            model: {\n              value: _vm.activeData.addonBefore,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"addonBefore\", $$v)\n              },\n              expression: \"activeData.addonBefore\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"后缀\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { placeholder: \"请输入后缀\" },\n            model: {\n              value: _vm.activeData.addonAfter,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"addonAfter\", $$v)\n              },\n              expression: \"activeData.addonAfter\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.showType === \"pc\",\n              expression: \"showType==='pc'\",\n            },\n          ],\n          attrs: { label: \"前图标\" },\n        },\n        [\n          _c(\n            \"el-input\",\n            {\n              attrs: { placeholder: \"请输入前图标名称\" },\n              model: {\n                value: _vm.activeData.prefixIcon,\n                callback: function ($$v) {\n                  _vm.$set(_vm.activeData, \"prefixIcon\", $$v)\n                },\n                expression: \"activeData.prefixIcon\",\n              },\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  attrs: { slot: \"append\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.openIconsDialog(\"prefixIcon\")\n                    },\n                  },\n                  slot: \"append\",\n                },\n                [_vm._v(\"\\n        选择\\n      \")]\n              ),\n            ],\n            1\n          ),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.showType === \"pc\",\n              expression: \"showType==='pc'\",\n            },\n          ],\n          attrs: { label: \"后图标\" },\n        },\n        [\n          _c(\n            \"el-input\",\n            {\n              attrs: { placeholder: \"请输入后图标名称\" },\n              model: {\n                value: _vm.activeData.suffixIcon,\n                callback: function ($$v) {\n                  _vm.$set(_vm.activeData, \"suffixIcon\", $$v)\n                },\n                expression: \"activeData.suffixIcon\",\n              },\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  attrs: { slot: \"append\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.openIconsDialog(\"suffixIcon\")\n                    },\n                  },\n                  slot: \"append\",\n                },\n                [_vm._v(\"\\n        选择\\n      \")]\n              ),\n            ],\n            1\n          ),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"最多输入\" } },\n        [\n          _c(\n            \"el-input\",\n            {\n              attrs: { placeholder: \"请输入字符长度\", type: \"number\" },\n              model: {\n                value: _vm.activeData.maxlength,\n                callback: function ($$v) {\n                  _vm.$set(_vm.activeData, \"maxlength\", $$v)\n                },\n                expression: \"activeData.maxlength\",\n              },\n            },\n            [_c(\"template\", { slot: \"append\" }, [_vm._v(\"个字符\")])],\n            2\n          ),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"掩码显示\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.useMask,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"useMask\", $$v)\n              },\n              expression: \"activeData.useMask\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm.activeData.useMask\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"掩码规则\" } },\n            [\n              _c(\n                \"el-button\",\n                {\n                  staticStyle: { width: \"100%\" },\n                  attrs: { block: \"\" },\n                  on: { click: _vm.editMaskConfig },\n                },\n                [_vm._v(\"掩码设置\")]\n              ),\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"jnpf-form-tip-item\",\n        {\n          attrs: {\n            label: \"扫码输入\",\n            \"tip-label\": \"支持常规二维码和条形码；桌面端和H5不支持扫码\",\n          },\n        },\n        [\n          _c(\"el-switch\", {\n            on: { change: _vm.onUseScanChange },\n            model: {\n              value: _vm.activeData.useScan,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"useScan\", $$v)\n              },\n              expression: \"activeData.useScan\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"能否清空\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.clearable,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"clearable\", $$v)\n              },\n              expression: \"activeData.clearable\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否密码\" } },\n        [\n          _c(\"el-switch\", {\n            attrs: { disabled: _vm.activeData.useScan },\n            model: {\n              value: _vm.activeData.showPassword,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"showPassword\", $$v)\n              },\n              expression: \"activeData.showPassword\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.showType === \"pc\",\n              expression: \"showType==='pc'\",\n            },\n          ],\n          attrs: { label: \"是否只读\" },\n        },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.readonly,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"readonly\", $$v)\n              },\n              expression: \"activeData.readonly\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否禁用\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.disabled,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData, \"disabled\", $$v)\n              },\n              expression: \"activeData.disabled\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否隐藏\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.noShow,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"noShow\", $$v)\n              },\n              expression: \"activeData.__config__.noShow\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\"el-divider\", [_vm._v(\"校验规则\")]),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否必填\" } },\n        [\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.required,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"required\", $$v)\n              },\n              expression: \"activeData.__config__.required\",\n            },\n          }),\n        ],\n        1\n      ),\n      _c(\n        \"el-form-item\",\n        [\n          _c(\n            \"span\",\n            { attrs: { slot: \"label\" }, slot: \"label\" },\n            [\n              _vm._v(\"是否唯一\\n      \"),\n              _c(\n                \"el-tooltip\",\n                { attrs: { content: \"输入值唯一性校验\", placement: \"top\" } },\n                [_c(\"a\", { staticClass: \"el-icon-question tooltip-question\" })]\n              ),\n            ],\n            1\n          ),\n          _c(\"el-switch\", {\n            model: {\n              value: _vm.activeData.__config__.unique,\n              callback: function ($$v) {\n                _vm.$set(_vm.activeData.__config__, \"unique\", $$v)\n              },\n              expression: \"activeData.__config__.unique\",\n            },\n          }),\n        ],\n        1\n      ),\n      _vm._l(_vm.activeData.__config__.regList, function (item, index) {\n        return _c(\n          \"div\",\n          { key: index, staticClass: \"reg-item\" },\n          [\n            _c(\n              \"span\",\n              {\n                staticClass: \"close-btn\",\n                on: {\n                  click: function ($event) {\n                    return _vm.activeData.__config__.regList.splice(index, 1)\n                  },\n                },\n              },\n              [_c(\"i\", { staticClass: \"el-icon-close\" })]\n            ),\n            _c(\n              \"el-form-item\",\n              { attrs: { label: \"表达式\" } },\n              [\n                _c(\"el-input\", {\n                  attrs: { placeholder: \"请输入正则\" },\n                  on: { change: _vm.onPatternChange },\n                  model: {\n                    value: item.pattern,\n                    callback: function ($$v) {\n                      _vm.$set(item, \"pattern\", $$v)\n                    },\n                    expression: \"item.pattern\",\n                  },\n                }),\n              ],\n              1\n            ),\n            _c(\n              \"el-form-item\",\n              {\n                staticStyle: { \"margin-bottom\": \"0\" },\n                attrs: { label: \"错误提示\" },\n              },\n              [\n                _c(\"el-input\", {\n                  attrs: { placeholder: \"请输入错误提示\" },\n                  model: {\n                    value: item.message,\n                    callback: function ($$v) {\n                      _vm.$set(item, \"message\", $$v)\n                    },\n                    expression: \"item.message\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ],\n          1\n        )\n      }),\n      _c(\n        \"div\",\n        { staticClass: \"mt-10\" },\n        [\n          _c(\n            \"el-dropdown\",\n            [\n              _c(\"el-button\", { attrs: { type: \"primary\" } }, [\n                _vm._v(\"添加常用校验\"),\n                _c(\"i\", { staticClass: \"el-icon-arrow-down el-icon--right\" }),\n              ]),\n              _c(\n                \"el-dropdown-menu\",\n                { attrs: { slot: \"dropdown\" }, slot: \"dropdown\" },\n                _vm._l(_vm.ruleList, function (item, i) {\n                  return _c(\n                    \"el-dropdown-item\",\n                    {\n                      key: i,\n                      nativeOn: {\n                        click: function ($event) {\n                          return _vm.addHandle(item)\n                        },\n                      },\n                    },\n                    [_vm._v(\"\\n          \" + _vm._s(item.label))]\n                  )\n                }),\n                1\n              ),\n            ],\n            1\n          ),\n          _c(\n            \"el-button\",\n            {\n              staticStyle: { \"margin-left\": \"10px\" },\n              attrs: { type: \"primary\" },\n              on: { click: _vm.addReg },\n            },\n            [_vm._v(\"\\n      自定义规则\\n    \")]\n          ),\n        ],\n        1\n      ),\n      _c(\"iconBox\", {\n        attrs: {\n          visible: _vm.iconsVisible,\n          current: _vm.activeData[_vm.currentIconModel],\n        },\n        on: {\n          \"update:visible\": function ($event) {\n            _vm.iconsVisible = $event\n          },\n          choiceIcon: _vm.setIcon,\n        },\n      }),\n      _c(\"MaskConfigDialog\", {\n        ref: \"maskConfigRef\",\n        on: { confirm: _vm.updateMaskConfig },\n      }),\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}