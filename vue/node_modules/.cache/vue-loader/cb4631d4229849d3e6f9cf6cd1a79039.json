{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/extend/graphDemo/echartsGauge/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/extend/graphDemo/echartsGauge/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\n\nimport * as echarts from 'echarts';\nimport resize from '../mixins/resize'\nexport default {\n  name: 'extend-graphDemo-echartsGauge',\n  mixins: [resize],\n  data() {\n    return {\n      chart: null,\n      option: {\n        tooltip: {\n          formatter: \"{a} <br/>{c} {b}\"\n        },\n        series: [\n          {\n            name: '速度',\n            type: 'gauge',\n            z: 3,\n            min: 0,\n            max: 220,\n            splitNumber: 11,\n            radius: '50%',\n            axisLine: {            // 坐标轴线\n              lineStyle: {       // 属性lineStyle控制线条样式\n                width: 10\n              }\n            },\n            axisTick: {            // 坐标轴小标记\n              length: 15,        // 属性length控制线长\n              lineStyle: {       // 属性lineStyle控制线条样式\n                color: 'auto'\n              }\n            },\n            splitLine: {           // 分隔线\n              length: 20,         // 属性length控制线长\n              lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                color: 'auto'\n              }\n            },\n            axisLabel: {\n              backgroundColor: 'auto',\n              borderRadius: 2,\n              color: '#eee',\n              padding: 3,\n              textShadowBlur: 2,\n              textShadowOffsetX: 1,\n              textShadowOffsetY: 1,\n              textShadowColor: '#222'\n            },\n            title: {\n              // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              fontWeight: 'bolder',\n              fontSize: 20,\n              fontStyle: 'italic'\n            },\n            detail: {\n              // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              formatter: function (value) {\n                value = (value + '').split('.');\n                value.length < 2 && (value.push('00'));\n                return ('00' + value[0]).slice(-2)\n                  + '.' + (value[1] + '00').slice(0, 2);\n              },\n              fontWeight: 'bolder',\n              borderRadius: 3,\n              backgroundColor: '#444',\n              borderColor: '#aaa',\n              shadowBlur: 5,\n              shadowColor: '#333',\n              shadowOffsetX: 0,\n              shadowOffsetY: 3,\n              borderWidth: 2,\n              textBorderColor: '#000',\n              textBorderWidth: 2,\n              textShadowBlur: 2,\n              textShadowColor: '#fff',\n              textShadowOffsetX: 0,\n              textShadowOffsetY: 0,\n              fontFamily: 'Arial',\n              width: 100,\n              color: '#eee',\n              rich: {}\n            },\n            data: [{ value: 40, name: 'km/h' }]\n          },\n          {\n            name: '转速',\n            type: 'gauge',\n            center: ['20%', '55%'],    // 默认全局居中\n            radius: '35%',\n            min: 0,\n            max: 7,\n            endAngle: 45,\n            splitNumber: 7,\n            axisLine: {            // 坐标轴线\n              lineStyle: {       // 属性lineStyle控制线条样式\n                width: 8\n              }\n            },\n            axisTick: {            // 坐标轴小标记\n              length: 12,        // 属性length控制线长\n              lineStyle: {       // 属性lineStyle控制线条样式\n                color: 'auto'\n              }\n            },\n            splitLine: {           // 分隔线\n              length: 20,         // 属性length控制线长\n              lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                color: 'auto'\n              }\n            },\n            pointer: {\n              width: 5\n            },\n            title: {\n              offsetCenter: [0, '-30%'],       // x, y，单位px\n            },\n            detail: {\n              // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              fontWeight: 'bolder'\n            },\n            data: [{ value: 1.5, name: 'x1000 r/min' }]\n          },\n          {\n            name: '油表',\n            type: 'gauge',\n            center: ['77%', '50%'],    // 默认全局居中\n            radius: '25%',\n            min: 0,\n            max: 2,\n            startAngle: 135,\n            endAngle: 45,\n            splitNumber: 2,\n            axisLine: {            // 坐标轴线\n              lineStyle: {       // 属性lineStyle控制线条样式\n                width: 8\n              }\n            },\n            axisTick: {            // 坐标轴小标记\n              splitNumber: 5,\n              length: 10,        // 属性length控制线长\n              lineStyle: {        // 属性lineStyle控制线条样式\n                color: 'auto'\n              }\n            },\n            axisLabel: {\n              formatter: function (v) {\n                switch (v + '') {\n                  case '0': return 'E';\n                  case '1': return 'Gas';\n                  case '2': return 'F';\n                }\n              }\n            },\n            splitLine: {           // 分隔线\n              length: 15,         // 属性length控制线长\n              lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                color: 'auto'\n              }\n            },\n            pointer: {\n              width: 2\n            },\n            title: {\n              show: false\n            },\n            detail: {\n              show: false\n            },\n            data: [{ value: 0.5, name: 'gas' }]\n          },\n          {\n            name: '水表',\n            type: 'gauge',\n            center: ['77%', '50%'],    // 默认全局居中\n            radius: '25%',\n            min: 0,\n            max: 2,\n            startAngle: 315,\n            endAngle: 225,\n            splitNumber: 2,\n            axisLine: {            // 坐标轴线\n              lineStyle: {       // 属性lineStyle控制线条样式\n                width: 8\n              }\n            },\n            axisTick: {            // 坐标轴小标记\n              show: false\n            },\n            axisLabel: {\n              formatter: function (v) {\n                switch (v + '') {\n                  case '0': return 'H';\n                  case '1': return 'Water';\n                  case '2': return 'C';\n                }\n              }\n            },\n            splitLine: {           // 分隔线\n              length: 15,         // 属性length控制线长\n              lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                color: 'auto'\n              }\n            },\n            pointer: {\n              width: 2\n            },\n            title: {\n              show: false\n            },\n            detail: {\n              show: false\n            },\n            data: [{ value: 0.5, name: 'gas' }]\n          }\n        ]\n      },\n      timer: null\n    }\n  },\n  mounted() {\n    this.initChart()\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n    if (!this.timer) {\n      return\n    }\n    clearInterval(this.timer)\n    this.timer = null\n  },\n  methods: {\n    initChart() {\n      this.chart = echarts.init(document.getElementById('chart'))\n      let option = this.option\n      let chart = this.chart\n      this.timer = setInterval(() => {\n        option.series[0].data[0].value = (Math.random() * 100).toFixed(2) - 0;\n        option.series[1].data[0].value = (Math.random() * 7).toFixed(2) - 0;\n        option.series[2].data[0].value = (Math.random() * 2).toFixed(2) - 0;\n        option.series[3].data[0].value = (Math.random() * 2).toFixed(2) - 0;\n        chart.setOption(option, true);\n      }, 2000)\n      this.chart.setOption(this.option)\n    }\n  }\n}\n",null]}