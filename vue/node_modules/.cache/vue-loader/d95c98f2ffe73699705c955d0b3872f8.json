{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/UserSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/UserSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getImUserSelector, getUserInfoList, getSubordinates, getOrganization, getSelectedUserList } from '@/api/permission/user'\nimport { addResizeListener, removeResizeListener } from 'element-ui/src/utils/resize-event';\nimport emitter from 'element-ui/src/mixins/emitter'\nlet { methods: { dispatch } } = emitter\nexport default {\n  name: 'JnpfUserSelect',\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  props: {\n    value: {\n      type: [String, Array],\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    title: {\n      type: String,\n      default: '选择用户'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    hasSys: {\n      type: Boolean,\n      default: false\n    },\n    selectType: {\n      type: String,\n      default: 'all'\n    },\n    ableRelationIds: {\n      type: [Array, String],\n      default: () => []\n    },\n    ableIds: {\n      type: Array,\n      default: () => []\n    },\n    size: String,\n  },\n  data() {\n    return {\n      visible: false,\n      activeName: '',\n      nodeId: '',\n      innerValue: '',\n      loading: false,\n      props: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      defaultExpandedKeys: [],\n      treeData: [],\n      treeData2: [],\n      treeData3: [],\n      treeData4: [{\n        id: 'currentUser',\n        fullName: '当前用户',\n        headIcon: '/api/file/Image/userAvatar/001.png'\n      }],\n      ableList: [],\n      selectedData: [],\n      tagsList: [],\n      inputHovering: false,\n      inputWidth: 0,\n      initialInputHeight: 0,\n      isAsync: false,\n      finish: false,\n      pagination: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20,\n      },\n      ableQuery: {\n        ids: [],\n      }\n    }\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    },\n    selectDisabled() {\n      this.$nextTick(() => {\n        this.resetInputHeight();\n      });\n    },\n    activeName(val) {\n      this.pagination.keyword = ''\n      this.isAsync = false\n      if (!val) return\n      this.nodeId = '0'\n      this.treeData = []\n      this.treeData2 = []\n      this.treeData3 = []\n      this.getData()\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.multiple\n        ? Array.isArray(this.value) && this.value.length > 0\n        : this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.selectDisabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    },\n    currentPlaceholder() {\n      if (this.multiple && Array.isArray(this.value) && this.value.length) {\n        return ''\n      } else {\n        return this.placeholder\n      }\n    },\n    selectDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    selectSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    collapseTagSize() {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1\n        ? 'mini'\n        : 'small';\n    },\n  },\n  created() {\n    this.setDefault()\n  },\n  mounted() {\n    addResizeListener(this.$el, this.handleResize);\n    const reference = this.$refs.reference;\n    if (reference && reference.$el) {\n      const sizeMap = {\n        medium: 36,\n        small: 32,\n        mini: 28\n      };\n      const input = reference.$el.querySelector('input');\n      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];\n    }\n    if (this.multiple) {\n      this.resetInputHeight();\n    }\n    this.$nextTick(() => {\n      if (reference && reference.$el) {\n        this.inputWidth = reference.$el.getBoundingClientRect().width;\n      }\n    });\n    this.setDefault()\n  },\n  beforeDestroy() {\n    if (this.$el && this.handleResize) removeResizeListener(this.$el, this.handleResize);\n  },\n  methods: {\n    getAbleList() {\n      this.loading = true\n      let query = {\n        pagination: this.pagination,\n        ...this.ableQuery\n      }\n      getSelectedUserList(query).then(res => {\n        if (res.data.list.length < this.pagination.pageSize) {\n          this.finish = true\n        }\n        this.ableList = [...this.ableList, ...res.data.list]\n        this.loading = false\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n    bindScroll() {\n      let _this = this,\n        vBody = _this.$refs.infiniteBody;\n      vBody.addEventListener(\"scroll\", function () {\n        if (vBody.scrollHeight - vBody.clientHeight - vBody.scrollTop <= 200 && !_this.loading && !_this.finish) {\n          _this.pagination.currentPage += 1\n          if (_this.selectType === 'all') {\n            _this.getAllList()\n          } else {\n            _this.getAbleList()\n          }\n        }\n      });\n    },\n    onClose() {\n      this.activeName = ''\n    },\n    openDialog() {\n      if (this.selectDisabled) return\n      this.visible = true\n      this.pagination.keyword = ''\n      this.nodeId = '0'\n      this.isAsync = false\n      this.finish = false\n      this.selectedData = []\n      if (this.selectType === 'all') {\n        this.activeName = 'all'\n        this.setDefault()\n      } else {\n        if (this.selectType === 'custom') {\n          this.ableQuery = {\n            ids: this.ableIds,\n          }\n        } else {\n          const suffix = '--' + this.getAbleKey(this.selectType);\n          let ableIds = !this.ableRelationIds ? [] : Array.isArray(this.ableRelationIds) ? this.ableRelationIds : [this.ableRelationIds];\n          this.ableQuery.ids = ableIds.map(o => o + suffix);\n        }\n        this.getData()\n        this.$nextTick(() => {\n          this.bindScroll()\n          this.setDefault()\n        })\n      }\n    },\n    getAbleKey(selectType) {\n      if (selectType === 'dep') return 'department';\n      if (selectType === 'pos') return 'position';\n      return selectType;\n    },\n    confirm() {\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        let selectedIds = this.selectedData.map(o => o.id)\n        this.$emit('input', selectedIds)\n        this.$emit('change', selectedIds, this.selectedData)\n        dispatch.call(this, 'ElFormItem', 'el.form.change', selectedIds)\n      } else {\n        if (!this.selectedData.length) {\n          this.innerValue = ''\n          this.$emit('input', '')\n          this.$emit('change', '', {})\n          dispatch.call(this, 'ElFormItem', 'el.form.change', '')\n          this.visible = false\n          return\n        }\n        this.innerValue = this.selectedData[0].fullName\n        let selectedIds = this.selectedData.map(o => o.id)\n        this.$emit('input', selectedIds[0])\n        this.$emit('change', selectedIds[0], this.selectedData[0])\n        dispatch.call(this, 'ElFormItem', 'el.form.change', selectedIds[0])\n      }\n      this.visible = false\n    },\n    setDefault() {\n      if (!this.value || !this.value.length) {\n        this.innerValue = ''\n        this.selectedData = []\n        this.tagsList = []\n        this.$nextTick(() => {\n          this.resetInputHeight();\n        })\n        return\n      }\n      const arr = this.multiple ? this.value : [this.value]\n      const hasSysItem = arr.some(o => o === 'currentUser')\n      getUserInfoList(arr).then(res => {\n        this.selectedData = res.data.list\n        if (hasSysItem) {\n          this.selectedData.push({\n            id: 'currentUser',\n            fullName: '当前用户',\n            headIcon: '/api/file/Image/userAvatar/001.png'\n          })\n        }\n        if (this.multiple) {\n          this.innerValue = ''\n          this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        } else {\n          this.innerValue = this.selectedData.length ? this.selectedData[0].fullName : ''\n        }\n        this.$nextTick(() => {\n          if (this.multiple) {\n            this.resetInputHeight();\n          }\n        });\n      })\n    },\n    getData() {\n      if (this.selectType === 'all') {\n        if (this.activeName === 'all') {\n          this.getAllList()\n        } else if (this.activeName === 'department') {\n          this.loading = true\n          getOrganization({ keyword: this.pagination.keyword, organizeId: '0' }).then(res => {\n            this.treeData2 = res.data\n            this.loading = false\n          })\n        } else if (this.activeName === 'subordinates') {\n          this.loading = true\n          getSubordinates(this.pagination.keyword).then(res => {\n            this.treeData3 = res.data\n            this.loading = false\n          })\n        } else {\n          this.loading = false\n        }\n      } else {\n        this.pagination.currentPage = 1\n        this.finish = false\n        this.ableList = []\n        this.getAbleList()\n      }\n    },\n    search() {\n      this.nodeId = '0'\n      this.treeData = []\n      this.pagination.currentPage = 1\n      this.isAsync = !!this.pagination.keyword\n      this.finish = false\n      if (this.isAsync && this.activeName === 'all') {\n        this.$nextTick(() => {\n          this.bindScroll()\n        })\n      }\n      if (this.selectType === 'all') {\n        this.getData()\n      } else {\n        this.ableList = []\n        this.getAbleList()\n      }\n    },\n    getAllList() {\n      this.loading = true\n      if (this.pagination.keyword) this.nodeId = '0'\n      getImUserSelector(this.nodeId, this.pagination).then(res => {\n        if (this.pagination.keyword) {\n          if (res.data.list.length < this.pagination.pageSize) {\n            this.finish = true\n          }\n          this.treeData = [...this.treeData, ...res.data.list]\n        } else {\n          this.treeData = res.data.list\n        }\n        this.loading = false\n        if (!this.pagination.keyword && this.treeData.length && this.nodeId == '0') {\n          this.defaultExpandedKeys = [this.treeData[0].id]\n        }\n      })\n    },\n    loadNode(node, resolve) {\n      if (this.visible === false) return []\n      if (node.level === 0) {\n        this.nodeId = '0'\n        return resolve(this.treeData)\n      }\n      this.nodeId = node.data.id\n      getImUserSelector(this.nodeId).then(res => {\n        resolve(res.data.list)\n      })\n    },\n    handleNodeClick(data) {\n      if (data.type !== 'user') return\n      this.handleNodeClick2(data)\n    },\n    handleNodeClick2(data) {\n      const boo = this.selectedData.some(o => o.id === data.id)\n      if (boo) return\n      this.multiple ? this.selectedData.push(data) : this.selectedData = [data]\n    },\n    removeAll() {\n      this.selectedData = []\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n    },\n    deleteTag(event, index) {\n      this.selectedData.splice(index, 1)\n      this.confirm()\n      event.stopPropagation();\n    },\n    handleClearClick(event) {\n      this.selectedData = []\n      this.confirm()\n      event.stopPropagation();\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    resetInputHeight() {\n      if (this.collapseTags) return;\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return;\n        let inputChildNodes = this.$refs.reference.$el.childNodes;\n        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];\n        const tags = this.$refs.tags;\n        const tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        const sizeInMap = this.initialInputHeight || 40;\n        input.style.height = this.selectedData.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tagsHeight + (tagsHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px';\n      });\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    }\n  },\n}\n",null]}