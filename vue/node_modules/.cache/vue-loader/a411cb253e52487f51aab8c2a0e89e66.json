{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/InputTable/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/InputTable/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { dyOptionsList } from '@/components/Generator/generator/comConfig'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport SelectDialog from '@/components/SelectDialog/index'\nimport { thousandsFormat } from \"@/components/Generator/utils/index\"\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: 'JnpfInputTable',\n  components: { SelectDialog },\n  inject: ['parameter'],\n  props: {\n    config: {\n      type: Object,\n      default: () => { }\n    },\n    value: {\n      type: Array,\n      default: () => ([])\n    },\n    formData: Object,\n    relations: Object,\n    vModel: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      tableFormData: [],\n      tableData: [],\n      dataInterfaceInfo: [],\n      activeRowIndex: 0,\n      selectDialogVisible: false,\n      isAddRow: true, // list类型下 添加行数据 number类型组件会进行校验 产生不需要的结果 在这里进行添加行数据判断 hack\n      complexHeaderList: [],\n      childColumns: [],\n      hasBatchBtn: false,\n      isOperate: false,\n      selectedList: [],\n      actionConfig: {}\n    }\n  },\n  created() {\n    this.tableData = this.config.__config__.children\n    this.tableData = this.tableData.filter(o => !o.__config__.noShow && (!o.__config__.visibility || (Array.isArray(o.__config__.visibility) && o.__config__.visibility.includes('pc'))))\n    let complexHeaderList = this.config.__config__.complexHeaderList || [];\n    if (complexHeaderList.length) {\n      let childColumns = [];\n      for (let i = 0; i < complexHeaderList.length; i++) {\n        const e = complexHeaderList[i];\n        e.align = e.align;\n        e.children = [];\n        e.label = e.fullName\n        e.jnpfKey = 'complexHeader'\n        if (e.childColumns && e.childColumns.length) {\n          e.childColumns = e.childColumns.filter(o => this.tableData.some(item => item.__config__.tableFixed == 'none' && item.__vModel__ == o))\n          childColumns.push(...e.childColumns);\n          for (let j = 0; j < this.tableData.length; j++) {\n            const o = this.tableData[j];\n            if (e.childColumns.includes(o.__vModel__)) e.children.push({ ...o, align: o.__config__.tableAlign });\n          }\n        }\n      }\n      complexHeaderList = complexHeaderList.filter(o => o.children.length);\n      this.complexHeaderList = complexHeaderList\n      this.childColumns = childColumns\n    }\n    this.buildOptions()\n    if (this.value && this.value.length) {\n      this.value.forEach(t => this.addRow(t, false))\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n    childRelations() {\n      let obj = {}\n      for (let key in this.relations) {\n        if (key.includes('-')) {\n          let tableVModel = key.split('-')[0]\n          if (tableVModel === this.vModel) {\n            let newKey = key.split('-')[1]\n            obj[newKey] = this.relations[key]\n          }\n        }\n      }\n      return obj\n    },\n    getHasColumnBtn() {\n      return this.config.columnBtnsList && this.config.columnBtnsList.some(o => o.show) || false\n    },\n    getHasBatchBtn() {\n      return this.config.footerBtnsList && this.config.footerBtnsList.some(o => (['batchRemove'].includes(o.value)) && o.show) || false\n    },\n    getWidth() {\n      return this.config.columnBtnsList && this.config.columnBtnsList.filter(o => o.show).length * 50 || 100\n    }\n  },\n  methods: {\n    columnBtnsHandel(item, index) {\n      if (item.value == 'remove') return this.remove(item, index)\n      if (item.value == 'copy') return this.copy(index)\n      if (item.value == 'add') return this.addRow()\n      if (item.value == 'batchRemove') return this.batchRemove(item)\n      this.openSelectDialog(item)\n    },\n    remove(item, index) {\n      if (item.showConfirm) {\n        this.$confirm('确定删除该数据？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          this.del(index)\n        }).catch(() => { })\n      } else {\n        this.del(index)\n      }\n      this.updateParentData()\n    },\n    del(index) {\n      this.tableFormData.splice(index, 1)\n    },\n    copy(index) {\n      let item = JSON.parse(JSON.stringify(this.tableFormData[index]))\n      item.length && item.map(o => delete o.rowData)\n      this.tableFormData.push(item)\n      this.updateParentData()\n    },\n    batchRemove(item) {\n      if (!this.selectedList.length) return this.$message.error('请选择一条数据')\n      const handleBatchRemove = () => {\n        this.selectedList.forEach(row => {\n          const index = this.tableFormData.indexOf(row)\n          this.del(index)\n        })\n        this.$nextTick(() => { this.updateParentData() })\n      }\n      if (!item.showConfirm) return handleBatchRemove();\n      this.$confirm('确定删除该数据？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        handleBatchRemove()\n      }).catch(() => { })\n    },\n    handleSelectionChange(val) {\n      this.selectedList = val;\n    },\n    setTransferFormData(data, config, jnpfKey) {\n      if (!config.transferList || !config.transferList.length) return\n      let row = this.tableFormData[this.activeRowIndex];\n      for (let index = 0; index < config.transferList.length; index++) {\n        const element = config.transferList[index];\n        if (element.sourceValue.includes('-')) {\n          element.sourceValue = element.sourceValue.split('-')[1]\n        }\n        for (let index = 0; index < row.length; index++) {\n          const e = row[index];\n          if (e.__vModel__ == element.sourceValue) {\n            e.value = data[element.targetField]\n            this.updateParentData()\n          }\n        }\n      }\n    },\n    buildOptions() {\n      this.tableData.forEach((cur, index) => {\n        const config = cur.__config__\n        if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            cur.options = []\n            this.$store.dispatch('base/getDicDataSelector', config.dictionaryType).then(res => {\n              cur.options = res\n            })\n          }\n          if (config.dataType === 'dynamic' && config.propsUrl) {\n            cur.options = []\n            let query = {\n              paramList: config.templateJson ? this.getDefaultParamList(config.templateJson, this.formData) : [],\n            }\n            const matchInfo = JSON.stringify({ id: config.propsUrl, query });\n            const item = { matchInfo, rowIndex: -1, colIndex: index };\n            this.dataInterfaceInfo.push(item);\n            getDataInterfaceRes(config.propsUrl, query).then(res => {\n              cur.options = Array.isArray(res.data) ? res.data : [];\n            })\n          }\n        }\n      })\n    },\n    handleRelationForParent(e, defaultValue, notSetDefault) {\n      if (!this.tableFormData.length) return\n      for (let i = 0; i < this.tableFormData.length; i++) {\n        let row = this.tableFormData[i];\n        for (let j = 0; j < row.length; j++) {\n          let item = row[j];\n          const vModel = item.jnpfKey === 'popupSelect' ? item.__vModel__.substring(0, item.__vModel__.indexOf('_jnpfRelation_')) : item.__vModel__\n          if (e.__vModel__ === vModel) {\n            if (!notSetDefault) item.value = defaultValue\n            if (e.opType === 'setOptions') {\n              item.config.options = [];\n              let query = {\n                paramList: this.getParamList(e.__config__.templateJson, this.formData, i)\n              }\n              getDataInterfaceRes(e.__config__.propsUrl, query).then(res => {\n                item.config.options = Array.isArray(res.data) ? res.data : [];\n              })\n            }\n            if (e.opType === 'setUserOptions') {\n              let value = this.formData[e.relationField] || []\n              item.config.ableRelationIds = Array.isArray(value) ? value : [value]\n            }\n            if (e.opType === 'setPopupOptions') { }\n            if (e.opType === 'setDate') {\n              let startTime = 0\n              let endTime = 0\n              if (e.__config__.startRelationField && e.__config__.startTimeType == 2) {\n                startTime = this.formData[e.__config__.startRelationField] || 0\n              } else {\n                startTime = e.startTime\n              }\n              if (e.__config__.endRelationField && e.__config__.endTimeType == 2) {\n                endTime = this.formData[e.__config__.endRelationField] || 0\n              } else {\n                endTime = e.endTime\n              }\n              item.config.startTime = startTime\n              item.config.endTime = endTime\n            }\n            if (e.opType === 'setTime') {\n              let startTime = ''\n              let endTime = ''\n              if (e.__config__.startRelationField && e.__config__.startTimeType == 2) {\n                startTime = this.formData[e.__config__.startRelationField] || '00:00:00'\n                startTime = startTime + ':00'\n                if (startTime.split(':').length == 3) {\n                  startTime = startTime\n                } else {\n                  startTime = startTime + ':00'\n                }\n              } else {\n                startTime = e.startTime || '00:00:00'\n              }\n              if (e.__config__.endRelationField && e.__config__.endTimeType == 2) {\n                endTime = this.formData[e.__config__.endRelationField] || '23:59:59'\n                if (endTime.split(':').length == 3) {\n                  endTime = endTime\n                } else {\n                  endTime = endTime + ':00'\n                }\n              } else {\n                endTime = e.endTime || '23:59:59'\n              }\n              item.config.startTime = startTime\n              item.config.endTime = endTime\n            }\n          }\n        }\n      }\n      this.updateParentData()\n    },\n    handleRelation(data, rowIndex) {\n      const currRelations = this.childRelations\n      for (let key in currRelations) {\n        if (key === data.__vModel__) {\n          for (let i = 0; i < currRelations[key].length; i++) {\n            const e = currRelations[key][i];\n            const config = e.__config__\n            const jnpfKey = config.jnpfKey\n            let defaultValue = null\n            if (['checkbox', 'cascader'].includes(jnpfKey) || (['select', 'treeSelect', 'popupSelect', 'popupTableSelect', 'userSelect'].includes(jnpfKey) && e.multiple)) {\n              defaultValue = []\n            }\n            let row = this.tableFormData[rowIndex];\n            for (let j = 0; j < row.length; j++) {\n              let item = row[j];\n              const vModel = item.jnpfKey === 'popupSelect' ? item.__vModel__.substring(0, item.__vModel__.indexOf('_jnpfRelation_')) : item.__vModel__\n              if (e.__vModel__ === vModel) {\n\n                if (e.opType === 'setOptions') {\n                  item.config.options = [];\n                  let query = {\n                    paramList: this.getParamList(e.__config__.templateJson, this.formData, rowIndex)\n                  }\n                  getDataInterfaceRes(e.__config__.propsUrl, query).then(res => {\n                    item.config.options = Array.isArray(res.data) ? res.data : [];\n                  })\n                }\n                if (e.opType === 'setUserOptions') {\n                  let value = this.getFieldVal(e.relationField, rowIndex) || []\n                  item.config.ableRelationIds = Array.isArray(value) ? value : [value]\n                }\n                if (e.opType === 'setPopupOptions') { }\n                if (e.opType === 'setDate') {\n                  let startTime = 0\n                  let endTime = 0\n                  if (e.__config__.startRelationField && e.__config__.startTimeType == 2) {\n                    startTime = this.getFieldVal(e.__config__.startRelationField, rowIndex) || 0\n                  } else {\n                    startTime = e.startTime\n                  }\n                  if (e.__config__.endRelationField && e.__config__.endTimeType == 2) {\n                    endTime = this.getFieldVal(e.__config__.endRelationField, rowIndex) || 0\n                  } else {\n                    endTime = e.endTime\n                  }\n                  item.config.startTime = startTime\n                  item.config.endTime = endTime\n                }\n                if (e.opType === 'setTime') {\n                  let startTime = 0\n                  let endTime = 0\n                  if (e.__config__.startRelationField && e.__config__.startTimeType == 2) {\n                    startTime = this.getFieldVal(e.__config__.startRelationField, rowIndex) || '00:00:00'\n                    if (startTime.split(':').length == 3) {\n                      startTime = startTime\n                    } else {\n                      startTime = startTime + ':00'\n                    }\n                  } else {\n                    startTime = e.startTime\n                  }\n                  if (e.__config__.endRelationField && e.__config__.endTimeType == 2) {\n                    endTime = this.getFieldVal(e.__config__.endRelationField, rowIndex) || '23:59:59'\n                    if (endTime.split(':').length == 3) {\n                      endTime = endTime\n                    } else {\n                      endTime = endTime + ':00'\n                    }\n                  } else {\n                    endTime = e.endTime\n                  }\n                  item.config.startTime = startTime\n                  item.config.endTime = endTime\n                }\n                if (item.value != defaultValue) {\n                  item.value = defaultValue\n                  this.$nextTick(() => this.handleRelation(item, rowIndex));\n                }\n              }\n            }\n          }\n        }\n      }\n      this.updateParentData()\n    },\n    buildRowAttr(rowIndex) {\n      let row = this.tableFormData[rowIndex];\n      for (let i = 0; i < row.length; i++) {\n        let item = row[i];\n        const cur = row[i].config\n        const config = cur.__config__\n        for (let key in this.value[rowIndex]) {\n          if (key === item.__vModel__) {\n            item.value = this.value[rowIndex][key]\n          }\n        }\n        if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            this.$store.dispatch('base/getDicDataSelector', config.dictionaryType).then(res => {\n              cur.options = res\n            })\n          }\n          if (config.dataType === 'dynamic' && config.propsUrl) {\n            if (cur.options && cur.options.length && (!config.templateJson || !config.templateJson.length || !this.hasTemplateJsonRelation(config.templateJson))) continue\n            let query = {\n              paramList: config.templateJson ? this.getParamList(config.templateJson, this.formData, rowIndex) : [],\n            }\n            const matchInfo = JSON.stringify({ id: config.propsUrl, query });\n            const item = { matchInfo, rowIndex, colIndex: i };\n            const infoIndex = this.dataInterfaceInfo.findIndex(item => item.matchInfo === matchInfo);\n            let useCacheOptions = false;\n            if (infoIndex === -1) {\n              this.dataInterfaceInfo.push(item);\n            } else {\n              const cacheOptions = this.getCacheOptions(infoIndex);\n              if (cacheOptions.length) {\n                cur.options = cacheOptions;\n                useCacheOptions = true;\n              }\n            }\n            if (!useCacheOptions) {\n              getDataInterfaceRes(config.propsUrl, query).then(res => {\n                cur.options = Array.isArray(res.data) ? res.data : [];\n              })\n            }\n          }\n        }\n        if (config.jnpfKey === 'userSelect' && cur.relationField && cur.selectType !== 'all' && cur.selectType !== 'custom') {\n          let value = this.getFieldVal(cur.relationField, rowIndex) || []\n          cur.ableRelationIds = Array.isArray(value) ? value : [value]\n        }\n        if (config.jnpfKey === 'datePicker') {\n          let startTime = 0\n          let endTime = 0\n          if (cur.__config__.startRelationField && cur.__config__.startTimeType == 2) {\n            startTime = this.getFieldVal(cur.__config__.startRelationField, rowIndex) || 0\n          } else {\n            startTime = cur.startTime\n          }\n          if (cur.__config__.endRelationField && cur.__config__.endTimeType == 2) {\n            endTime = this.getFieldVal(cur.__config__.endRelationField, rowIndex) || 0\n          } else {\n            endTime = cur.endTime\n          }\n          item.config.startTime = startTime\n          item.config.endTime = endTime\n        }\n        if (config.jnpfKey === 'timePicker') {\n          let startTime = 0\n          let endTime = 0\n          if (cur.__config__.startRelationField && cur.__config__.startTimeType == 2) {\n            startTime = this.getFieldVal(cur.__config__.startRelationField, rowIndex) || '00:00:00'\n            if (startTime && (startTime.split(':').length == 3)) {\n              startTime = startTime\n            } else {\n              startTime = startTime + ':00'\n            }\n          } else {\n            startTime = cur.startTime\n          }\n          if (cur.__config__.endRelationField && cur.__config__.endTimeType == 2) {\n            endTime = this.getFieldVal(cur.__config__.endRelationField, rowIndex) || '23:59:59'\n            if (startTime.split(':').length == 3) {\n              endTime = endTime\n            } else {\n              endTime = endTime + ':00'\n            }\n          } else {\n            endTime = cur.endTime\n          }\n          item.config.startTime = startTime\n          item.config.endTime = endTime\n        }\n      }\n    },\n    // 获取缓存options数据\n    getCacheOptions(index) {\n      const item = this.dataInterfaceInfo[index];\n      if (item.rowIndex === -1) {\n        return this.tableData[item.colIndex].options || [];\n      } else {\n        return this.tableFormData[item.rowIndex][item.colIndex].config.options || [];\n      }\n    },\n    // 判断templateJson里是否有关联字段\n    hasTemplateJsonRelation(templateJson) {\n      return templateJson.some(o => o.relationField);\n    },\n    getParamList(templateJson, formData, index) {\n      for (let i = 0; i < templateJson.length; i++) {\n        if (templateJson[i].relationField) {\n          if (templateJson[i].relationField.includes('-')) {\n            let childVModel = templateJson[i].relationField.split('-')[1]\n            let list = this.tableFormData[index].filter(o => o.__vModel__ === childVModel)\n            if (!list.length) {\n              templateJson[i].defaultValue = ''\n            } else {\n              let item = list[0]\n              templateJson[i].defaultValue = item.value\n            }\n          } else {\n            templateJson[i].defaultValue = formData[templateJson[i].relationField] || ''\n          }\n        }\n      }\n      return templateJson\n    },\n    getDefaultParamList(templateJson, formData) {\n      for (let i = 0; i < templateJson.length; i++) {\n        if (templateJson[i].relationField) {\n          if (templateJson[i].relationField.includes('-')) {\n            let childVModel = templateJson[i].relationField.split('-')[1]\n            let list = this.tableData.filter(o => o.__vModel__ === childVModel)\n            templateJson[i].defaultValue = ''\n            if (list.length) templateJson[i].defaultValue = list[0].__config__.defaultValue || ''\n          } else {\n            templateJson[i].defaultValue = formData[templateJson[i].relationField] || ''\n          }\n        }\n      }\n      return templateJson\n    },\n    getFieldVal(field, rowIndex) {\n      let val = ''\n      if (field.includes('-')) {\n        let childVModel = field.split('-')[1]\n        let list = this.tableFormData[rowIndex].filter(o => o.__vModel__ === childVModel)\n        if (!list.length) {\n          val = ''\n        } else {\n          let item = list[0]\n          val = item.value\n        }\n      } else {\n        val = this.formData[field] || ''\n      }\n      return val\n    },\n    clearAddRowFlag() {\n      this.$nextTick(() => {\n        this.isAddRow = false\n      })\n    },\n    /**\n     * @event cell-click Table 单元格点击事件\n     * 点击单元格 聚焦单元格中的input\n     */\n    focusInput(row, column, cell, event) {\n      const child = cell.querySelector('.cell').firstElementChild\n      const input = child && child.querySelector('input')\n      input && input.focus()\n    },\n    setTableFormData(prop, value) {\n      let activeRow = this.tableFormData[this.activeRowIndex]\n      for (let i = 0; i < activeRow.length; i++) {\n        let vModel = activeRow[i].__vModel__\n        if (activeRow[i].__vModel__.indexOf('_jnpfRelation_') >= 0) {\n          vModel = activeRow[i].__vModel__.substring(0, activeRow[i].__vModel__.indexOf('_jnpfRelation_'))\n        }\n        // this.comSet('defaultValue', vModel, value)\n        if (vModel === prop) {\n          activeRow[i].value = value\n          this.handleRelation(activeRow[i], this.activeRowIndex)\n          break\n        }\n      }\n    },\n    getTableFieldOptions(prop) {\n      let res = []\n      for (let i = 0; i < this.tableData.length; i++) {\n        if (this.tableData[i].__vModel__ === prop) {\n          let item = this.tableData[i]\n          res = item.options || []\n          break\n        }\n      }\n      return res\n    },\n    setTableShowOrHide(prop, value) {\n      for (let i = 0; i < this.tableData.length; i++) {\n        if (this.tableData[i].__vModel__ === prop) {\n          this.tableData[i].__config__.noShow = value\n          break\n        }\n      }\n    },\n    onFormBlur(rowIndex, colIndex, tag) {\n      const data = this.tableFormData[rowIndex][colIndex]\n      if (data && data.on && data.on.blur) {\n        const func = this.jnpf.getScriptFunc.call(this, data.on.blur)\n        if (!func) return\n        func.call(this, {\n          data: null,\n          rowIndex,\n          ...this.parameter\n        })\n      }\n    },\n    onFormDataChange(rowIndex, colIndex, tag, params) {\n      if (this.isAddRow) return\n      const data = this.tableFormData[rowIndex][colIndex]\n      this.activeRowIndex = rowIndex\n      data.required && (data.valid = this.checkData(data))\n      data.regList && data.regList.length && (data.regValid = this.checkRegData(data))\n      this.updateParentData()\n      this.handleRelation(data, rowIndex)\n      if (data && data.on && data.on.change) {\n        const func = this.jnpf.getScriptFunc.call(this, data.on.change)\n        if (!func) return\n        let value = ''\n        if (['select', 'radio', 'checkbox'].includes(data.jnpfKey)) {\n          const options = data.options\n          if (data.config.multiple || data.jnpfKey === 'checkbox') {\n            let _value = []\n            outer: for (let i = 0; i < params[0].length; i++) {\n              inner: for (let j = 0; j < options.length; j++) {\n                if (params[0][i] === options[j][data.config.props.value]) {\n                  _value.push(options[j])\n                  break inner\n                }\n              }\n            }\n            value = _value\n          } else {\n            let _value = {}\n            for (let i = 0; i < options.length; i++) {\n              if (params[0] === options[i][data.config.props.value]) {\n                _value = options[i]\n                break\n              }\n            }\n            value = _value\n          }\n        } else if (data.jnpfKey === 'inputNumber') {\n          value = params[0]\n        } else {\n          value = params.length > 1 ? params[1] : params[0]\n        }\n        if (data && (data.jnpfKey == \"popupSelect\" || data.jnpfKey === 'relationForm')) this.setTransferFormData(value, data.config.__config__, data.jnpfKey)\n        func.call(this, {\n          data: value,\n          rowIndex,\n          ...this.parameter\n        })\n      }\n    },\n    /**\n     * 校验单个表单数据\n     * @param {CmpConfig} 组件配置对象\n     */\n    checkData({ tag, value }) {\n      if ([null, undefined, ''].includes(value)) return false\n      // if (tag === 'org-select') return this.checkOrgData(value)\n      if (Array.isArray(value)) return value.length > 0\n      return true\n    },\n    /**\n     * 对组织机构部门控数据单独校验\n     */\n    checkOrgData(data) {\n      const isArray = Array.isArray\n      if (typeof data !== 'object' || isArray(data)) return false\n      let count = 0\n      for (let key in data) {\n        count += isArray(data[key]) ? data[key].length : 0\n      }\n      return count > 0\n    },\n    checkRegData(col) {\n      let res = true\n      for (let i = 0; i < col.regList.length; i++) {\n        const item = col.regList[i]\n        if (item.pattern) {\n          let pattern = eval(item.pattern)\n          if (col.value && !pattern.test(col.value)) {\n            res = false\n            col.regErrorText = item.message\n            break\n          }\n        }\n      }\n      return res\n    },\n    /**\n     * 校验表格数据必填项\n     */\n    submit() {\n      let res = true\n      const checkCol = col => {\n        col.required && !this.checkData(col) && (res = col.valid = false)\n        col.regList && col.regList.length && !this.checkRegData(col) && (res = col.regValid = false)\n      }\n      this.tableFormData.forEach(row => row.forEach(checkCol))\n      return res ? this.getTableValue() : false\n    },\n    /**\n     * 根据formId获取完整组件配置\n     */\n    getConfById(formId, rowIndex) {\n      let item = this.tableFormData[rowIndex].find(t => t.formId === formId).config\n      let itemConfig = item.__config__\n      let newObj = {}\n      for (const key in item) {\n        if (!['__config__', '__slot__', '__vModel__', 'props', 'on'].includes(key)) {\n          newObj[key] = item[key]\n        }\n        if (key === 'props') {\n          newObj[key] = item[key]\n        }\n        if (key === 'disabled') {\n          newObj[key] = this.disabled || item[key]\n        }\n      }\n      if (['relationForm', 'popupSelect'].includes(itemConfig.jnpfKey)) {\n        newObj['field'] = this.config.__vModel__ + item.__vModel__ + '_jnpfRelation_' + rowIndex\n      }\n      if (['relationFormAttr', 'popupAttr'].includes(itemConfig.jnpfKey)) {\n        let prop = newObj['relationField'].split('_jnpfTable_')[0]\n        newObj['relationField'] = this.config.__vModel__ + prop + '_jnpfRelation_' + rowIndex\n      }\n      return newObj\n    },\n    /**\n     * 获取默认行数据\n     */\n    getEmptyRow(val, rowIndex) {\n      return this.tableData.map((t, index) => {\n        let options = []\n        if (dyOptionsList.indexOf(t.__config__.jnpfKey) > -1) {\n          options = t.options\n        }\n        if (t.__config__.jnpfKey === 'datePicker' && t.__config__.defaultCurrent) {\n          let format = t.format\n          let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n          let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n            ' 00:00:00' : ''\n          t.__config__.defaultValue = new Date(dateStr + time).getTime()\n        }\n        if (t.__config__.jnpfKey === 'timePicker' && t.__config__.defaultCurrent) {\n          t.__config__.defaultValue = this.jnpf.toDate(new Date(), t.format)\n        }\n        if (t.__config__.jnpfKey === 'organizeSelect' && t.__config__.defaultCurrent) {\n          if (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0) {\n            t.__config__.defaultValue = t.multiple ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n          } else {\n            t.__config__.defaultValue = []\n          }\n        }\n        if (t.__config__.jnpfKey == 'sign' && t.__config__.defaultCurrent && this.userInfo.signImg) t.__config__.defaultValue = this.userInfo.signImg\n        let res = {\n          tag: t.__config__.tag,\n          formId: t.__config__.formId,\n          value: val ? (val[t.__vModel__]) : t.__config__.defaultValue,\n          options,\n          valid: true,\n          regValid: true,\n          regErrorText: '',\n          on: t.on || {},\n          jnpfKey: t.__config__.jnpfKey,\n          __vModel__: ['relationForm', 'popupSelect'].includes(t.__config__.jnpfKey) ? t.__vModel__ + '_jnpfRelation_' + rowIndex : t.__vModel__,\n          regList: t.__config__.regList || [],\n          required: t.__config__.required,\n          rowData: val || {},\n          config: t\n        }\n        return res\n      })\n    },\n    // 获取表格数据\n    getTableValue() {\n      return this.tableFormData.map(row => row.reduce((p, c) => {\n        let str = c.__vModel__\n        if (c.__vModel__ && c.__vModel__.indexOf('_jnpfRelation_') >= 0) {\n          str = c.__vModel__.substring(0, c.__vModel__.indexOf('_jnpfRelation_'))\n        }\n        p[str] = c.value\n        if (c.rowData) p = { ...c.rowData, ...p }\n        return p\n      }, {}))\n    },\n    // 更新父级数据 触发计算公式更新\n    updateParentData() {\n      const newVal = this.getTableValue()\n      this.$emit('input', newVal)\n    },\n    removeRow(index) {\n      this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.tableFormData.splice(index, 1)\n        this.updateParentData()\n      }).catch(() => {\n      });\n    },\n    addRow(val, isUpdate = true) {\n      this.isAddRow = true\n      if (!Array.isArray(this.tableFormData)) this.tableFormData = []\n      const rowIndex = this.tableFormData.length\n      this.tableFormData.push(JSON.parse(JSON.stringify(this.getEmptyRow(val, rowIndex))))\n      this.buildRowAttr(rowIndex)\n      this.clearAddRowFlag()\n      if (isUpdate) this.updateParentData()\n    },\n    openSelectDialog(item) {\n      this.actionConfig = item.actionConfig || {}\n      this.selectDialogVisible = true\n      this.$nextTick(() => {\n        this.$refs.selectDialog.init()\n      })\n    },\n    addForSelect(data) {\n      this.selectDialogVisible = false\n      if (data) data.forEach(t => this.addRow(t))\n    },\n    getCmpValOfRow(row, key) {\n      // 获取数字相关组件的输入值\n      // const isNumCmp = tag => ['fc-amount', 'el-input-number', 'el-slider'].includes(tag)\n      if (!this.config.summaryField.length) return NaN\n      const isSummary = key => this.config.summaryField.includes(key)\n      const target = row.find(t => t.__vModel__ === key)\n      if (!target) return NaN\n      let data = isNaN(target.value) ? 0 : Number(target.value)\n      if (isSummary(key)) return data || 0\n      return NaN\n    },\n    /**\n     * 对表格进行合计 目前只支持数字，金额，滑块\n     */\n    getTableSummaries(param) {\n      const { columns, data } = param\n      const sums = []\n      const thousandsField = []\n      let tableData = this.tableData.filter(o => !o.__config__.noShow)\n      tableData.forEach(res => {\n        if (res.thousands) thousandsField.push(res.__vModel__)\n      })\n      // if (tableData.length + 1 !== columns.length) return []  // 防止多次加载\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '合计'\n          return\n        }\n        const sumVal = data.reduce((sum, d) => sum + this.getCmpValOfRow(d, column.property), 0)\n        sums[index] = Number.isNaN(sumVal) ? '' : sumVal\n        if (sums[index] && !Number.isInteger(sums[index])) sums[index] = sums[index].toFixed(2)\n        if (thousandsField.includes(column.property)) sums[index] = thousandsFormat(sums[index])\n      })\n      return sums\n    },\n    resetTable() {\n      this.tableData = this.config.__config__.children\n      this.tableFormData = []\n      // this.addRow()\n    },\n    reset() {\n      this.tableData.map((t) => {\n        let index = this.tableFormData[0].findIndex(c => c.vModel === t.vModel)\n        if (index === -1) return\n        for (let i = 0; i < this.tableFormData.length; i++) {\n          this.tableFormData[i][index].value = t.defaultValue\n        }\n      })\n    }\n  }\n}\n",null]}