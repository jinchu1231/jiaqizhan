{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/components/Location/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/components/Location/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AMapLoader from '@amap/amap-jsapi-loader';\nimport { getAroundList, getTextList } from '@/api/common'\nimport define from '@/utils/define'\nconst defaultValue = {\n  lat: 25.416422,\n  lng: 118.990923,\n  name: '',\n  fullAddress: '',\n};\nwindow._AMapSecurityConfig = {\n  securityJsCode: define.aMapSecurityJsCode, // 安全密钥\n};\n\nexport default {\n  name: 'JnpfLocation',\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    autoLocation: {\n      type: Boolean,\n      default: false\n    },\n    enableLocationScope: {\n      type: Boolean,\n      default: false\n    },\n    adjustmentScope: {\n      type: [String, Number],\n      default: 500\n    },\n    enableDesktopLocation: {\n      type: Boolean,\n      default: false\n    },\n    locationScope: {\n      type: Array,\n      default: () => []\n    },\n    detailed: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n  },\n  data() {\n    return {\n      visible: false,\n      keyword: '',\n      location:\n      {\n        lat: '',\n        lng: ''\n      },\n      currentLocation: {\n        lat: '',\n        lng: ''\n      },\n      AMap: '',\n      map: '',\n      list: [],\n      loading: false,\n      finish: false,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 50,\n      },\n      selectValue: -1,\n      innerValue: '',\n      setCenterLoading: false,\n      dragLoading: false,\n      containerId: \"\"\n    }\n  },\n  watch: {\n    value: {\n      handler(val) {\n        this.innerValue = val ? JSON.parse(val) : defaultValue;\n      },\n      immediate: true\n    },\n  },\n  computed: {\n    staticMapUrl() {\n      if (!this.enableLocationScope) return ' ';\n      const location = this.innerValue.lng + ',' + this.innerValue.lat;\n      const url = `${this.define.APIURl}/api/system/Location/staticmap?location=${location}&zoom=19&size=80*80&key=${this.define.aMapWebKey}`;\n      return url;\n    }\n  },\n  methods: {\n    handleClick() {\n      if (this.detailed) return this.openAMap();\n      if (this.disabled) return;\n      if (this.enableLocationScope) this.handleLocation();\n    },\n    openAMap() {\n      const position = this.innerValue.lng + ',' + this.innerValue.lat;\n      const url = `http://uri.amap.com/marker?position=${position}&name=${this.innerValue.name}&coordinate=gaode&callnative=0`;\n      window.open(url, '_blank');\n    },\n    handleLocation() {\n      if (this.disabled) return;\n      this.visible = true;\n      this.selectValue = -1;\n      this.list = [];\n      this.keyword = '';\n      this.$nextTick(() => {\n        this.initMap();\n      });\n    },\n    async initMap() {\n      this.containerId = 'container' + this.jnpf.idGenerator()\n      AMapLoader.reset()\n      await AMapLoader.load({\n        key: this.define.aMapJsKey,\n        version: '2.0',\n        plugins: ['AMap.PlaceSearch', 'AMap.Geolocation'],\n      }).then(AMap => {\n        this.AMap = AMap;\n        const query = {\n          viewMode: '3D',\n          resizeEnable: true,\n          zoom: 16,\n        };\n        if (this.innerValue && this.innerValue.lng && this.innerValue.lat) {\n          this.location = { lat: this.innerValue.lat, lng: this.innerValue.lng };\n          query.center = [this.location.lng, this.location.lat];\n        }\n        this.map = new AMap.Map(this.containerId, query);\n\n        //获取中心位置\n        this.handleGetCenter();\n        //查询附近地点\n        this.getList();\n        this.bindScroll();\n        //添加可选区域圆形\n        this.handelCircle();\n        //添加微调区域圆形\n        this.handleScopeCircle();\n        //地图事件\n        this.handleListener();\n        //添加定位按钮\n        this.map.addControl(new AMap.Geolocation());\n      });\n    },\n    onSelectValueChange() {\n      this.setCenterLoading = true;\n      this.$nextTick(() => {\n        const location = this.list[this.selectValue].location || '';\n        const [lng, lat] = location.split(',');\n        this.location = { lat, lng };\n        this.map.setCenter([lng, lat]);\n        setTimeout(() => {\n          this.setCenterLoading = false;\n        }, 500);\n      });\n    },\n    handleCenter(e) {\n      this.map.setCenter(e.lnglat);\n    },\n    handleListener() {\n      this.map.on('click', this.handleCenter);\n      this.map.on('moveend', this.handleMapChange);\n      this.map.on('movestart', this.handleSetLoading);\n    },\n    handleOffListener() {\n      this.map.off('click', this.handleCenter);\n      this.map.off('moveend', this.handleMapChange);\n      this.map.off('movestart', this.handleSetLoading);\n    },\n    handleMapChange() {\n      if (this.dragLoading) return (this.dragLoading = false);\n      this.handleGetCenter();\n      this.selectValue = -1;\n      this.listQuery.currentPage = 1;\n      this.list = [];\n      if (this.enableLocationScope && this.adjustmentScope) {\n        const discount = this.getDiscount(this.currentLocation.lat, this.currentLocation.lng, this.location.lat, this.location.lng) || 0;\n        if (discount > this.adjustmentScope) return this.$message.warning('超出微调范围');\n      }\n      this.getList();\n    },\n    handleSetLoading() {\n      if (this.setCenterLoading) this.dragLoading = true;\n    },\n    handleGetCenter() {\n      const { lat, lng } = this.map.getCenter();\n      this.location = { lat, lng };\n    },\n    handleResult(res) {\n      if (res.pois.length < this.listQuery.pageSize) this.finish = true;\n      this.list = [...this.list, ...res.pois];\n      this.loading = false;\n    },\n    bindScroll() {\n      let _this = this,\n        vBody = _this.$refs.bodyRef;\n      vBody.addEventListener(\"scroll\", function () {\n        if (vBody.scrollHeight - vBody.clientHeight - vBody.scrollTop <= 50 && !_this.loading && !_this.finish) {\n          _this.listQuery.currentPage += 1;\n          _this.keyword ? _this.handleSearch() : _this.getList();\n        }\n      });\n    },\n    getList() {\n      this.loading = true;\n      const query = {\n        key: this.define.aMapWebKey,\n        location: this.location.lng + ',' + this.location.lat,\n        radius: -1,\n        offset: this.listQuery.pageSize,\n        page: this.listQuery.currentPage,\n      };\n      getAroundList(query).then(res => {\n        this.handleResult(res.data);\n      }).catch(() => { this.loading = false })\n    },\n    handelCircle() {\n      if (!this.enableDesktopLocation || !this.locationScope.length) return;\n      for (let i = 0; i < this.locationScope.length; i++) {\n        const o = this.locationScope[i];\n        if (!o.lng || !o.lat || !o.radius) continue;\n        this.addCircle({ ...o, fillColor: '#7ad98f' });\n      }\n    },\n    handleScopeCircle() {\n      if (!this.enableLocationScope || !this.adjustmentScope) return;\n      this.currentLocation = this.location;\n      this.addCircle({ ...this.location, radius: this.adjustmentScope, fillColor: '#1791fc' });\n    },\n    addCircle(o) {\n      var circle = new this.AMap.Circle({\n        center: [o.lng, o.lat],\n        radius: o.radius,\n        strokeOpacity: 0.2,\n        fillOpacity: 0.4,\n        fillColor: o.fillColor,\n        bubble: false,\n      });\n      circle.on('click', this.handleCenter);\n      this.map.add(circle);\n    },\n    handleSearch() {\n      this.loading = true;\n      const query = {\n        key: this.define.aMapWebKey,\n        keywords: this.keyword,\n        radius: this.enableLocationScope && this.adjustmentScope ? this.adjustmentScope : -1,\n        offset: this.listQuery.pageSize,\n        page: this.listQuery.currentPage,\n      };\n      getTextList(query).then(res => {\n        this.handleResult(res.data);\n      });\n    },\n    onSearch() {\n      this.selectValue = -1;\n      this.listQuery.currentPage = 1;\n      this.list = [];\n      this.keyword ? this.handleSearch() : this.getList();\n    },\n    getDiscount(lat1, lng1, lat2, lng2) {\n      const p1 = new this.AMap.LngLat(lng1, lat1);\n      const p2 = new this.AMap.LngLat(lng2, lat2);\n      return p1.distance(p2) || 0;\n    },\n    handleAutoLocation() {\n      if (!this.autoLocation || this.innerValue.fullAddress) return;\n      AMapLoader.load({\n        key: this.define.aMapJsKey,\n        version: '2.0',\n        plugins: ['AMap.Geolocation', 'AMap.Geocoder'],\n      }).then(AMap => {\n        this.AMap = AMap;\n        var geolocation = new AMap.Geolocation({\n          enableHighAccuracy: true,\n          timeout: 1500,\n        });\n        let that = this\n        const getAddress = position => {\n          var geocoder = new AMap.Geocoder();\n          geocoder.getAddress(position, function (status, res) {\n            if (status === 'complete' && res.info === 'OK') {\n              const data = res.regeocode.addressComponent;\n              that.innerValue = {\n                pName: data.province,\n                cName: data.city,\n                adName: data.district,\n                address: data.street + data.streetNumber,\n                name: '',\n                lng: position[0],\n                lat: position[1],\n                fullAddress: res.regeocode.formattedAddress,\n              };\n\n              that.$emit('input', JSON.stringify(that.innerValue));\n              that.$emit('change', JSON.stringify(that.innerValue));\n            }\n          });\n        };\n        geolocation.getCityInfo((_status, res) => {\n          if (res.status == 0) {\n            if (this.enableDesktopLocation && this.locationScope.length) {\n              let list = [];\n              for (let i = 0; i < this.locationScope.length; i++) {\n                const o = this.locationScope[i];\n                const discount = this.getDiscount(o.lat, o.lng, res.position[1], res.position[0]) || 0;\n                list.push(discount > o.radius);\n              }\n              if (list.every(o => o === true)) return;\n            }\n            getAddress(res.position);\n          } else {\n            console.error('定位失败');\n          }\n        });\n      });\n    },\n    handleSubmit() {\n      if ((!this.selectValue && this.selectValue != 0) || this.selectValue == -1) return this.$message.error('请选择地址');\n      const data = this.list[this.selectValue];\n      const [lng, lat] = data.location.split(',');\n      //判断微调范围\n      if (this.enableLocationScope) {\n        const discount = this.getDiscount(this.currentLocation.lat, this.currentLocation.lng, lat, lng) || 0;\n        if (discount > (this.adjustmentScope || 500)) return this.$message.warning('超出微调范围');\n      }\n      //判断可选范围\n      if (this.enableDesktopLocation && this.locationScope.length) {\n        let list = [];\n        for (let i = 0; i < this.locationScope.length; i++) {\n          const o = this.locationScope[i];\n          const discount = this.getDiscount(o.lat, o.lng, lat, lng) || 0;\n          list.push(discount > o.radius);\n        }\n        if (list.every(o => o === true)) return this.$message.warning('超出规定范围');\n      }\n      const address = data.address && data.address.length ? data.address : '';\n      //台湾、北京、上海、重庆、深圳地址特殊处理\n      let fullAddress = data.pname + data.cityname + data.adname + address + data.name;\n      if (data.pname == data.cityname) fullAddress = data.pname + data.adname + address + data.name;\n      if (data.pname == data.cityname && data.pname == data.adname) fullAddress = data.pname + address + data.name;\n      this.innerValue = {\n        pName: data.pname,\n        cName: data.cityname,\n        adName: data.adname,\n        address,\n        name: data.name,\n        lng,\n        lat,\n        fullAddress,\n      };\n      this.$emit('input', JSON.stringify(this.innerValue));\n      this.$emit('change', JSON.stringify(this.innerValue));\n      this.handleCancel();\n    },\n    handleCancel() {\n      this.visible = false;\n      this.destroyMap()\n    },\n    destroyMap() {\n      this.handleOffListener();\n      this.$nextTick(() => {\n        this.map && this.map.destroy();\n      })\n    },\n    handleClear() {\n      this.innerValue = defaultValue;\n      this.$emit('input', '');\n      this.$emit('change', '');\n    }\n  }\n}\n\n",null]}