{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/flowEngine/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/flowEngine/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FlowEngineList, Delete, Release, Stop, Copy, exportData } from '@/api/workFlow/FlowEngine'\nimport Form from './Form'\nimport FlowManage from './FlowManagement'\n\nexport default {\n  name: 'workFlow-flowEngine',\n  components: { Form, FlowManage },\n  data() {\n    return {\n      showAll: false,\n      keyword: '',\n      category: '',\n      enabledMark: '',\n      type: '',\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      total: 0,\n      list: [],\n      btnLoading: false,\n      listLoading: true,\n      dialogVisible: false,\n      formVisible: false,\n      manageVisible: false,\n      categoryList: [],\n      templateId: '',\n      options: [\n        { fullName: '发起流程', id: 0 },\n        { fullName: '功能流程', id: 1 }\n      ]\n    }\n  },\n  created() {\n    this.getDictionaryData()\n    this.initData()\n  },\n  methods: {\n    reset() {\n      this.keyword = ''\n      this.category = ''\n      this.type = ''\n      this.enabledMark = ''\n      this.search()\n    },\n    search() {\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    initData() {\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        category: this.category,\n        type: this.type,\n        enabledMark: this.enabledMark\n      }\n      FlowEngineList(query).then((res) => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    getDictionaryData() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'WorkFlowCategory' }).then((res) => {\n        this.categoryList = res\n      })\n    },\n    handleDel(id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        Delete(id).then(res => {\n          this.initData()\n          this.$message({\n            type: 'success',\n            message: res.msg\n          });\n        })\n      }).catch(() => { });\n    },\n    addFlow(type) {\n      this.dialogVisible = false\n      this.addOrUpdateHandle('', type)\n    },\n    // 新增 / 修改\n    addOrUpdateHandle(id, type) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(this.categoryList, id, type)\n      })\n    },\n    copy(id) {\n      this.$confirm('您确定要复制该流程, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        Copy(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.initData()\n            }\n          });\n        })\n      }).catch(() => { });\n    },\n    handleExport(id) {\n      this.$confirm('您确定要导出该流程, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        exportData(id).then(res => {\n          this.jnpf.downloadFile(res.data.url)\n        })\n      }).catch(() => { });\n    },\n    closeForm(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) {\n        this.initData()\n      }\n    },\n    showManage(id, fullName) {\n      this.manageVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowManage.init(id, fullName, 1)\n      })\n    },\n    closeManage(isRefresh) {\n      this.manageVisible = false\n      if (isRefresh) {\n        this.initData()\n      }\n    },\n    handleUpdate(row) {\n      if (row.enabledMark) {\n        this.$confirm('此操作将禁用该流程，是否继续？', '提示', {\n          type: 'warning'\n        }).then(() => {\n          Stop(row.id).then(res => {\n            row.enabledMark = 0\n            this.$message({\n              type: 'success',\n              message: res.msg\n            });\n          })\n        }).catch(() => { });\n      } else {\n        this.$confirm('此操作将启用该流程，是否继续？', '提示', {\n          type: 'warning'\n        }).then(() => {\n          Release(row.id).then(res => {\n            row.enabledMark = 1\n            this.$message({\n              type: 'success',\n              message: res.msg\n            });\n          })\n        }).catch(() => { });\n      }\n    },\n\n  }\n}\n",null]}