{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/entrust/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/entrust/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FlowDelegateList, DeleteDelagate, getUserListByFlowId, Stop } from '@/api/workFlow/FlowDelegate'\nimport { FlowLaunchList, Delete } from '@/api/workFlow/FlowLaunch'\nimport Form from './Form'\nimport MyEntrust from './myEntrust.vue'\nimport FlowBox from '../components/FlowBox'\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: 'workFlow-entrust',\n  components: { Form, MyEntrust, FlowBox },\n  data() {\n    return {\n      keyword: '',\n      list: [],\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      formVisible: false,\n      flowVisible: false,\n      flowBoxVisible: false,\n      activeName: '0',\n      category: '',\n      delagateTypeList: [\n        { label: \"委托设置\", key: \"1\" },\n        { label: \"委托给我的\", key: \"2\" }\n      ],\n      flowList: [],\n      flowListLoading: false,\n      visibleUsers: false,\n      flowUserList: [],\n      checkUserList: [],\n      classObject: { active: true },\n      checkFlowItem: {},\n      dialogVisible: false,\n      config: 0\n    }\n  },\n  filters: {\n    getCategoryText(id, categoryList) {\n      let item = categoryList.filter(o => o.id == id)[0]\n      return item && item.fullName ? item.fullName : ''\n    }\n  },\n  created() {\n    this.config = this.$route.query.config\n    if (this.config) {\n      this.activeName = this.config == 1 ? '1' : '2'\n      this.initData()\n    } else {\n      this.initFlowList()\n    }\n    this.getDictionaryData()\n\n  },\n  computed: {\n    ...mapGetters(['userInfo'])\n  },\n  methods: {\n    delegation(id) {\n      this.$confirm('结束后，流程不再进行委托！', '结束委托', {\n        type: 'warning'\n      }).then(() => {\n        Stop(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.initData()\n            }\n          });\n        })\n      }).catch(() => { });\n    },\n    getDictionaryData() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'WorkFlowCategory' }).then((res) => {\n        this.categoryList = res\n      })\n    },\n    search() {\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      if (this.activeName == '0') {\n        this.initFlowList()\n      } else {\n        this.initData()\n      }\n    },\n    reset() {\n      this.keyword = ''\n      this.search()\n    },\n    initData() {\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        myOrDelagateToMe: this.activeName\n      }\n      FlowDelegateList(query).then(res => {\n        this.list = res.data.list\n        let currTime = this.jnpf.toDate(new Date())\n        for (let i = 0; i < this.list.length; i++) {\n          let e = this.list[i];\n          let startTime = this.jnpf.toDate(e.startTime);\n          let endTime = this.jnpf.toDate(e.endTime);\n          e.startTime = startTime\n          e.endTime = endTime\n          // 0-委托中 1-未开始 2-已失效\n          let status = 0\n          if (startTime > currTime) {\n            status = 1\n          } else if (endTime <= currTime) {\n            status = 2\n          } else {\n            status = 0\n          }\n          e.status = status\n        }\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    handleDel(index, id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        this.asyncDel(index, id);\n      }).catch(() => { });\n    },\n    asyncDel(index, id) {\n      DeleteDelagate(id).then(res => {\n        this.initData()\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    handleDelFlow(index, id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        this.asyncDelFlow(index, id);\n      }).catch(() => { });\n    },\n    asyncDelFlow(index, id) {\n      Delete(id).then(res => {\n        this.initFlowList()\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    formatter(row, column) {\n      return this.jnpf.dateFormat(row, column)\n    },\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id)\n      })\n    },\n    addFlow(type) {\n      this.dialogVisible = false\n      this.flowVisible = true\n      this.$nextTick(() => {\n        this.$refs.MyEntrust.init(type)\n      })\n    },\n    choiceFlow(item) {\n      this.checkUserList = []\n      getUserListByFlowId({ flowId: item.id }).then(res => {\n        this.flowUserList = res.data.list\n        if (res.data.list.length > 1) {\n          this.visibleUsers = true\n          this.checkFlowItem = item\n        } else {\n          let data = {\n            id: '',\n            enCode: item.enCode,\n            flowId: item.id,\n            opType: '-1',\n            delegateUserList: [res.data.list[0].id],\n          }\n          this.flowBoxVisible = true\n          this.$nextTick(() => {\n            this.$refs.FlowBox.init(data)\n            this.flowVisible = false\n          })\n        }\n      })\n    },\n    dataFormSubmit() {\n      if (!this.checkUserList.length) return this.$message.warning('请选择发起人员')\n      this.visibleUsers = false\n      let data = {\n        id: '',\n        enCode: this.checkFlowItem.enCode,\n        flowId: this.checkFlowItem.id,\n        opType: '-1',\n        delegateUserList: this.checkUserList,\n      }\n      this.flowBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowBox.init(data)\n        this.flowVisible = false\n      })\n    },\n    closeForm(isRefresh) {\n      this.flowBoxVisible = false\n      if (isRefresh) this.search()\n    },\n    activeClick(tab, event) {\n      this.activeName = tab.paneName\n      this.keyword = ''\n      if (tab.paneName == '0') this.initFlowList()\n      if (tab.paneName == '1') this.search()\n      if (tab.paneName == '2') this.search()\n    },\n    initFlowList() {\n      this.flowListLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        delegateType: true,\n      }\n      FlowLaunchList(query).then(res => {\n        this.flowList = res.data.list\n        this.total = res.data.pagination.total\n        this.flowListLoading = false\n      })\n    },\n    checkUserChange(data) {\n      let index = this.checkUserList.findIndex(item => {\n        if (item == data) {\n          return true\n        }\n      })\n      if (index > -1) {\n        this.checkUserList.splice(index, 1)\n      } else {\n        this.checkUserList.push(data)\n      }\n    },\n    toDetail(item, opType) {\n      let data = {\n        id: item.id,\n        enCode: item.flowCode,\n        flowId: item.flowId,\n        opType,\n      }\n      this.flowBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowBox.init(data)\n      })\n    },\n  }\n}\n",null]}