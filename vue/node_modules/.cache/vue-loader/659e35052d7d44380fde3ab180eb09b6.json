{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/msgCenter/msgMonitor/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/msgCenter/msgMonitor/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMsgMonitorList, delMsgMonitor, emptyMsgMonitor } from '@/api/msgCenter/msgMonitor'\nimport Detail from './Detail'\nexport default {\n  name: 'msgCenter-msgMonitor',\n  components: { Detail },\n  data() {\n    return {\n      showAll: false,\n      list: [],\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n      },\n      detailVisible: false,\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近一周',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      keyword: '',\n      pickerVal: [],\n      startTime: '',\n      endTime: '',\n      msgType: '',\n      msgTypeList: [],\n      messageSource: '',\n      messageSourceList: [],\n      multipleSelection: []\n    }\n  },\n  created() {\n    this.initData()\n    this.getConfig()\n  },\n  methods: {\n    initData() {\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        messageType: this.msgType,\n        messageSource: this.messageSource,\n      }\n      getMsgMonitorList(query).then(async res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    getConfig() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSendType' }).then((res) => {\n        this.msgTypeList = res\n      })\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSourceType' }).then((res) => {\n        this.messageSourceList = res\n      })\n    },\n    search() {\n      if (this.pickerVal && this.pickerVal.length) {\n        this.startTime = this.pickerVal[0]\n        this.endTime = this.pickerVal[1]\n      } else {\n        this.startTime = ''\n        this.endTime = ''\n      }\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n      }\n      this.initData()\n    },\n    toDetail(id) {\n      this.detailVisible = true\n      this.$nextTick(() => {\n        this.$refs.DetailBox.init(id)\n      })\n    },\n    handleDel() {\n      if (!this.multipleSelection.length) {\n        this.$message({ type: 'error', message: '请选择一条数据' });\n        return\n      }\n      const query = { ids: this.multipleSelection }\n      this.$confirm('您确定要删除这些数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        delMsgMonitor(query).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg\n          });\n          this.refresh();\n        })\n      }).catch(() => { });\n    },\n    handleDelAll() {\n      this.$confirm('您确定要清空全部数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        emptyMsgMonitor().then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg\n          });\n          this.refresh();\n        })\n      })\n    },\n    handleChange(val) {\n      this.multipleSelection = val.map(item => item.id)\n    },\n    closeForm(isRefresh) {\n      this.detailVisible = false\n      if (isRefresh) this.refresh()\n    },\n    refresh() {\n      this.pickerVal = ''\n      this.startTime = ''\n      this.endTime = ''\n      this.keyword = ''\n      this.msgType = ''\n      this.messageSource = ''\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n      }\n      this.initData()\n    }\n  }\n}\n",null]}