{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/profile/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/profile/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { UserSettingInfo, getSubordinate, UpdateAvatar, UpdateLanguage, getUserOrganizes, getUserPositions, setMajor } from '@/api/permission/userSetting'\nimport UserInfo from './components/UserInfo'\nimport Password from './components/Password'\nimport Authorize from './components/Authorize'\nimport SysLog from './components/SysLog'\nimport JustAuth from './components/JustAuth'\nimport TenantInfo from './components/TenantInfo'\nexport default {\n  name: 'profile',\n  components: { UserInfo, Password, Authorize, SysLog, JustAuth, TenantInfo },\n  data() {\n    return {\n      user: {},\n      treeData: [],\n      activeTab: '',\n      organizeList: [],\n      positionList: [],\n      activeOrganize: '',\n      activePosition: '',\n      visible: {\n        tenantInfo: false,\n        user: true,\n        password: false,\n        theme: false,\n        authorize: false,\n        sysLog: false,\n        justAuth: false,\n      },\n      props: {\n        children: 'children',\n        label: 'userName',\n        isLeaf: 'isLeaf'\n      },\n      loading: false,\n      userLoading: false,\n      nodeId: '0',\n      uploadHeaders: { Authorization: this.$store.getters.token },\n      tenantData: {},\n      isTenant: false\n    }\n  },\n  watch: {\n    '$route': 'getInfo',\n    activeTab(val) {\n      for (let key of Object.keys(this.visible)) {\n        this.visible[key] = false\n      }\n      this.visible[val] = true\n      if (val === 'subordinate') {\n        this.nodeId = '0'\n        this.getSubordinate()\n        return\n      }\n      if (val === 'organize') {\n        this.getUserOrganizes()\n        return\n      }\n      if (val === 'position') {\n        this.getUserPositions()\n        return\n      }\n    }\n  },\n  created() {\n    this.getInfo()\n  },\n  computed: {\n    useSocials() {\n      return localStorage.getItem('useSocials') && localStorage.getItem('useSocials') != '0'\n    }\n  },\n  methods: {\n    beforeUpload(file) {\n      let isAccept = new RegExp('image/*').test(file.type)\n      if (!isAccept) {\n        this.$message.error(`请上传图片`)\n      }\n      return isAccept;\n    },\n    getInfo() {\n      this.userLoading = true\n      UserSettingInfo().then(res => {\n        this.user = res.data\n        this.activeTab = 'user'\n        this.userLoading = false\n        this.tenantData = this.user.currentTenantInfo\n        this.isTenant = this.user.isTenant\n        let flag = this.$router.history.current.query.flag\n        if (flag == \"1\") {\n          this.activeTab = \"justAuth\"\n        }\n      })\n    },\n    getSubordinate() {\n      this.loading = true\n      getSubordinate(this.nodeId).then(res => {\n        this.treeData = res.data\n        this.loading = false\n      })\n    },\n    loadNode(node, resolve) {\n      if (node.level === 0) {\n        this.nodeId = '0'\n        return resolve(this.treeData)\n      }\n      this.nodeId = node.data.id\n      getSubordinate(this.nodeId).then(res => {\n        resolve(res.data)\n      })\n    },\n    handleSuccess(res, file) {\n      if (res.code == 200) {\n        this.updateAvatar(res.data)\n      } else {\n        this.$message({\n          message: '上传失败',\n          type: 'error',\n          duration: 1000,\n        })\n      }\n    },\n    updateAvatar(data) {\n      UpdateAvatar(data.name).then(res => {\n        this.user.avatar = data.url\n        this.$store.commit('user/SET_USERINFO_HEADICON', data.url)\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1000,\n        })\n      })\n    },\n    getUserOrganizes() {\n      getUserOrganizes().then(res => {\n        this.organizeList = res.data || []\n        const list = this.organizeList.filter(o => o.isDefault)\n        if (!list.length) return this.activeOrganize = ''\n        const activeItem = list[0]\n        this.activeOrganize = activeItem.id\n      })\n    },\n    getUserPositions() {\n      getUserPositions().then(res => {\n        this.positionList = res.data || []\n        const list = this.positionList.filter(o => o.isDefault)\n        if (!list.length) return this.activePosition = ''\n        const activeItem = list[0]\n        this.activePosition = activeItem.id\n      })\n    },\n    changeMajor(majorId, majorType) {\n      if (this['active' + majorType] === majorId) return\n      let query = {\n        majorId,\n        majorType\n      }\n      setMajor(query).then(res => {\n        this['active' + majorType] = majorId\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose() {\n            location.reload()\n          }\n        })\n      })\n    }\n  }\n}\n",null]}