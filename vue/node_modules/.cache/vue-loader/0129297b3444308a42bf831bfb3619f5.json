{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataInterface/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataInterface/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceInfo, createDataInterface, updateDataInterface, getSelector } from '@/api/systemData/dataInterface'\nimport { getDataSourceListAll } from '@/api/systemData/dataSource'\nimport { DataModelListAll, DataModelFieldList } from '@/api/systemData/dataModel'\nimport SQLEditor from '@/components/JNPFEditor/monaco'\nimport JSONEditor from '@/components/JNPFEditor/monaco'\nimport FieldForm from './FieldForm'\nimport FormScript from './FormScript'\nimport PageExplain from './PageExplain'\nimport CommonTable from './components/CommonTable'\nimport { deepClone } from '@/utils'\nimport RightTable from './components/RightTable'\nimport JNPFCodeEditor from '@/components/JNPFEditor/monaco'\nconst defaultDataJsJson = '(data) => {\\r\\n    // 处理数据逻辑\\r\\n\\r\\n    // 返回所需的数据\\r\\n    return data\\r\\n}';\nconst defaultDataExceptionJson = '(data) => {\\r\\n    // 返回true表示接口验证成功！\\r\\n\\r\\n    // 返回flase表示接口验证失败！\\r\\n    return data\\r\\n}';\nconst defaultJson = {\n  staticData: '',\n  sqlData: {\n    dbLinkId: '0',\n    sql: '',\n  },\n  apiData: {\n    method: 1,\n    url: '',\n    header: [],\n    query: [],\n    body: '',\n    bodyType: 0,\n    bodyJson: '',\n    bodyXml: '',\n  }\n}\n\nexport default {\n  components: {\n    SQLEditor,\n    JSONEditor,\n    FieldForm,\n    FormScript,\n    PageExplain,\n    JNPFCodeEditor,\n    RightTable,\n    CommonTable\n  },\n  data() {\n    return {\n      apiData: defaultJson.apiData,\n      dataConfigJson: deepClone(defaultJson),\n      dataCountJson: deepClone(defaultJson),\n      dataEchoJson: deepClone(defaultJson),\n      dataJsJson: defaultDataJsJson,\n      dataExceptionJson: defaultDataExceptionJson,\n      fieldJson: [],\n      parameterJson: [],\n      activeKey: '0',\n      active: 0,\n      treeLoading: false,\n      formLoading: false,\n      btnLoading: false,\n      fieldFormVisible: false,\n      pageExplainVisible: false,\n      selectData: [],\n      sqlOptions: { language: 'sql' },\n      jsonOptions: { language: 'json' },\n      jsOptions: { language: 'javascript' },\n      props: {\n        label: 'fullName',\n        children: 'children',\n        value: 'id'\n      },\n      commonTableData: [],\n      defHasPage: 0,\n      dataForm: {\n        fullName: '',\n        enCode: '',\n        category: '',\n        type: 2,\n        hasPage: 0,\n        sortCode: 0,\n        enabledMark: 1,\n        description: '',\n        action: 3,\n        isPostPosition: 0\n      },\n      sourceData: [],\n      method: 1,\n      apiRequestMethod: '6',\n      dbOptions: [],\n      treeData: [],\n      defaultProps: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      dataRule: {\n        fullName: [{ required: true, message: '名称不能为空', trigger: 'blur' }],\n        enCode: [{ required: true, message: '编码不能为空', trigger: 'blur' }],\n        category: [{ required: true, message: '请选择分类', trigger: 'blur' }],\n        url: [{ required: true, message: '请填写接口路径', trigger: 'blur' }]\n      },\n      key: +new Date(),\n      key2: +new Date(),\n      sqlType: 0,\n      keyword: \"\",\n      filterText: '',\n      pagingParameters: []\n    }\n  },\n  watch: {\n    filterText(val) {\n      this.$nextTick(() => {\n        this.$refs.bodyTree.filter(val)\n      })\n    },\n    active: {\n      handler(newVal, oldVal) {\n        if (this.dataForm.type !== 3) return;\n        if (oldVal == 1) this.dataConfigJson.apiData = JSON.parse(JSON.stringify(this.apiData));\n        if (oldVal == 2 && this.dataForm.hasPage) this.dataEchoJson.apiData = JSON.parse(JSON.stringify(this.apiData));\n        if (newVal === 1) {\n          this.apiData = JSON.parse(JSON.stringify(this.dataConfigJson.apiData));\n          if (this.apiData.bodyType != 3 && this.apiData.bodyType != 4) {\n            this.$set(this.apiData, 'body', JSON.parse(this.apiData.body))\n          } else {\n            if (this.apiData.bodyType == 3) {\n              this.$set(this.apiData, 'bodyJson', this.dataConfigJson.apiData.body)\n            } else {\n              this.$set(this.apiData, 'bodyXml', this.dataEchoJson.apiData.body)\n            }\n          }\n        }\n        if (newVal === 2 && this.dataForm.hasPage) this.apiData = JSON.parse(JSON.stringify(this.dataEchoJson.apiData));\n      },\n      deep: true\n    }\n  },\n  computed: {\n    getList() {\n      if (this.activeKey === '0') this.list = this.apiData.header || [];\n      if (this.activeKey === '1') this.list = this.apiData.query || [];\n      if (this.activeKey === '2') this.list = this.apiData.body || [];\n      return this.list;\n    },\n    hasPageDisabled() {\n      if (this.dataForm.id && this.dataForm.isPostPosition == 1) return true\n      if (this.dataForm.id && this.defHasPage == 1) return true\n    },\n    jsonTxt() {\n      return this.apiData.bodyType == 3 ? 'JSON Body' : 'XML Body'\n    },\n    sourceOptions() {\n      if (this.dataForm.hasPage && this.active == 1) return [{ label: '接口参数', value: 1 }, { label: '分页参数', value: 4 }, { label: '变量', value: 2 }, { label: '自定义', value: 3 }]\n      if (this.dataForm.hasPage && this.active == 2) return [{ label: '接口参数', value: 1 }, { label: '回显参数', value: 5 }, { label: '变量', value: 2 }, { label: '自定义', value: 3 }]\n      return [{ label: '接口参数', value: 1 }, { label: '变量', value: 2 }, { label: '自定义', value: 3 }]\n    },\n    stepList() {\n      this.key = +new Date()\n      this.pagingParameters = []\n      this.active == 1 ? this.pagingParameters = [\n        { value: 'currentPage', label: 'currentPage' },\n        { value: 'pageSize', value: 'pageSize' },\n        { value: 'keyword', value: 'keyword' },\n      ] : this.pagingParameters = [\n        { value: 'showKey', value: 'showKey' },\n        { value: 'showValue', value: 'showValue' },\n      ]\n      let base = ['基本信息', '数据配置'];\n      if (this.dataForm.type === 2) return base;\n      if (this.dataForm.type === 1 && this.dataForm.hasPage === 1) base = [...base, '数量统计', '数据回显'];\n      if (this.dataForm.type === 3 && this.dataForm.hasPage === 0) base = [...base, '异常验证'];\n      if (this.dataForm.type === 3 && this.dataForm.hasPage === 1) base = [...base, '数据回显', '异常验证'];\n      if (this.dataForm.type === 3 && this.dataForm.isPostPosition === 1) return base;\n      return [...base, '数据处理'];\n    },\n    sysVariableList() {\n      const list = [\n        { value: '@lotSnowID', tips: '批量生成不同雪花ID' },\n        { value: '@snowFlakeID', tips: \"系统生成雪花ID\" },\n        { value: '@currentUser', tips: \"当前用户\" },\n        { value: '@currentUsersAndSubordinates', tips: \"当前用户及下属\" },\n        { value: '@organization', tips: \"当前组织\" },\n        { value: '@currentOrganizationAndSuborganization', tips: \"当前组织及子组织\" },\n        { value: '@chargeorganization', tips: \"当前分管组织\" }\n      ]\n      const dataConfigList = [\n        { value: '@offsetSize', tips: \"开始数据条数\" },\n        { value: '@pageSize', tips: \"返回数据条数\" },\n      ]\n      const dataEchoList = [\n        { value: '@showKey', tips: \"回显字段查询key\" },\n        { value: '@showValue', tips: \"回显字段值\" },\n      ]\n      const keyword = { value: '@keyword', tips: \"关键词搜索\" }\n      if (!this.dataForm.hasPage) return list\n      if (this.active === 2) return [...list, keyword]\n      if (this.active === 3) return [...list, ...dataEchoList]\n      return [...list, ...dataConfigList, keyword]\n    },\n    getTreeData() {\n      const parameterJson = this.parameterJson.map(o => ({ ...o, fullName: o.field, parameter: 1, type: 1 }));\n      let tree = [\n        { id: 1, fullName: '接口参数', hasChildren: true, children: parameterJson },\n        { id: 2, fullName: '变量', hasChildren: true, children: this.sourceData },\n      ];\n      tree = tree.filter(o => o.children && o.children.length);\n      if (!this.dataForm.hasPage) return tree;\n      const page = {\n        id: 3,\n        fullName: '分页参数',\n        hasChildren: true,\n        children: [\n          { fullName: 'currentPage', id: 'currentPage', parameter: 1, type: 1 },\n          { fullName: 'pageSize', id: 'pageSize', parameter: 1, type: 1 },\n          { fullName: 'keyword', id: 'keyword', parameter: 1, type: 1 },\n        ],\n      };\n      const echo = {\n        id: 2,\n        fullName: '回显参数',\n        hasChildren: true,\n        children: [\n          { fullName: 'showKey', id: 'showKey', parameter: 1, type: 1 },\n          { fullName: 'showValue', id: 'showValue', parameter: 1, type: 1 },\n        ],\n      };\n      return [...tree, this.active == 1 ? page : echo];\n    },\n  },\n  methods: {\n    onIsPostPositionChange(e) {\n      this.dataForm.isPostPosition = e;\n      if (this.dataForm.isPostPosition && this.dataForm.hasPage) this.dataForm.hasPage = 0\n    },\n    onHasPageChange(e) {\n      this.dataForm.hasPage = e;\n      if (this.dataForm.isPostPosition && this.dataForm.hasPage) this.dataForm.isPostPosition = 0\n    },\n    getShowApiBox() {\n      if (this.active == 1 && this.dataForm.type == 3) return true;\n      if (this.active == 2 && this.dataForm.type == 3 && this.dataForm.hasPage) return true;\n      return false;\n    },\n    getShowCodeBox() {\n      if (this.getIsLastStep() && this.dataForm.type != 2) return true;\n      if (this.dataForm.type === 3) {\n        if (this.active === this.stepList.length - 1 && this.dataForm.isPostPosition == 1) return true;\n        if (this.active === this.stepList.length - 2 && this.dataForm.isPostPosition !== 1) return true;\n      }\n      return false;\n    },\n    getIsLastStep() {\n      return this.active === this.stepList.length - 1 && !(this.dataForm.type === 3 && this.dataForm.isPostPosition == 1) ? true : false;\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.fullName.indexOf(value) !== -1;\n    },\n    init(id, category) {\n      this.filterText = ''\n      Object.assign(this.$data, this.$options.data())\n      this.active = 0\n      this.dataForm.id = id || ''\n      this.formLoading = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        // 获取分类\n        this.$store.dispatch('base/getDictionaryData', { sort: 'DataInterfaceType' }).then((res) => {\n          this.selectData = res\n        })\n        // 获取数据库\n        getDataSourceListAll().then(res => {\n          const list = res.data.list || []\n          this.dbOptions = list.filter(o => o.children && o.children.length)\n          if (this.dataForm.id) {\n            this.formLoading = false\n            this.getFormData()\n          } else {\n            this.dataForm.category = category\n            this.formLoading = false\n            this.getTableList()\n          }\n          this.getSelector()\n        })\n      })\n    },\n    getFormData() {\n      getDataInterfaceInfo(this.dataForm.id).then(res => {\n        this.dataForm = res.data;\n        this.defHasPage = this.dataForm.hasPage\n        if (!this.dataForm.action) this.dataForm.action = 3\n        this.dataConfigJson = res.data.dataConfigJson ? JSON.parse(res.data.dataConfigJson) : JSON.parse(JSON.stringify(defaultJson));\n        this.dataCountJson = res.data.dataCountJson ? JSON.parse(res.data.dataCountJson) : JSON.parse(JSON.stringify(defaultJson));\n        this.dataEchoJson = res.data.dataEchoJson ? JSON.parse(res.data.dataEchoJson) : JSON.parse(JSON.stringify(defaultJson));\n        this.parameterJson = res.data.parameterJson ? JSON.parse(res.data.parameterJson) : [];\n        this.fieldJson = res.data.fieldJson ? JSON.parse(res.data.fieldJson) : [];\n        this.dataJsJson = res.data.dataJsJson;\n        this.dataExceptionJson = res.data.dataExceptionJson;\n        this.getTableList();\n        this.formLoading = false\n      })\n    },\n    getTableList() {\n      this.treeLoading = true\n      const query = {\n        linkId: this.dataConfigJson.sqlData.dbLinkId,\n        keyword: this.keyword,\n        pageSize: 1000000,\n      };\n      DataModelListAll(query).then(res => {\n        this.treeLoading = false;\n        this.treeData = res.data.list.map(o => ({\n          ...o,\n          fullName: o.tableName ? o.table + '(' + o.tableName + ')' : o.table,\n          isLeaf: false,\n          id: o.table,\n          icon: o.type == 1 ? 'icon-ym icon-ym-view' : 'icon-ym icon-ym-generator-tableGrid',\n        }));\n      }).catch(() => {\n        this.treeLoading = false;\n        this.treeData = []\n      })\n    },\n    handleApiData(apiData) {\n      if (apiData.bodyXml) apiData.body = apiData.bodyXml;\n      if (apiData.bodyJson) apiData.body = apiData.bodyJson;\n      if (Array.isArray(apiData.body)) apiData.body = JSON.stringify(apiData.body)\n    },\n    handleSubmit() {\n      if (!this.dataConfigJson.staticData && this.dataForm.type == 2) return this.$message.warning('请输入静态数据')\n      this.btnLoading = true\n      if (this.dataForm.type === 3) {\n        this.handleApiData(this.dataConfigJson.apiData);\n        if (this.dataForm.hasPage === 1) {\n          this.handleApiData(this.dataEchoJson.apiData);\n        }\n      }\n      const query = {\n        ...this.dataForm,\n        id: this.dataForm.id,\n        dataConfigJson: JSON.stringify(this.dataConfigJson),\n        dataCountJson: JSON.stringify(this.dataCountJson),\n        dataEchoJson: JSON.stringify(this.dataEchoJson),\n        dataJsJson: this.dataJsJson,\n        dataExceptionJson: this.dataExceptionJson,\n        fieldJson: JSON.stringify(this.fieldJson),\n        parameterJson: JSON.stringify(this.parameterJson),\n      };\n      const formMethod = this.dataForm.id ? updateDataInterface : createDataInterface\n      formMethod(query).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            this.btnLoading = false\n            this.$emit('close', true)\n          }\n        })\n      }).catch(() => {\n        this.btnLoading = false\n      })\n    },\n    handlePrev() {\n      this.active -= 1;\n      this.activeKey = '0';\n      if (this.dataForm.type == 1) this.setSqlData()\n    },\n    handleNext() {\n      if (this.active == 0) {\n        this.$refs['dataForm'].validate(valid => {\n          if (valid) this.handleNextFun();\n        })\n      } else {\n        if (this.dataForm.type === 1) {\n          if (!this.dataConfigJson.sqlData.sql && this.active == 1) return this.$message.warning('请输入SQL语句')\n          if (!this.dataCountJson.sqlData.sql && this.active == 2) return this.$message.warning('请输入SQL语句')\n          if (!this.dataEchoJson.sqlData.sql && this.active == 3) return this.$message.warning('请输入SQL语句')\n          this.handleNextFun();\n        } else if (this.dataForm.type == 3) {\n          if (this.active == 1 || (this.active == 2 && this.dataForm.hasPage)) {\n            this.$refs['dataForm'].validate(valid => {\n              if (valid) this.handleValidate()\n            })\n          } else {\n            this.handleNextFun()\n          }\n        }\n      }\n    },\n    handleNextFun() {\n      this.active += 1;\n      // SQL操作\n      if (this.dataForm.type === 1 && this.getIsLastStep()) this.setDataJsJson();\n      // API操作\n      if (this.dataForm.type === 3) {\n        if (this.active === 1 || (this.active === 2 && this.dataForm.hasPage)) this.activeKey = '0';\n        if (this.getIsLastStep()) this.setDataJsJson();\n        if (this.active === this.stepList.length - 2) this.setDataExceptionJson();\n      }\n      if (this.dataForm.type == 1) this.setSqlData()\n    },\n    handleValidate() {\n      const headerList = this.apiData.header || [];\n      const queryList = this.apiData.query || [];\n      for (let i = 0; i < headerList.length; i++) {\n        if (!headerList[i].field) return this.$message.warning('参数名称不能为空');\n      }\n      for (let i = 0; i < queryList.length; i++) {\n        if (!queryList[i].field) return this.$message.warning('参数名称不能为空');\n      }\n      if ((this.apiData.bodyType === 1 || this.apiData.bodyType === 2) && Array.isArray(this.apiData.body) && this.apiData.body.length) {\n        for (let i = 0; i < this.apiData.body.length; i++) {\n          if (!this.apiData.body[i].field) return this.$message.warning('参数名称不能为空');\n        }\n      }\n      this.handleNextFun();\n    },\n    setDataExceptionJson() {\n      if (!this.dataExceptionJson) this.dataExceptionJson = defaultDataExceptionJson;\n    },\n    setDataJsJson() {\n      if (!this.dataJsJson) this.dataJsJson = deepClone(defaultDataJsJson);\n    },\n    getShowTableBox() {\n      if (this.activeKey == '0' || this.activeKey == '1') return true;\n      if (this.activeKey == '2' && (this.apiData.bodyType == 1 || this.apiData.bodyType == 2)) {\n        this.$set(this.apiData, 'body', '')\n        return true;\n      }\n      return false;\n    },\n    /**左侧事件处理 start */\n    handleSelectTable(val) {\n      this.dataConfigJson.sqlData.dbLinkId = val\n      this.dataEchoJson.sqlData.dbLinkId = val\n      this.dataCountJson.sqlData.dbLinkId = val\n      this.getTableList();\n    },\n    handleNodeClick(data) {\n      const content = data.isLeaf ? data.field : data.table\n      if (this.active == 1) this.$refs.SQLEditorRef && this.$refs.SQLEditorRef.insert(content)\n      if (this.active == 2 || this.active == 3) this.$refs[this.active == 2 ? 'dataCountJson' : 'dataEchoJson'] && this.$refs[this.active == 2 ? 'dataCountJson' : 'dataEchoJson'].insert(content)\n    },\n    /**左侧事件处理 end */\n    getSelector() {\n      getSelector().then(res => {\n        this.sourceData = res.data || []\n      })\n    },\n    setSqlData() {\n      this.$nextTick(() => {\n        if (this.active == 1) this.$refs.SQLEditorRef && this.$refs.SQLEditorRef.changeEditor({ value: this.dataConfigJson.sqlData.sql, options: this.sqlOptions })\n        if (this.dataForm.hasPage && (this.active === 2 || this.active === 3)) {\n          const key = this.active === 2 ? 'dataCountJson' : 'dataEchoJson'\n          const data = this[key].sqlData.sql || ''\n          this.$refs[key] && this.$refs[key].changeEditor({ value: data, options: this.sqlOptions })\n        }\n      })\n    },\n    removeCommonTable(index) {\n      this.$confirm('此操作删除该参数, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        let ref = this.activeKey == 0 ? 'header' : this.activeKey == 1 ? 'query' : 'body'\n        this.apiData[ref].splice(index, 1)\n      }).catch(() => { });\n    },\n    bodyTreeNodeClick(data) {\n      if (data.hasChildren || data.type != 1) return\n      const val = data.field || data.fullName;\n      const insertVal = data.parameter == 1 ? '{' + val + '}' : '{@' + val + '}';\n      this.$refs.JSONEditorRef.insert(insertVal, true)\n    },\n    handleItemClick(item) {\n      if (!item.field) return\n      if (this.dataForm.type == 1) {\n        if (this.active == 1) this.$refs.SQLEditorRef.insert('{' + item.field + '}')\n        if (this.active === 2 || this.active === 3) {\n          const key = this.active === 2 ? 'dataCountJson' : 'dataEchoJson'\n          this.$refs[key].insert('{' + item.field + '}')\n        }\n      }\n      if (this.dataForm.type === 3) this.$refs.JSONEditorRef.insert('{' + item.field + '}')\n    },\n    onBtnTypeChange(val) {\n      this.filterText = \"\"\n      this.apiData.bodyType = val\n      this.apiData.bodyJson = '';\n      this.apiData.bodyXml = '';\n      this.apiData.body = [];\n      this.key2 = +new Date()\n    },\n    tabsHandleClick(e) {\n      this.activeKey = e.index\n      this.addTableName = this.activeKey == '1' ? '添加Query参数' : this.activeKey == '2' ? '添加Body参数' : '添加Header参数'\n      let data = {\n        addTableName: this.addTableName,\n        activeKey: this.activeKey\n      }\n      this.$nextTick(() => {\n        this.$refs.CommonTable && this.$refs.CommonTable.changTable(data)\n      })\n    },\n    onDataTypeChange(val) {\n      this.dataForm.hasPage = 0\n      this.dataForm.action = 3\n      this.dataForm.type = val\n    },\n    onMethodChange(val) {\n      if (val != 3) this.dataForm.hasPage = 0\n      this.dataForm.action = val\n    },\n    loadNode(node, resolve) {\n      if (node.level === 0) {\n        return resolve(this.treeData)\n      }\n      DataModelFieldList(this.dataConfigJson.sqlData.dbLinkId, node.data.table).then(res => {\n        resolve(res.data.list.map(o => ({ ...o, isLeaf: true })))\n      })\n    },\n    goBack() {\n      this.$emit('close')\n    },\n    /**右侧表格操作 start */\n    addOrUpdateHandle(item, type) {\n      this.sqlType = type || 0\n      const data = item ? JSON.parse(JSON.stringify(item)) : null\n      const parameters = type == 1 ? this.parameterJson : this.fieldJson\n      this.fieldFormVisible = true\n      this.$nextTick(() => {\n        this.$refs.fieldForm.init(data, parameters, type)\n      })\n    },\n    addParameter(type, item, tableType) {\n      let targetJson = tableType == 1 ? this.parameterJson : this.fieldJson;\n      if (type === 'add') return targetJson.push(deepClone(item));\n      let index = targetJson.findIndex(obj => obj.id === item.id);\n      if (index !== -1) this.$set(targetJson, index, deepClone(item));\n    },\n    removeParameter(index, type) {\n      this.$confirm('此操作删除该参数, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this[type == 1 ? 'parameterJson' : 'fieldJson'].splice(index, 1)\n      }).catch(() => { });\n    },\n    /**右侧表格操作 end */\n    handleShowPageExplain() {\n      this.pageExplainVisible = true\n      this.$nextTick(() => {\n        this.$refs.pageExplain.init()\n      })\n    },\n    getShowSqlBox() {\n      if (this.dataForm.type !== 1) return false\n      if (this.active === 1) return true\n      if (this.dataForm.hasPage && (this.active === 2 || this.active === 3)) return true\n    },\n    search() {\n      this.getTableList();\n    },\n    addHandle() {\n      this.list.push({ field: '', defaultValue: '', dataType: 'varchar', source: this.dataForm.isPostPosition ? 3 : 1 });\n    },\n    handleSysNodeClick(data) {\n      this.$refs.SQLEditorRef && this.$refs.SQLEditorRef.insert(data)\n    },\n  }\n}\n",null]}