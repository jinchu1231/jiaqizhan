{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/AddDataNode.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/AddDataNode.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FlowFormModal from './FormListModal';\nimport { sourceTypeOptions, logicOptions, symbolOptions } from '../FlowCard/define.js';\nimport MsgDialog from '@/components/Process/PropPanel/msgDialog'\nconst addRuleOptions = [\n  { id: 0, fullName: '不新增数据' },\n  { id: 1, fullName: '新增一条数据' },\n];\nconst emptyChildItem = { field: '', symbol: '', fieldValueType: 1, fieldValue: undefined, jnpfKey: '', fieldValueJnpfKey: '', cellKey: +new Date() };\nconst emptyItem = { logic: 'and', groups: [emptyChildItem] };\n\nexport default {\n  name: 'addDataNode',\n  components: { FlowFormModal, MsgDialog },\n  props: {\n    formConf: {\n      type: Object,\n      default: () => { }\n    },\n    integrateType: {\n      type: Number,\n      default: 1\n    },\n    formFieldsOptions: {\n      type: Array,\n      default: () => []\n    },\n    getFormFieldList: {\n      type: Function,\n      default: null\n    },\n    usedFormItems: {\n      type: Array,\n      default: () => []\n    },\n    flowOptions: {\n      type: Array,\n      default: () => []\n    },\n  },\n  data() {\n    return {\n      addRuleOptions,\n      emptyItem,\n      sourceTypeOptions,\n      logicOptions,\n      symbolOptions,\n      emptyChildItem,\n      transferList: JSON.parse(JSON.stringify(this.formConf.transferList)),\n      ruleList: JSON.parse(JSON.stringify(this.formConf.ruleList)),\n      addRule: JSON.parse(JSON.stringify(this.formConf.addRule)),\n      ruleMatchLogic: JSON.parse(JSON.stringify(this.formConf.ruleMatchLogic)),\n      flowId: JSON.parse(JSON.stringify(this.formConf.flowId)),\n    }\n  },\n  computed: {\n    getRuleOptions() {\n      let formFieldList = this.formConf.formFieldList.filter(o => o.id.indexOf('-') < 0)\n      return formFieldList.filter(o => !['relationFormAttr', 'popupAttr', 'uploadFile', 'uploadImg', 'colorPicker', 'editor'].includes(o.__config__.jnpfKey))\n    }\n  },\n  methods: {\n    onChangeSourceValue(item) {\n      if (item.sourceValue) item.sourceValue = undefined\n    },\n    getItem() {\n      this.formConf.flowId = this.flowId\n      let item = {\n        transferList: this.transferList,\n        ruleList: this.ruleList,\n      }\n      if (this.integrateType == 2) {\n        item.addRule = this.addRule\n        this.formConf.ruleMatchLogic = this.ruleMatchLogic\n      }\n      return item\n    },\n    onChangeUpdate() {\n      this.$forceUpdate()\n    },\n    onFormIdChange(id, item) {\n      this.ruleList = []\n      this.formConf.ruleList = []\n      if (this.integrateType != 1) {\n        this.ruleMatchLogic = 'and'\n        let emptyItem = JSON.parse(JSON.stringify(this.emptyItem))\n        emptyItem.groups[0].symbol = '=='\n        this.formConf.ruleList.push(emptyItem);\n      }\n      if (!id) return this.handleNull();\n      this.formConf.formName = item.fullName;\n      this.formConf.formId = id;\n      this.formConf.enableFlow = item.enableFlow;\n      this.formConf.flowId = ''\n      this.transferList = [];\n      this.getFormFieldList(id, 'addData');\n    },\n    handleNull() {\n      this.formConf.formName = '';\n      this.formConf.formId = '';\n      this.formConf.enableFlow = 0;\n      this.formConf.formFieldList = [];\n      this.transferList = [];\n    },\n    addTransferItem() {\n      this.transferList.push({ targetField: '', targetFieldLabel: '', sourceType: 1, sourceValue: '', required: false });\n    },\n    delTransferItem(index) {\n      this.transferList.splice(index, 1);\n    },\n    addItem(index) {\n      let emptyChildItem = JSON.parse(JSON.stringify(this.emptyChildItem))\n      if (this.integrateType != 1) emptyChildItem.symbol = '=='\n      this.ruleList[index].groups.push(emptyChildItem);\n    },\n    delItem(index, childIndex) {\n      if (this.ruleList.length <= 1 && this.ruleList[0].groups.length <= 1) return this.$message.error('必须保留一个条件');\n      this.ruleList[index].groups.splice(childIndex, 1);\n    },\n    addGroup() {\n      let emptyItem = JSON.parse(JSON.stringify(this.emptyItem))\n      if (this.integrateType != 1) emptyItem.groups[0].symbol = '=='\n      this.ruleList.push(emptyItem);\n    },\n    delGroup(index) {\n      if (this.ruleList.length <= 1) return this.$message.error('必须保留一个条件');\n      this.ruleList.splice(index, 1);\n    },\n    onFieldChange(item, val, index, childIndex) {\n      item.symbol = ''\n      let data = this.getRuleOptions.filter(o => o.__vModel__ == val)[0];\n      if (!val) {\n        item.jnpfKey = '';\n        if (item.fieldValueType == 2) {\n          item.fieldValue = undefined;\n\n          item.fieldValueJnpfKey = '';\n        }\n        return;\n      }\n      item.jnpfKey = data.__config__.jnpfKey;\n      const newItem = JSON.parse(JSON.stringify(this.emptyChildItem));\n      for (let key of Object.keys(newItem)) {\n        newItem[key] = item[key];\n      }\n      item = { ...newItem, ...data };\n      if (item.fieldValueType != 1) {\n        item.fieldValue = undefined;\n        item.fieldValueJnpfKey = '';\n      }\n      if (this.integrateType != 1) item.symbol = '=='\n      this.ruleList[index].groups[childIndex] = item;\n      this.onChangeUpdate()\n    },\n    getTargetOptions(index) {\n      let ignoreOptions = [];\n      for (let i = 0; i < this.transferList.length; i++) {\n        const e = this.transferList[i];\n        if (e.targetField && index !== i) ignoreOptions.push(e.targetField);\n      }\n      const list = this.formConf.formFieldList.filter(o => !ignoreOptions.includes(o.id));\n      return list;\n    }\n  }\n}\n\n",null]}