{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/entrust/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/entrust/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.regexp.split\");\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nvar _FlowDelegate = require(\"@/api/workFlow/FlowDelegate\");\nvar _FlowEngine = require(\"@/api/workFlow/FlowEngine\");\nvar _FlowSelect = _interopRequireDefault(require(\"../components/FlowSelect.vue\"));\nvar _vuex = require(\"vuex\");\nvar _GradeUserSelect = _interopRequireDefault(require(\"../../permission/gradeManage/GradeUserSelect\"));\nvar _user = require(\"@/api/permission/user\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  components: {\n    FlowSelect: _FlowSelect.default,\n    gradeUserSelect: _GradeUserSelect.default\n  },\n  data: function data() {\n    var _this = this;\n    var checkStartTime = function checkStartTime(rule, value, callback) {\n      if (!_this.dataForm.endTime) {\n        callback();\n      } else {\n        if (_this.dataForm.endTime < value) {\n          callback(new Error('开始日期应该小于结束日期'));\n        } else {\n          _this.$refs.dataForm.validateField('endTime');\n          callback();\n        }\n      }\n    };\n    var checkEndTime = function checkEndTime(rule, value, callback) {\n      if (!_this.dataForm.startTime) {\n        callback();\n      } else {\n        if (_this.dataForm.startTime > value) {\n          callback(new Error('结束日期应该大于开始日期'));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      visible: false,\n      pickerOptions: {\n        disabledDate: function disabledDate(time) {\n          return new Date(time).getTime() < new Date().getTime() - 86400000;\n        }\n      },\n      dataForm: {\n        id: '',\n        userId: '',\n        toUserId: '',\n        flowId: [],\n        description: '',\n        startTime: '',\n        endTime: '',\n        flowName: '',\n        toUserName: '',\n        type: []\n      },\n      dataRule: {\n        userId: [{\n          required: true,\n          message: '委托人不能为空',\n          trigger: 'click'\n        }],\n        toUserId: [{\n          required: true,\n          message: '受委托人不能为空',\n          trigger: 'click'\n        }],\n        type: [{\n          required: true,\n          message: '委托类型不能为空',\n          trigger: 'change'\n        }],\n        startTime: [{\n          required: true,\n          message: '开始时间不能为空',\n          trigger: 'change'\n        }, {\n          validator: checkStartTime,\n          trigger: 'change'\n        }],\n        endTime: [{\n          required: true,\n          message: '结束时间不能为空',\n          trigger: 'change'\n        }, {\n          validator: checkEndTime,\n          trigger: 'change'\n        }]\n      },\n      loading: false,\n      btnLoading: false,\n      flowEngineList: [],\n      typeOptions: [{\n        value: \"0\",\n        label: '发起委托'\n      }, {\n        value: \"1\",\n        label: '审批委托'\n      }],\n      isGradeUser: 2,\n      //0管理员，1分级管理员，2普通用户\n      myNameAccount: ''\n    };\n  },\n  computed: _objectSpread({}, (0, _vuex.mapGetters)(['userInfo'])),\n  watch: {},\n  created: function created() {},\n  methods: {\n    init: function init(id) {\n      var _this2 = this;\n      this.$nextTick(function () {\n        _this2.$refs['dataForm'].resetFields();\n      });\n      this.dataForm.id = id || '';\n      this.visible = true;\n      this.loading = true;\n      this.myNameAccount = this.userInfo.userName + '/' + this.userInfo.userAccount;\n      this.dataForm.userId = this.userInfo.userAccount;\n      this.dataForm.userName = this.myNameAccount;\n      //初始化委托人组件\n      // if (this.userInfo.isAdministrator) {\n      //   this.isGradeUser = 0\n      // } else {\n      //   getListByAuthorize('0', null).then(res => {\n      //     if (res.data.list.length) {\n      //       this.isGradeUser = 1\n      //     }\n      //     if (this.isGradeUser == 2) {\n      //       this.myNameAccount = this.userInfo.userName + '/' + this.userInfo.userAccount\n      //       this.dataForm.userId = this.userInfo.userAccount\n      //       this.dataForm.userName = this.myNameAccount\n      //     }\n      //   })\n      // }\n      //初始化流程列表\n      this.getFlowEngineList();\n    },\n    getFlowEngineList: function getFlowEngineList() {\n      var _this3 = this;\n      (0, _FlowEngine.FlowEngineListAll)().then(function (res) {\n        _this3.flowEngineList = res.data.list;\n        //初始化数据\n        if (_this3.dataForm.id) {\n          (0, _FlowDelegate.FlowDelegateInfo)(_this3.dataForm.id).then(function (res) {\n            _this3.dataForm = res.data;\n            _this3.dataForm.flowId = _this3.dataForm.flowId ? _this3.dataForm.flowId.split(\",\") : [];\n            _this3.myNameAccount = _this3.dataForm.userName;\n          });\n        }\n        _this3.loading = false;\n      });\n    },\n    dataFormSubmit: function dataFormSubmit() {\n      var _this4 = this;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          _this4.btnLoading = true;\n          var formMethod = _this4.dataForm.id ? _FlowDelegate.Update : _FlowDelegate.Create;\n          var params = _objectSpread({}, _this4.dataForm);\n          params.flowId = _this4.dataForm.flowId ? _this4.dataForm.flowId.join(\",\") : \"\";\n          if (_this4.isGradeUser == 2) {\n            params.userId = _this4.userInfo.userId;\n            params.userName = _this4.myNameAccount;\n          }\n          if (!params.flowId) {\n            params.flowName = \"全部流程\";\n          }\n          formMethod(params).then(function (res) {\n            _this4.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1000,\n              onClose: function onClose() {\n                _this4.visible = false;\n                _this4.btnLoading = false;\n                _this4.$emit('refreshDataList');\n              }\n            });\n          }).catch(function () {\n            _this4.btnLoading = false;\n          });\n        }\n      });\n    },\n    handleChange: function handleChange(val) {\n      if (!val) {\n        this.dataForm.flowName = '';\n        return;\n      }\n      var active = {};\n      for (var i = 0; i < this.flowEngineList.length; i++) {\n        var item = this.flowEngineList[i];\n        if (item.children && item.children.length) {\n          for (var j = 0; j < item.children.length; j++) {\n            if (item.children[j].id === val) {\n              active = item.children[j];\n              break;\n            }\n          }\n        }\n      }\n      this.dataForm.flowName = active.fullName + '/' + active.enCode;\n    },\n    onChange: function onChange(id, selectedData) {\n      if (!id) return this.dataForm.toUserName = '';\n      this.dataForm.toUserName = selectedData.fullName;\n    },\n    onChangeUser: function onChangeUser(id, selectedData) {\n      if (!id) return this.dataForm.userName = '';\n      this.dataForm.userName = selectedData.fullName;\n    },\n    changeName: function changeName(listData) {\n      if (listData && listData.length) {\n        var arr = [];\n        listData.forEach(function (item) {\n          arr.push(item.fullName + \"/\" + item.enCode);\n        });\n        this.dataForm.flowName = arr.join(\",\");\n      } else {\n        this.dataForm.flowName = \"全部流程\";\n      }\n    }\n  }\n};",null]}