{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/ColumnDesign/CustomBtn.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/ColumnDesign/CustomBtn.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDrawingList } from '@/components/Generator/utils/db'\nimport { getFeatureSelector, getFormDataFields } from '@/api/onlineDev/visualDev'\nimport JNPFCodeEditor from '@/components/JNPFEditor/monaco'\nimport InterfaceDialog from '@/components/Process/PropPanel/InterfaceDialog'\nimport ScriptDemo from '@/components/Generator/index/ScriptDemo';\nimport { systemComponentsList } from '@/components/Generator/generator/comConfig'\nconst defaultFunc = '({ data, index, refresh, onlineUtils }) => {\\r\\n   \\r\\n}'\nexport default {\n  components: { JNPFCodeEditor, InterfaceDialog, ScriptDemo },\n  data() {\n    return {\n      visible: false,\n      popupWidthOptions: ['600px', '800px', '1000px', '40%', '50%', '60%', '70%', '80%'],\n      treeData: [],\n      fieldOptions: [],\n      parameterSource: [{ label: '字段', value: 1 }, { label: '自定义', value: 2 }, { label: '为空', value: 3 }],\n      showType: 'pc',\n      modelId: '',\n      options: {\n        language: 'javascript'\n      },\n      dataForm: {\n        btnType: 1,\n        modelId: \"\",\n        popupTitle: \"自定义操作\",\n        popupType: \"dialog\",\n        popupWidth: \"800px\",\n        formOptions: [],\n        customBtn: false,\n        func: \"\",\n        interfaceId: \"\",\n        interfaceName: \"\",\n        templateJson: [],\n        useConfirm: false,\n        confirmTitle: \"此操作将通过接口处理\",\n      },\n      dataRule: {\n        btnType: [\n          { required: true, message: '类型不能为空', trigger: 'change' }\n        ],\n        modelId: [\n          { required: true, message: '表单不能为空', trigger: 'click' }\n        ],\n        popupTitle: [\n          { required: true, message: '弹窗标题不能为空', trigger: 'input' }\n        ],\n        interfaceId: [\n          { required: true, message: '数据接口不能为空', trigger: 'change' }\n        ],\n        confirmTitle: [\n          { required: true, message: '确认框不能为空', trigger: 'input' }\n        ],\n      },\n      webType: \"\",\n      columnOptions: []\n    }\n  },\n  computed: {\n    formFieldsOptions() {\n      if (this.webType == 4) return this.columnOptions\n      const noAllowList = ['table', 'uploadImg', 'uploadFile', 'billRule', 'relationForm', 'popupSelect', 'createUser', 'createTime', 'modifyUser', 'modifyTime', ...systemComponentsList]\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.jnpfKey !== 'table' && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__vModel__ && !noAllowList.includes(data.__config__.jnpfKey)) list.push({ fullName: data.__config__.label, id: data.__vModel__, ...data })\n      }\n      loop(getDrawingList())\n      list.unshift({ fullName: '@表单ID', id: '@formId' })\n      return list;\n    }\n  },\n  methods: {\n    init(showType, activeItem, webType, columnOptions) {\n      this.webType = webType\n      this.columnOptions = columnOptions || []\n      this.showType = showType || 'pc'\n      this.visible = true\n      this.$nextTick(() => {\n        this.resetData()\n        this.dataForm = Object.assign(this.dataForm, JSON.parse(JSON.stringify(activeItem)))\n        this.getFeatureSelector()\n        if (this.dataForm.btnType == 2) this.initEditor()\n        if (this.dataForm.modelId) this.getFieldOptions()\n      })\n    },\n    initEditor() {\n      this.$nextTick(() => {\n        this.$refs.CodeEditor.changeEditor({\n          value: this.dataForm.func,\n          options: this.options\n        })\n      });\n    },\n    getFeatureSelector() {\n      getFeatureSelector({ type: 1, webType: '1,2', enableFlow: 0, isRelease: 1 }).then(res => {\n        this.treeData = res.data.list\n      })\n    },\n    onModeIdChange(val) {\n      this.clearField()\n      this.dataForm.relationField = ''\n      if (!val) {\n        this.fieldOptions = []\n        return\n      }\n      if (this.modelId != val && this.dataForm.formOptions.length) {\n        this.dataForm.formOptions.forEach(ele => {\n          ele.field = ''\n        })\n      }\n      this.getFieldOptions()\n      this.modelId = val\n    },\n    clearField() {\n      this.dataForm.formOptions = this.dataForm.formOptions.map(o => ({ ...o, field: '' }));\n      this.dataForm.templateJson = this.dataForm.templateJson.map(o => ({ ...o, relationField: o.sourceType === 1 ? '' : o.relationField }));\n    },\n    getFieldOptions() {\n      if (!this.dataForm.modelId) return\n      getFormDataFields(this.dataForm.modelId, 1).then(res => {\n        this.fieldOptions = res.data.list || []\n      })\n    },\n    onInterfaceChange(id, row) {\n      if (!id) {\n        this.dataForm.interfaceId = ''\n        this.dataForm.interfaceName = ''\n        this.dataForm.templateJson = []\n        return\n      }\n      if (this.dataForm.interfaceId === id) return\n      this.dataForm.interfaceId = id\n      this.dataForm.interfaceName = row.fullName\n      this.dataForm.templateJson = row.templateJson ? row.templateJson.map(o => ({\n        ...o,\n        relationField: '',\n        sourceType: 1\n      })) : []\n    },\n    addRelationOption() {\n      this.dataForm.formOptions.push({\n        currentField: '',\n        field: '',\n      })\n    },\n    handleDel(index) {\n      this.dataForm.formOptions.splice(index, 1)\n    },\n    confirm() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          if (this.dataForm.btnType == 1) {\n            if (!this.dataForm.formOptions.length) return this.$message({ message: '赋值规则不能为空', type: 'warning' });\n            if (this.dataForm.formOptions.length) {\n              for (let i = 0; i < this.dataForm.formOptions.length; i++) {\n                const element = this.dataForm.formOptions[i];\n                if (!element.currentField) return this.$message({ message: `赋值规则第${i + 1}行当前表单值不能为空`, type: 'warning' });\n                if (!element.field) return this.$message({ message: `赋值规则第${i + 1}行弹窗表单值不能为空`, type: 'warning' });\n              }\n            }\n          }\n          this.$emit('updateCustomBtn', this.dataForm)\n          this.closeDialog()\n        }\n      });\n    },\n    closeDialog() {\n      this.$emit('closeDialog')\n      this.visible = false\n    },\n    resetData() {\n      this.dataForm.modelId = \"\"\n      this.dataForm.popupTitle = \"自定义操作\"\n      this.dataForm.popupType = \"dialog\"\n      this.dataForm.popupWidth = \"800px\"\n      this.dataForm.formOptions = []\n      this.dataForm.customBtn = false\n      this.dataForm.func = defaultFunc\n      this.dataForm.interfaceId = \"\"\n      this.dataForm.interfaceName = \"\"\n      this.dataForm.templateJson = []\n      this.dataForm.useConfirm = false\n      this.dataForm.confirmTitle = \"此操作将通过接口处理\"\n      this.fieldOptions = []\n    },\n    onBtnTypeChange(val) {\n      this.$refs['dataForm'].clearValidate()\n      this.resetData()\n      if (val == 2) this.initEditor()\n    },\n    visibleChange(val) {\n      if (!val) return\n      if (!this.dataForm.modelId && this.dataForm.btnType == 1) this.$message.warning('请先选择表单')\n    }\n  }\n}\n",null]}