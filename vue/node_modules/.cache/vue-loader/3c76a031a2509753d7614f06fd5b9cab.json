{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/printDev/ts-print-templater/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/printDev/ts-print-templater/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TsDesignerTinymce from \"./ts-designer-tinymce\";\nimport { getDictionaryTypeSelector } from \"@/api/systemData/dictionary\"\nimport pageSize from \"./pageSize\";\nexport default {\n  name: \"tsPrintTemplater\",\n  components: { TsDesignerTinymce, pageSize },\n  props: {\n    value: String,\n    type: Number,\n    treeData: {\n      type: Array,\n      default: () => []\n    },\n    pageParam: {\n      type: Object,\n      default: {}\n    }\n  },\n  data() {\n    return {\n      node: '',\n      btnLoading: false,\n      formLoading: false,\n      dialogVisible: false,\n      dicOptions: [],\n      showEdit: false,\n      tabs: [],\n      initConfig: {},\n      menuList: [],\n      init: {},\n      menuIndex: \"\",\n      content: \"\",\n      activeTab: \"\",\n      richHeight: document.documentElement.clientHeight - 42,\n      systemData: [\n        { fullName: \"打印人员\", id: \"systemPrinter\" },\n        { fullName: \"打印时间\", id: \"systemPrintTime\" },\n        { fullName: \"审批内容\", id: \"systemApprovalContent\" },\n        { fullName: \"图片\", id: \"img\" },\n        { fullName: \"二维码\", id: \"qrCode\" },\n        { fullName: \"条形码\", id: \"barCode\" },\n      ],\n      parameter: [\n        { fullName: \"千位分隔符(字段或数字,小数位数)\", id: \"thousands\" },\n        { fullName: \"大写金额(字段或数字)\", id: \"isAmountChinese\" },\n        { fullName: \"数据字典(字段,字典分类)\", id: \"jnpfDictionary\" },\n        { fullName: \"日期选择(字段,日期格式)\", id: \"jnpfDate\" }\n      ],\n      defaultProps: {\n        children: \"children\",\n        label: \"fullName\"\n      },\n      dataForm: {\n        dictionaryType: ''\n      },\n      dataRule: {\n        dictionaryType: [{ required: true, message: \"数据字典不能为空\", trigger: \"click\" }]\n      },\n    };\n  },\n  watch: {\n    pageParam: {\n      handler(val) {\n        this.getEditConfig(val)\n      },\n      immediate: true,\n      deep: true\n    },\n    value: {\n      handler(val) {\n        if (val != this.content) this.content = val\n      },\n      immediate: true,\n      deep: true\n    },\n    content() {\n      this.$emit(\"input\", this.content);\n    }\n  },\n  computed: {\n    editor() {\n      return this.$refs.createTinymce.editor;\n    },\n    newData() {\n      return this.treeData;\n    },\n    newSysData() {\n      let data = this.systemData;\n      if (this.type == 2) {\n        data = this.systemData.filter(o => o.id !== \"systemApprovalContent\");\n      }\n      return data;\n    }\n  },\n  methods: {\n    handleNodeClick(item, node) {\n      if (item.children != null && item.children.length > 0) return;\n      const tableParent = this.getCurrentParentByTag('table[data-wk-table-tag=\"table\"]');\n      if (!tableParent) {\n        if (item.id == 'jnpfDictionary') return this.getDictionary(node)\n        this.editor.insertContent(this.getSpanNode(item, node));\n        this.content = this.editor.getContent({ format: \"html\" });\n      }\n    },\n    getDictionary(node) {\n      this.node = node;\n      this.dialogVisible = true\n      this.dataForm.dictionaryType = ''\n      getDictionaryTypeSelector().then(res => {\n        this.dicOptions = res.data.list.filter(o => o.children && o.children.length);\n      });\n    },\n    submit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.editor.insertContent(this.getSpanNode({ id: 'jnpfDictionary' }, this.node));\n          this.content = this.editor.getContent({ format: \"html\" });\n          this.dialogVisible = false\n        }\n      })\n    },\n    getEditConfig(e) {\n      if (!e) {\n        e = {}\n        e.mt = 10\n        e.mb = 10\n        e.ml = 10\n        e.mr = 10\n        e.width = 210\n        e.height = 297\n        e.direction = \"纵向\"\n        e.type = '2'\n        this.$emit(\"pageParamInit\", e)\n      }\n      this.$emit(\"pageParamChange\", e)\n      let mt = e.mt\n      let mb = e.mb\n      let ml = e.ml\n      let mr = e.mr\n      let width = e.width ? e.width : 297\n      let height = e.height ? e.height : 'calc(100% - 10px)'\n      this.initConfig = {\n        menubar: false,\n        toolbar_sticky: true,\n        statusbar: false,\n        content_style: `html {\n          background: #fff;\n          padding: 20px 0;\n          box-sizing: border-box;\n          padding-bottom:20px;\n        }\n        body {\n          font-family: simsun, serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n          width: ${width}mm;\n          height: ${height}mm;\n          padding: ${mt}mm ${mr}mm ${mb}mm ${ml}mm !important;\n          margin: 0 auto !important;\n          background: white;\n          min-height: 100%;\n          box-sizing: border-box;\n          box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);\n          word-break:break-all;\n        }\n        .wk-tiny-color--customer {\n          color: #005AF3;\n        }\n        .wk-tiny-color--contacts {\n          color: #1CB24C;\n        }\n        .wk-tiny-color--business {\n          color: #FF852F;\n        }\n        .wk-tiny-color--contract {\n          color: #FF4A43;\n        }\n        .wk-tiny-color--receivables {\n          color: #FFAE46;\n        }\n        .wk-tiny-color--product {\n          color: #00D0D4;\n        }\n        .wk-tiny-color--common {\n          color: #2362FB;\n        }\n        p { margin: 5px 0; line-height: 1.5;}`,\n        table_advtab: false,\n        table_cell_advtab: false,\n        table_row_advtab: false,\n        toolbar: {\n          type: [String, Array],\n          default: \"code | lineheight | undo redo \"\n        },\n        setup: editor => {\n          let _this = this;\n          editor.ui.registry.addButton(\"page\", {\n            text: `<i class=\"el-icon-s-order\" style=\"font-size:18px\"></i>`,\n            tooltip: \"纸张大小\",\n            onAction: function () {\n              _this.$refs.pageSize.dialogFormVisible = true;\n            }\n          });\n          editor.on(\"init\", function () {\n            editor.execCommand(\"mceFocus\");\n          });\n          editor.on(\"keydown\", e => {\n            this.selectNodes = null;\n            /* Backspace key and del key*/\n            if (e.keyCode === 8 || e.keyCode == 46) {\n              const currentNode = editor.selection.getNode();\n              if (\n                currentNode.getAttribute(\"data-wk-table-td-tag\") === \"value\"\n              ) {\n                e.preventDefault();\n                return false;\n              } else if (currentNode.nodeName == \"SPAN\") {\n                if (currentNode.hasAttribute(\"contenteditable\")) {\n                  e.preventDefault();\n                  editor.dom.remove(currentNode);\n                  return false;\n                } else {\n                  const span = this.getCurrentParentByTag(\n                    \"span[contenteditable]\"\n                  );\n                  if (span) {\n                    e.preventDefault();\n                    editor.dom.remove(span);\n                    return false;\n                  }\n                  if (currentNode.getAttribute(\"data-tag\") === \"thousands\" || currentNode.getAttribute(\"data-tag\") === \"isAmountChinese\") {\n                    if (currentNode.innerHTML.length == 1) {\n                      e.preventDefault();\n                      editor.dom.remove(currentNode);\n                      return false;\n                    }\n                  }\n                }\n              }\n            } else if (e.keyCode == \"65\" && (e.metaKey || e.ctrlKey)) {\n              // 全选\n              this.selectNodes = editor.selection.getNode();\n              this.setSpanEditAttr(this.selectNodes, true);\n            } else {\n              // table 里面不允许写内容\n              const currentNode = editor.selection.getNode();\n              if (\n                currentNode.getAttribute(\"data-wk-table-td-tag\") === \"value\"\n              ) {\n                // 只允许输入上下左右\n                if (e.keyCode !== 37 && e.keyCode !== 38 && e.keyCode !== 39 && e.keyCode !== 40) {\n                  e.preventDefault();\n                  return false;\n                }\n              } else if (currentNode.nodeName == \"SPAN\") {\n                if (currentNode.hasAttribute(\"contenteditable\")) {\n                  if (currentNode.getAttribute(\"contenteditable\")) {\n                    e.preventDefault();\n                    currentNode.setAttribute(\"contenteditable\", false);\n                    return false;\n                  }\n                  return false;\n                } else {\n                  const span = this.getCurrentParentByTag(\n                    \"span[contenteditable]\"\n                  );\n                  if (span) {\n                    if (span.getAttribute(\"contenteditable\")) {\n                      e.preventDefault();\n                      span.setAttribute(\"contenteditable\", false);\n                      return false;\n                    }\n                    return false;\n                  }\n                }\n              }\n              if (e.keyCode == 37 && e.keyCode == 38 && e.keyCode == 39 && e.keyCode == 40) this.cancelSpanEdit();\n            }\n          });\n          editor.on(\"mousedown\", () => {\n            this.cancelSpanEdit();\n          });\n          editor.on(\"mouseup\", e => {\n            const selection = editor.selection.getSel();\n            if (\n              e.target.hasAttribute(\"contenteditable\") &&\n              selection.isCollapsed\n            ) {\n              this.cancelSpanEdit();\n            } else {\n              if (!selection.isCollapsed) {\n                this.selectNodes = editor.selection.getNode();\n                this.setSpanEditAttr(this.selectNodes, true);\n              } else {\n                this.cancelSpanEdit();\n              }\n            }\n          });\n        }\n      };\n    },\n    cancelSpanEdit() {\n      if (this.selectNodes) {\n        setTimeout(() => {\n          const selection = this.editor.selection.getSel();\n          if (!selection.isCollapsed) {\n            this.setSpanEditAttr(this.selectNodes, false);\n            this.selectNodes = null;\n          }\n        }, 300);\n      }\n    },\n    setSpanEditAttr(node, canEdit) {\n      if (node && node.hasAttribute('contenteditable')) {\n        if (node.getAttribute('contenteditable') != canEdit) node.setAttribute('contenteditable', canEdit)\n      }\n      if (node && node.children) {\n        for (let index = 0; index < node.children.length; index++) {\n          const element = node.children[index];\n          if (element.children) {\n            this.setSpanEditAttr(element, canEdit)\n          } else if (element.hasAttribute('contenteditable')) {\n            if (node.getAttribute('contenteditable') != canEdit) element.setAttribute('contenteditable', canEdit)\n          }\n        }\n      }\n    },\n    getCurrentParentByTag(tag) {\n      return this.editor.dom.getParent(this.editor.selection.getNode(), tag);\n    },\n    getSpanNode(item, node) {\n      const parent = node.parent.data != null && node.parent.data.id != null ? node.parent.data.id : \"null\";\n      if (item.id == \"img\" || item.id == \"barCode\" || item.id == \"qrCode\") return `&lt;${item.id} width='100' height='100'&gt;&lt;/${item.id}&gt;`;\n      if (item.id == 'isAmountChinese') return `<span  data-tag='isAmountChinese'>大写金额(${parent})<span>`\n      if (item.id == 'thousands') return `<span  data-tag='thousands'>千位分隔符(${parent},2)<span>`\n      if (item.id == 'jnpfDictionary') return `<span  data-tag='jnpfDictionary'>数据字典(${parent},${this.dataForm.dictionaryType})<span>`\n      if (item.id == 'jnpfDate') return `<span  data-tag='jnpfDate'>日期选择(${parent},\"yyyy-MM-dd\")<span>`\n      return `<span data-tag=\"${parent}.${item.id}\" class=\"wk-print-tag-wukong ${this.getSpanColorClass()}\" contenteditable=\"false\">{${item.id}}</span>`;\n    },\n    getSpanColorClass() {\n      const color = [\"customer\", \"contacts\", \"business\", \"contract\", \"receivables\", \"product\"].includes(this.activeTab) ? this.activeTab : \"common\";\n      return `wk-tiny-color--${color}`;\n    }\n  }\n};\n",null]}