{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/extend/projectGantt/Task.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/extend/projectGantt/Task.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.number.constructor\");\nrequire(\"core-js/modules/es6.regexp.split\");\nvar _dayjs = _interopRequireDefault(require(\"dayjs\"));\nvar _isBetween = _interopRequireDefault(require(\"dayjs/plugin/isBetween\"));\nvar _projectGantt = require(\"@/api/extend/projectGantt\");\nvar _TaskForm = _interopRequireDefault(require(\"./TaskForm\"));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 导入日期js\n// const uuidv4 = require(\"uuid/v4\"); // 导入uuid生成插件\n\n_dayjs.default.extend(_isBetween.default);\nvar _default = exports.default = {\n  components: {\n    Form: _TaskForm.default\n  },\n  data: function data() {\n    return {\n      keyword: '',\n      list: [],\n      listLoading: false,\n      formVisible: false,\n      dateType: 'monthAndDay',\n      startDate: '',\n      endDate: '',\n      projectId: '',\n      managerIds: ''\n    };\n  },\n  computed: {\n    // 甘特图标题日期分配\n    ganttTitleDate: function ganttTitleDate() {\n      // 分解开始和结束日期\n      var start_date_spilt = (0, _dayjs.default)(this.startDate).format(\"YYYY-M-D\").split(\"-\");\n      var end_date_spilt = (0, _dayjs.default)(this.endDate).format(\"YYYY-M-D\").split(\"-\");\n      var start_year = Number(start_date_spilt[0]);\n      var start_mouth = Number(start_date_spilt[1]);\n      var end_year = Number(end_date_spilt[0]);\n      var end_mouth = Number(end_date_spilt[1]);\n      // 自动更新日期类型以适应任务时间范围跨度\n      if (this.autoGanttDateType) {\n        // 计算日期跨度\n        var mouth_diff = this.timeDiffTime(this.startDate, this.endDate, \"months\");\n        if (mouth_diff > 12) {\n          // 12个月以上的分到yearAndMouth\n          this.setDataType(\"yearAndMonth\");\n        } else if (mouth_diff > 2) {\n          // 2个月以上的分到yearAndWeek\n          this.setDataType(\"yearAndWeek\");\n        } else {\n          this.setDataType(\"monthAndDay\");\n        }\n      }\n      // 不自动更新日期类型，以dateType固定展示\n      if (this.dateType === \"yearAndWeek\") {\n        return this.yearAndWeekTitleDate(start_year, start_mouth, end_year, end_mouth);\n      } else if (this.dateType === \"monthAndDay\") {\n        return this.mouthAndDayTitleDate(start_year, start_mouth, end_year, end_mouth);\n      } else {\n        return this.yearAndMouthTitleDate(start_year, start_mouth, end_year, end_mouth);\n      }\n    }\n  },\n  methods: {\n    goBack: function goBack() {\n      this.$emit('close');\n    },\n    init: function init(item) {\n      var _this = this;\n      if (!item || !item.id) return;\n      this.projectId = item.id;\n      this.managerIds = item.managerIds;\n      this.startDate = item.startTime;\n      this.endDate = item.endTime;\n      this.keyword = '';\n      this.$nextTick(function () {\n        _this.initData();\n      });\n    },\n    initData: function initData() {\n      var _this2 = this;\n      this.listLoading = true;\n      var query = {\n        keyword: this.keyword\n      };\n      (0, _projectGantt.TaskList)(query, this.projectId).then(function (res) {\n        _this2.list = res.data.list;\n        _this2.listLoading = false;\n      });\n    },\n    search: function search() {\n      this.initData();\n    },\n    reset: function reset() {\n      this.keyword = '';\n      this.initData();\n    },\n    handleDel: function handleDel(id) {\n      var _this3 = this;\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(function () {\n        (0, _projectGantt.Delete)(id).then(function (res) {\n          _this3.$message({\n            type: 'success',\n            message: res.msg\n          });\n          _this3.reset();\n        });\n      }).catch(function () {});\n    },\n    // 新增 / 修改\n    addOrUpdateHandle: function addOrUpdateHandle(id) {\n      var _this4 = this;\n      this.formVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs.Form.init(_this4.projectId, id, _this4.managerIds);\n      });\n    },\n    /**\n    * 年-周模式gantt标题\n    * start_year: 起始年\n    * start_mouth：起始月\n    * end_year：结束年\n    * end_mouth：结束月\n    */\n    yearAndWeekTitleDate: function yearAndWeekTitleDate(start_year, start_mouth, end_year, end_mouth) {\n      // 处理年份\n      var year_diff = end_year - start_year;\n      // 只存在同年或前后年的情况\n      if (year_diff === 0) {\n        // 年间隔为同一年\n        var isLeap = this.isLeap(start_year); // 是否闰年\n        var mouths = this.generationMonths(start_year, start_mouth, end_mouth + 1, isLeap, true, true); // 处理月份\n        return mouths;\n      }\n      // 处理开始月份\n      var startIsLeap = this.isLeap(start_year);\n      var start_mouths = this.generationMonths(start_year, start_mouth, 13, startIsLeap, true, true);\n      // 处理结束月份\n      var endIsLeap = this.isLeap(end_year);\n      var end_mouths = this.generationMonths(end_year, 1, end_mouth + 1, endIsLeap, true, true);\n      return start_mouths.concat(end_mouths);\n    },\n    /**\n     * 月-日模式gantt标题\n     * start_year: 起始年\n     * start_mouth：起始月\n     * end_year：结束年\n     * end_mouth：结束月\n     */\n    mouthAndDayTitleDate: function mouthAndDayTitleDate(start_year, start_mouth, end_year, end_mouth) {\n      // 处理年份\n      var year_diff = end_year - start_year;\n      // 只存在同年或前后年的情况\n      if (year_diff === 0) {\n        // 年间隔为同一年\n        var isLeap = this.isLeap(start_year); // 是否闰年\n        var mouths = this.generationMonths(start_year, start_mouth, end_mouth + 1, isLeap); // 处理月份\n        return mouths;\n      }\n      // 处理开始月份\n      var startIsLeap = this.isLeap(start_year);\n      var start_mouths = this.generationMonths(start_year, start_mouth, 13, startIsLeap);\n      // 处理结束月份\n      var endIsLeap = this.isLeap(end_year);\n      var end_mouths = this.generationMonths(end_year, 1, end_mouth + 1, endIsLeap);\n      return start_mouths.concat(end_mouths);\n    },\n    /**\n     * 生成月份函数\n     * year: Number 当前年份\n     * start_num: Number 开始月分\n     * end_num：Number 结束月份\n     * isLeap: Boolean 是否闰年\n     * insert_days: Boolean 是否需要插入 日\n     * week: 是否以周的间隔\n     */\n    generationMonths: function generationMonths(year) {\n      var start_num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var end_num = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 13;\n      var isLeap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var insert_days = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      var week = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var months = [];\n      if (insert_days) {\n        // 无需 日 的模式\n        for (var i = start_num; i < end_num; i++) {\n          // 需要 日 的模式\n          var days = this.generationDays(year, i, isLeap, week);\n          months.push({\n            name: \"\".concat(i, \"\\u6708\"),\n            date: i,\n            full_date: \"\".concat(year, \"-\").concat(i),\n            children: days,\n            id: uuidv4()\n          });\n        }\n        return months;\n      }\n      for (var _i = start_num; _i < end_num; _i++) {\n        // 需要 日 的模式\n        months.push({\n          name: \"\".concat(_i, \"\\u6708\"),\n          date: _i,\n          full_date: \"\".concat(year, \"-\").concat(_i),\n          id: uuidv4()\n        });\n      }\n      return months;\n    },\n    /**\n     * 生成日期函数\n     * year: Number 当前年份\n     * month: Number 当前月份\n     * isLeap: Boolean 是否闰年\n     * week: Boolean 是否间隔一周\n     */\n    generationDays: function generationDays(year, month) {\n      var isLeap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var week = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var big_month = [1, 3, 5, 7, 8, 10, 12].includes(month);\n      var small_month = [4, 6, 9, 11].includes(month);\n      var dates_num = big_month ? 32 : small_month ? 31 : isLeap ? 30 : 29;\n      var days = [];\n      if (week) {\n        var _day = 1; // 从周日开始\n        var _start_day_inweek = this.timeInWeek(\"\".concat(year, \"-\").concat(month, \"-1\"));\n        if (_start_day_inweek !== 0) {\n          _day = 8 - _start_day_inweek;\n        }\n        for (var i = _day; i < dates_num; i += 7) {\n          days.push({\n            date: i,\n            name: \"\".concat(i, \"\\u65E5\"),\n            id: uuidv4(),\n            full_date: \"\".concat(year, \"-\").concat(month, \"-\").concat(i)\n          });\n        }\n      } else {\n        for (var _i2 = 1; _i2 < dates_num; _i2++) {\n          days.push({\n            date: _i2,\n            name: \"\".concat(_i2, \"\\u65E5\"),\n            id: uuidv4(),\n            full_date: \"\".concat(year, \"-\").concat(month, \"-\").concat(_i2)\n          });\n        }\n      }\n      return days;\n    },\n    /**\n     * 是否闰年函数\n     * year: Number 当前年份\n     */\n    isLeap: function isLeap(year) {\n      return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n    },\n    /**\n     * 当前日期gantt状态\n     * row: object 当前行信息\n     * date: string 当前格子日期\n     * unit: string 时间单位，以天、月、年计算\n     */\n    dayGanttType: function dayGanttType(row, date) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"days\";\n      var start_date = row.startTime;\n      var end_date = row.endTime;\n      var between = (0, _dayjs.default)(date).isBetween(start_date, end_date, unit);\n      if (between) {\n        return \"item-on\";\n      }\n      var start = (0, _dayjs.default)(start_date).isSame(date, unit);\n      var end = (0, _dayjs.default)(end_date).isSame(date, unit);\n      if (start && end) {\n        return \"item-on item-full\";\n      }\n      if (start) {\n        return \"item-on item-start\";\n      }\n      if (end) {\n        return \"item-on item-end\";\n      }\n    },\n    /**\n     * 实际日期gantt状态\n     * row: object 当前行信息\n     * date: string 当前格子日期\n     * unit: string 时间单位，以天、月、年计算\n     */\n    realDayGanttType: function realDayGanttType(row, date) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"days\";\n      var start_date = row[this.selfProps.realStartDate];\n      var end_date = row[this.selfProps.realEndDate];\n      var between = (0, _dayjs.default)(date).isBetween(start_date, end_date, unit);\n      if (between) {\n        return \"real-on\";\n      }\n      var start = (0, _dayjs.default)(start_date).isSame(date, unit);\n      var end = (0, _dayjs.default)(end_date).isSame(date, unit);\n      if (start && end) {\n        return \"real-on real-full\";\n      }\n      if (start) {\n        return \"real-on real-start\";\n      }\n      if (end) {\n        return \"real-on real-end\";\n      }\n    },\n    // 以下是时间计算类函数 ------------------------------------------------------时间计算---------------------------------------\n    /**\n     * 计算时差\n     * startDate：开始时间\n     * endDate：结束时间\n     * unit：单位 days、months、yesrs\n     */\n    timeDiffTime: function timeDiffTime(startDate, endDate) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"days\";\n      return (0, _dayjs.default)(endDate).diff(startDate, unit);\n    },\n    /**\n     * 比较时间，是否之前\n     * startDate：开始时间\n     * endDate：结束时间\n     * unit：单位 days、months、yesrs\n     */\n    timeIsBefore: function timeIsBefore(startDate, endDate) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"days\";\n      return (0, _dayjs.default)(startDate).isBefore(endDate, unit);\n    },\n    /**\n     * 时间加计算函数\n     * date：原时间\n     * num：需要增加的时间数量\n     * nuit：增加时间的单位 day year\n     */\n    timeAdd: function timeAdd(date) {\n      var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var nuit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n      var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"YYYY-MM-DD\";\n      return (0, _dayjs.default)(date).add(num, nuit).format(format);\n    },\n    /**\n     * 时间格式化函数\n     * date 需要格式化的数据\n     * format 格式化的格式\n     */\n    timeFormat: function timeFormat(date) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"YYYY-MM-DD\";\n      return date ? (0, _dayjs.default)(date).format(format) : this.emptyCellText;\n    },\n    /**\n     * 查询时间是周几\n     */\n    timeInWeek: function timeInWeek(date) {\n      return (0, _dayjs.default)(date).day();\n    }\n  }\n};",null]}