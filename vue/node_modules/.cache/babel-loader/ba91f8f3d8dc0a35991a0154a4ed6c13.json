{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/mixins/index.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/mixins/index.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nvar _typeof = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/typeof.js\");\nrequire(\"core-js/modules/es6.weak-map\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.function.name\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.set\");\nrequire(\"core-js/modules/es6.string.iterator\");\nrequire(\"core-js/modules/es6.array.from\");\nrequire(\"core-js/modules/es6.array.find\");\nvar echarts = _interopRequireWildcard(require(\"echarts\"));\nvar _resize = _interopRequireDefault(require(\"@/components/Charts/mixins/resize\"));\nvar _dataInterface = require(\"@/api/systemData/dataInterface\");\nvar _data = require(\"@/components/VisualPortal/PortalDesign/components/data\");\nvar _CardHeader = _interopRequireDefault(require(\"../CardHeader\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar _default2 = exports.default = {\n  mixins: [_resize.default],\n  components: {\n    CardHeader: _CardHeader.default\n  },\n  props: {\n    activeData: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  computed: {\n    option: function option() {\n      return this.activeData.option;\n    },\n    jnpfKey: function jnpfKey() {\n      return this.activeData.jnpfKey;\n    }\n  },\n  data: function data() {\n    return {\n      chart: null,\n      currOption: {},\n      chartData: [],\n      isEmpty: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    if (this.activeData.dataType === 'dynamic') {\n      if (!this.activeData.propsApi) return;\n      (0, _dataInterface.getDataInterfaceRes)(this.activeData.propsApi).then(function (res) {\n        _this.chartData = res.data;\n        _this.initChart();\n      });\n    } else {\n      setTimeout(function () {\n        _this.chartData = _this.option.defaultValue;\n        _this.initChart();\n      }, 0);\n    }\n    this.$eventBus.$on('eChart' + this.activeData.i, function () {\n      _this.$nextTick(function () {\n        _this.resize();\n      });\n    });\n  },\n  watch: {\n    option: {\n      handler: function handler(val) {\n        this.resetChart();\n      },\n      deep: true\n    },\n    'activeData.dataType': {\n      handler: function handler(val) {\n        this.option.defaultValue = [];\n        this.chartData = [];\n        if (val == 'static') this.initStaticData(this.option.styleType);\n        this.initBarType();\n      }\n    },\n    'option.styleType': {\n      handler: function handler(val) {\n        if (this.activeData.dataType == 'static') this.initStaticData(val);\n      }\n    },\n    'option.defaultValue': {\n      handler: function handler(val) {\n        var _this2 = this;\n        if (this.activeData.dataType !== 'static') return;\n        setTimeout(function () {\n          _this2.chartData = val;\n          _this2.resetChart();\n          _this2.initBarType();\n        }, 0);\n      }\n    },\n    'activeData.propsApi': {\n      handler: function handler(val) {\n        var _this3 = this;\n        if (this.activeData.dataType === 'static' || !val) return;\n        (0, _dataInterface.getDataInterfaceRes)(val).then(function (res) {\n          _this3.chartData = res.data;\n          _this3.resetChart();\n          _this3.initBarType();\n        });\n      }\n    }\n  },\n  methods: {\n    getType: function getType(title) {\n      if (this.jnpfKey == 'barChart') {\n        if (this.option.styleType == 7) {\n          var arr = this.option.barType.find(function (ele) {\n            return title == ele.title;\n          });\n          if (arr && arr.type) return arr.type;\n        }\n        return 'bar';\n      } else if (this.jnpfKey == 'lineChart') {\n        return 'line';\n      } else if (this.jnpfKey == 'pieChart') {\n        return 'pie';\n      } else if (this.jnpfKey == 'radarChart') {\n        return 'radar';\n      }\n    },\n    initChartData: function initChartData() {\n      var _this4 = this;\n      var jnpfKey = this.jnpfKey;\n      var styleType = this.option.styleType;\n      var optionData = JSON.parse(JSON.stringify(this.chartData)) || [];\n      var typeArr = Array.from(new Set(optionData.map(function (item) {\n        return item.type;\n      })));\n      var axisData = Array.from(new Set(optionData.map(function (item) {\n        return item.name;\n      })));\n      var seriesData = [];\n      typeArr.forEach(function (title, index) {\n        var type = _this4.getType(title);\n        var obj = {\n          name: title,\n          type: type,\n          stack: styleType == 5 || styleType == 6 || styleType == 7 || styleType != 4 && jnpfKey == 'lineChart' ? title : 'total'\n        };\n        var chartArr = optionData.filter(function (item) {\n          return title === item.type;\n        });\n        if (jnpfKey == 'pieChart') {\n          obj['data'] = chartArr.map(function (item) {\n            return {\n              value: item.value,\n              name: item.name\n            };\n          });\n          if (_this4.option.sortable) _this4.getPieData(obj['data']);\n          if (_this4.option.showZero) obj['data'] = obj['data'].filter(function (item) {\n            return item.value != 0;\n          });\n        } else if (jnpfKey == 'radarChart') {\n          var typeList = chartArr.map(function (item) {\n            return item.type;\n          });\n          var element = {\n            value: chartArr.map(function (item) {\n              return item.value;\n            }),\n            name: typeList && typeList.length ? typeList[0] : '',\n            areaStyle: {\n              color: _this4.getColor(index),\n              opacity: _this4.option.seriesAreaStyleOpacity\n            }\n          };\n          obj['data'] = [element];\n          obj['colorBy'] = 'series';\n        } else {\n          obj['data'] = chartArr.map(function (item) {\n            return item.value;\n          });\n        }\n        seriesData.push(obj);\n      });\n      var xAxis = {\n        type: this.option.category == 'category' ? 'category' : 'value',\n        show: this.option.xAxisShow,\n        inverse: this.option.xAxisInverse,\n        data: axisData,\n        name: this.option.xAxisName,\n        nameTextStyle: {\n          color: this.option.xAxisNameTextStyleColor,\n          fontSize: this.option.xAxisNameTextStyleFontSize,\n          fontWeight: this.option.xAxisNameTextStyleFontWeight ? 'bolder' : ''\n        },\n        splitLine: {\n          show: this.option.xAxisSplitLineShow,\n          lineStyle: {\n            color: this.option.xAxisSplitLineLineStyleColor\n          }\n        },\n        axisLabel: {\n          rotate: this.option.xAxisAxisLabelRotate,\n          textStyle: {\n            color: this.option.AxisTextStyleColor ? this.option.AxisTextStyleColor : this.option.xAxisAxisLabelTextStyleColor,\n            fontSize: this.option.xAxisAxisLabelTextStyleFontSize,\n            fontWeight: this.option.xAxisAxisLabelTextFontWeight ? 'bolder' : ''\n          }\n        },\n        axisLine: {\n          show: this.option.xAxisShow,\n          lineStyle: {\n            color: this.option.AxisLineStyleColor ? this.option.AxisLineStyleColor : this.option.xAxisAxisLineLineStyleColor\n          }\n        }\n      };\n      var yAxis = [{\n        type: this.option.category == 'category' ? 'value' : 'category',\n        show: this.option.yAxisShow,\n        inverse: this.option.yAxisInverse,\n        data: axisData,\n        name: this.option.yAxisName,\n        nameTextStyle: {\n          color: this.option.yAxisNameTextStyleColor,\n          fontSize: this.option.yAxisNameTextStyleFontSize,\n          fontWeight: this.option.yAxisNameTextStyleFontWeight ? 'bolder' : ''\n        },\n        splitLine: {\n          show: this.option.yAxisSplitLineShow,\n          lineStyle: {\n            color: this.option.yAxisSplitLineLineStyleColor\n          }\n        },\n        axisLabel: {\n          interval: this.option.yAxisAxisLabelInterval,\n          rotate: this.option.yAxisAxisLabelRotate,\n          textStyle: {\n            color: this.option.AxisTextStyleColor ? this.option.AxisTextStyleColor : this.option.yAxisAxisLabelTextStyleColor,\n            fontSize: this.option.yAxisAxisLabelTextStyleFontSize,\n            fontWeight: this.option.yAxisAxisLabelTextFontWeight ? 'bolder' : ''\n          }\n        },\n        axisLine: {\n          show: this.option.yAxisShow,\n          lineStyle: {\n            color: this.option.AxisLineStyleColor ? this.option.AxisLineStyleColor : this.option.yAxisAxisLineLineStyleColor\n          }\n        }\n      }];\n      var option = {\n        //标题\n        title: {\n          text: this.option.titleText,\n          textStyle: {\n            color: this.option.titleTextStyleColor,\n            fontSize: this.option.titleTextStyleFontSize,\n            fontWeight: this.option.titleTextStyleFontWeight ? 'bolder' : ''\n          },\n          subtext: this.option.titleSubtext,\n          subtextStyle: {\n            color: this.option.titleSubtextStyleColor,\n            fontSize: this.option.titleSubtextStyleFontSize,\n            fontWeight: this.option.titleSubtextStyleFontWeight ? 'bolder' : ''\n          },\n          left: this.option.titleLeft,\n          backgroundColor: this.option.titleText || this.option.titleSubtext ? this.option.titleBgColor || '#fff' : '#fff'\n        },\n        //提示\n        tooltip: {\n          show: this.option.tooltipShow,\n          backgroundColor: this.option.tooltipBgColor,\n          textStyle: {\n            color: this.option.tooltipTextStyleColor,\n            fontSize: this.option.tooltipTextStyleFontSize,\n            fontWeight: this.option.tooltipTextStyleFontWeight ? 'bolder' : ''\n          }\n        },\n        //网格\n        grid: {\n          left: this.option.gridLeft,\n          top: this.option.gridTop,\n          right: this.option.gridRight,\n          bottom: this.option.gridBottom,\n          containLabel: true\n        },\n        //图例\n        legend: {\n          show: this.option.legendShow,\n          orient: this.option.legendOrient,\n          textStyle: {\n            fontSize: this.option.legendTextStyleFontSize || 12\n          },\n          top: this.option.legendTop + '%',\n          right: this.option.legendLeft + '%'\n        },\n        series: function () {\n          var list = (seriesData || []).map(function (ele, index) {\n            var label = {\n              show: _this4.option.seriesLabelShow,\n              position: jnpfKey == 'pieChart' ? _this4.option.seriesLabelPosition : 'top',\n              fontSize: _this4.option.seriesLabelFontSize,\n              fontWeight: _this4.option.seriesLabelFontWeight ? 'bolder' : 'normal',\n              color: _this4.option.seriesLabelColor,\n              backgroundColor: _this4.option.seriesLabelBgColor\n            };\n            var itemStyle = {\n              barBorderRadius: _this4.option.seriesItemStyleBarBorderRadius\n            };\n            if (jnpfKey == 'barChart' || jnpfKey == 'lineChart' || jnpfKey == 'radarChart') itemStyle.color = _this4.getColor(index);\n            if (jnpfKey == 'lineChart') {\n              ele.smooth = styleType == 2;\n              ele.step = styleType == 3;\n              ele.lineStyle = {\n                width: _this4.option.seriesLineStyleWidth\n              };\n              ele.symbolSize = _this4.option.seriesSymbolRotate;\n              if (_this4.option.areaStyle) ele.areaStyle = {};\n            }\n            if (jnpfKey == 'pieChart') {\n              if (styleType == 1) ele.radius = '60%';\n              if (styleType == 2) ele.radius = ['30%', '60%'];\n              if (_this4.option.roseType) ele.roseType = 'area';\n              if (_this4.option.seriesLabelShowInfo && _this4.option.seriesLabelShowInfo.length) {\n                if (_this4.option.seriesLabelShowInfo.includes('count') && _this4.option.seriesLabelShowInfo.includes('percent')) {\n                  label.formatter = '{b}: {c} ({d}%)';\n                } else if (_this4.option.seriesLabelShowInfo.includes('count')) {\n                  label.formatter = '{b}: {c} ';\n                } else if (_this4.option.seriesLabelShowInfo.includes('percent')) {\n                  label.formatter = '{b}: ({d}%) ';\n                }\n              }\n              if (_this4.option.colorList && _this4.option.colorList.length) {\n                var colorList = [];\n                _this4.option.colorList.map(function (item, index) {\n                  var color = _this4.getColor(index) || '#71B6F5';\n                  colorList.push(color);\n                });\n                ele.color = colorList;\n              }\n              ele.center = [_this4.option.seriesCenterLeft + '%', _this4.option.seriesCenterTop + '%'];\n            }\n            return Object.assign(ele, {\n              name: ele.name,\n              type: ele.type,\n              data: ele.data,\n              stack: ele.stack,\n              showBackground: styleType == 4 ? true : false,\n              barWidth: _this4.option.seriesBarWidth,\n              itemStyle: itemStyle,\n              label: label\n            });\n          });\n          return list;\n        }()\n      };\n      if (jnpfKey == 'barChart' || jnpfKey == 'lineChart') {\n        if (jnpfKey == 'lineChart' && this.option.areaStyle) xAxis.boundaryGap = false;\n        option.xAxis = xAxis;\n        option.yAxis = yAxis;\n      } else if (jnpfKey == 'radarChart') {\n        option.radar = [];\n        typeArr.map(function (item) {\n          var indicator = axisData.map(function (items) {\n            var maxObj = optionData.find(function (element) {\n              return element.type == item && element.name == items;\n            });\n            return {\n              name: items,\n              max: maxObj ? maxObj.max : ''\n            };\n          });\n          var radarObj = {\n            indicator: indicator,\n            shape: _this4.option.styleType == 1 ? 'polygon' : 'circle',\n            axisName: {\n              fontSize: _this4.option.radarAxisNameFontSize,\n              fontWeight: _this4.option.radarAxisNameFontWeight ? 'bolder' : 'normal',\n              color: _this4.option.radarAxisNameColor\n            },\n            center: [_this4.option.radarCenterLeft + '%', _this4.option.radarCenterTop + '%']\n          };\n          option.radar.push(radarObj);\n        });\n      } else if (jnpfKey == 'pieChart') {\n        if (this.option.seriesLabelShowInfo.includes('count') && this.option.seriesLabelShowInfo.includes('percent')) {\n          option.tooltip.formatter = '{b}: {c} ({d}%)';\n        } else if (this.option.seriesLabelShowInfo.includes('count')) {\n          option.tooltip.formatter = '{b}: {c}';\n        } else if (this.option.seriesLabelShowInfo.includes('percent')) {\n          option.tooltip.formatter = '{b}: {d}%';\n        } else {\n          option.tooltip.formatter = '{b}';\n        }\n      }\n      this.currOption = option;\n    },\n    initChart: function initChart() {\n      this.initChartData();\n      this.chart = echarts.init(this.$refs.chart);\n      this.chart.setOption(this.currOption);\n    },\n    resetChart: function resetChart() {\n      this.isEmpty = JSON.stringify(this.currOption) === \"{}\";\n      this.chart && this.chart.dispose();\n      this.chart = null;\n      if (!this.isEmpty) this.initChart();\n    },\n    getColor: function getColor(index) {\n      var barColor = this.option.colorList || [];\n      if (barColor[index]) {\n        var color1 = barColor[index].color1;\n        var color2 = barColor[index].color2;\n        if (color2 && color1) {\n          return new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: color1\n          }, {\n            offset: 1,\n            color: color2\n          }]);\n        }\n        return color1;\n      }\n    },\n    initStaticData: function initStaticData(val) {\n      this.option.defaultValue = [];\n      if (this.jnpfKey == 'barChart') {\n        if (val == 1 || val == 4) this.option.defaultValue = _data.chartData.baseBarData;\n        if (val == 2 || val == 5) this.option.defaultValue = _data.chartData.mulBarData;\n        if (val == 6) this.option.defaultValue = _data.chartData.plusMinusBarData;\n        if (val == 7) {\n          this.option.defaultValue = _data.chartData.brokenColumnBarData;\n          this.initBarType();\n        }\n      } else if (this.jnpfKey == 'lineChart') {\n        if (val == 1 || val == 2 || val == 3) this.option.defaultValue = _data.chartData.baseBarData;\n        if (val == 4) this.option.defaultValue = _data.chartData.mulBarData;\n      } else if (this.jnpfKey == 'pieChart') {\n        this.option.defaultValue = _data.chartData.baseBarData;\n      } else if (this.jnpfKey == 'radarChart') {\n        this.option.defaultValue = _data.chartData.radarData;\n      }\n    },\n    initBarType: function initBarType() {\n      var _this5 = this;\n      if (this.option.styleType !== 7) return;\n      var optionData = this.chartData || [];\n      if (!Array.isArray(optionData)) return;\n      this.option.barType = [];\n      var typeArr = Array.from(new Set(optionData.map(function (item) {\n        return item.type;\n      })));\n      typeArr.map(function (item, index) {\n        if (item) {\n          _this5.option.barType.push({\n            title: item,\n            type: index == 1 ? 'line' : 'bar'\n          });\n        }\n      });\n    },\n    getPieData: function getPieData(list) {\n      for (var i = 0; i < list.length - 1; i++) {\n        for (var j = 0; j < list.length - 1; j++) {\n          if (list[j].value > list[j + 1].value) {\n            var t = list[j];\n            list[j] = list[j + 1];\n            list[j + 1] = t;\n          }\n        }\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (!this.chart) return;\n    this.chart.dispose();\n    this.chart = null;\n  }\n};",null]}