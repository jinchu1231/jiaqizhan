{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/NavbarRight.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/NavbarRight.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState } from 'vuex'\nimport Screenfull from '@/components/Screenfull'\nimport SizeSelect from '@/components/SizeSelect'\nimport LangSelect from '@/components/LangSelect'\nimport Search from '@/components/HeaderSearch'\nimport MessageList from './MessageList'\nimport Settings from './settings'\nimport UserList from './userList/UserList'\nimport ApplyList from './ApplyList'\nimport dragDialog from \"@/directive/el-drag-dialog\";\nimport ReconnectingWebSocket from 'reconnecting-websocket'\nimport { getToken } from '@/utils/auth'\nexport default {\n  directives: { dragDialog },\n  components: {\n    Screenfull,\n    SizeSelect,\n    LangSelect,\n    Search,\n    MessageList,\n    UserList,\n    ApplyList,\n    Settings,\n  },\n  computed: {\n    ...mapState({\n      showLanguage: state => state.settings.showLanguage,\n      showSearch: state => state.settings.showSearch,\n      showSettings: state => state.settings.showSettings,\n    }),\n    ...mapGetters(['device', 'userInfo']),\n    sysConfig() {\n      return this.$store.state.settings.sysConfig\n    }\n  },\n  data() {\n    return {\n      visible: false,\n      visible2: false,\n      isTwinkle: false,\n      messageCount: 0,\n      notify: null,\n      userList: []\n    }\n  },\n  watch: {\n    isTwinkle(val) {\n      // if (val) {\n      //   this.notify.setTitle(true)\n      // } else {\n      //   this.notify.setTitle()\n      // }\n    }\n  },\n  created() {\n    this.initWebSocket()\n    this.initNotify()\n  },\n  methods: {\n    initWebSocket() {\n      this.socket = this.$store.getters.socket || null\n      if ('WebSocket' in window) {\n        if (!this.socket) {\n          const isDev = process.env.NODE_ENV === 'development'\n          const token = this.$store.getters.token\n          const url = isDev ? this.define.APIURl + '/api/message/websocket/' + token : window.location.origin + '/websocket/' + token\n          const webSocketUrl = url.replace('https://', 'wss://').replace('http://', 'ws://')\n          this.socket = new ReconnectingWebSocket(webSocketUrl)\n          this.$store.commit('user/SET_SOCKET', this.socket)\n        }\n        //添加事件监听\n        let socket = this.socket\n        socket.onopen = () => {\n          var onConnection = {\n            \"method\": \"OnConnection\", \"token\": this.$store.getters.token, \"mobileDevice\": false, systemId: this.userInfo.systemId, isSeparate: !!this.jnpf.getJnpfAppId()\n          }\n          let msg = JSON.stringify(onConnection);\n          socket.send(msg)\n        }\n        socket.onmessage = (event) => {\n          let dataStr = event.data;\n          const data = JSON.parse(dataStr)\n          if (data.method == 'initMessage') {\n            this.messageCount = data.unreadTotalCount || 0\n            this.isTwinkle = !!data.unreadNums.length\n          }\n          //用户在线\n          if (data.method == 'Online') {\n          }\n          //用户离线\n          if (data.method == 'Offline') {\n          }\n          //消息推送（消息公告用的）\n          if (data.method == 'messagePush') {\n            this.messageCount += data.unreadNoticeCount\n            if (this.$refs.MessageList.visible) this.$refs.MessageList.init()\n          }\n          //用户过期\n          if (data.method == 'logout') {\n            setTimeout(() => {\n              if (data.token && data.token !== getToken()) return location.reload()\n              if (this.socket) {\n                this.socket.close()\n                this.socket = null\n                this.$store.commit('user/SET_SOCKET', this.socket)\n              }\n              this.$message({\n                message: data.msg || '登录过期,请重新登录',\n                type: 'error',\n                duration: 1000,\n                onClose: () => {\n                  this.$store.dispatch('user/resetToken').then(() => {\n                    location.reload()\n                  })\n                }\n              })\n            }, 1000);\n          }\n          //断开websocket连接\n          if (data.method == 'closeSocket') {\n            if (this.socket) {\n              this.socket.close()\n              this.socket = null\n              this.$store.commit('user/SET_SOCKET', this.socket)\n            }\n          }\n          //接收对方发送的消息\n          if (data.method == 'receiveMessage') {\n            //判断是否打开窗口\n            if (this.$refs.UserList && this.$refs.UserList.$refs.JNPFIm && this.$refs.UserList.$refs.JNPFIm.visible) {\n              if (this.$refs.UserList.$refs.JNPFIm.info.id === data.formUserId) {\n                let messItem = {\n                  userId: data.formUserId,\n                  messageType: data.messageType,\n                  message: data.formMessage,\n                  dateTime: this.jnpf.toDate(data.dateTime)\n                }\n                this.$refs.UserList.$refs.JNPFIm.addItem(messItem)\n                //更新已读\n                let msgObj = {\n                  method: \"UpdateReadMessage\",\n                  formUserId: data.formUserId,\n                  token: this.$store.getters.token\n                }\n                let msg = JSON.stringify(msgObj);\n                socket.send(msg)\n                this.$refs.UserList.updateReply(data)\n              } else {\n                this.$refs.UserList.updateReply(data, 1)\n                this.isTwinkle = true\n              }\n            } else {\n              this.$refs.UserList.updateReply(data, 1)\n              this.isTwinkle = true\n            }\n          }\n          //显示自己发送的消息\n          if (data.method == 'sendMessage') {\n            if (this.$refs.UserList.$refs.JNPFIm.info.id !== data.toUserId) return\n            //添加到客户端\n            let messItem = {\n              userId: data.UserId,\n              messageType: data.messageType,\n              message: data.toMessage,\n              dateTime: this.jnpf.toDate(data.dateTime)\n            }\n            this.$refs.UserList.updateLatestMessage(data)\n            this.$refs.UserList.$refs.JNPFIm.addItem(messItem)\n          }\n          //消息列表\n          if (data.method == 'messageList') {\n            this.$refs.UserList.$refs.JNPFIm.getList(data)\n          }\n          //刷新页面\n          if (data.method == 'refresh') {\n            if (data.msg) {\n              this.$message.error(data.msg)\n              setTimeout(() => {\n                location.reload()\n              }, 2000);\n            } else {\n              location.reload()\n            }\n          }\n        }\n      }\n    },\n    toggleSideBar() {\n      this.$store.dispatch('app/toggleSideBar')\n    },\n    handleLogout() {\n      this.$confirm('您确定要退出应用程序吗?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.logout();\n      }).catch(() => { });\n    },\n    async logout() {\n      await this.$store.dispatch('user/logout')\n      // this.$router.push(`/login?redirect=${this.$route.fullPath}`)\n      this.$router.push(`/login`)\n    },\n    lock() {\n      this.$store.dispatch('user/setLock')\n      this.$nextTick(() => {\n        this.$router.push('/lockScreen')\n      })\n    },\n    read(isAll) {\n      if (isAll) {\n        this.messageCount = 0\n      } else {\n        this.messageCount -= 1\n        this.messageCount = this.messageCount >= 0 ? this.messageCount : 0\n      }\n    },\n    openUserList() {\n      this.$refs.UserList.init()\n    },\n    changeApply() {\n      this.$refs.ApplyList.init()\n    },\n    changeTwinkle(boo) {\n      this.isTwinkle = boo\n    },\n    initNotify() {\n      // this.notify = new Notify({\n      //   message: '您有新消息',\n      //   effect: 'flash', // flash | scroll\n      //   interval: 1000\n      // });\n    },\n  }\n}\n",null]}