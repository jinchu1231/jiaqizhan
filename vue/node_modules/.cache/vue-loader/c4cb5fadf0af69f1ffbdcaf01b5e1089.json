{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/SelectDialog/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/SelectDialog/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceDataSelect } from '@/api/systemData/dataInterface'\nimport { getFieldDataSelect } from '@/api/onlineDev/visualDev'\nimport { mapGetters } from \"vuex\"\nimport TemplateDetail from '../Process/PropPanel/TemplateDetail.vue'\nexport default {\n  components: { TemplateDetail },\n  name: 'SelectDialog',\n  props: {\n    config: {\n      type: Object,\n      default: () => { }\n    },\n    formData: Object,\n    multiple: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      visible: false,\n      listLoading: true,\n      btnLoading: false,\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      },\n      list: [],\n      total: 0,\n      checked: [],\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n    isDynamic() {\n      this.config.dataSource == 'dynamic'\n    }\n  },\n  methods: {\n    init() {\n      this.listQuery.keyword = ''\n      this.listQuery.pageSize = this.config.hasPage ? this.config.pageSize : 10000\n      this.visible = true\n      this.btnLoading = false\n      this.initData()\n    },\n    initData() {\n      if (!this.config.interfaceId && !this.config.modelId) return this.listLoading = false\n      this.listLoading = true\n      const paramList = this.getParamList()\n      const columnOptions = this.config.columnOptions.map(o => o.value)\n      let query = {\n        ...this.listQuery,\n        columnOptions: columnOptions.join(','),\n      }\n      const formMethod = this.config.dataSource == 'dynamic' ? getDataInterfaceDataSelect : getFieldDataSelect\n      const formMethodId = this.config.dataSource == 'dynamic' ? this.config.interfaceId : this.config.modelId\n      if (this.config.dataSource == 'dynamic') query = { ...query, interfaceId: this.config.interfaceId, paramList }\n      formMethod(formMethodId, query).then(res => {\n        this.list = res.data.list\n        if (this.config.hasPage || this.config.dataSource != 'dynamic') this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => { this.listLoading = false })\n    },\n    getParamList() {\n      let templateJson = this.config.templateJson\n      for (let i = 0; i < templateJson.length; i++) {\n        templateJson[i].defaultValue = this.formData[templateJson[i].relationField] || ''\n        if (templateJson[i].jnpfKey === 'createUser') {\n          templateJson[i].defaultValue = this.userInfo.userId\n        }\n        if (templateJson[i].jnpfKey === 'createTime') {\n          templateJson[i].defaultValue = new Date().getTime()\n        }\n        if (templateJson[i].jnpfKey === 'currOrganize') {\n          templateJson[i].defaultValue = this.userInfo.organizeId\n        }\n        if (templateJson[i].jnpfKey === 'currPosition') {\n          if (this.userInfo.positionIds && this.userInfo.positionIds.length) {\n            let item = this.userInfo.positionIds[0]\n            templateJson[i].defaultValue = item.id\n          }\n        }\n      }\n      return templateJson\n    },\n    select() {\n      if (!this.checked.length) return\n      this.btnLoading = true\n      this.visible = false\n      let checked = []\n      for (let i = 0; i < this.checked.length; i++) {\n        const e = this.checked[i]\n        let item = {}\n        for (let j = 0; j < this.config.relationOptions.length; j++) {\n          const row = this.config.relationOptions[j]\n          item[row.field] = row.type === 1 ? e[this.config.dataSource != 'dynamic' ? (row.value + '_jnpfId') : row.value] : row.value\n        }\n        checked.push(item)\n      }\n      this.close()\n      this.$emit('select', checked)\n    },\n    close() {\n      this.visible = false\n      this.$emit('select', false)\n    },\n    handleSelectionChange(val) {\n      this.checked = val\n    },\n    search() {\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.config.hasPage ? this.config.pageSize : 10000\n      this.initData()\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.search()\n    },\n  }\n}\n",null]}