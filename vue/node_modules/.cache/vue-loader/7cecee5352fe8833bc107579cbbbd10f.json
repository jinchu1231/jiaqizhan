{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/flowTodo/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/flowTodo/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FlowBeforeList } from '@/api/workFlow/FlowBefore'\nimport { FlowEngineListAll, getFlowList } from '@/api/workFlow/FlowEngine'\nimport FlowBox from '../components/FlowBox'\nimport BatchList from './BatchList'\nexport default {\n  name: 'workFlow-flowTodo',\n  components: { FlowBox, BatchList },\n  data() {\n    return {\n      list: [],\n      total: 0,\n      showAll: false,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      urgent: '',\n      urgentList: [\n        {\n          id: 1,\n          fullName: '普通'\n        }, {\n          id: 2,\n          fullName: '重要'\n        }, {\n          id: 3,\n          fullName: '紧急'\n        }\n      ],\n      formVisible: false,\n      batchListVisible: false,\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近一周',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      keyword: '',\n      pickerVal: [],\n      startTime: '',\n      endTime: '',\n      templateId: '',\n      flowId: '',\n      flowCategory: '',\n      creatorUserId: '',\n      categoryList: [],\n      flowEngineList: [],\n      flowOptions: []\n    }\n  },\n  filters: {\n    getCategoryText(id, categoryList) {\n      let item = categoryList.filter(o => o.enCode == id)[0]\n      return item && item.fullName ? item.fullName : ''\n    }\n  },\n  created() {\n    // if (this.$route.query.category) this.flowCategory = this.$route.query.flowCategory\n    this.getDictionaryData()\n    this.getFlowEngineList()\n    this.initData()\n  },\n  methods: {\n    search() {\n      if (this.pickerVal && this.pickerVal.length) {\n        this.startTime = this.pickerVal[0]\n        this.endTime = this.pickerVal[1]\n      } else {\n        this.startTime = ''\n        this.endTime = ''\n      }\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    getFlowEngineList() {\n      FlowEngineListAll().then((res) => {\n        this.flowEngineList = res.data.list\n      })\n    },\n    getDictionaryData() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'WorkFlowCategory' }).then((res) => {\n        this.categoryList = res\n      })\n    },\n    initData() {\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        templateId: this.templateId,\n        flowId: this.flowId,\n        flowUrgent: this.urgent,\n        flowCategory: this.flowCategory,\n        creatorUserId: this.creatorUserId\n      }\n      FlowBeforeList(1, query).then(async res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    toDetail(item) {\n      let data = {\n        id: item.processId,\n        flowId: item.flowId,\n        opType: 1,\n        taskNodeId: item.thisStepId,\n        taskId: item.id\n      }\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowBox.init(data)\n      })\n    },\n    goBatch() {\n      this.batchListVisible = true\n      this.$nextTick(() => {\n        this.$refs.BatchList.init()\n      })\n    },\n    closeForm(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) this.refresh()\n    },\n    refresh() {\n      this.pickerVal = ''\n      this.startTime = ''\n      this.endTime = ''\n      this.keyword = ''\n      this.templateId = ''\n      this.flowId = ''\n      this.urgent = ''\n      this.flowOptions = []\n      this.flowCategory = ''\n      this.creatorUserId = ''\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    onTemplateIdChange(val) {\n      this.flowId = ''\n      this.flowOptions = []\n      if (!val) return\n      this.getFlowList()\n    },\n    getFlowList() {\n      getFlowList(this.templateId).then(res => {\n        this.flowOptions = res.data\n      })\n    },\n    visibleFlowChange(val) {\n      if (!val) return\n      if (!this.templateId) this.$message.warning('请先选择所属流程')\n    },\n  }\n}\n",null]}