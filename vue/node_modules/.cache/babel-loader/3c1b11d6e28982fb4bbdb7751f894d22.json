{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HMapChart/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HMapChart/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.array.sort\");\nrequire(\"core-js/modules/es6.number.constructor\");\nrequire(\"core-js/modules/es6.function.name\");\nrequire(\"core-js/modules/es6.array.find\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.string.iterator\");\nrequire(\"core-js/modules/es6.map\");\nvar _portal = require(\"@/api/onlineDev/portal\");\nvar _CardHeader = _interopRequireDefault(require(\"../CardHeader\"));\nvar _dataInterface = require(\"@/api/systemData/dataInterface\");\nvar _resize = _interopRequireDefault(require(\"@/components/Charts/mixins/resize\"));\nvar _data = require(\"@/components/VisualPortal/PortalDesign/components/data\");\nvar _throttleDebounce = require(\"throttle-debounce\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = exports.default = {\n  mixins: [_resize.default],\n  components: {\n    CardHeader: _CardHeader.default\n  },\n  props: {\n    activeData: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      isEmpty: false,\n      chart: null,\n      currOption: {},\n      currMapCode: null,\n      geoJson: null,\n      allAtlasList: [],\n      chartData: [],\n      mapData: [],\n      timeTicket: null,\n      count: 0,\n      hashMap: new Map(),\n      zoom: 1,\n      showBarTitle: false,\n      code: \"\",\n      updateMapChart: (0, _throttleDebounce.debounce)(200, function () {\n        this.resetChart();\n      }),\n      updateBarChart: (0, _throttleDebounce.debounce)(200, function () {\n        this.setBarMapChart();\n      })\n    };\n  },\n  computed: {\n    option: function option() {\n      return this.activeData.option;\n    },\n    jnpfKey: function jnpfKey() {\n      return this.activeData.jnpfKey;\n    }\n  },\n  watch: {\n    'option': {\n      handler: function handler() {\n        this.clearHashMap();\n        this.updateMapChart();\n      },\n      deep: true\n    },\n    'option.defaultValue': {\n      handler: function handler(val) {\n        var _this = this;\n        setTimeout(function () {\n          _this.chartData = val;\n          _this.resetChart();\n        }, 0);\n      }\n    },\n    'option.updateMapType': {\n      handler: function handler(val) {\n        var code = Array.isArray(this.option.mapType) ? this.option.mapType[this.option.mapType.length - 1] : this.option.mapType;\n        if (this.currMapCode != code) this.initMap();\n      }\n    },\n    'activeData.dataType': {\n      handler: function handler(val) {\n        this.option.defaultValue = [];\n        this.chartData = [];\n        if (val == 'static') this.option.defaultValue = _data.mapChartData;\n      }\n    },\n    'activeData.propsApi': {\n      handler: function handler(val) {\n        var _this2 = this;\n        if (this.activeData.dataType === 'static' || !val) return;\n        (0, _dataInterface.getDataInterfaceRes)(val).then(function (res) {\n          _this2.chartData = res.data;\n          _this2.resetChart();\n        });\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n    if (this.activeData.dataType === 'dynamic') {\n      if (!this.activeData.propsApi) return;\n      (0, _dataInterface.getDataInterfaceRes)(this.activeData.propsApi).then(function (res) {\n        _this3.chartData = res.data;\n        _this3.initMap();\n      });\n    } else {\n      setTimeout(function () {\n        _this3.chartData = _this3.option.defaultValue;\n        _this3.initMap();\n      }, 0);\n    }\n    this.$eventBus.$on('eChart' + this.activeData.i, function () {\n      _this3.$nextTick(function () {\n        _this3.resize();\n        _this3.$nextTick(function () {\n          _this3.setBarMapChart();\n        });\n      });\n    });\n    this.getAtlasList();\n  },\n  methods: {\n    initMap: function initMap() {\n      var _this4 = this;\n      var code = Array.isArray(this.option.mapType) ? this.option.mapType[this.option.mapType.length - 1] : this.option.mapType;\n      if (!code) return;\n      this.chart && this.chart.dispose();\n      this.chart = null;\n      this.chart = echarts.init(this.$refs.chart);\n      this.chart.showLoading();\n      this.currMapCode = code;\n      (0, _portal.getMapData)(code).then(function (res) {\n        _this4.chart.hideLoading();\n        _this4.geoJson = res.data;\n        _this4.code = code;\n        _this4.initCurrOption();\n        echarts.registerMap(code, _this4.geoJson);\n        _this4.chart.setOption(_this4.currOption, true);\n        _this4.setScatterMapChart();\n        _this4.setBarMapChart();\n        if (_this4.option.autoCarousel) _this4.handleDispatchAction();\n        _this4.clearHashMap();\n        _this4.chart.on('click', function (param) {\n          if (!_this4.option.drillDown) return;\n          if (!_this4.allAtlasList.length) return;\n          var item = _this4.allAtlasList.find(function (i) {\n            return i.fullName === param.name;\n          });\n          if (item) {\n            if (_this4.currMapCode == item.enCode) return;\n            _this4.currMapCode = item.enCode;\n            (0, _portal.getMapData)(item.enCode).then(function (res) {\n              _this4.code = item.enCode;\n              _this4.initCurrOption();\n              echarts.registerMap(item.enCode, res.data);\n              _this4.chart.setOption(_this4.currOption, true);\n              _this4.setScatterMapChart();\n              _this4.setBarMapChart();\n              _this4.zoom += 1;\n              _this4.setHashMap(param.name, item.enCode, res.data);\n            });\n          }\n        });\n        _this4.chart.on('mouseover', function (params) {\n          if (!_this4.option.autoCarousel) return;\n          clearInterval(_this4.timeTicket);\n          _this4.chart.dispatchAction({\n            type: 'showTip',\n            seriesIndex: 0,\n            dataIndex: params.dataIndex\n          });\n        });\n        _this4.chart.on('mouseout', function () {\n          if (_this4.option.autoCarousel) _this4.handleDispatchAction();\n        });\n        _this4.chart.on('georoam', function () {\n          _this4.updateBarChart();\n        });\n      });\n    },\n    resetChart: function resetChart() {\n      if (!this.geoJson) return;\n      this.isEmpty = JSON.stringify(this.currOption) === \"{}\";\n      if (!this.isEmpty) {\n        this.initCurrOption();\n        echarts.registerMap(this.code, this.geoJson);\n        this.chart.setOption(this.currOption, true);\n        this.setScatterMapChart();\n        this.setBarMapChart();\n        if (this.option.autoCarousel) this.handleDispatchAction();\n      }\n    },\n    initCurrOption: function initCurrOption() {\n      var option = this.option;\n      var title = {\n        text: option.titleText,\n        textStyle: {\n          color: option.titleTextStyleColor,\n          fontSize: option.titleTextStyleFontSize,\n          fontWeight: option.titleTextStyleFontWeight ? 'bolder' : ''\n        },\n        subtext: option.titleSubtext,\n        subtextStyle: {\n          color: option.titleSubtextStyleColor,\n          fontSize: option.titleSubtextStyleFontSize,\n          fontWeight: option.titleSubtextStyleFontWeight ? 'bolder' : ''\n        },\n        left: option.titleLeft,\n        backgroundColor: option.titleText || option.titleSubtext ? option.titleBgColor || '#fff' : '#fff'\n      };\n      var tooltip = {\n        show: this.option.tooltipShow,\n        backgroundColor: this.option.tooltipBgColor,\n        textStyle: {\n          color: this.option.tooltipTextStyleColor,\n          fontSize: this.option.tooltipTextStyleFontSize,\n          fontWeight: this.option.tooltipTextStyleFontWeight ? 'bolder' : ''\n        }\n      };\n      var geo = {\n        id: \"china\",\n        map: this.code,\n        show: true,\n        roam: option.geoRoam,\n        aspectScale: option.geoAspectScale || 0.75,\n        layoutCenter: [option.seriesCenterLeft + '%', option.seriesCenterTop + '%'],\n        layoutSize: '85%',\n        itemStyle: {\n          areaColor: option.geoAreaColor,\n          borderWidth: option.geoBorderWidth / 2,\n          borderColor: option.geoBorderColor,\n          shadowOffsetX: option.geoShadowOffset,\n          shadowOffsetY: option.geoShadowOffset,\n          shadowColor: option.geoShadowColor\n        },\n        zoom: option.mspScale,\n        label: {\n          show: option.geoLabelShow,\n          color: option.geoLabelColor,\n          fontWeight: option.geoLabelFontWeight ? 'bolder' : 'normal',\n          fontSize: option.geoLabelFontSize\n        }\n      };\n      var visualMap = {\n        min: option.visualMapMin,\n        max: option.visualMapMax,\n        type: option.visualMapType,\n        showLabel: true,\n        realtime: false,\n        calculable: true,\n        inRange: {\n          color: ['#3BD9FF', '#0246FF']\n        }\n      };\n      this.currOption = {\n        title: title,\n        tooltip: tooltip,\n        geo: geo,\n        visualMap: visualMap\n      };\n    },\n    setScatterMapChart: function setScatterMapChart() {\n      var _this5 = this;\n      var option = this.option;\n      if (option.styleType == 3) return;\n      this.mapData = [];\n      if (this.chartData && this.chartData.length) {\n        this.chartData.map(function (ele) {\n          var coord = _this5.chart.convertToPixel('geo', [ele.long, ele.lat]) || [];\n          var flag = _this5.chart.containPixel('geo', coord);\n          if (flag) _this5.mapData.push({\n            name: ele.name,\n            value: [ele.long, ele.lat, ele.value]\n          });\n        });\n      }\n      if (option.showNumber == null) {\n        this.mapData = this.mapData;\n      } else {\n        this.mapData = this.mapData.slice(0, option.showNumber);\n      }\n      this.currOption.series = [{\n        type: option.styleType == 1 || option.styleType == 4 ? option.seriesType : 'heatmap',\n        rippleEffect: {\n          brushType: 'stroke'\n        },\n        coordinateSystem: \"geo\",\n        itemStyle: {\n          color: \"#1890FF\",\n          opacity: option.seriesItemStyleOpacity\n        },\n        pointSize: option.seriesPointSize,\n        blurSize: option.seriesBlurSize,\n        maxOpacity: option.seriesMaxOpacity,\n        tooltip: {\n          show: true,\n          formatter: function formatter(params) {\n            if (params.value.length < 3) return params.name;\n            var str = params.name + '&nbsp&nbsp' + params.value[2];\n            return str;\n          }\n        },\n        symbolSize: function symbolSize(val) {\n          if (_this5.option.visualMapMax) {\n            var num = Number(_this5.option.visualMapMax);\n            var num1 = Number(val[2]);\n            var res = num1 / num * 15;\n            return res;\n          }\n          return 10;\n        },\n        clip: true,\n        data: this.mapData\n      }];\n      this.setBarRankMapChart();\n      this.chart.setOption(this.currOption);\n      if (this.timeTicket) clearInterval(this.timeTicket);\n    },\n    setBarMapChart: function setBarMapChart() {\n      var _this6 = this;\n      if (this.option.styleType != 3) return;\n      var data = this.option.defaultValue;\n      if (data && data.length) {\n        data.map(function (ele, idx) {\n          if (!ele.long || !ele.lat) return;\n          var coord = _this6.chart.convertToPixel('geo', [ele.long, ele.lat]) || [];\n          var flag = _this6.chart.containPixel('geo', coord);\n          if (!flag) return;\n          var curOption = {\n            xAxis: [],\n            yAxis: [],\n            grid: [],\n            series: [],\n            tooltip: {\n              trigger: 'item',\n              axisPointer: {\n                type: 'none'\n              }\n            }\n          };\n          curOption.xAxis.push({\n            id: idx,\n            gridId: idx,\n            show: false,\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            data: [ele.name],\n            z: 100\n          });\n          curOption.yAxis.push({\n            id: idx,\n            gridId: idx,\n            show: false,\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            z: 100\n          });\n          // 配置柱状图绘制大小、位置\n          curOption.grid.push({\n            id: idx,\n            width: _this6.option.seriesBarWidth,\n            height: 70,\n            left: coord && coord[0],\n            top: coord && coord[1] - 70,\n            z: 100\n          });\n          // 生成柱状图数据\n          curOption.series.push({\n            id: idx,\n            type: 'bar',\n            xAxisId: idx,\n            yAxisId: idx,\n            barGap: 0,\n            barCategoryGap: 0,\n            data: [ele.value],\n            z: 100,\n            itemStyle: {\n              normal: {\n                borderRadius: _this6.option.seriesItemStyleBarBorderRadius,\n                label: {\n                  show: true,\n                  position: 'insideBottom',\n                  textStyle: {\n                    color: '#fff',\n                    fontSize: 10\n                  }\n                }\n              }\n            }\n          });\n          _this6.chart.setOption(curOption);\n        });\n      }\n    },\n    setBarRankMapChart: function setBarRankMapChart() {\n      var option = this.option;\n      if (option.styleType != 4) return;\n      var myData = [['value', 'name']];\n      var mapData = JSON.parse(JSON.stringify(this.chartData));\n      if (option.showNumber) {\n        mapData = mapData.slice(0, option.showNumber);\n      }\n      var barData = mapData.sort(function (a, b) {\n        return b.value - a.value;\n      });\n      for (var i = 0; i < barData.length; i++) {\n        var ele = barData[i];\n        myData.push([ele.value, ele.name]);\n      }\n      this.currOption.grid = {\n        right: option.berGridRight,\n        top: option.berGridTop,\n        bottom: option.berGridBottom,\n        width: '200'\n      };\n      this.currOption.xAxis = {\n        name: 'value',\n        show: false\n      };\n      this.currOption.yAxis = {\n        type: 'category',\n        inverse: true,\n        nameGap: 16,\n        axisLine: {\n          show: false,\n          lineStyle: {\n            color: '#303133'\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        axisLabel: {\n          interval: 0,\n          margin: 10,\n          textStyle: {\n            fontSize: 14\n          }\n        }\n      };\n      var series = {\n        name: '柱状图',\n        type: 'bar',\n        roam: false,\n        zlevel: 2,\n        barGap: 0,\n        encode: {\n          x: 'value',\n          y: 'name'\n        },\n        label: {\n          normal: {\n            show: true,\n            position: 'right',\n            textBorderWidth: 0\n          }\n        },\n        itemStyle: {\n          normal: {\n            borderRadius: 2\n          }\n        }\n      };\n      this.currOption.dataset = {\n        source: myData\n      };\n      this.currOption.visualMap.dimension = 0;\n      this.currOption.series.push(series);\n      this.showBarTitle = true;\n    },\n    setHashMap: function setHashMap(name, value, geoJson) {\n      var _this7 = this;\n      this.hashMap.set(1, this.getDefaultHashMap());\n      this.hashMap.set(this.zoom, {\n        name: name,\n        value: value,\n        geoJson: geoJson\n      });\n      this.hashMap.forEach(function (value, key, mapObj) {\n        if (key > _this7.zoom) _this7.hashMap.delete(key);\n      });\n      this.hashMap.delete(this.zoom + 1);\n      this.hashMap = new Map(this.hashMap);\n    },\n    clearHashMap: function clearHashMap() {\n      this.hashMap.clear();\n      this.hashMap.set(1, {\n        name: '中国',\n        value: '10000',\n        geoJson: this.geoJson\n      });\n      this.hashMap = new Map(this.hashMap);\n    },\n    getDefaultHashMap: function getDefaultHashMap() {\n      var code = Array.isArray(this.option.mapType) ? this.option.mapType[this.option.mapType.length - 1] : this.option.mapType;\n      var item = this.allAtlasList.find(function (i) {\n        return i.enCode === code;\n      });\n      if (item) return {\n        name: item.fullName,\n        value: item.id,\n        geoJson: this.geoJson\n      };\n      return {\n        name: '中国',\n        value: '10000',\n        geoJson: this.geoJson\n      };\n    },\n    readyMap: function readyMap(key, _ref) {\n      var name = _ref.name,\n        value = _ref.value,\n        geoJson = _ref.geoJson;\n      if (value == this.currMapCode) return;\n      this.code = value;\n      this.currMapCode = '';\n      if (key == 1) {\n        this.geoJson ? this.resetChart() : this.initMap();\n        this.clearHashMap();\n      } else {\n        this.initCurrOption();\n        echarts.registerMap(value, geoJson);\n        this.chart.setOption(this.currOption, true);\n        this.zoom = key;\n        this.setHashMap(name, value, geoJson);\n      }\n    },\n    handleDispatchAction: function handleDispatchAction() {\n      var _this8 = this;\n      clearInterval(this.timeTicket);\n      this.timeTicket = setInterval(function () {\n        var total = _this8.mapData.length;\n        var curr = _this8.count % total;\n        _this8.chart.dispatchAction({\n          type: 'showTip',\n          seriesIndex: 0,\n          dataIndex: curr\n        });\n        _this8.count += 1;\n      }, this.option.autoCarouselTime || 3000);\n    },\n    getAtlasList: function getAtlasList() {\n      var _this9 = this;\n      this.allAtlasList = [];\n      (0, _portal.getAtlas)().then(function (res) {\n        var loop = function loop(data) {\n          if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n              var ele = data[i];\n              _this9.allAtlasList.push(ele);\n              if (ele.children && ele.children.length) loop(ele.children);\n            }\n          }\n        };\n        loop(res.data);\n      });\n    }\n  }\n};",null]}