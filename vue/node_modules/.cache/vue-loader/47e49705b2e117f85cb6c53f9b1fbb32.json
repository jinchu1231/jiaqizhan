{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/components/columnAuthorize/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/components/columnAuthorize/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getInfo } from \"@/api/system/authorize\";\nimport {\n  getColumnAuthorizeList,\n  updateColumnState,\n  delColumn\n} from \"@/api/system/columnAuthorize\";\nimport ColumnAuthorizeForm from \"./Form\";\nimport ColumnAuthorizeBatchForm from \"./BatchForm\";\nimport { getFieldNameList } from \"@/api/system/menu\";\nimport { getDataSourceListAll } from \"@/api/systemData/dataSource\";\nimport ColumnConnectForm from \"../connectForm\";\nexport default {\n  components: {\n    ColumnAuthorizeForm,\n    ColumnAuthorizeBatchForm,\n    ColumnConnectForm\n  },\n  data() {\n    return {\n      columnAuthorizeListDrawer: false,\n      columnAuthorizeFormVisible: false,\n      columnAuthorizeBatchFormVisible: false,\n      columnConnectFormVisible: false,\n      dialogTitle: \"\",\n      listQuery: {\n        keyword: \"\"\n      },\n      moduleId: \"\",\n      loading: false,\n      btnLoading: false,\n      listLoading: false,\n      treeList: [],\n      menuType: 2,\n      dbOptions: [],\n      dbList: [],\n      tableName: \"\",\n      dataType: \"\",\n      dataList: {}\n    };\n  },\n  methods: {\n    init(moduleId, fullName, type, dataType) {\n      this.menuType = type;\n      this.dataType = dataType\n      this.columnAuthorizeListDrawer = true;\n      this.moduleId = moduleId;\n      this.dialogTitle = `列表权限 - ${fullName}`;\n      this.dbList = [];\n      this.dbOptions = [];\n      this.$nextTick(() => {\n        if (this.$refs[\"ColumnConnectForm\"]) {\n          this.$refs[\"ColumnConnectForm\"].dataForm.dataSelect = \"\";\n        }\n        this.listQuery.keyword = \"\";\n        this.getList();\n      });\n      if (this.menuType === 2) {\n        this.getDataSourceListAll();\n        this.getInfo()\n      }\n    },\n    getDataSourceListAll() {\n      getDataSourceListAll().then(res => {\n        const list = res.data.list || []\n        this.dbOptions = list.filter(o => o.children && o.children.length);\n      })\n    },\n    getInfo() {\n      getInfo(this.moduleId, this.dataType).then(res => {\n        this.dataList = res.data || {}\n        this.tableName = this.dataList.linkTables || ''\n      })\n    },\n    //数据连接\n    addDataConnect() {\n      this.columnConnectFormVisible = true;\n      this.$nextTick(() => {\n        this.$refs.ColumnConnectForm.init(this.dataList, this.moduleId, this.dbOptions, this.dataType);\n      });\n    },\n    getConnectList(tableName) {\n      this.tableName = tableName || \"\";\n      this.getInfo()\n    },\n    getList() {\n      this.listLoading = true;\n      getColumnAuthorizeList(this.moduleId, this.listQuery)\n        .then(res => {\n          this.treeList = res.data.list;\n          this.listLoading = false;\n          this.btnLoading = false;\n        })\n        .catch(() => {\n          this.listLoading = false;\n          this.btnLoading = false;\n        });\n    },\n    handleReLoad() {\n      this.btnLoading = true;\n      this.getList();\n    },\n    handleUpdateState(row) {\n      const txt = row.enabledMark ? \"禁用\" : \"开启\";\n      this.$confirm(`您确定要${txt}当前列表权限吗, 是否继续?`, \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          updateColumnState(row.id).then(res => {\n            this.$message({\n              type: \"success\",\n              message: res.msg,\n              duration: 1000,\n              onClose: () => {\n                row.enabledMark = row.enabledMark ? 0 : 1;\n              }\n            });\n          });\n        })\n        .catch(() => { });\n    },\n    addOrUpdateHandle(id) {\n      this.columnAuthorizeFormVisible = true;\n      this.$nextTick(() => {\n        this.$refs.ColumnAuthorizeForm.init(\n          this.moduleId,\n          id,\n          this.menuType,\n          this.dataType\n        );\n      });\n    },\n    handleBatchAdd() {\n      this.columnAuthorizeBatchFormVisible = true;\n      this.$nextTick(() => {\n        this.$refs.ColumnAuthorizeBatchForm.init(this.moduleId);\n      });\n    },\n    handleDel(id) {\n      this.$confirm(this.$t(\"common.delTip\"), this.$t(\"common.tipTitle\"), {\n        type: \"warning\"\n      })\n        .then(() => {\n          delColumn(id).then(res => {\n            this.$message({\n              type: \"success\",\n              message: res.msg,\n              duration: 1500,\n              onClose: () => {\n                this.getList();\n              }\n            });\n          });\n        })\n        .catch(() => { });\n    }\n  }\n};\n",null]}