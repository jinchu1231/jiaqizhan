{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/components/FileUploader.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/components/FileUploader.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { chunkMerge } from '@/api/common'\nimport uploadMixin from '@/components/Jnpf/Upload/vue-simple-uploader/mixin'\nimport qs from 'qs'\n\nconst units = {\n  KB: 1024,\n  MB: 1024 * 1024,\n  GB: 1024 * 1024 * 1024\n}\n\nexport default {\n  props: {\n    value: {\n      type: Array,\n      default: () => []\n    },\n    type: {\n      type: String,\n      default: 'annex'\n    },\n    limit: {\n      type: Number,\n      default: 0\n    },\n    accept: {\n      type: String,\n      default: '*'\n    },\n    sizeUnit: {\n      type: String,\n      default: 'MB'\n    },\n    fileSize: {\n      default: 5\n    }\n  },\n  mixins: [uploadMixin],\n  data() {\n    return {\n\n    }\n  },\n  computed: {\n    acceptText() {\n      let txt = ''\n      switch (this.accept) {\n        case 'image/*':\n          txt = '图片'\n          break;\n        case 'video/*':\n          txt = '视频'\n          break;\n        case 'audio/*':\n          txt = '音频'\n          break;\n        case '.xls,.xlsx':\n          txt = 'excel'\n          break;\n        case '.doc,.docx':\n          txt = 'word'\n          break;\n        case '.pdf':\n          txt = 'pdf'\n          break;\n        case '.txt':\n          txt = 'txt'\n          break;\n        default:\n          txt = ''\n          break;\n      }\n      return txt\n    },\n  },\n  methods: {\n    beforeUpload(file) {\n      const isTopLimit = this.limit ? this.value.length >= this.limit : false\n      if (isTopLimit) {\n        this.$message.error(`当前限制最多可以上传${this.limit}个文件`)\n        return false\n      }\n      const unitNum = units[this.sizeUnit]\n      let isRightSize = this.fileSize ? file.size / unitNum < this.fileSize : true\n      if (!isRightSize) {\n        this.$message.error(`文件大小超过${this.fileSize}${this.sizeUnit}`)\n        return isRightSize\n      }\n      let extension = file.getExtension()\n      let isAccept = this.accept.indexOf(extension) > -1\n      if (!isAccept) {\n        this.$message.error(`请选择${this.accept}类型的文件`)\n        return isAccept\n      }\n      return true\n    },\n    handelSuccess(file) {\n      const query = {\n        identifier: file.uniqueIdentifier,\n        fileName: file.name.replaceAll('#', ''),\n        fileSize: file.size,\n        fileType: file.getType(),\n        extension: file.getExtension(),\n        type: this.type,\n      };\n      chunkMerge(qs.stringify(query)).then(res => {\n        // 自定义完成状态\n        this.$set(file, 'customCompleted', true)\n        let data = {\n          name: file.name,\n          fileId: res.data.name,\n          fileSize: res.data.fileSize,\n          fileExtension: res.data.fileExtension,\n          fileVersionId: res.data.fileVersionId,\n          url: res.data.url\n        }\n        this.$emit('fileSuccess', data)\n        file.cancel()\n      }).catch(() => {\n        file.cancel()\n      })\n    }\n  }\n}\n",null]}