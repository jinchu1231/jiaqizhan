{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/list/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/list/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PrintDialog from '@/components/PrintDialog'\nimport PrintBrowse from \"@/components/PrintBrowse/batch\";\nimport { getModelList, getModelSubList, deleteModel, batchDelete, exportModel, createModel, updateModel, getConfigData, getModelInfo } from '@/api/onlineDev/visualDev'\nimport { Create, Update } from '@/api/workFlow/workFlowForm'\nimport { printOptionsApi } from '@/api/system/printDev'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport { getColumnsByModuleId } from '@/api/common'\nimport { dyOptionsList, systemComponentsList, noGroupList } from '@/components/Generator/generator/comConfig'\nimport { Candidates } from '@/api/workFlow/FlowBefore'\nimport { getFlowList } from '@/api/workFlow/FlowEngine'\nimport Form from './Form'\nimport { deepClone } from '@/components/Generator/utils'\nimport extraForm from './extraForm'\nimport FlowBox from '@/views/workFlow/components/FlowBox'\nimport Detail from './detail'\nimport RelevanceDetail from './RelevanceDetail'\nimport ExportBox from '@/components/ExportBox'\nimport Search from './Search'\nimport ChildTableColumn from './child-table-column'\nimport SuperQuery from '@/components/SuperQuery'\nimport CandidateForm from '@/views/workFlow/components/CandidateForm'\nimport CustomBox from '@/components/JNPFCustom'\nimport { mapGetters } from \"vuex\";\nimport { getDateDay, getLaterData, getBeforeData, getBeforeTime, getLaterTime, thousandsFormat } from '@/components/Generator/utils/index.js'\nimport SelectFlow from '@/components/SelectFlowDialog'\nexport default {\n  name: 'dynamicModel',\n  components: { PrintDialog, PrintBrowse, Form, extraForm, ExportBox, Search, Detail, FlowBox, ChildTableColumn, SuperQuery, CandidateForm, CustomBox, RelevanceDetail, SelectFlow },\n  props: ['config', 'modelId', 'isPreview'],\n  data() {\n    return {\n      printDialogVisible: false,\n      printBrowseVisible: false,\n      printId: \"\",\n      printListOptions: [],\n      systemComponentsList,\n      keyword: '',\n      treeProps: {\n        children: 'children',\n        label: 'fullName',\n        value: 'id',\n        isLeaf: 'isLeaf'\n      },\n      list: [],\n      cacheList: [],\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: '',\n        menuId: '',\n        queryJson: '',\n        superQueryJson: ''\n      },\n      defListQuery: {\n        sort: 'desc',\n        sidx: '',\n      },\n      defaultListQuery: {\n        pageSize: 20,\n        sort: 'desc',\n        sidx: '',\n      },\n      flowVisible: false,\n      formVisible: false,\n      extraFormVisible: false,\n      detailVisible: false,\n      detailsVisible: false,\n      importBoxVisible: false,\n      exportBoxVisible: false,\n      uploadBoxVisible: false,\n      customBoxVisible: false,\n      superQueryVisible: false,\n      treeData: [],\n      expandsTree: true,\n      treeActiveId: '',\n      columnData: {\n        columnBtnsList: []\n      },\n      ordersList: [],\n      formData: {},\n      columnList: [],\n      childColumnList: [],\n      columnOptions: [],\n      exportList: [],\n      columnBtnsList: [],\n      customBtnsList: [],\n      hasBatchBtn: false,\n      refreshTable: false,\n      expandsTable: true,\n      multipleSelection: [],\n      settingsColumnList: [],\n      mergeList: [],\n      expandObj: {},\n      flowTemplateJson: {},\n      isCustomCopy: false,\n      candidateVisible: false,\n      candidateType: 1,\n      branchList: [],\n      candidateList: [],\n      currRow: {},\n      workFlowFormData: {},\n      rowStyle: null,\n      cellStyle: null,\n      refreshTree: true,\n      flowList: [],\n      flowListVisible: false,\n      currFlow: {},\n      treeLoading: false,\n      treeRelationObj: {},\n      getLeftTreeActiveInfo: {},\n      countersignOver: false\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n    operationWidth() {\n      let customWidth = this.customBtnsList.length ? 50 : 0\n      if (this.columnData.type == 4 && this.config.enableFlow) customWidth += 50\n      return this.columnBtnsList.length * 50 + customWidth\n    },\n    showMoreBtn() {\n      return this.customBtnsList.length && this.customBtnsList.some(o => this.jnpf.hasBtnP(o.value))\n    }\n  },\n  watch: {\n    keyword(val) {\n      if (this.columnData.treeSynType == 0) this.$refs.treeBox.filter(val)\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    async init() {\n      this.listLoading = true\n      this.listQuery.menuId = this.$route.meta.modelId\n      this.refreshTable = false\n      if (!this.config.columnData || !this.config.formData) return\n      this.columnData = JSON.parse(this.config.columnData)\n      if (this.columnData.printIds && this.columnData.printIds.length > 0) {\n        this.getPrintListOptions(this.columnData.printIds)\n      }\n      if (this.columnData.type === 3) {\n        this.columnData.columnList = this.columnData.columnList.filter(o => o.prop != this.columnData.groupField)\n      }\n      if (this.config.enableFlow == 1) {\n        if (this.config.flowId) this.getFlowList()\n      }\n      this.hasBatchBtn = this.columnData.btnsList.some(o => ['batchRemove', 'batchPrint', 'download'].includes(o.value))\n      if (this.columnData.useBtnPermission) {\n        const permissionList = this.$store.getters.permissionList\n        const modelId = this.$route.meta.modelId\n        const list = permissionList.filter(o => o.modelId === modelId)\n        const btnsList = list[0] && list[0].button ? list[0].button : []\n        this.hasBatchBtn = btnsList.some(o => ['btn_batchRemove', 'btn_batchPrint', 'btn_download'].includes(o.enCode))\n      }\n      this.formData = JSON.parse(this.config.formData)\n      this.customBtnsList = this.columnData.customBtnsList || []\n      this.columnBtnsList = this.columnData.columnBtnsList || []\n      this.columnOptions = this.columnData.columnOptions || []\n      this.listLoading = true\n      if (this.isPreview) this.listQuery.menuId = \"270579315303777093\"\n      let res = await getColumnsByModuleId(this.listQuery.menuId)\n      this.settingsColumnList = res.data || []\n      this.rowStyle = this.jnpf.getScriptFunc.call(this, this.columnData.funcs && this.columnData.funcs.rowStyle)\n      this.cellStyle = this.jnpf.getScriptFunc.call(this, this.columnData.funcs && this.columnData.funcs.cellStyle)\n      this.getSearchSchemas()\n      this.getColumnList()\n      this.$nextTick(() => {\n        this.refreshTable = true\n      })\n      if (this.columnData.type === 4) this.buildOptions()\n      if (this.isPreview) return this.listLoading = false\n      this.initDefaultSearchData()\n      this.listQuery.pageSize = this.columnData.pageSize\n      this.listQuery.sort = this.columnData.sort\n      this.listQuery.sidx = this.columnData.defaultSidx\n      this.defaultListQuery.pageSize = this.columnData.pageSize\n      this.defaultListQuery.sort = this.columnData.sort\n      this.defaultListQuery.sidx = this.columnData.defaultSidx\n      this.setDefaultQuery(this.columnData.defaultSortConfig)\n      if (this.columnData.type === 3 || !this.columnData.hasPage) this.listQuery.pageSize = 10000\n      if (this.columnData.type === 2) {\n        this.treeProps.value = this.columnData.treePropsValue || 'id'\n        this.treeProps.label = this.columnData.treePropsLabel || 'fullName'\n        this.treeProps.children = this.columnData.treePropsChildren || 'children'\n        this.getTreeView()\n      } else {\n        this.initData()\n      }\n      this.addSearchList()\n    },\n    getTooltip(jnpfKey) {\n      return [\"slider\", \"rate\", ...noGroupList].includes(jnpfKey) ? false : !!this.columnData.showOverflow\n    },\n    setDefaultQuery(defaultSortList) {\n      const defaultSortConfig = (defaultSortList || []).map(o =>\n        (o.sort === 'desc' ? '-' : '') + o.field);\n      this.defListQuery.sidx = defaultSortConfig.join(',')\n    },\n    addSearchList() {\n      const searchList = this.columnData.searchList;\n      const obj = {\n        label: '关键词',\n        __config__: { jnpfKey: 'input' },\n        value: undefined,\n        id: 'jnpfKeyword',\n        prop: 'jnpfKeyword',\n      };\n      for (let i = 0; i < searchList.length; i++) {\n        const item = searchList[i];\n        if (item.isKeyword) return searchList.unshift(obj);\n      }\n    },\n    async getPrintListOptions(ids) {\n      printOptionsApi({ ids }).then(res => {\n        this.printListOptions = res.data\n      })\n    },\n    treeRefresh() {\n      this.keyword = ''\n      this.treeActiveId = ''\n      this.$refs.treeBox.setCurrentKey(null)\n      this.getTreeView()\n    },\n    printBrowseHandle(id) {\n      this.printDialogVisible = false\n      this.handleBatchPrint(id)\n    },\n    printDialog() {\n      this.printDialogVisible = true\n      this.$nextTick(() => {\n        if (this.printListOptions.length == 1) {\n          this.printBrowseHandle(this.printListOptions[0].id)\n          return\n        }\n        this.$refs.printDialog.initOptions(this.printListOptions)\n      })\n    },\n    handleBatchPrint(id) {\n      if (!id) {\n        this.$message({\n          type: \"warning\",\n          message: \"请配置打印模板\",\n          duration: 1500\n        });\n        return;\n      }\n      this.printId = id;\n      this.printBrowseVisible = true;\n    },\n    initData() {\n      if (this.isPreview) return\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        ...this.defListQuery\n      }\n      getModelList(this.modelId, query).then(res => {\n        if (this.columnData.type === 4) {\n          this.list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            rowEdit: false\n          }))\n          this.cacheList = JSON.parse(JSON.stringify(this.list))\n        } else {\n          this.list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            hasChildren: true\n          }))\n          if (this.columnData.type === 3) {\n            this.list.map(o => {\n              if (o.children && o.children.length) {\n                o.children = o.children.map(e => ({\n                  ...e,\n                  ...this.expandObj\n                }))\n              }\n            })\n          }\n        }\n        if (this.columnData.type !== 3 && this.columnData.hasPage) this.total = res.data.pagination.total\n        this.listLoading = false\n        this.$nextTick(() => {\n          if (this.columnData.funcs && this.columnData.funcs.afterOnload) this.setTableLoadFunc()\n        })\n      })\n    },\n    /**\n    * 对表格进行合计 目前只支持数字，金额，滑块\n    */\n    getTableSummaries(param) {\n      const thousandsField = []\n      this.columnList.forEach(res => {\n        if (res.thousands) thousandsField.push(res.id)\n      })\n      const { columns, data } = param;\n      const sums = [];\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '合计';\n          return;\n        } else if (this.columnData.summaryField.includes(column.property)) {\n          const values = data.map(item => Number(item[column.property]));\n          if (!values.every(value => isNaN(value))) {\n            sums[index] = values.reduce((prev, curr) => {\n              const value = Number(curr);\n              if (!isNaN(value)) {\n                return prev + curr;\n              } else {\n                return prev;\n              }\n            }, 0).toFixed(2);\n            if (thousandsField.includes(column.property)) sums[index] = thousandsFormat(sums[index])\n          } else {\n            sums[index] = '';\n          }\n        }\n      })\n      return sums;\n    },\n    toDetail(modelId, id) {\n      if (!id) return\n      this.mainLoading = true\n      getConfigData(modelId).then(res => {\n        this.mainLoading = false\n        if (!res.data || !res.data.formData) return\n        let formData = JSON.parse(res.data.formData)\n        formData.popupType = 'general'\n        this.detailsVisible = true\n        this.$nextTick(() => {\n          this.$refs.RelevanceDetail.init(formData, modelId, id)\n        })\n      }).catch(() => { this.mainLoading = false })\n    },\n    getTreeView() {\n      this.treeLoading = true\n      if (this.columnData.treeDataSource === \"dictionary\") {\n        if (!this.columnData.treeDictionary) return this.treeLoading = false\n        this.$store.dispatch('base/getDicDataSelector', this.columnData.treeDictionary).then(res => {\n          this.treeData = res\n          this.treeLoading = false\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"organize\") {\n        this.$store.dispatch('generator/getDepTree').then(res => {\n          this.treeData = res\n          this.treeLoading = false\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"department\") {\n        this.$store.dispatch('generator/getDepTree').then(res => {\n          this.treeData = res\n          this.treeLoading = false\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"api\") {\n        if (!this.columnData.treePropsUrl) return this.treeLoading = false\n        getDataInterfaceRes(this.columnData.treePropsUrl).then(res => {\n          this.treeData = Array.isArray(res.data) ? res.data : [];\n          this.treeLoading = false\n          this.initData()\n        })\n      }\n    },\n    getSearchSchemas() {\n      if (this.columnData.treeRelation) {\n        for (let i = 0; i < this.columnData.columnOptions.length; i++) {\n          const e = this.columnData.columnOptions[i];\n          if (e.id === this.columnData.treeRelation) {\n            this.treeRelationObj = { ...e, searchMultiple: false, jnpfKey: e.__config__.jnpfKey };\n            break;\n          }\n        }\n      }\n    },\n    getColumnList() {\n      if (this.isPreview) {\n        const columnList = this.columnData.columnList\n        this.columnList = this.transformColumnList(columnList)\n        return\n      }\n      let columnPermissionList = []\n      if (!this.columnData.useColumnPermission) {\n        columnPermissionList = this.columnData.columnList\n      } else {\n        const permissionList = this.$store.getters.permissionList\n        const modelId = this.$route.meta.modelId\n        const list = permissionList.filter(o => o.modelId === modelId)\n        const columnList = list[0] && list[0].column ? list[0].column : []\n        for (let i = 0; i < this.columnData.columnList.length; i++) {\n          inner: for (let j = 0; j < columnList.length; j++) {\n            if (this.columnData.columnList[i].prop === columnList[j].enCode) {\n              columnPermissionList.push(this.columnData.columnList[i])\n              break inner\n            }\n          }\n        }\n      }\n      if (![3, 5].includes(this.columnData.type)) columnPermissionList = this.getComplexColumns(columnPermissionList)\n      this.columnList = this.transformColumnList(columnPermissionList)\n    },\n    getComplexColumns(columns) {\n      let complexHeaderList = this.columnData.complexHeaderList || [];\n      if (!complexHeaderList.length) return columns;\n      let childColumns = [];\n      for (let i = 0; i < complexHeaderList.length; i++) {\n        const e = complexHeaderList[i];\n        e.label = e.fullName;\n        e.align = e.align;\n        e.dataIndex = e.id;\n        e.prop = e.id;\n        e.children = [];\n        e.jnpfKey = 'complexHeader';\n        e.sortable = false;\n        if (e.childColumns && e.childColumns.length) {\n          childColumns.push(...e.childColumns);\n          for (let j = 0; j < columns.length; j++) {\n            const o = columns[j];\n            if (e.childColumns.includes(o.id) && o.fixed !== 'left' && o.fixed !== 'right') e.children.push({ ...o });\n          }\n        }\n      }\n      complexHeaderList = complexHeaderList.filter(o => o.children.length);\n      for (let i = 0; i < columns.length; i++) {\n        const item = columns[i];\n        if (!childColumns.includes(item.id)) complexHeaderList.push(item);\n      }\n      return complexHeaderList;\n    },\n    transformColumnList(columnList) {\n      let list = []\n      for (let i = 0; i < columnList.length; i++) {\n        const e = columnList[i];\n        if (!e.prop.includes('-')) {\n          list.push(e)\n        } else {\n          let prop = e.prop.split('-')[0]\n          let vModel = e.prop.split('-')[1]\n          let label = e.label.split('-')[0]\n          let childLabel = e.label.replace(label + '-', '');\n          let newItem = {\n            align: \"center\",\n            jnpfKey: \"table\",\n            prop,\n            label,\n            children: []\n          }\n          e.vModel = vModel\n          e.childLabel = childLabel\n          if (!this.expandObj.hasOwnProperty(`${prop}Expand`)) this.$set(this.expandObj, `${prop}Expand`, false)\n          if (!list.some(o => o.prop === prop)) list.push(newItem)\n          for (let i = 0; i < list.length; i++) {\n            if (list[i].prop === prop) {\n              list[i].children.push(e)\n              break\n            }\n          }\n        }\n      }\n\n      this.getMergeList(list)\n      this.getExportList(list)\n      this.childColumnList = list.filter(o => o.jnpfKey === 'table')\n      return list\n    },\n    getExportList(list) {\n      let exportList = []\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].jnpfKey === 'table') {\n          if (this.columnData.type != 4) exportList.push(...list[i].children)\n        } else if (list[i].jnpfKey === 'complexHeader') {\n          exportList.push(...list[i].children)\n        } else {\n          exportList.push(list[i])\n        }\n      }\n      this.exportList = exportList.filter(o => !noGroupList.includes(o.__config__.jnpfKey))\n    },\n    initDefaultSearchData() {\n      let searchList = this.columnData.searchList\n      //处理搜索条件中的默认值\n      if (searchList != null && searchList.length > 0) {\n        let obj = {}\n        for (let i = 0; i < searchList.length; i++) {\n          const e = searchList[i]\n          if (e.value) {\n            if (Array.isArray(e.value)) {\n              if (e.value.length) obj[e.id] = e.value\n            } else {\n              obj[e.id] = e.value\n            }\n          }\n          //if ((Array.isArray(e.value) && e.value.length) || e.value || e.value === 0 || e.value === false) e.defaultValue = e.value;\n        }\n        this.listQuery.queryJson = JSON.stringify(obj) === \"{}\" ? '' : JSON.stringify(obj)\n      }\n    },\n    getMergeList(list) {\n      list.forEach(item => {\n        if (item.children && item.children.length > 0 && item.jnpfKey == 'table') {\n          item.children.forEach((child, index) => {\n            if (index == 0) {\n              this.mergeList.push({\n                prop: child.prop,\n                rowspan: 1,\n                colspan: item.children.length\n              })\n            } else {\n              this.mergeList.push({\n                prop: child.prop,\n                rowspan: 0,\n                colspan: 0\n              })\n            }\n          })\n        } else {\n          this.mergeList.push({\n            prop: item.prop,\n            rowspan: 1,\n            colspan: 1\n          })\n        }\n      })\n    },\n    arraySpanMethod({ column }) {\n      for (let i = 0; i < this.mergeList.length; i++) {\n        if (column.property == this.mergeList[i].prop) {\n          return [this.mergeList[i].rowspan, this.mergeList[i].colspan]\n        }\n      }\n    },\n    toggleExpand(row, field) {\n      row[field] = !row[field]\n    },\n    getNodePath(node) {\n      let fullPath = []\n      const loop = (node) => {\n        if (node.level) fullPath.unshift(node.data)\n        if (node.parent) loop(node.parent)\n      }\n      loop(node)\n      return fullPath\n    },\n    handleNodeClick(data, node) {\n      if (this.treeActiveId == data[this.treeProps.value]) return\n      this.treeActiveId = data[this.treeProps.value]\n      this.$refs.Search.treeReset()\n      let queryJson = {}\n      const isMultiple = !this.treeRelationObj ? false : this.treeRelationObj.searchMultiple;\n      if (this.treeRelationObj && this.treeRelationObj.jnpfKey && ['organizeSelect', 'cascader', 'areaSelect'].includes(this.treeRelationObj.jnpfKey)) {\n        const nodePath = this.getNodePath(node)\n        const currValue = nodePath.map(o => o[this.treeProps.value])\n        this.treeActiveId = currValue\n        queryJson = { [this.columnData.treeRelation]: isMultiple ? [currValue] : currValue };\n      } else {\n        queryJson = { [this.columnData.treeRelation]: isMultiple ? [this.treeActiveId] : this.treeActiveId };\n      }\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__config__ && data.__config__.jnpfKey) {\n          if (data.__vModel__ == this.columnData.treeRelation) {\n            data.__config__.defaultCurrent = false\n            data.__config__.defaultValue = data.multiple ? [this.treeActiveId] : this.treeActiveId\n            this.getLeftTreeActiveInfo = { [this.columnData.treeRelation]: data.__config__.defaultValue }\n          }\n        }\n      }\n      loop(this.formData.fields)\n      this.search(JSON.stringify(queryJson))\n    },\n    handleDel(id, index) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        if (id) {\n          deleteModel(this.modelId, id).then(res => {\n            this.$message({\n              type: 'success',\n              message: res.msg,\n              duration: 1000,\n              onClose: () => { this.initData() }\n            });\n          })\n        } else {\n          this.list.splice(index, 1)\n        }\n      }).catch(() => { });\n    },\n    editForRowEdit(row) {\n      row.rowEdit = true\n      this.addHandleForRowEdit(true)\n      if (this.columnData.type === 4) return\n      const flowId = row.flowId || this.flowList[0].id;\n      if (!flowId) return\n      const list = this.flowList.filter(o => o.id === flowId)\n      this.currFlow = !list.length ? this.flowList[0] : list[0]\n      let flowTemplateJson = this.currFlow.flowTemplateJson ? JSON.parse(this.currFlow.flowTemplateJson) : {}\n      this.isCustomCopy = flowTemplateJson.properties && flowTemplateJson.properties.isCustomCopy\n    },\n    saveForRowEdit(row, status, candidateData) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      if (this.config.enableFlow == 1) {\n        let query = {\n          id: row.id,\n          status: status || \"1\",\n          candidateType: this.candidateType,\n          countersignOver: this.countersignOver,\n          formData: row,\n          flowId: this.currFlow.id,\n          flowUrgent: 1\n        }\n        if (candidateData) query = { ...query, ...candidateData }\n        const formMethod = query.id ? Update : Create\n        formMethod(query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.candidateVisible = false\n              this.initData()\n            }\n          })\n        })\n      } else {\n        let query = {\n          id: row.id,\n          data: JSON.stringify(row)\n        }\n        const formMethod = query.id ? updateModel : createModel\n        formMethod(this.modelId, query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.candidateVisible = false\n              this.initData()\n            }\n          })\n        })\n      }\n    },\n    submitForRowEdit(row) {\n      this.currRow = row\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.workFlowFormData = {\n        id: row.id,\n        formData: row,\n        flowId: this.currFlow.id\n      }\n      Candidates(0, this.workFlowFormData).then(res => {\n        let data = res.data\n        this.candidateType = data.type\n        this.countersignOver = data.countersignOver\n        if (data.type == 1) {\n          this.branchList = res.data.list.filter(o => o.isBranchFlow)\n          this.candidateList = res.data.list.filter(o => !o.isBranchFlow && o.isCandidates)\n          this.candidateVisible = true\n        } else if (data.type == 2) {\n          this.branchList = []\n          this.candidateList = res.data.list.filter(o => o.isCandidates)\n          this.candidateVisible = true\n        } else {\n          if (this.isCustomCopy) {\n            this.branchList = []\n            this.candidateList = []\n            this.candidateVisible = true\n            return\n          }\n          this.$confirm('您确定要提交当前流程吗, 是否继续?', '提示', {\n            type: 'warning'\n          }).then(() => {\n            this.saveForRowEdit(row, '0')\n          }).catch(() => { })\n        }\n      }).catch(() => { })\n    },\n    submitCandidate(data) {\n      this.saveForRowEdit(this.currRow, '0', data)\n    },\n    cancelRowEdit(row, index) {\n      if (!row.id) return this.list.splice(index, 1)\n      row.rowEdit = false\n      let item = JSON.parse(JSON.stringify(this.cacheList[index]))\n      this.$set(this.list, index, item)\n    },\n    addHandleForRowEdit(flag) {\n      let item = {\n        rowEdit: true\n      }\n      for (let i = 0; i < this.columnData.columnList.length; i++) {\n        let e = this.columnData.columnList[i]\n        item[e.id] = e.__config__.defaultValue\n        const config = e.__config__\n        if (e.__config__.defaultCurrent) {\n          if (e.__config__.jnpfKey === 'datePicker') {\n            if (e.__config__.defaultCurrent == true) item[e.id] = new Date().getTime()\n            if (config.startTimeRule) {\n              if (config.startTimeType == 1) {\n                e.startTime = config.startTimeValue\n              } else if (config.startTimeType == 3) {\n                e.startTime = new Date().getTime()\n              } else if (config.startTimeType == 4) {\n                let previousDate = '';\n                if (config.startTimeTarget == 1 || config.startTimeTarget == 2) {\n                  previousDate = getDateDay(config.startTimeTarget, config.startTimeType, config.startTimeValue)\n                  e.startTime = new Date(previousDate).getTime()\n                } else if (config.startTimeTarget == 3) {\n                  previousDate = getBeforeData(config.startTimeValue)\n                  e.startTime = new Date(previousDate).getTime()\n                } else {\n                  e.startTime = getBeforeTime(config.startTimeTarget, config.startTimeValue).getTime()\n                }\n              } else if (config.startTimeType == 5) {\n                let previousDate = '';\n                if (config.startTimeTarget == 1 || config.startTimeTarget == 2) {\n                  previousDate = getDateDay(config.startTimeTarget, config.startTimeType, config.startTimeValue)\n                  e.startTime = new Date(previousDate).getTime()\n                } else if (config.startTimeTarget == 3) {\n                  previousDate = getLaterData(config.startTimeValue)\n                  e.startTime = new Date(previousDate).getTime()\n                } else {\n                  e.startTime = getLaterTime(config.startTimeTarget, config.startTimeValue).getTime()\n                }\n              }\n            }\n            if (config.endTimeRule) {\n              if (config.endTimeType == 1) {\n                e.endTime = config.endTimeValue\n              } else if (config.endTimeType == 3) {\n                e.endTime = new Date().getTime()\n              } else if (config.endTimeType == 4) {\n                let previousDate = '';\n                if (config.endTimeTarget == 1 || config.endTimeTarget == 2) {\n                  previousDate = getDateDay(config.endTimeTarget, config.endTimeType, config.endTimeValue)\n                  e.endTime = new Date(previousDate).getTime()\n                } else if (config.endTimeTarget == 3) {\n                  previousDate = getBeforeData(config.endTimeValue)\n                  e.endTime = new Date(previousDate).getTime()\n                } else {\n                  e.endTime = getBeforeTime(config.endTimeTarget, config.endTimeValue).getTime()\n                }\n              } else if (config.endTimeType == 5) {\n                let previousDate = '';\n                if (config.endTimeTarget == 1 || config.endTimeTarget == 2) {\n                  previousDate = getDateDay(config.endTimeTarget, config.endTimeType, config.endTimeValue)\n                  e.endTime = new Date(previousDate).getTime()\n                } else if (config.endTimeTarget == 3) {\n                  previousDate = getLaterData(config.endTimeValue)\n                  e.endTime = new Date(previousDate).getTime()\n                } else {\n                  e.endTime = getLaterTime(config.endTimeTarget, config.endTimeValue).getTime()\n                }\n              }\n            }\n          } else if (e.__config__.jnpfKey === 'organizeSelect' && e.__config__.defaultCurrent == true) {\n            item[e.id] = e.multiple ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n          } else if (config.jnpfKey === 'depSelect' && this.userInfo.departmentId) {\n            item[e.id] = e.multiple ? [this.userInfo.departmentId] : this.userInfo.departmentId;\n          }\n          else if (config.jnpfKey === 'userSelect' && this.userInfo.userId) {\n            item[e.id] = e.multiple ? [this.userInfo.userId] : this.userInfo.userId;\n          }\n          else if (config.jnpfKey === 'usersSelect' && this.userInfo.userId) {\n            item[e.id] = e.multiple ? [this.userInfo.userId + '--user'] : this.userInfo.userId + '--user';\n          }\n          else if (config.jnpfKey === 'posSelect' && this.userInfo.positionIds.length) {\n            item[e.id] = e.multiple ? this.userInfo.positionIds.map(o => o.id) : this.userInfo.positionIds[0].id;\n          }\n          else if (config.jnpfKey === 'roleSelect' && this.userInfo.roleIds.length) {\n            item[e.id] = e.multiple ? this.userInfo.roleIds : this.userInfo.roleIds[0];\n          }\n          else if (config.jnpfKey === 'groupSelect' && this.userInfo.groupIds.length) {\n            item[e.id] = e.multiple ? this.userInfo.groupIds : this.userInfo.groupIds[0];\n          } else if (e.__config__.jnpfKey === 'timePicker') {\n            if (e.__config__.defaultCurrent == true) item[e.id] = this.jnpf.toDate(new Date(), e.format)\n            let format = e.format === 'HH:mm' ? 'HH:mm:00' : e.format\n            if (config.startTimeRule) {\n              if (config.startTimeType == 1) {\n                e.startTime = config.startTimeValue || '00:00:00'\n                if (e.startTime.split(':').length == 3) {\n                  e.startTime = e.startTime\n                } else {\n                  e.startTime = e.startTime + ':00'\n                }\n              } else if (config.startTimeType == 3) {\n                e.startTime = this.jnpf.toDate(new Date(), format)\n              } else if (config.startTimeType == 4) {\n                let previousDate = '';\n                previousDate = getBeforeTime(config.startTimeTarget, config.startTimeValue)\n                e.startTime = this.jnpf.toDate(previousDate, format)\n              } else if (config.startTimeType == 5) {\n                let previousDate = '';\n                previousDate = getLaterTime(config.startTimeTarget, config.startTimeValue)\n                e.startTime = this.jnpf.toDate(previousDate, format)\n              }\n            }\n            if (config.endTimeRule) {\n              if (config.endTimeType == 1) {\n                e.endTime = config.endTimeValue || '23:59:59'\n                if (e.endTime.split(':').length == 3) {\n                  e.endTime = e.endTime\n                } else {\n                  e.endTime = e.endTime + ':00'\n                }\n              } else if (config.endTimeType == 3) {\n                e.endTime = this.jnpf.toDate(new Date(), format)\n              } else if (config.endTimeType == 4) {\n                let previousDate = '';\n                previousDate = getBeforeTime(config.endTimeTarget, config.endTimeValue)\n                e.endTime = this.jnpf.toDate(previousDate, format)\n              } else if (config.endTimeType == 5) {\n                let previousDate = '';\n                previousDate = getLaterTime(config.endTimeTarget, config.endTimeValue)\n                e.endTime = this.jnpf.toDate(previousDate, format)\n              }\n            }\n          } else if (e.__config__.jnpfKey === 'sign' && this.userInfo.signImg) item[e.id] = this.userInfo.signImg\n        }\n      }\n      if (!flag) this.list.unshift(deepClone(item))\n    },\n    addHandle() {\n      if (this.config.enableFlow == 1) {\n        if (!this.flowList.length) {\n          this.$message({\n            type: 'error',\n            message: '流程不存在'\n          });\n        } else if (this.flowList.length === 1) {\n          this.selectFlow(this.flowList[0])\n        } else {\n          this.flowListVisible = true\n          this.$nextTick(() => {\n            this.$refs.selectFlow.init(this.flowList)\n          })\n        }\n      } else {\n        if (this.columnData.type === 4) {\n          this.addHandleForRowEdit()\n        } else {\n          this.formVisible = true\n          this.$nextTick(() => {\n            this.$refs.Form.init(this.formData, this.modelId, '', this.isPreview, this.columnData.useFormPermission, this.list, this.columnData.type)\n          })\n        }\n      }\n    },\n    selectFlow(item) {\n      this.currFlow = item\n      if (this.columnData.type === 4) {\n        let flowTemplateJson = item.flowTemplateJson ? JSON.parse(item.flowTemplateJson) : {}\n        this.isCustomCopy = flowTemplateJson.properties && flowTemplateJson.properties.isCustomCopy\n        this.flowListVisible = false\n        this.addHandleForRowEdit()\n      } else {\n        let data = {\n          id: '',\n          flowId: item.id,\n          opType: '-1',\n          type: 1,\n          modelId: this.modelId,\n          isPreview: this.isPreview,\n        }\n        let treeRelation = this.columnData.treeRelation\n        if (treeRelation) {\n          data = { ...data, 'getLeftTreeActiveInfo': this.getLeftTreeActiveInfo }\n        }\n        this.flowListVisible = false\n        this.flowVisible = true\n        this.$nextTick(() => {\n          this.$refs.FlowBox.init(data)\n        })\n      }\n    },\n    updateHandle(row) {\n      if (this.config.enableFlow == 1) {\n        let data = {\n          id: row.id,\n          flowId: row.flowId || this.flowList[0].id,\n          type: 1,\n          opType: '-1',\n          modelId: this.modelId,\n          isPreview: this.isPreview,\n        }\n        this.flowVisible = true\n        this.$nextTick(() => {\n          this.$refs.FlowBox.init(data)\n        })\n      } else {\n        this.formVisible = true\n        this.$nextTick(() => {\n          this.$refs.Form.init(this.formData, this.modelId, row.id, this.isPreview, this.columnData.useFormPermission, this.list, this.columnData.type)\n        })\n      }\n    },\n    headBtnsHandel(key) {\n      if (key === 'add') {\n        this.addHandle()\n      }\n      if (key == 'download') {\n        this.exportBoxVisible = true\n        this.$nextTick(() => {\n          this.$refs.ExportBox.init(this.exportList, this.multipleSelection)\n        })\n      }\n      if (key == 'upload') {\n        this.uploadBoxVisible = true\n        this.$nextTick(() => {\n          this.$refs.UploadBox.init(this.modelId, '', this.config.enableFlow, this.flowList)\n        })\n      }\n      if (this.isPreview) return\n      if (key === 'batchRemove') {\n        this.batchRemove()\n      }\n\n      if (key === 'batchPrint') {\n        if (!this.multipleSelection.length) {\n          this.$message({\n            type: 'error',\n            message: '请选择一条数据',\n            duration: 1500,\n          })\n          return\n        }\n        this.printDialog()\n      }\n    },\n    handleSelectionChange(val) {\n      const res = val.map(item => item.id)\n      this.multipleSelection = res\n    },\n    batchRemove() {\n      if (!this.multipleSelection.length) {\n        this.$message({\n          type: 'error',\n          message: '请选择一条数据',\n          duration: 1500,\n        })\n        return\n      }\n      this.$confirm('您确定要删除这些数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        batchDelete(this.modelId, this.multipleSelection).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.initData()\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    download(data) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据导出', type: 'warning' })\n      const defaultSortConfig = (this.columnData.defaultSortConfig || []).map(o =>\n        (o.sort === 'desc' ? '-' : '') + o.field);\n      this.listQuery.sidx = defaultSortConfig.join(',')\n      let query = { ...this.listQuery, ...data }\n      exportModel(this.modelId, query).then(res => {\n        if (!res.data.url) return\n        this.jnpf.downloadFile(res.data.url)\n        this.$refs.ExportBox.visible = false\n        this.exportBoxVisible = false\n      })\n    },\n    columnBtnsHandel(key, row, index) {\n      if (key === 'edit') {\n        this.updateHandle(row)\n      }\n      if (key === 'detail') {\n        this.goDetail(row)\n      }\n      if (key == 'remove') {\n        this.handleDel(row.id, index)\n      }\n    },\n    goDetail(row) {\n      if (this.config.enableFlow == 1) {\n        let data = {\n          id: row.id,\n          flowId: row.flowId,\n          type: 1,\n          opType: 0,\n          modelId: this.modelId,\n          isPreview: this.isPreview,\n        }\n        this.flowVisible = true\n        this.$nextTick(() => {\n          this.$refs.FlowBox.init(data)\n        })\n      } else {\n        this.detailVisible = true\n        this.$nextTick(() => {\n          this.$refs.Detail.init(this.formData, this.modelId, row.id, this.columnData.useFormPermission)\n        })\n      }\n    },\n    handleHeaderClass({ column }) {\n      column.order = column.multiOrder\n    },\n    handleOrderChange(orderColumn, orderState) {\n      let index = this.ordersList.findIndex(e => e.field === orderColumn);\n      let sort = orderState === 'ascending' ? 'asc' : orderState === 'descending' ? 'desc' : '';\n      if (index > -1) {\n        this.ordersList[index].sort = orderState;\n      } else {\n        this.ordersList.push({ field: orderColumn, sort });\n      }\n      this.ordersList = this.ordersList.filter(e => e.sort);\n      this.ordersList.length ? this.setDefaultQuery(this.ordersList) : this.setDefaultQuery(this.columnData.defaultSortConfig)\n      this.initData()\n    },\n    handleTableSort({ column }) {\n      if (column.sortable !== 'custom') return\n      column.multiOrder = column.multiOrder === 'descending' ? 'ascending' : column.multiOrder ? '' : 'descending';\n      this.handleOrderChange(column.property, column.multiOrder)\n    },\n    refresh(isRefresh) {\n      this.formVisible = false\n      this.extraFormVisible = false\n      if (isRefresh) this.initData()\n    },\n    closeFlow(isRefresh) {\n      this.flowVisible = false\n      if (isRefresh) this.initData()\n    },\n    async reset() {\n      if (this.columnData.type === 2 && this.treeActiveId) {\n        let obj = { [this.columnData.treeRelation]: this.treeActiveId }\n        let queryJson = this.treeActiveId ? JSON.stringify(obj) : ''\n        this.search(queryJson)\n      } else {\n        await this.initDefaultSearchData()\n        this.search(this.listQuery.queryJson)\n      }\n    },\n    searchData(queryJson) {\n      if (this.columnData.type === 2 && this.treeActiveId) {\n        queryJson = queryJson ? JSON.parse(queryJson) : ''\n        queryJson = { [this.columnData.treeRelation]: this.treeActiveId, ...queryJson }\n        queryJson = JSON.stringify(queryJson)\n      }\n      this.search(queryJson)\n    },\n    search(queryJson) {\n      if (this.isPreview) return\n      if (!queryJson) this.$refs.treeBox && this.$refs.treeBox.setCurrentKey(null);\n      this.listQuery.queryJson = queryJson\n      this.listQuery.currentPage = 1\n      this.initData()\n    },\n    openSuperQuery() {\n      this.superQueryVisible = true\n      this.$nextTick(() => {\n        this.$refs.SuperQuery.init()\n      })\n    },\n    superQuery(queryJson) {\n      if (this.isPreview) return\n      this.listQuery.superQueryJson = queryJson\n      this.listQuery.currentPage = 1\n      this.initData()\n    },\n    customBtnsHandel(item, row, index) {\n      if (item.event.btnType == 1) this.handlePopup(item.event, row, index)\n      if (item.event.btnType == 2) this.handleScriptFunc(item.event, row, index)\n      if (item.event.btnType == 3) this.handleInterface(item.event, row, index)\n    },\n    handlePopup(item, row, index) {\n      this.customBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.CustomBox.init(item, this.modelId, row.id, this.isPreview)\n      })\n    },\n    handleScriptFunc(item, row, index) {\n      const parameter = {\n        data: row,\n        index,\n        refresh: this.initData,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n      const func = this.jnpf.getScriptFunc.call(this, item.func)\n      if (!func) return\n      func.call(this, parameter)\n    },\n    handleInterface(item, row) {\n      const handlerInterface = () => {\n        getModelInfo(this.modelId, row.id).then(res => {\n          const dataForm = res.data || {};\n          if (!dataForm.data) return;\n          const data = { ...JSON.parse(dataForm.data), id: row.id };\n          if (item.templateJson && item.templateJson.length) {\n            item.templateJson.forEach(e => {\n              const value = data[e.relationField] || data[e.relationField] == 0 || data[e.relationField] == false ? data[e.relationField] : '';\n              e.defaultValue = (e.relationField === '@formId' && e.sourceType == 1) ? data.id : e.sourceType == 1 ? value : e.relationField;\n            });\n          }\n          let query = { paramList: item.templateJson || [] }\n          getDataInterfaceRes(item.interfaceId, query).then(res => {\n            this.$message({ message: res.msg, type: 'success' });\n          })\n        })\n      }\n      if (!item.useConfirm) return handlerInterface()\n      this.$confirm(item.confirmTitle || '确认执行此操作', '提示', { type: 'warning' }).then(() => {\n        handlerInterface()\n      }).catch(() => { })\n    },\n    setTableLoadFunc() {\n      const JNPFTable = this.$refs.tableRef.$refs.JNPFTable\n      const parameter = {\n        data: this.list,\n        tableRef: JNPFTable,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n      const func = this.jnpf.getScriptFunc.call(this, this.columnData.funcs.afterOnload)\n      if (!func) return\n      func.call(this, parameter)\n    },\n    buildOptions() {\n      this.columnData.columnList.forEach(cur => {\n        const config = cur.__config__\n        if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            this.$store.dispatch('base/getDicDataSelector', config.dictionaryType).then(res => {\n              cur.options = res\n            })\n          }\n          if (config.dataType === 'dynamic' && config.propsUrl) {\n            let query = {\n              paramList: config.templateJson || [],\n            }\n            getDataInterfaceRes(config.propsUrl, query).then(res => {\n              let data = res.data\n              cur.options = Array.isArray(data) ? data : []\n            })\n          }\n        }\n      })\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.treeProps.label].indexOf(value) !== -1;\n    },\n    toggleTreeExpand(expands) {\n      this.keyword = ''\n      this.refreshTree = false\n      this.expandsTree = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(null)\n        })\n      })\n    },\n    toggleExpandList() {\n      this.refreshTable = false;\n      this.expandsTable = !this.expandsTable;\n      this.$nextTick(() => {\n        this.refreshTable = true;\n      });\n    },\n    loadNode(node, resolve) {\n      const nodeData = node.data\n      const config = this.columnData\n      if (config.treeInterfaceId) {\n        if (config.treeTemplateJson && config.treeTemplateJson.length) {\n          for (let i = 0; i < config.treeTemplateJson.length; i++) {\n            const element = config.treeTemplateJson[i];\n            element.defaultValue = nodeData[element.relationField] || ''\n          }\n        }\n        let query = {\n          paramList: config.treeTemplateJson || [],\n        }\n        getDataInterfaceRes(config.treeInterfaceId, query).then(res => {\n          let data = res.data\n          if (Array.isArray(data)) {\n            resolve(data);\n          } else {\n            resolve([]);\n          }\n        })\n      }\n    },\n    treeLoad(tree, treeNode, resolve) {\n      getModelSubList(this.modelId, tree.id, this.listQuery).then(res => {\n        if (res.data.list && Array.isArray(res.data.list)) {\n          const list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            hasChildren: true\n          }))\n          resolve(list);\n        } else {\n          resolve([]);\n        }\n      })\n    },\n    getFlowList() {\n      getFlowList(this.config.flowId, '1').then(res => {\n        this.flowList = res.data\n      })\n    },\n    handleRowForm(index) {\n      this.extraFormVisible = true\n      let list = []\n      this.$nextTick(() => {\n        const fields = this.columnList.filter(o => o.jnpfKey != 'table')\n        fields.forEach(res => {\n          if (res.jnpfKey === 'complexHeader') {\n            list.push(...res.children)\n          } else {\n            list.push(res)\n          }\n        })\n        list = list.map(o => {\n          o.__config__.span = 24;\n          o.__config__.label = o.label;\n          if (o.__config__.templateJson && o.__config__.templateJson.length) {\n            o.__config__.templateJson = o.__config__.templateJson.map(o => ({ ...o, relationField: '' }));\n          }\n          if (o.templateJson && o.templateJson.length) {\n            o.templateJson = o.templateJson.map(o => ({ ...o, relationField: '' }));\n          }\n          return o;\n        });\n        const formData = { ...this.formData, fields: list }\n        this.$refs.extraForm.init(formData, this.modelId, this.isPreview, this.columnData.useFormPermission, this.list[index])\n      })\n    },\n    getFixed(item, i) {\n      if (i == 0 && this.columnData.groupField && this.columnData.type == 3) {\n        if (this.columnList.some(o => o.fixed == 'left')) return 'left'\n        return false\n      } else if (this.columnData.childTableStyle != 2) {\n        return item.fixed == 'none' ? false : item.fixed\n      } else {\n        return false\n      }\n    }\n  }\n}\n",null]}