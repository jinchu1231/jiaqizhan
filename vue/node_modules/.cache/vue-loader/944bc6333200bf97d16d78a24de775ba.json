{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/SuperQuery/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/SuperQuery/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { getAdvancedQueryList, Delete, Create, Update } from \"@/api/system/advancedQuery\";\nimport Condition from \"@/components/ColumnDesign/condition\";\nimport { deepClone } from '@/utils';\nconst condition = [{\n  logic: \"and\",\n  groups: [{\n    fieldValue: '',\n    field: '',\n    symbol: '',\n    jnpfKey: '',\n    cellKey: +new Date()\n  }]\n}]\nexport default {\n  components: {\n    Condition\n  },\n  props: {\n    columnOptions: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      visible: false,\n      addPlanVisible: false,\n      loading: false,\n      btnLoading: false,\n      saveBtnLoading: false,\n      conditionList: deepClone(condition),\n      staging: {},\n      key2: +new Date(),\n      planList: [],\n      fieldOptions: [],\n      dataForm: {\n        fullName: ''\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: '请输入保存的方案名称', trigger: 'blur' }\n        ]\n      },\n      matchLogic: 'and'\n    }\n  },\n  computed: {\n    currMenuId() {\n      return this.$route.meta.modelId || ''\n    }\n  },\n  methods: {\n    init() {\n      this.visible = true\n      this.loading = true\n      let componentList = JSON.parse(JSON.stringify(this.columnOptions))\n      this.fieldOptions = componentList\n      this.getAdvancedQueryList()\n      this.$nextTick(() => {\n        this.loading = false\n      })\n    },\n    close() {\n      this.conditionList = this.staging && this.staging.conditionList || deepClone(condition)\n      this.matchLogic = this.staging && this.staging.matchLogic || 'and'\n      this.visible = false\n    },\n    getAdvancedQueryList() {\n      if (!this.currMenuId) return\n      getAdvancedQueryList(this.currMenuId).then(res => {\n        this.planList = res.data.list\n      })\n    },\n    addCondition() {\n      let item = {\n        logic: \"and\",\n        groups: [{\n          field: '', symbol: '', jnpfKey: '', fieldValueType: 2, fieldValue: undefined, fieldValueJnpfKey: '', cellKey: +new Date()\n        }]\n      }\n\n      this.conditionList.push(item)\n    },\n    delPlan(id, i) {\n      Delete(id).then(res => {\n        this.$message({\n          type: 'success',\n          message: res.msg,\n          duration: 1500,\n          onClose: () => {\n            this.planList.splice(i, 1)\n          }\n        })\n      })\n    },\n    selectPlan(item) {\n      this.conditionList = item.conditionJson ? JSON.parse(item.conditionJson) : []\n      this.matchLogic = item.matchLogic\n      this.key2 = +new Date()\n      this.$refs.planPopper.doClose()\n    },\n    addPlan() {\n      if (!this.exist()) return\n      this.addPlanVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n      })\n    },\n    savePlan() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let boo = this.planList.some(o => o.fullName === this.dataForm.fullName)\n          if (!boo) return this.submit()\n          let list = this.planList.filter(o => o.fullName === this.dataForm.fullName)\n          this.$confirm(`${list[0].fullName}已存在, 是否覆盖方案?`, '', {\n            type: 'warning'\n          }).then(() => {\n            this.submit(list[0].id)\n          }).catch(() => { });\n        }\n      })\n    },\n    submit(id) {\n      this.saveBtnLoading = true\n      let query = {\n        id: id || '',\n        ...this.dataForm,\n        matchLogic: this.matchLogic,\n        moduleId: this.currMenuId,\n        conditionJson: JSON.stringify(this.conditionList)\n      }\n      const formMethod = query.id ? Update : Create\n      formMethod(query).then(res => {\n        this.getAdvancedQueryList()\n        this.addPlanVisible = false\n        this.saveBtnLoading = false\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500\n        })\n      }).catch(() => {\n        this.saveBtnLoading = false\n      })\n    },\n    getDataType(jnpfKey) {\n      if (!jnpfKey) return ''\n      if (['inputNumber', 'datePicker', 'rate', 'slider'].includes(jnpfKey)) {\n        return 'number'\n      } else if (['uploadFile', 'uploadImg', 'cascader', 'organizeSelect', 'areaSelect'].includes(jnpfKey)) {\n        return 'array'\n      }\n      return ''\n    },\n    exist(type) {\n      const mes = type == 'query' ? '查询' : '保存'\n      let item = this.$refs.base && this.$refs.base.getData() || ''\n      if (type == 'query' && !item) return true\n      if (!item) return this.$message.warning(`请添加${mes}条件`)\n      this.conditionList = item.conditionList;\n      this.matchLogic = item.matchLogic\n      let isOk = true\n      for (let i = 0; i < this.conditionList.length; i++) {\n        const e = this.conditionList[i];\n        for (let j = 0; j < e.groups.length; j++) {\n          const child = e.groups[j];\n          if (!child.field) {\n            this.$message.warning(`${mes}字段不能为空`);\n            isOk = false;\n            return;\n          }\n          if (!child.symbol) {\n            this.$message.warning(`${mes}符号不能为空`);\n            isOk = false;\n            return;\n          }\n          if (!['null', 'notNull'].includes(child.symbol) && !['switch'].includes(child.jnpfKey) && ((!child.fieldValue && child.fieldValue !== 0) || ((typeof child.fieldValue === \"object\" && child.fieldValue.length == 0)) || this.jnpf.isEmpty(child.fieldValue))) {\n            this.$message.warning(`数据值不能为空`);\n            isOk = false;\n            return;\n          }\n        }\n      }\n      return isOk\n    },\n    query() {\n      if (!this.exist('query')) return\n      let query = {\n        matchLogic: this.matchLogic,\n        conditionList: this.conditionList\n      }\n      this.staging = JSON.parse(JSON.stringify(query))\n      query = JSON.stringify(query)\n      if (!this.conditionList.length) query = \"\"\n      this.$emit('superQuery', query)\n      this.visible = false\n    }\n  }\n}\n",null]}