{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/extend/email/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/extend/email/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { EmailList, Receive, Delete, ReceiveRead, ReceiveUnread, ReceiveYesStarred, ReceiveNoStarred } from '@/api/extend/email'\nimport Config from './Config'\nimport Form from './Form'\nimport Detail from './Detail'\n\nexport default {\n  name: 'extend-email',\n  components: { Config, Form, Detail },\n  data() {\n    return {\n      receiveing: false,\n      configVisible: false,\n      formVisible: false,\n      detailVisible: false,\n      subordinateIds: [],\n      activeTab: 'inBox',\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近一周',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      pickerVal: [],\n      keyword: '',\n      startTime: '',\n      endTime: '',\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc'\n      },\n      list: []\n    }\n  },\n  watch: {\n    activeTab(val) {\n      this.reset()\n    }\n  },\n  created() {\n    this.initData()\n  },\n  methods: {\n    reset() {\n      this.list = []\n      this.keyword = ''\n      this.pickerVal = ''\n      this.startTime = ''\n      this.endTime = ''\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc'\n      }\n      this.initData()\n    },\n    initData() {\n      this.listLoading = true\n      let data = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        type: this.activeTab\n      }\n      EmailList(data).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    beforeLeaveTab(activeName, oldActiveName) {\n      let noChangeList = ['writeMail', 'setAccount', 'Personal', 'Work', 'Business', 'Clients']\n      if (noChangeList.indexOf(activeName) > -1) {\n        if (activeName === 'setAccount') {\n          this.configVisible = true\n          this.$nextTick(() => {\n            this.$refs.config.init()\n          })\n        }\n        if (activeName === 'writeMail') {\n          this.write()\n        }\n        return false\n      }\n    },\n    search() {\n      if (this.pickerVal && this.pickerVal.length) {\n        this.startTime = this.pickerVal[0]\n        this.endTime = this.pickerVal[1]\n      } else {\n        this.startTime = ''\n        this.endTime = ''\n      }\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc'\n      }\n      this.initData()\n    },\n    readInfo(id, isSend, index) {\n      this.detailVisible = true\n      this.$nextTick(() => {\n        this.$refs.detail.init(id, isSend, index)\n      })\n    },\n    write(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id)\n      })\n    },\n    // 收邮件\n    receiveEmail() {\n      this.receiveing = true\n      Receive().then(res => {\n        this.receiveing = false\n        this.$message({\n          message: `收件成功${res.data}条`,\n          type: 'success',\n          duration: 1000,\n          onClose: () => { }\n        })\n        if (this.activeTab == 'inBox') {\n          this.reset()\n        } else {\n          this.activeTab = 'inBox'\n        }\n      }).catch(() => {\n        this.receiveing = false\n      })\n    },\n    handleDel(index, id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        Delete(id).then(res => {\n          this.list.splice(index, 1);\n          this.$message({\n            type: 'success',\n            message: res.msg\n          });\n        })\n      }).catch(() => { });\n    },\n    ReceiveRead(row) {\n      ReceiveRead(row.id).then(res => {\n        row.isRead = 1\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    ReceiveUnread(row) {\n      ReceiveUnread(row.id).then(res => {\n        row.isRead = 0\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    ReceiveYesStarred(row) {\n      ReceiveYesStarred(row.id).then(res => {\n        row.starred = 1\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    ReceiveNoStarred(row, index) {\n      ReceiveNoStarred(row.id).then(res => {\n        if (this.activeTab === 'star') {\n          this.list.splice(index, 1);\n        } else {\n          row.starred = 0\n        }\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    move(id, key) {\n      // console.log(id, key);\n    },\n    setRead(index) {\n      this.list[index].isRead = 1\n    },\n    refresh(isSend) {\n      this.formVisible = false\n      if (isSend) {\n        if (this.activeTab === 'sent') {\n          this.reset()\n        } else {\n          this.activeTab = 'sent'\n        }\n      } else {\n        if (this.activeTab === 'draft') {\n          this.reset()\n        } else {\n          this.activeTab = 'draft'\n        }\n      }\n    }\n  }\n}\n",null]}