{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/Generator/utils/index.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/utils/index.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcRPN = exports.beautifierConf = void 0;\nexports.camelCase = camelCase;\nexports.debounce = void 0;\nexports.deepClone = deepClone;\nexports.exportDefault = void 0;\nexports.getAmountChinese = getAmountChinese;\nexports.getBeforeData = getBeforeData;\nexports.getBeforeTime = getBeforeTime;\nexports.getDateDay = getDateDay;\nexports.getLaterData = getLaterData;\nexports.getLaterTime = getLaterTime;\nexports.indent = indent;\nexports.isNumberStr = isNumberStr;\nexports.jsonClone = jsonClone;\nexports.mergeNumberOfExps = void 0;\nexports.numberThousandth = numberThousandth;\nexports.thousandsFormat = thousandsFormat;\nexports.titleCase = titleCase;\nexports.validExp = exports.toRPN = void 0;\nrequire(\"core-js/modules/es6.array.find-index\");\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nvar _slicedToArray2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/slicedToArray.js\"));\nrequire(\"core-js/modules/es6.number.is-nan\");\nrequire(\"core-js/modules/es6.number.constructor\");\nvar _typeof2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/typeof.js\"));\nrequire(\"core-js/modules/es6.regexp.to-string\");\nrequire(\"core-js/modules/es6.regexp.replace\");\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.regexp.constructor\");\n/* eslint-disable no-nested-ternary */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\n/**\n * num 小于0，左缩进num*2个空格； 大于0，右缩进num*2个空格。\n * @param {string} str 代码\n * @param {number} num 缩进次数\n * @param {number} len 【可选】缩进单位，空格数\n */\nfunction indent(str, num) {\n  var len = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  if (num === 0) return str;\n  var isLeft = num < 0;\n  var result = [];\n  var reg;\n  var spaces = '';\n  if (isLeft) {\n    num *= -1;\n    reg = new RegExp(\"(^\\\\s{0,\".concat(num * len, \"})\"), 'g');\n  } else {\n    for (var i = 0; i < num * len; i++) spaces += ' ';\n  }\n  str.split('\\n').forEach(function (line) {\n    line = isLeft ? line.replace(reg, '') : spaces + line;\n    result.push(line);\n  });\n  return result.join('\\n');\n}\n\n// 首字母大小\nfunction titleCase(str) {\n  return str.replace(/( |^)[a-z]/g, function (L) {\n    return L.toUpperCase();\n  });\n}\n\n// 下划转驼峰\nfunction camelCase(str) {\n  return str.replace(/-[a-z]/g, function (str1) {\n    return str1.substr(-1).toUpperCase();\n  });\n}\nfunction isNumberStr(str) {\n  return /^[+-]?(0|([1-9]\\d*))(\\.\\d+)?$/g.test(str);\n}\nvar exportDefault = exports.exportDefault = 'export default ';\nvar beautifierConf = exports.beautifierConf = {\n  html: {\n    indent_size: '2',\n    indent_char: ' ',\n    max_preserve_newlines: '-1',\n    preserve_newlines: false,\n    keep_array_indentation: false,\n    break_chained_methods: false,\n    indent_scripts: 'separate',\n    brace_style: 'end-expand',\n    space_before_conditional: true,\n    unescape_strings: false,\n    jslint_happy: false,\n    end_with_newline: true,\n    wrap_line_length: '110',\n    indent_inner_html: true,\n    comma_first: false,\n    e4x: true,\n    indent_empty_lines: true\n  },\n  js: {\n    indent_size: '2',\n    indent_char: ' ',\n    max_preserve_newlines: '-1',\n    preserve_newlines: false,\n    keep_array_indentation: false,\n    break_chained_methods: false,\n    indent_scripts: 'normal',\n    brace_style: 'end-expand',\n    space_before_conditional: true,\n    unescape_strings: false,\n    jslint_happy: true,\n    end_with_newline: true,\n    wrap_line_length: '110',\n    indent_inner_html: true,\n    comma_first: false,\n    e4x: true,\n    indent_empty_lines: true\n  }\n};\nfunction stringify(obj) {\n  return JSON.stringify(obj, function (key, val) {\n    if (typeof val === 'function') {\n      return \"\".concat(val);\n    }\n    return val;\n  });\n}\nfunction parse(str) {\n  JSON.parse(str, function (k, v) {\n    if (v.indexOf && v.indexOf('function') > -1) {\n      return eval(\"(\".concat(v, \")\"));\n    }\n    return v;\n  });\n}\nfunction jsonClone(obj) {\n  return parse(stringify(obj));\n}\n\n// 深拷贝对象\nfunction deepClone(obj) {\n  var _toString = Object.prototype.toString;\n\n  // null, undefined, non-object, function\n  if (!obj || (0, _typeof2.default)(obj) !== 'object') {\n    return obj;\n  }\n\n  // DOM Node\n  if (obj.nodeType && 'cloneNode' in obj) {\n    return obj.cloneNode(true);\n  }\n\n  // Date\n  if (_toString.call(obj) === '[object Date]') {\n    return new Date(obj.getTime());\n  }\n\n  // RegExp\n  if (_toString.call(obj) === '[object RegExp]') {\n    var flags = [];\n    if (obj.global) {\n      flags.push('g');\n    }\n    if (obj.multiline) {\n      flags.push('m');\n    }\n    if (obj.ignoreCase) {\n      flags.push('i');\n    }\n    return new RegExp(obj.source, flags.join(''));\n  }\n  var result = Array.isArray(obj) ? [] : obj.constructor ? new obj.constructor() : {};\n  for (var key in obj) {\n    result[key] = deepClone(obj[key]);\n  }\n  return result;\n}\n\n/**\n * 金额转中文\n * 思路：                       \n *                              个\n *      十     百      千       万\n *      十万   百万    千万     亿 \n *      十亿   百亿    千亿    \n *                              \n *                              1\n *      2      3       4        5\n *      6      7       8        9   \n *      10\n * \n * 计算步骤\n * 1. 获取当前数值大小\n * 2. 排除个位后 数值按个，十，百，千有规律的重复 所以计算其和4的余数 pos % 4\n * 3. pos = 0 ~ 3 没有最大单位\n *    pos = 4 ~ 7 最大单位是万\n *    pos = 8 ~ 11 最大单位是亿\n * pos / 4 的整数就是最大单位\n * \n */\nfunction getAmountChinese(val) {\n  var regexp = /[a-zA-Z]/;\n  if (!val && val !== 0) return '';\n  if (Number(val) === 0) return '零元整';\n  if (regexp.test(val)) return '数字较大溢出';\n  var value = val;\n  if (val < 0) {\n    val = Number(val.toString().split('-')[1]);\n  }\n  var amount = +val;\n  if (Number.isNaN(amount)) return '';\n  var NUMBER = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];\n  var N_UNIT1 = ['', '拾', '佰', '仟'];\n  var N_UNIT2 = ['', '万', '亿', '兆'];\n  var D_UNIT = ['角', '分', '厘', '毫'];\n  var _amount$toString$spli = amount.toString().split('.'),\n    _amount$toString$spli2 = (0, _slicedToArray2.default)(_amount$toString$spli, 2),\n    integer = _amount$toString$spli2[0],\n    decimal = _amount$toString$spli2[1];\n  if (integer && integer.length > 15) return '数字较大溢出';\n  var res = '';\n  // 整数部分\n  if (integer) {\n    var zeroCount = 0;\n    for (var i = 0, len = integer.length; i < len; i++) {\n      var num = integer.charAt(i);\n      var pos = len - i - 1; // 排除个位后 所处的索引位置\n      var q = pos / 4;\n      var m = pos % 4;\n      if (num === '0') {\n        zeroCount++;\n      } else {\n        if (zeroCount > 0 && m !== 3) res += NUMBER[0];\n        zeroCount = 0;\n        res += NUMBER[parseInt(num)] + N_UNIT1[m];\n      }\n      if (m == 0 && zeroCount < 4) res += N_UNIT2[Math.floor(q)];\n    }\n  }\n  if (Number(integer) != 0) res += '元';\n  // 小数部分\n  if (parseInt(decimal)) {\n    for (var _i = 0; _i < 4; _i++) {\n      var _num = decimal.charAt(_i);\n      if (parseInt(_num)) res += NUMBER[_num] + D_UNIT[_i];\n    }\n  } else {\n    res += '整';\n  }\n  if (value < 0) res = '负数' + res;\n  return res;\n}\n\n/**\n * 将用户输入的连续单个数字合并为一个数\n * @param {Array} expressions - 记录计算表达式的数组\n * @returns {Array} 新的数组\n */\nvar mergeNumberOfExps = exports.mergeNumberOfExps = function mergeNumberOfExps(expressions) {\n  var res = [];\n  var isNumChar = function isNumChar(n) {\n    return /^[\\d|\\.]$/.test(n);\n  };\n  for (var i = 0; i < expressions.length; i++) {\n    if (i > 0 && isNumChar(expressions[i - 1]) && isNumChar(expressions[i])) {\n      res[res.length - 1] += expressions[i];\n      continue;\n    }\n    res.push(expressions[i]);\n  }\n  return res;\n};\n/**\n * 校验表达式是否符合计算法则\n * @param {Array} expressions - 合并数字后的表达式数组\n * @returns {Boolean}\n */\nvar validExp = exports.validExp = function validExp(expressions) {\n  var mergeNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var temp = mergeNum ? mergeNumberOfExps(expressions) : expressions;\n  var arr = temp.filter(function (t) {\n    return !'()'.includes(t);\n  });\n  // 去括号后 length应该为奇数  并且第一个字符和最后一个字符应该为数字而非计算符号\n  if (temp.length % 2 === 0 || arr.length % 2 === 0 || Number.isNaN(+arr[0]) || Number.isNaN(+arr[arr.length - 1])) {\n    return false;\n  }\n  for (var i = 0; i < arr.length - 1; i += 2) {\n    if (typeof +arr[i] !== 'number' || !Number.isNaN(+arr[i + 1])) return false;\n  }\n  return true;\n};\n/**\n * 中缀转后缀（逆波兰 Reverse Polish Notation）\n * @param {Array} exps - 中缀表达式数组\n */\nvar toRPN = exports.toRPN = function toRPN(exps) {\n  var s1 = []; // 符号栈\n  var s2 = []; // 输出栈\n  var getTopVal = function getTopVal(stack) {\n    return stack.length > 0 ? stack[stack.length - 1] : null;\n  };\n  var levelCompare = function levelCompare(c1, c2) {\n    var getIndex = function getIndex(c) {\n      return ['+-', '×÷', '()'].findIndex(function (t) {\n        return t.includes(c);\n      });\n    };\n    return getIndex(c1) - getIndex(c2);\n  };\n  exps.forEach(function (t) {\n    if (typeof t === 'string' && Number.isNaN(Number(t))) {\n      // 是符号\n      if (t === '(') {\n        s1.push(t);\n      } else if (t === ')') {\n        var popVal;\n        do {\n          popVal = s1.pop();\n          popVal !== '(' && s2.push(popVal);\n        } while (s1.length && popVal !== '(');\n      } else {\n        var topVal = getTopVal(s1);\n        if (!topVal) {\n          // s1 为空 直接push\n          s1.push(t);\n        } else {\n          while (topVal && topVal !== '(' && levelCompare(topVal, t) >= 0) {\n            // 优先级 >= t 弹出到s2\n            s2.push(s1.pop());\n            topVal = getTopVal(s1);\n          }\n          s1.push(t);\n        }\n      }\n      return;\n    }\n    s2.push(t); // 数字直接入栈\n  });\n  while (s1.length) {\n    s2.push(s1.pop());\n  }\n  return s2;\n};\n/**\n * 计算后缀表达式的值\n * @param {Array} rpnExps - 后缀表达式\n */\nvar calcRPN = exports.calcRPN = function calcRPN(rpnExps) {\n  rpnExps = rpnExps.concat();\n  var calc = function calc(x, y, type) {\n    var a1 = Number(x),\n      a2 = Number(y);\n    switch (type) {\n      case '+':\n        return a1 + a2;\n      case '-':\n        return a1 - a2;\n      case '×':\n        return a1 * a2;\n      case '÷':\n        return a1 / a2;\n    }\n  };\n  for (var i = 2; i < rpnExps.length; i++) {\n    if ('+-×÷'.includes(rpnExps[i])) {\n      var val = calc(rpnExps[i - 2], rpnExps[i - 1], rpnExps[i]);\n      rpnExps.splice(i - 2, 3, val);\n      i = i - 2;\n    }\n  }\n  return rpnExps[0];\n};\n/**\n * 简易防抖函数\n * @param {Function} func -防抖目标函数\n * @param {Number} gap - 防抖时间间隔\n */\nvar debounce = exports.debounce = function debounce(func, gap) {\n  var timer;\n  return function () {\n    var _arguments = arguments,\n      _this = this;\n    timer && clearTimeout(timer);\n    timer = setTimeout(function () {\n      func.apply(_this, _arguments);\n    }, gap);\n  };\n};\n\n//计算年或者月\nfunction getDateDay(Target, type, monthNum) {\n  var date = new Date();\n  var year = date.getFullYear(); //获取当前日期的年份\n  var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1; //获取当前日期的月份\n  var day = date.getDate(); //获取当前日期的日\n  var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\n  var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n  var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();\n  var days = new Date(year, month, 0);\n  days = days.getDate(); //获取当前日期中的月的天数\n  var year2 = year;\n  var month2;\n  if (Target == 2) {\n    if (type == 5) {\n      month2 = parseInt(month) + parseInt(monthNum);\n      if (month2 > 12) {\n        year2 = parseInt(year2) + parseInt(parseInt(month2) / 12 == 0 ? 1 : parseInt(month2) / 12);\n        month2 = parseInt(month2) % 12;\n      }\n    } else if (type == 4) {\n      month2 = parseInt(month) - monthNum;\n      if (month2 <= 0) {\n        var absM = Math.abs(month2);\n        year2 = parseInt(year2) - Math.ceil(absM / 12 == 0 ? 1 : parseInt(absM) / 12);\n        month2 = 12 - absM % 12;\n      }\n    }\n  } else if (Target == 1) {\n    month2 = parseInt(month);\n    if (type == 5) {\n      year2 = parseInt(year) + parseInt(monthNum);\n    } else if (type == 4) {\n      year2 = parseInt(year) - parseInt(monthNum);\n    }\n  }\n  var day2 = day;\n  var days2 = new Date(year2, month2, 0);\n  days2 = days2.getDate();\n  if (day2 > days2) {\n    day2 = days2;\n  }\n  if (month2 < 10) {\n    month2 = '0' + month2;\n  }\n  var t2 = year2 + '-' + month2 + '-' + day2 + ' ' + hours + ':' + minutes + ':' + seconds;\n  return t2;\n}\n\n//计算日\nfunction getLaterData(days) {\n  var date = new Date();\n  date.setDate(date.getDate() + Number(days));\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\n  var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n  var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();\n  return date.getFullYear() + '-' + ('0' + month).slice(-2) + '-' + ('0' + day).slice(-2) + ' ' + hours + ':' + minutes + ':' + seconds;\n}\nfunction getBeforeData(num) {\n  var dateArray = [];\n  //获取今天日期\n  var myDate = new Date();\n  var hours = myDate.getHours() < 10 ? '0' + myDate.getHours() : myDate.getHours();\n  var minutes = myDate.getMinutes() < 10 ? '0' + myDate.getMinutes() : myDate.getMinutes();\n  var seconds = myDate.getSeconds() < 10 ? '0' + myDate.getSeconds() : myDate.getSeconds();\n  var today = myDate.getFullYear() + '-' + (myDate.getMonth() + 1) + \"-\" + myDate.getDate();\n  myDate.setDate(myDate.getDate() - num);\n  var dateTemp; // 临时日期数据\n  var flag = 1;\n  for (var i = 0; i < num; i++) {\n    dateTemp = myDate.getFullYear() + '-' + (myDate.getMonth() + 1) + \"-\" + myDate.getDate();\n    dateArray.push({\n      date: dateTemp\n    });\n    myDate.setDate(myDate.getDate() + flag);\n  }\n  dateArray.push({\n    date: today\n  });\n  var arr = [];\n  var newArr = [];\n  dateArray.forEach(function (item) {\n    arr.push(item.date.split('-'));\n  });\n  for (var _i2 = 0; _i2 < arr.length; _i2++) {\n    if (arr[_i2][1] < 10) {\n      arr[_i2][1] = \"0\" + arr[_i2][1];\n    }\n    if (arr[_i2][2] < 10) {\n      arr[_i2][2] = \"0\" + arr[_i2][2];\n    }\n  }\n  for (var j = 0; j < arr.length; j++) {\n    newArr.push(arr[j].join(\"-\"));\n  }\n  return newArr[0] + ' ' + hours + ':' + minutes + ':' + seconds;\n}\nfunction getBeforeTime(type, val) {\n  var date = new Date();\n  if (type == 4 || type == 1) {\n    date.setHours(Number(date.getHours()) - Number(val));\n  } else if (type == 5 || type == 2) {\n    date.setMinutes(Number(date.getMinutes()) - Number(val));\n  } else if (type == 6 || type == 3) {\n    date.setSeconds(Number(date.getSeconds()) - Number(val));\n  }\n  return date;\n}\nfunction getLaterTime(type, val) {\n  var date = new Date();\n  if (type == 4 || type == 1) {\n    date.setHours(Number(date.getHours()) + Number(val));\n  } else if (type == 5 || type == 2) {\n    date.setMinutes(Number(date.getMinutes()) + Number(val));\n  } else if (type == 6 || type == 3) {\n    date.setSeconds(Number(date.getSeconds()) + Number(val));\n  }\n  return date;\n}\nfunction numberThousandth(number, precision) {\n  if (!number) {\n    return null;\n  } else {\n    var dec_point = '.';\n    var thousands_sep = ',';\n    number = (number + '').replace(/[^0-9+-Ee.]/g, '');\n    var roundtag = 'round'; // \"ceil\",\"floor\",\"round\"\n    var n = !isFinite(+number) ? 0 : Number(number); // 检查number是否是无穷大\n    var prec = !isFinite(+precision) ? 0 : Math.abs(precision);\n    var sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep;\n    var dec = typeof dec_point === 'undefined' ? '.' : dec_point;\n    var s = '';\n    var toFixedFix = function toFixedFix(n, prec) {\n      n = Number(n);\n      prec = Number(prec);\n      var k = Math.pow(10, prec); // 10 的 prec 次幂\n      return '' + parseFloat(Math[roundtag](parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k; // 解析一个字符串，并返回一个浮点数。\n    };\n    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n    var re = /(-?\\d+)(\\d{3})/;\n    while (re.test(s[0])) {\n      s[0] = s[0].replace(re, '$1' + sep + '$2');\n    }\n    if ((s[1] || '').length < prec) {\n      s[1] = s[1] || '';\n      s[1] += new Array(prec - s[1].length + 1).join('0');\n    }\n    // 当数字位数过长去除科学计数法\n    return s.join(dec);\n  }\n}\nfunction thousandsFormat(num) {\n  if (!num && num !== 0) return '';\n  var numArr = num.toString().split('.');\n  numArr[0] = numArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return numArr.join('.');\n}",null]}