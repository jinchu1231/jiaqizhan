{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/userList/Im.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/userList/Im.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport emojiList from 'static/emoji.json';\nexport default {\n  name: 'im',\n  computed: {\n    ...mapGetters(['userInfo']),\n  },\n  filters: {\n    urlFilter(url) {\n      return require(`static/emoji/${url}`)\n    }\n  },\n  data() {\n    return {\n      key: '',\n      info: {},\n      visible: false,\n      keyword: '',\n      showHistory: false,\n      show: false,\n      imgSrc: '',\n      videoSrc: '',\n      audioSrc: '',\n      messageContent: '',\n      emojiList: emojiList,\n      list: [],\n      historyList: [],\n      historyDefaultList: [],\n      currentPage: 1,\n      pageSize: 50,\n      finish: false,\n      ajaxing: false,\n      popoverVisible: false,\n    }\n  },\n  watch: {\n    showHistory(val) {\n      if (!val) {\n        // this.$refs.historyListBox && this.$refs.historyListBox.removeEventListener('scroll');\n      }\n    }\n  },\n  mounted() { },\n  methods: {\n    init(item) {\n      this.visible = true\n      this.showHistory = false\n      this.info = item\n      this.socket = this.$store.getters.socket\n    },\n    scroll(num) {\n      setTimeout(() => {\n        this.$nextTick(() => {\n          let ele = this.$refs.chatList\n          if (ele.scrollHeight > ele.clientHeight) {\n            //设置滚动条到最底部\n            ele.scrollTop = ele.scrollHeight;\n          }\n        })\n      }, num || 0);\n    },\n    closeIM() {\n      this.showHistory = false\n      this.visible = false\n    },\n    //处理事件\n    handleEvent(type, src) {\n      if (type === 'image') {\n        this.imgSrc = src;\n        this.show = true;\n      } else if (type === 'video') {\n        this.videoSrc = src;\n        this.show = true;\n      } else if (type === 'voice') {\n        this.audioSrc = src;\n        this.show = true;\n      } else if (type === 'file') {\n        window.open(src)\n      }\n    },\n    handleClose(done) {\n      this.imgSrc = undefined;\n      this.videoSrc = undefined;\n      this.audioSrc = undefined;\n      done();\n    },\n    getList(data) {\n      let list = []\n      for (let i = 0; i < data.list.length; i++) {\n        const item = data.list[i];\n        if (item.contentType === \"text\") {\n          item.content = this.replaceEmoji(item.content)\n        } else if (item.contentType === \"image\") {\n          item.content = JSON.parse(item.content)\n        } else {\n          item.content = JSON.parse(item.content)\n        }\n        list.push({\n          userId: item.sendUserId,\n          messageType: item.contentType,\n          message: item.content,\n          dateTime: this.jnpf.toDate(item.sendTime)\n        })\n      }\n      if (!this.showHistory) {\n        this.list = list\n        this.$nextTick(() => {\n          this.scroll(800)\n        })\n      } else {\n        this.historyList = [...this.historyList, ...list]\n        this.currentPage += 1\n        this.finish = list.length < data.pagination.pageSize\n      }\n      this.ajaxing = false\n    },\n    addItem(item) {\n      if (item.messageType === \"text\") {\n        item.message = this.replaceEmoji(item.message)\n      } else if (item.messageType === \"image\") {\n        // item.message = JSON.parse(item.message)\n      }\n      this.list.push(item)\n      this.scroll()\n      if (this.showHistory) {\n        this.historyList.push(item)\n      }\n    },\n    searchHistory() {\n      this.currentPage = 1\n      this.pageSize = 50\n      this.finish = false\n      this.historyList = []\n      this.sendList()\n      this.$nextTick(() => {\n        let ele = this.$refs.historyListBox\n        ele.scrollTop = 0;\n      })\n    },\n    sendMessage() {\n      if (!this.messageContent) {\n        return\n      }\n      let socket = this.socket\n      let msgObj = {\n        method: \"SendMessage\",\n        toUserId: this.info.id,\n        messageType: \"text\",\n        messageContent: this.messageContent,\n        token: this.$store.getters.token,\n      }\n      let msg = JSON.stringify(msgObj);\n      socket.send(msg)\n      this.messageContent = ''\n    },\n    openHistory() {\n      this.showHistory = !this.showHistory\n      if (this.showHistory) {\n        this.historyList = []\n        this.currentPage = 1\n        this.pageSize = 50\n        this.finish = false\n        this.sendList()\n        this.$nextTick(() => {\n          this.bindScroll();\n        })\n      }\n    },\n    bindScroll() {\n      let _this = this,\n        ele = _this.$refs.historyListBox;\n      if (!ele) return\n      ele.addEventListener(\"scroll\", function () {\n        if (_this.finish || _this.ajaxing) return\n        if (ele.scrollTop >= ele.scrollHeight - ele.clientHeight - 100) _this.sendList()\n      });\n    },\n    sendList() {\n      this.ajaxing = true\n      let socket = this.socket\n      let msgObj = {\n        method: \"MessageList\",\n        toUserId: this.info.id,\n        formUserId: this.userInfo.userId,\n        token: this.$store.getters.token,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        sord: \"asc\",\n        keyword: this.keyword\n      }\n      let msg = JSON.stringify(msgObj);\n      socket.send(msg)\n    },\n    handleSuccess(res, file, fileList) {\n      if (res.code == 200) {\n        if (!res.data || !res.data.name) return\n        const name = res.data.name\n        this.getBase64(file.raw).then(res => {\n          let data = res\n          this.getImgSize(data.e).then(res => {\n            let messageContent = {\n              name,\n              width: res.width,\n              height: res.height\n            }\n            let msgObj = {\n              method: \"SendMessage\",\n              toUserId: this.info.id,\n              messageType: \"image\",\n              messageContent,\n              token: this.$store.getters.token,\n            }\n            let msg = JSON.stringify(msgObj);\n            this.socket.send(msg)\n            this.$nextTick(() => {\n              this.scroll(500)\n            })\n          })\n        })\n      } else {\n        fileList = []\n        this.$message({ message: res.msg, type: 'error', duration: 1500 })\n      }\n      this.$refs.upload.clearFiles()\n    },\n    beforeUpload(file) {\n      let isRightSize = file.size < 1024 * 1024 * 5\n      if (!isRightSize) {\n        this.$message.error(`图片大小不能超过5M`)\n      }\n      return isRightSize;\n    },\n    getBase64(file) {\n      let _this = this\n      return new Promise(function (resolve, reject) {\n        let reader = new FileReader()\n        let msg = { base64: '', e: null }\n        reader.readAsDataURL(file)\n        reader.onload = function (event) {\n          msg.base64 = reader.result.replace(/data:image\\/.*;base64,/, '')\n          msg.e = event\n        }\n        reader.onerror = function (error) {\n          reject(error)\n        }\n        reader.onloadend = function () {\n          resolve(msg)\n        }\n      })\n    },\n    getImgSize(event) {\n      return new Promise(function (resolve, reject) {\n        let size = { width: 0, height: 0 }\n        const txt = event.target.result\n        const img = document.createElement(\"img\")\n        img.src = txt\n        img.onload = function () {\n          size.width = img.width\n          size.height = img.height\n          resolve(size)\n        }\n        img.onerror = function (error) {\n          reject(error)\n        }\n      })\n    },\n    replaceEmoji(str) {\t//替换表情符号为图片\n      let replacedStr = str.replace(/\\[([^(\\]|\\[)]*)\\]/g, (item, index) => {\n        let obj = ''\n        for (let i = 0; i < this.emojiList.length; i++) {\n          let row = this.emojiList[i];\n          if (row.alt == item) {\n            let url = require(`static/emoji/${row.url}`)\n            obj = `<img src=\"${url}\" class=\"chatList-text-emoji\" />`\n            break\n          }\n        }\n        return obj\n      });\n      str = replacedStr;\n      return str\n    },\n    // 选择表情\n    selectEmit(item) {\n      this.messageContent += item.alt;\n      this.popoverVisible = false\n    }\n  },\n  beforeDestroy() {\n    // this.$refs.historyListBox  && this.$refs.historyListBox.removeEventListener('scroll');\n  }\n}\n",null]}