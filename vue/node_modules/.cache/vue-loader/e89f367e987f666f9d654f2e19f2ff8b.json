{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/components/formAuthorize/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/components/formAuthorize/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  createForm,\n  updateForm,\n  getFormInfo\n} from \"@/api/system/formAuthorize\";\nimport nameSelects from '../NameSelect.vue'\nimport { getVisualTables } from \"@/api/system/authorize\"\nexport default {\n  components: { nameSelects },\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      dataForm: {\n        id: \"\",\n        moduleId: \"\",\n        bindTable: \"\",\n        bindTableName: \"\",\n        fullName: \"\",\n        enCode: \"\",\n        sortCode: 0,\n        treeData: [],\n        enabledMark: 1,\n        description: \"\",\n        dataType: \"\",\n        fieldRule: 0,\n        childTableKey: ''\n      },\n      enCodeOptions: [],\n      fieldRuleOptions: [\n        { value: 0, label: \"主表规则\" },\n        { value: 1, label: \"副表规则\" },\n        { value: 2, label: \"子表规则\" }\n      ],\n      menuType: '',\n      dataType: '',\n      treeData: [],\n      nameVisible: false,\n      dataRule: {\n        enCode: [\n          { required: true, message: \"字段名称不能为空\", trigger: \"blur\" }\n        ],\n        fieldRule: [\n          { required: true, message: \"字段规则不能为空\", trigger: \"blur\" }\n        ],\n        childTableKey: [\n          { required: true, message: \"关联字段不能为空\", trigger: \"blur\" }\n        ],\n        fullName: [\n          { required: true, message: \"字段说明不能为空\", trigger: \"blur\" }\n        ]\n      }\n    };\n  },\n  methods: {\n    init(moduleId, id, menuType, dataType) {\n      this.menuType = menuType;\n      this.dataType = dataType\n      this.dataForm.id = id || \"\";\n      this.dataForm.moduleId = moduleId;\n      this.visible = true;\n      this.formLoading = true;\n      this.treeData = []\n      getVisualTables(moduleId, dataType).then(res => {\n        let data = []\n        for (const key in res.data.linkTables) {\n          data.push({\n            tableName: res.data.linkTables[key],\n            dbLink: res.data.linkId\n          })\n        }\n        this.treeData = data\n      })\n      this.$nextTick(() => {\n        this.$refs[\"dataForm\"].resetFields();\n        this.dataForm.bindTable = ''\n        this.dataForm.fieldRule = 0\n        this.menuType = menuType\n        if (this.dataForm.id) {\n          getFormInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            this.formLoading = false\n          });\n        } else {\n          this.formLoading = false\n        }\n      });\n    },\n    selectName() {\n      this.nameVisible = true\n      this.$nextTick(() => {\n        this.$refs.nameForm.openDialog()\n      });\n    },\n    changeFieldRule() {\n      this.dataForm.childTableKey = ''\n    },\n    closeForm(val, value) {\n      this.dataForm.enCode = val\n      if (value.tableName) this.dataForm.bindTable = value.tableName\n      if (value.fieldName) this.dataForm.fullName = value.fieldName\n    },\n    onEnCodeChange(e) {\n      let objVal;\n      this.dataForm.fullName = \"\";\n      this.dataForm.type = \"\";\n      if (!!e) {\n        this.enCodeOptions.forEach(o => {\n          if (o.field === e) {\n            objVal = {\n              fullName: o.fieldName,\n              type: o.dataType\n            };\n            return objVal;\n          }\n        });\n        this.dataForm.fullName = objVal[\"fullName\"];\n        this.dataForm.type = objVal[\"type\"];\n      }\n    },\n    dataFormSubmit() {\n      this.$refs[\"dataForm\"].validate(valid => {\n        if (valid) {\n          this.btnLoading = true;\n          const formMethod = this.dataForm.id ? updateForm : createForm;\n          formMethod(this.dataForm)\n            .then(res => {\n              this.$message({\n                message: res.msg,\n                type: \"success\",\n                duration: 1500,\n                onClose: () => {\n                  this.visible = false;\n                  this.btnLoading = false;\n                  this.$emit(\"refreshDataList\");\n                }\n              });\n            })\n            .catch(() => {\n              this.btnLoading = false;\n            });\n        }\n      });\n    }\n  }\n};\n",null]}