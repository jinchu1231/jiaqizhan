{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/flowMonitor/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/flowMonitor/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/asyncToGenerator.js\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nvar _FlowMonitor = require(\"@/api/workFlow/FlowMonitor\");\nvar _FlowEngine = require(\"@/api/workFlow/FlowEngine\");\nvar _FlowBox = _interopRequireDefault(require(\"../components/FlowBox\"));\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  name: 'workFlow-flowMonitor',\n  components: {\n    FlowBox: _FlowBox.default\n  },\n  data: function data() {\n    return {\n      list: [],\n      total: 0,\n      showAll: false,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      formVisible: false,\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近一周',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      statusList: [{\n        id: 0,\n        fullName: '等待提交'\n      }, {\n        id: 1,\n        fullName: '等待审核'\n      }, {\n        id: 2,\n        fullName: '审核通过'\n      }, {\n        id: 3,\n        fullName: '审核退回'\n      }, {\n        id: 4,\n        fullName: '流程撤回'\n      }, {\n        id: 5,\n        fullName: '审核终止'\n      }, {\n        id: 6,\n        fullName: '已被挂起'\n      }],\n      urgent: '',\n      urgentList: [{\n        id: 1,\n        fullName: '普通'\n      }, {\n        id: 2,\n        fullName: '重要'\n      }, {\n        id: 3,\n        fullName: '紧急'\n      }],\n      keyword: '',\n      pickerVal: [],\n      startTime: '',\n      endTime: '',\n      templateId: '',\n      flowId: '',\n      status: '',\n      flowCategory: '',\n      creatorUserId: '',\n      categoryList: [],\n      flowEngineList: [],\n      multipleSelection: [],\n      flowOptions: []\n    };\n  },\n  filters: {\n    getCategoryText: function getCategoryText(id, categoryList) {\n      var item = categoryList.filter(function (o) {\n        return o.enCode == id;\n      })[0];\n      return item && item.fullName ? item.fullName : '';\n    }\n  },\n  created: function created() {\n    this.getDictionaryData();\n    this.getFlowEngineList();\n    this.initData();\n  },\n  methods: {\n    search: function search() {\n      if (this.pickerVal && this.pickerVal.length) {\n        this.startTime = this.pickerVal[0];\n        this.endTime = this.pickerVal[1];\n      } else {\n        this.startTime = '';\n        this.endTime = '';\n      }\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      };\n      this.initData();\n    },\n    getFlowEngineList: function getFlowEngineList() {\n      var _this = this;\n      (0, _FlowEngine.FlowEngineListAll)().then(function (res) {\n        _this.flowEngineList = res.data.list;\n      });\n    },\n    getDictionaryData: function getDictionaryData() {\n      var _this2 = this;\n      this.$store.dispatch('base/getDictionaryData', {\n        sort: 'WorkFlowCategory'\n      }).then(function (res) {\n        _this2.categoryList = res;\n      });\n    },\n    initData: function initData() {\n      var _this3 = this;\n      this.listLoading = true;\n      var query = _objectSpread(_objectSpread({}, this.listQuery), {}, {\n        keyword: this.keyword,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        templateId: this.templateId,\n        flowId: this.flowId,\n        status: this.status,\n        flowUrgent: this.urgent,\n        flowCategory: this.flowCategory,\n        creatorUserId: this.creatorUserId\n      });\n      (0, _FlowMonitor.FlowMonitorList)(query).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _this3.list = res.data.list;\n                _this3.total = res.data.pagination.total;\n                _this3.listLoading = false;\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    toDetail: function toDetail(item) {\n      var _this4 = this;\n      var data = {\n        flowId: item.flowId,\n        id: item.processId,\n        taskId: item.id,\n        opType: 4,\n        hasCancel: true,\n        readonly: true\n      };\n      this.formVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs.FlowBox.init(data);\n      });\n    },\n    handleChange: function handleChange(val) {\n      this.multipleSelection = val.map(function (item) {\n        return item.id;\n      });\n    },\n    handleDel: function handleDel() {\n      var _this5 = this;\n      if (!this.multipleSelection.length) {\n        this.$message({\n          type: 'error',\n          message: '请选择一条数据'\n        });\n        return;\n      }\n      var data = {\n        ids: this.multipleSelection.join(',')\n      };\n      this.$confirm('您确定要删除这些数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        (0, _FlowMonitor.DeleteList)(data).then(function (res) {\n          _this5.$message({\n            type: 'success',\n            message: res.msg\n          });\n          _this5.refresh();\n        });\n      }).catch(function () {});\n    },\n    closeForm: function closeForm(isRefresh) {\n      this.formVisible = false;\n      if (isRefresh) this.refresh();\n    },\n    refresh: function refresh() {\n      this.pickerVal = '';\n      this.startTime = '';\n      this.endTime = '';\n      this.keyword = '';\n      this.templateId = '';\n      this.flowId = '';\n      this.status = '';\n      this.urgent = '';\n      this.flowCategory = '';\n      this.creatorUserId = '';\n      this.flowOptions = [];\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      };\n      this.initData();\n    },\n    onTemplateIdChange: function onTemplateIdChange(val) {\n      this.flowId = '';\n      this.flowOptions = [];\n      if (!val) return;\n      this.getFlowList();\n    },\n    getFlowList: function getFlowList() {\n      var _this6 = this;\n      (0, _FlowEngine.getFlowList)(this.templateId).then(function (res) {\n        _this6.flowOptions = res.data;\n      });\n    },\n    visibleFlowChange: function visibleFlowChange(val) {\n      if (!val) return;\n      if (!this.templateId) this.$message.warning('请先选择所属流程');\n    }\n  }\n};",null]}