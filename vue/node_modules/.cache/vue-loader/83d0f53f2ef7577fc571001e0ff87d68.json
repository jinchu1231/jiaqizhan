{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/workFlowForm/dynamicForm/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/workFlowForm/dynamicForm/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport Parser from '@/components/Generator/parser/Parser'\nimport { mapGetters } from \"vuex\";\nexport default {\n  props: ['config'],\n  components: { Parser },\n  data() {\n    return {\n      setting: {},\n      formData: {},\n      loading: true,\n      eventType: '',\n      flowUrgent: 1,\n      key: +new Date(),\n      formConf: {},\n      isCustomCopy: false,\n      isAdd: false,\n      dataForm: {\n        id: '',\n        formData: {},\n        flowId: ''\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n  },\n  mounted() {\n    this.init(this.config)\n  },\n  methods: {\n    init(data) {\n      this.setting = data\n      this.formConf = data.formConf ? JSON.parse(data.formConf) : {}\n      this.formData = {}\n      this.dataForm.id = data.id || ''\n      this.isCustomCopy = this.setting.flowTemplateJson && this.setting.flowTemplateJson.properties && this.setting.flowTemplateJson.properties.isCustomCopy\n      this.loading = true\n      this.$nextTick(() => {\n        let extra = {}\n        if (data.id) {\n          this.isAdd = false;\n          extra = {\n            modelId: data.flowId,\n            id: data.id,\n            type: data.type,\n            flowId: data.flowId,\n            processId: data.id,\n            taskId: data.taskId,\n            opType: data.opType\n          }\n          const formData = data.draftData || data.formData\n          this.formData = { ...formData, flowId: data.flowId }\n        } else {\n          this.isAdd = true;\n          if (data.getLeftTreeActiveInfo) this.formData = { ...data.getLeftTreeActiveInfo };\n        }\n        this.$store.commit('generator/SET_DYNAMIC_MODEL_EXTRA', extra)\n        this.fillFormData(this.formConf, this.formData)\n        this.$nextTick(() => {\n          this.loading = false\n          this.$emit('setPageLoad')\n        })\n        this.dataForm.flowId = data.flowId\n        this.key = +new Date()\n      })\n    },\n    fillFormData(form, data) {\n      form.disabled = this.setting.readonly\n      const loop = (list, parent) => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__) {\n            let val = data.hasOwnProperty(item.__vModel__) ? data[item.__vModel__] : ((this.isAdd) ? item.__config__.defaultValue : undefined)\n            if (!item.__config__.isSubTable) item.__config__.defaultValue = val\n            if ((this.isAdd || (!this.isAdd && item.__config__.isSubTable)) && item.__config__.defaultCurrent) {\n              if (item.__config__.jnpfKey === 'datePicker') {\n                let format = item.format\n                let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n                let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n                  ' 00:00:00' : ''\n                item.__config__.defaultValue = new Date(dateStr + time).getTime()\n              }\n              if (item.__config__.jnpfKey === 'timePicker') {\n                item.__config__.defaultValue = this.jnpf.toDate(new Date(), item.format)\n              }\n              if (item.__config__.jnpfKey === 'organizeSelect' && (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0)) {\n                item.__config__.defaultValue = item.multiple == true ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n              }\n              if (item.__config__.jnpfKey === 'depSelect' && this.userInfo.departmentId) {\n                item.__config__.defaultValue = item.multiple ? [this.userInfo.departmentId] : this.userInfo.departmentId;\n              }\n              if (item.__config__.jnpfKey === 'posSelect' && (this.userInfo.positionIds instanceof Array && this.userInfo.positionIds.length > 0)) {\n                item.__config__.defaultValue = item.multiple ? this.userInfo.positionIds.map(o => o.id) : this.userInfo.positionIds[0].id\n              }\n              if (item.__config__.jnpfKey === 'roleSelect' && (this.userInfo.roleIds instanceof Array && this.userInfo.roleIds.length > 0)) {\n                item.__config__.defaultValue = item.multiple ? this.userInfo.roleIds : this.userInfo.roleIds[0];\n              }\n              if (item.__config__.jnpfKey === 'groupSelect' && (this.userInfo.groupIds instanceof Array && this.userInfo.groupIds.length > 0)) {\n                item.__config__.defaultValue = item.multiple ? this.userInfo.groupIds : this.userInfo.groupIds[0];\n              }\n              if (['userSelect'].includes(item.__config__.jnpfKey) && this.userInfo.userId) {\n                item.__config__.defaultValue = item.multiple ? [this.userInfo.userId] : this.userInfo.userId;\n              }\n              if (item.__config__.jnpfKey === 'usersSelect' && this.userInfo.userId) {\n                item.__config__.defaultValue = item.multiple ? [this.userInfo.userId + '--user'] : this.userInfo.userId + '--user';\n              }\n              if (item.__config__.jnpfKey === 'sign' && this.userInfo.signImg) {\n                item.__config__.defaultValue = this.userInfo.signImg\n              }\n            }\n            let noShow = item.__config__.noShow || false,\n              isDisabled = item.disabled || false,\n              required = item.__config__.required || false\n            if (this.setting.formOperates && this.setting.formOperates.length) {\n              let id = item.__config__.isSubTable ? parent.__vModel__ + '-' + item.__vModel__ : item.__vModel__\n              let arr = this.setting.formOperates.filter(o => o.id === id) || []\n              if (arr.length) {\n                let obj = arr[0]\n                noShow = !obj.read\n                isDisabled = !obj.write\n                required = obj.required ? obj.required : item.__config__.required\n              }\n            }\n            if (this.setting.readonly) isDisabled = true\n            this.$set(item, 'disabled', isDisabled)\n            this.$set(item.__config__, 'noShow', noShow)\n            this.$set(item.__config__, 'required', required || false)\n          }\n          if (item.__config__ && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children, item)\n          }\n        }\n      }\n      loop(form.fields)\n      form.formData = data\n    },\n    submitForm(data, callback) {\n      if (!data) return\n      const formData = { ...this.formData, ...data }\n      this.dataForm.formData = formData\n      if (callback && typeof callback === \"function\") callback()\n      this.$emit('eventReceiver', this.dataForm, this.eventType)\n    },\n    dataFormSubmit(eventType, flowUrgent) {\n      if (this.setting.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.eventType = eventType\n      this.flowUrgent = flowUrgent\n      this.$refs.dynamicForm && this.$refs.dynamicForm.submitForm()\n    }\n  }\n}\n",null]}