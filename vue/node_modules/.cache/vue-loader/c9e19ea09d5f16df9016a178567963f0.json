{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/ColumnDesign/condition/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/ColumnDesign/condition/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary';\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface';\nimport { dyOptionsList } from '@/components/Generator/generator/comConfig'\nconst logicOptions = [\n  { id: 'and', fullName: 'and' },\n  { id: 'or', fullName: 'or' },\n];\nconst baseSymbolOptions = [\n  { id: 'like', fullName: '包含' },\n  { id: 'notLike', fullName: '不包含' },\n  { id: 'null', fullName: '为空' },\n  { id: 'notNull', fullName: '不为空' },\n];\nconst rangeSymbolOptions = [\n  { id: '>=', fullName: '大于等于' },\n  { id: '>', fullName: '大于' },\n  { id: '==', fullName: '等于' },\n  { id: '<=', fullName: '小于等于' },\n  { id: '<', fullName: '小于' },\n  { id: '<>', fullName: '不等于' },\n  { id: 'between', fullName: '介于' },\n  { id: 'null', fullName: '为空' },\n  { id: 'notNull', fullName: '不为空' },\n];\nconst switchSymbolOptions = [\n  { id: '==', fullName: '等于' },\n  { id: '<>', fullName: '不等于' },\n];\nconst selectSymbolOptions = [\n  ...switchSymbolOptions,\n  { id: 'in', fullName: '包含任意一个' },\n  { id: 'notIn', fullName: '不包含任意一个' },\n  { id: 'null', fullName: '为空' },\n  { id: 'notNull', fullName: '不为空' },\n];\nconst relationFormSymbolOptions = [...switchSymbolOptions, { id: 'null', fullName: '为空' }, { id: 'notNull', fullName: '不为空' }];\nconst useRangeSymbolList = ['calculate', 'inputNumber', 'rate', 'slider', 'datePicker', 'timePicker', 'createTime', 'modifyTime'];\nconst useSelectSymbolList = [\n  'radio',\n  'checkbox',\n  'select',\n  'treeSelect',\n  'cascader',\n  'areaSelect',\n  'organizeSelect',\n  'depSelect',\n  'posSelect',\n  'userSelect',\n  'usersSelect',\n  'roleSelect',\n  'groupSelect',\n  'createUser',\n  'modifyUser',\n  'currOrganize',\n  'currPosition',\n  'popupTableSelect',\n];\nconst useSwitchSymbolList = ['switch'];\nconst useRelationFormSymbolList = ['relationForm', 'popupSelect'];\nexport default {\n  props: {\n    modelType: {\n      type: [String, Number],\n      default: ''\n    },\n    columnOptions: {\n      type: Array,\n      default: () => []\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    type: {\n      type: Number,\n      default: 0\n    },\n    matchLogic: {\n      type: String,\n      default: \"and\"\n    }\n  },\n  data() {\n    return {\n      precision: 0,\n      nowJnpfKey: undefined,\n      dialogVisible: false,\n      conditionList: [],\n      matchLog: this.matchLogic,\n      logicOptions,\n      baseSymbolOptions,\n      rangeSymbolOptions,\n      selectSymbolOptions,\n      switchSymbolOptions,\n      useRangeSymbolList,\n      useSelectSymbolList,\n      useSwitchSymbolList,\n      relationFormSymbolOptions,\n      useRelationFormSymbolList\n    };\n  },\n  computed: {\n    usedFormItems() {\n      let list = [];\n      const loop = (data, parent) => {\n        if (!data) return;\n        if (\n          data.__config__ &&\n          ![\"table\"].includes(data.__config__.jnpfKey) &&\n          data.__config__.children &&\n          Array.isArray(data.__config__.children)\n        ) {\n          loop(data.__config__.children, data);\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent));\n        if (\n          //下拉树形,关联表单 关联表单属性 弹窗选择 弹窗选择属性 下拉表格\n          //不支持控件：开关、文件上传、图片上传、颜色选择、评分、滑块、富文本、链接、\n          //按钮、文本、提示、二维码、条形码、用户组件、设计子表。\n          data.__vModel__ &&\n          !['relationFormAttr', 'popupAttr', 'uploadFile', 'uploadImg', 'colorPicker', 'editor', 'link', 'button', 'text', 'alert', 'table', 'sign'].includes(data.__config__.jnpfKey)\n        )\n          list.push(data);\n      };\n      loop(this.columnOptions);\n      const formItems = list;\n      this.buildOptions(formItems)\n      return formItems;\n    }\n  },\n  watch: {\n    value: {\n      handler(val) {\n        if (val) {\n          this.conditionList = val;\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    getSymbolOptions(jnpfKey) {\n      if (this.useSwitchSymbolList.includes(jnpfKey)) return this.switchSymbolOptions;\n      if (this.useRelationFormSymbolList.includes(jnpfKey)) return this.relationFormSymbolOptions;\n      if (this.useRangeSymbolList.includes(jnpfKey)) return this.rangeSymbolOptions;\n      if (this.useSelectSymbolList.includes(jnpfKey)) return this.selectSymbolOptions;\n      if (['location'].includes(jnpfKey)) return this.baseSymbolOptions;\n      return [...switchSymbolOptions, ...this.baseSymbolOptions];\n    },\n    input() {\n      this.$forceUpdate();\n    },\n    buildOptions(componentList) {\n      componentList.forEach(cur => {\n        cur.disabled = false;\n        const config = cur.__config__;\n        if (dyOptionsList.includes(config.jnpfKey)) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            cur.options = [];\n            getDictionaryDataSelector(config.dictionaryType).then(res => {\n              cur.options = res.data.list;\n            });\n          }\n          if (config.dataType === 'dynamic' && config.propsUrl) {\n            cur.options = [];\n            const query = { paramList: config.templateJson || [] };\n            getDataInterfaceRes(config.propsUrl, query).then(res => {\n              cur.options = Array.isArray(res.data) ? res.data : [];\n            });\n          }\n        }\n      });\n      return componentList;\n    },\n    getData() {\n      return {\n        matchLogic: JSON.parse(JSON.stringify(this.matchLog)),\n        conditionList: JSON.parse(JSON.stringify(this.conditionList)),\n      };\n    },\n    handleClose() {\n      this.dialogVisible = false;\n    },\n    show(data) {\n      this.dialogVisible = true;\n      if (data != null) {\n        this.init(data);\n      }\n    },\n    addGroup() {\n      let item = {\n        logic: \"and\",\n        groups: [{\n          field: '',\n          symbol: '',\n          jnpfKey: '',\n          fieldValueType: 2,\n          fieldValue: undefined,\n          fieldValueJnpfKey: '',\n          cellKey: +new Date(),\n        }]\n      }\n      this.conditionList.push(item)\n    },\n    addItem(index) {\n      this.conditionList[index].groups.push({\n        field: '',\n        symbol: '',\n        jnpfKey: '',\n        fieldValueType: 2,\n        fieldValue: undefined,\n        fieldValueJnpfKey: '',\n        cellKey: +new Date(),\n      })\n    },\n    delGroup(index) {\n      this.conditionList.splice(index, 1)\n    },\n    delItem(index, childIndex) {\n      this.conditionList[index].groups.splice(childIndex, 1)\n    },\n    fieldNameChange(val, item, i, childIndex) {\n      item.cellKey = +new Date()\n      let obj = this.usedFormItems.filter(o => o.id == val)[0];\n      item.fieldName = obj.__config__.label;\n      item.jnpfKey = obj.__config__.jnpfKey;\n      obj.jnpfKey = obj.__config__.jnpfKey;\n      item = { ...item, ...obj };\n      if (item.jnpfKey == 'rate' && item.allowHalf) this.precision = 1\n      if (item.jnpfKey != this.nowJnpfKey) {\n        item.symbol = undefined;\n      }\n      item.disabled = ['null', 'notNull'].includes(item.symbol);\n      item.multiple = ['in', 'notIn'].includes(item.symbol);\n      // 清空数据\n      item.symbol = undefined;\n      item.fieldValue = undefined;\n      if (item.jnpfKey == 'switch') item.fieldValue = 0\n      this.$set(this.conditionList[i].groups, childIndex, item);\n      this.nowJnpfKey = item.jnpfKey;\n    },\n    // 比较符号改变事件\n    symbolChange(val, item, i, childIndex) {\n      item.symbol = val\n      item.cellKey = +new Date()\n      item.disabled = ['null', 'notNull'].includes(val)\n      item.multiple = [\"in\", \"notIn\"].includes(val);\n      if (item.jnpfKey == 'cascader') {\n        item.props.multiple = false\n        if ([\"in\", \"notIn\"].includes(val)) item.props.multiple = true\n      }\n      item.fieldValue = undefined\n      if (item.jnpfKey == 'switch') item.fieldValue = 0\n      if ([\"in\", \"notIn\"].includes(val)) item.fieldValue = []\n      this.$set(this.conditionList[i].groups, childIndex, item);\n    },\n  },\n};\n",null]}