{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/components/dataAuthorize/DataSchemeForm.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/components/dataAuthorize/DataSchemeForm.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  createDataScheme,\n  updateDataScheme,\n  getDataSchemeInfo,\n  getDataAuthorizeList,\n} from \"@/api/system/dataAuthorize\"\nimport { deepClone } from '@/utils'\n\nexport default {\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      logicOptions: [\n        {\n          value: \"and\",\n          label: \"and\",\n        },\n        {\n          value: \"or\",\n          label: \"or\",\n        },\n      ],\n      fieldOptions: [],\n      opOptions: [{\n        label: \"大于等于\",\n        value: \">=\"\n      },\n      {\n        label: \"大于\",\n        value: \">\"\n      },\n      {\n        label: \"等于\",\n        value: \"==\"\n      },\n      {\n        label: \"小于等于\",\n        value: \"<=\"\n      },\n      {\n        label: \"小于\",\n        value: \"<\"\n      },\n      {\n        label: \"不等于\",\n        value: \"<>\"\n      },\n      {\n        label: \"介于\",\n        value: \"between\"\n      },\n      {\n        label: \"包含任意一个\",\n        value: \"in\"\n      },\n      {\n        label: \"不包含任意一个\",\n        value: \"notIn\"\n      },\n      {\n        label: \"包含\",\n        value: \"like\"\n      },\n      {\n        label: \"不包含\",\n        value: \"notLike\"\n      },\n      {\n        label: \"为空\",\n        value: \"null\"\n      },\n      {\n        label: \"不为空\",\n        value: \"notNull\"\n      },],\n      dataForm: {\n        id: \"\",\n        moduleId: \"\",\n        enCode: \"\",\n        fullName: \"\",\n        conditionJson: \"\",\n        conditionText: \"\",\n        childTableKey: '',\n        matchLogic: 'and'\n      },\n      condition: [],\n      dataRule: {\n        fullName: [\n          { required: true, message: \"方案名称不能为空\", trigger: \"blur\" }\n        ],\n        enCode: [\n          { required: true, message: '请输入编码', trigger: 'blur' },\n          { max: 50, message: '字典编码最多为50个字符！', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  methods: {\n    init(moduleId, id) {\n      this.dataForm.id = id || \"\"\n      this.dataForm.moduleId = moduleId\n      this.dataForm.fullName = \"\"\n      this.dataForm.enCode = \"\"\n      this.dataForm.conditionJson = \"\"\n      this.dataForm.conditionText = \"\"\n      this.condition = [{\n        logic: \"and\",\n        groups: [{\n          id: \"\",\n          field: \"\",\n          type: \"\",\n          op: \"\",\n          value: \"\",\n          opOptions: []\n        }]\n      }]\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs[\"dataForm\"].resetFields();\n        this.formLoading = true\n        getDataAuthorizeList(this.dataForm.moduleId).then(res => {\n          this.fieldOptions = res.data.list\n          this.fieldOptions.map(o => {\n            o.enCode = o.enCode.replace('_jnpf_', '.')\n            o.enCode = o.enCode.replace('jnpf_', '')\n          });\n          if (this.dataForm.id) {\n            getDataSchemeInfo(this.dataForm.id).then(res => {\n              this.dataForm = res.data\n              if (res.data.conditionJson) this.condition = JSON.parse(res.data.conditionJson)\n              for (let i = 0; i < this.condition.length; i++) {\n                let groups = this.condition[i].groups\n                for (let j = 0; j < groups.length; j++) {\n                  let e = groups[j]\n                  let list = this.fieldOptions.filter(o => o.id === groups[j].id)\n                  list.length ? e.opOptions = this.getOptions(list[0]) : e.opOptions = []\n                  if (['@userId', '@userAraSubordinates', '@organizeId', '@organizationAndSuborganization', '@branchManageOrganize', '@branchManageOrganizeAndSub'].includes(e.conditionText)) {\n                    e.readonly = true\n                  } else {\n                    e.readonly = false\n                  }\n                }\n              }\n              this.formLoading = false\n            })\n          } else {\n            this.formLoading = false\n          }\n        })\n      })\n    },\n    changeField(val, item) {\n      if (!val) {\n        item.id = ''\n        item.field = ''\n        item.type = ''\n        item.op = ''\n        item.value = ''\n        item.valueLabel = '';\n        item.conditionText = ''\n        item.childTableKey = ''\n        item.opOptions = []\n        item.readonly = false\n        item.disabled = false\n        item.multiple = false\n        item.format = ''\n      } else {\n        item.op = ''\n        item.value = undefined\n        item.valueLabel = '';\n        item.readonly = false\n        item.disabled = false;\n        item.multiple = false;\n        let fieldItem = this.fieldOptions.filter(o => o.id === val)[0]\n        item.type = fieldItem.type\n        item.field = fieldItem.enCode\n        item.childTableKey = fieldItem.childTableKey\n        item.conditionText = fieldItem.conditionText\n        item.fieldRule = fieldItem.fieldRule || 0\n        if (item.conditionText === 'datePicker') {\n          item.format = fieldItem.format\n          item.dateType = fieldItem.format === 'yyyy' ? 'year' : fieldItem.format === 'yyyy-MM' ? 'month' : fieldItem.format === 'yyyy-MM-dd' ? 'date' : 'datetime'\n        }\n        item.opOptions = this.getOptions(fieldItem)\n        if (['@userId', '@userAraSubordinates', '@organizeId', '@organizationAndSuborganization', '@branchManageOrganize', '@branchManageOrganizeAndSub'].includes(item.conditionText)) {\n          item.readonly = true\n          item.value = fieldItem.conditionText\n          item.valueLabel = fieldItem.conditionText;\n        }\n      }\n    },\n    symbolChange(val, item) {\n      const systemFieldOptions = ['@userId', '@userAraSubordinates', '@organizeId', '@organizationAndSuborganization', '@branchManageOrganize'];\n      item.value = systemFieldOptions.includes(item.conditionText) && !['null', 'notNull'].includes(val) ? item.conditionText : undefined;\n      item.valueLabel = '';\n      item.disabled = ['null', 'notNull'].includes(val);\n      item.multiple = ['in', 'notIn'].includes(val);\n    },\n    getOptions(fieldItem) {\n      let opOptions = []\n      let options = fieldItem.conditionSymbol ? fieldItem.conditionSymbol.split(',') : []\n      outer: for (let i = 0; i < options.length; i++) {\n        inner: for (let j = 0; j < this.opOptions.length; j++) {\n          if (options[i] === this.opOptions[j].value) {\n            opOptions.push(this.opOptions[j])\n            break inner\n          }\n        }\n      }\n      return opOptions\n    },\n    addItem(index) {\n      this.condition[index].groups.push({\n        id: \"\",\n        field: \"\",\n        type: \"\",\n        op: \"\",\n        value: \"\",\n        opOptions: []\n      })\n    },\n    delItem(index, childIndex) {\n      this.condition[index].groups.splice(childIndex, 1)\n    },\n    delGroup(index) {\n      this.condition.splice(index, 1)\n    },\n    addGroup() {\n      this.condition.push({\n        logic: \"and\",\n        groups: [{\n          id: \"\",\n          field: \"\",\n          type: \"\",\n          op: \"\",\n          value: \"\",\n          opOptions: []\n        }]\n      })\n    },\n    getOpText(val) {\n      if (!val) return val\n      let list = this.opOptions.filter(o => o.value == val)\n      if (!list.length) return val\n      return list[0].label || val\n    },\n    getFieldText(val) {\n      if (!val) return val\n      let list = this.fieldOptions.filter(o => o.id == val)\n      if (!list.length) return val\n      return list[0].fullName || val\n    },\n    onDateChange(val, item) {\n      if (!val || (!val.length && item.op == 'between')) return (item.valueLabel = '');\n      const format = item.format || 'yyyy-MM-dd HH:mm:ss';\n      if (item.op == 'between') {\n        const labelList = val.map(o => this.jnpf.toDate(o, format));\n        item.valueLabel = labelList.join();\n      } else {\n        item.valueLabel = this.jnpf.toDate(val, format);\n      }\n    },\n    onOrganizeChange(item, val, data) {\n      if (!val || !val.length) return (item.valueLabel = '');\n      if (item.multiple) {\n        let valueLabelList = [];\n        for (let i = 0; i < data.length; i++) {\n          const labelList = data[i].map(o => o.fullName);\n          valueLabelList.push(labelList.join('/'));\n        }\n        item.valueLabel = valueLabelList.join();\n      } else {\n        const labelList = data.map(o => o.fullName);\n        item.valueLabel = labelList.join('/');\n      }\n    },\n    onConditionObjChange(item, val, data) {\n      if (!val || !val.length) return (item.valueLabel = '');\n      if (item.multiple) {\n        const labelList = data.map(o => o.fullName);\n        item.valueLabel = labelList.join();\n      } else {\n        item.valueLabel = data.fullName || '';\n      }\n    },\n    forceUpdate() {\n      this.$forceUpdate()\n    },\n    dataFormSubmit() {\n      this.$refs[\"dataForm\"].validate((valid) => {\n        if (valid) {\n          this.btnLoading = true\n          let conditionText = \"\",\n            conditionValid = true,\n            condition = deepClone(this.condition)\n          outer: for (let i = 0; i < condition.length; i++) {\n            let e = condition[i]\n            let text = ''\n            if (i > 0) text += this.dataForm.matchLogic || 'and'\n            text += '【'\n            for (let j = 0; j < e.groups.length; j++) {\n              let ee = e.groups[j]\n              let item = this.fieldOptions.filter(o => o.id === ee.id)[0]\n              if (!item) {\n                this.$message.warning(\"方案内条件配置不完整，请检查条件内容\")\n                conditionValid = false\n                break outer\n              }\n              ee.bindTable = item.bindTable\n              if (!ee.field || !ee.id || !ee.op || (!['null', 'notNull'].includes(ee.op) && ((!ee.value && ee.value !== 0) || this.jnpf.isEmpty(ee.value)))) {\n                this.$message.warning(\"方案内条件配置不完整，请检查条件内容\")\n                conditionValid = false\n                break outer\n              }\n              delete ee.readonly\n              delete ee.opOptions\n              const valueLabel = ['null', 'notNull'].includes(ee.op) ? '' : ` {${ee.valueLabel || ee.value}}`;\n              text += `${j == 0 ? '' : ' and '}{${this.getFieldText(ee.id)}} {${this.getOpText(ee.op)}}${valueLabel}`\n            }\n            text += '】'\n            conditionText += text\n          }\n          if (!conditionValid) return this.btnLoading = false\n          this.dataForm.conditionText = conditionText\n          this.dataForm.conditionJson = JSON.stringify(condition)\n          const formMethod = this.dataForm.id ? updateDataScheme : createDataScheme\n          formMethod(this.dataForm).then(res => {\n            this.$message({\n              message: res.msg,\n              type: \"success\",\n              duration: 1500,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit(\"refreshDataList\")\n              },\n            });\n          }).catch(() => {\n            this.btnLoading = false\n          })\n        } else {\n          this.btnLoading = false\n        }\n      })\n    }\n  }\n}\n",null]}