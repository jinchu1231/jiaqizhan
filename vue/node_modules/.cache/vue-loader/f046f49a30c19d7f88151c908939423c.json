{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/form/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/form/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { createModel } from '@/api/onlineDev/visualDev'\nimport Parser from '@/components/Generator/parser/Parser'\nimport FlowBox from '@/views/workFlow/components/FlowBox'\nimport { getFlowList } from '@/api/workFlow/FlowEngine'\nimport { mapGetters } from \"vuex\";\nimport SelectFlow from '@/components/SelectFlowDialog'\nexport default {\n  components: { Parser, FlowBox, SelectFlow },\n  props: ['config', 'modelId', 'isPreview'],\n  data() {\n    return {\n      visible: false,\n      dataForm: {\n        data: ''\n      },\n      btnLoading: false,\n      loading: true,\n      key: +new Date(),\n      formConf: {},\n      flowVisible: false,\n      flowListVisible: false,\n      flowList: [],\n      flowItem: {},\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    init(flag) {\n      if (this.config.enableFlow) {\n        this.getFlowList(flag)\n      } else {\n        this.formConf = JSON.parse(this.config.formData)\n        this.fillFormData(this.formConf, {})\n        this.loading = true\n        this.$nextTick(() => {\n          this.visible = true\n          this.loading = false\n          this.key = +new Date()\n        })\n      }\n    },\n    fillFormData(form, data, flag) {\n      const loop = (list, parent) => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__) {\n            if (item.__config__.defaultCurrent) {\n              if (item.__config__.jnpfKey === 'datePicker') {\n                let format = item.format\n                let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n                let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n                  ' 00:00:00' : ''\n                let value = new Date(dateStr + time).getTime()\n                item.__config__.defaultValue = value\n              }\n              if (item.__config__.jnpfKey === 'timePicker') {\n                item.__config__.defaultValue = this.jnpf.toDate(new Date(), item.format)\n              }\n              if (item.__config__.jnpfKey === 'organizeSelect' && (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0)) {\n                item.__config__.defaultValue = item.multiple == true ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n              }\n              if (item.__config__.jnpfKey === 'depSelect' && this.userInfo.departmentId) {\n                item.__config__.defaultValue = item.multiple ? [this.userInfo.departmentId] : this.userInfo.departmentId;\n              }\n              if (item.__config__.jnpfKey === 'posSelect' && (this.userInfo.positionIds instanceof Array && this.userInfo.positionIds.length > 0)) {\n                item.__config__.defaultValue = item.multiple ? this.userInfo.positionIds.map(o => o.id) : this.userInfo.positionIds[0].id\n              }\n              if (item.__config__.jnpfKey === 'roleSelect' && (this.userInfo.roleIds instanceof Array && this.userInfo.roleIds.length > 0)) {\n                item.__config__.defaultValue = item.multiple ? this.userInfo.roleIds : this.userInfo.roleIds[0];\n              }\n              if (item.__config__.jnpfKey === 'groupSelect' && (this.userInfo.groupIds instanceof Array && this.userInfo.groupIds.length > 0)) {\n                item.__config__.defaultValue = item.multiple ? this.userInfo.groupIds : this.userInfo.groupIds[0];\n              }\n              if (['userSelect'].includes(item.__config__.jnpfKey) && this.userInfo.userId) {\n                item.__config__.defaultValue = item.multiple ? [this.userInfo.userId] : this.userInfo.userId;\n              }\n              if (item.__config__.jnpfKey === 'usersSelect' && this.userInfo.userId) {\n                item.__config__.defaultValue = item.multiple ? [this.userInfo.userId + '--user'] : this.userInfo.userId + '--user';\n              }\n              if (item.__config__.jnpfKey == 'sign' && this.userInfo.signImg) item.__config__.defaultValue = this.userInfo.signImg\n            }\n            if (item.__config__.jnpfKey === 'datePicker' && item.__config__.defaultCurrent) {\n              let format = item.format\n              let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n              let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n                ' 00:00:00' : ''\n              let value = new Date(dateStr + time).getTime()\n              item.__config__.defaultValue = value\n            } else if (item.__config__.jnpfKey === 'organizeSelect' && item.__config__.defaultCurrent) {\n              if (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0) {\n                item.__config__.defaultValue = item.multiple == true ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n              } else {\n                item.__config__.defaultValue = []\n              }\n            }\n            else if (item.__config__.jnpfKey === 'timePicker' && item.__config__.defaultCurrent) {\n              item.__config__.defaultValue = this.jnpf.toDate(new Date(), item.format)\n            }\n          }\n          if (item.__config__ && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children, item)\n          }\n        }\n      }\n      loop(form.fields)\n      form.formData = data\n    },\n    getFlowList(flag) {\n      getFlowList(this.config.flowId, '1').then(res => {\n        this.flowList = res.data\n        if (flag && this.flowItem.id) return this.selectFlow(this.flowItem)\n        if (!this.flowList.length) return this.$message({ type: 'error', message: '流程不存在' })\n        if (this.flowList.length === 1) return this.selectFlow(this.flowList[0])\n        this.flowListVisible = true\n        this.$nextTick(() => {\n          this.$refs.selectFlow.init(this.flowList)\n        })\n      })\n    },\n    selectFlow(item) {\n      this.flowItem = item\n      let data = {\n        id: '',\n        enCode: this.config.flowEnCode,\n        flowId: item.id,\n        formType: 2,\n        opType: '-1',\n        type: 1,\n        modelId: this.modelId,\n        isPreview: this.isPreview,\n        fromForm: 1,\n        hideCancelBtn: true\n      }\n      this.flowListVisible = false\n      this.flowVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowBox.init(data)\n      })\n    },\n    submitForm(data, callback) {\n      if (!data) return\n      this.btnLoading = true\n      this.dataForm.data = JSON.stringify(data)\n      createModel(this.modelId, this.dataForm).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            if (callback && typeof callback === \"function\") callback()\n            this.btnLoading = false\n            this.resetForm()\n          }\n        })\n      }).catch(() => { this.btnLoading = false })\n    },\n    dataFormSubmit() {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.$refs.dynamicForm && this.$refs.dynamicForm.submitForm()\n    },\n    resetForm() {\n      this.formConf = JSON.parse(this.config.formData)\n      this.fillFormData(this.formConf, {})\n      this.$nextTick(() => {\n        this.$refs.dynamicForm && this.$refs.dynamicForm.resetForm()\n      })\n    },\n    closeFlow(isRefresh) {\n      if (isRefresh) this.init(true)\n    },\n  }\n}\n",null]}