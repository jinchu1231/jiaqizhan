{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/userList/UserList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/userList/UserList.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/toConsumableArray.js\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nvar _vuex = require(\"vuex\");\nvar _user = require(\"@/api/permission/user\");\nvar _message = require(\"@/api/system/message\");\nvar _Im = _interopRequireDefault(require(\"./Im\"));\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  name: 'UserList',\n  components: {\n    Im: _Im.default\n  },\n  data: function data() {\n    return {\n      top: 0,\n      left: 0,\n      selectedTag: {},\n      visitedViews: '',\n      drawer: false,\n      activeTab: 'reply',\n      userList: [],\n      replyList: [],\n      loading: false,\n      replyLoading: false,\n      visibleMenu: false,\n      visible: false,\n      finish: false,\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      }\n    };\n  },\n  created: function created() {},\n  computed: _objectSpread({}, (0, _vuex.mapGetters)(['userInfo'])),\n  watch: {\n    activeTab: function activeTab(val) {\n      if (val === 'contacts' && !this.userList.length) {\n        this.getUserList();\n      }\n    },\n    visibleMenu: function visibleMenu(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    }\n  },\n  methods: {\n    closeMenu: function closeMenu() {\n      this.visibleMenu = false;\n    },\n    openMenu: function openMenu(tag, e) {\n      var menuMinWidth = 105;\n      var offsetLeft = this.$el.getBoundingClientRect().left; // container margin left\n      var offsetWidth = this.$el.offsetWidth; // container width\n      var maxLeft = offsetWidth - menuMinWidth; // left boundary\n      var left = e.clientX - offsetLeft + 30; // 15: margin right\n      if (left > maxLeft) {\n        this.left = maxLeft;\n      } else {\n        this.left = left;\n      }\n      this.top = e.clientY - 95;\n      this.visibleMenu = true;\n      this.selectedTag = tag;\n    },\n    relocation: function relocation() {\n      var _this2 = this;\n      this.$refs.JNPFIm.closeIM();\n      (0, _message.relocation)(this.selectedTag.id).then(function (res) {\n        var list = _this2.replyList.filter(function (o) {\n          return o.id !== _this2.selectedTag.id;\n        });\n        _this2.replyList = list;\n      });\n    },\n    deleteChatRecord: function deleteChatRecord() {\n      var _this3 = this;\n      this.$refs.JNPFIm.closeIM();\n      this.$confirm(\"是否清空当前聊天的所有记录?\", \"提示\", {\n        type: \"warning\"\n      }).then(function () {\n        (0, _message.deleteChatRecord)(_this3.selectedTag.id).then(function (res) {\n          for (var index = 0; index < _this3.replyList.length; index++) {\n            var element = _this3.replyList[index];\n            if (element.id === _this3.selectedTag.id) {\n              element.unreadMessage = '';\n              element.latestMessage = '';\n              element.messageType = '';\n            }\n          }\n        });\n      }).catch(function () {});\n    },\n    init: function init() {\n      var _this4 = this;\n      this.finish = false;\n      this.drawer = true;\n      this.listQuery.currentPage = 1;\n      this.listQuery.keyword = '';\n      this.activeTab = 'reply';\n      this.userList = [];\n      this.replyList = [];\n      this.getReplyList();\n      this.$nextTick(function () {\n        _this4.bindScroll();\n      });\n    },\n    bindScroll: function bindScroll() {\n      var _this = this,\n        vBody = _this.$refs.userList;\n      vBody.addEventListener(\"scroll\", function () {\n        if (vBody.scrollHeight - vBody.clientHeight - vBody.scrollTop <= 300 && !_this.loading && !_this.finish) {\n          _this.listQuery.currentPage += 1;\n          _this.getUserList();\n        }\n      });\n    },\n    getReplyList: function getReplyList() {\n      var _this5 = this;\n      this.replyLoading = true;\n      (0, _message.getIMReply)().then(function (res) {\n        _this5.replyList = res.data.list;\n        _this5.replyLoading = false;\n      });\n    },\n    getUserList: function getUserList() {\n      var _this6 = this;\n      this.loading = true;\n      (0, _user.getImUser)(this.listQuery).then(function (res) {\n        if (res.data.list.length < _this6.listQuery.pageSize) _this6.finish = true;\n        _this6.userList = [].concat((0, _toConsumableArray2.default)(_this6.userList), (0, _toConsumableArray2.default)(res.data.list));\n        _this6.loading = false;\n      });\n    },\n    search: function search() {\n      this.userList = [];\n      this.finish = false;\n      this.listQuery.currentPage = 1;\n      this.listQuery.pageSize = 20;\n      this.getUserList();\n    },\n    updateReply: function updateReply(data, isAdd) {\n      var boo = false;\n      var len = this.replyList.length;\n      for (var i = 0; i < len; i++) {\n        if (data.formUserId === this.replyList[i].id) {\n          if (isAdd) this.replyList[i].unreadMessage += 1;\n          this.replyList[i].latestMessage = data.formMessage;\n          this.replyList[i].messageType = data.messageType;\n          this.replyList[i].latestDate = data.latestDate;\n          boo = true;\n          break;\n        }\n      }\n      if (boo) return;\n      if (isAdd) data.unreadMessage = 1;\n      data.latestMessage = data.formMessage;\n      data.id = data.formUserId;\n      this.replyList.unshift(data);\n    },\n    updateLatestMessage: function updateLatestMessage(data) {\n      var boo = false;\n      var len = this.replyList.length;\n      for (var i = 0; i < len; i++) {\n        if (data.toUserId === this.replyList[i].id) {\n          this.replyList[i].latestMessage = data.toMessage;\n          this.replyList[i].messageType = data.messageType;\n          this.replyList[i].latestDate = data.latestDate;\n          boo = true;\n          break;\n        }\n      }\n      if (boo) return;\n      var item = {\n        account: data.toAccount,\n        headIcon: data.toHeadIcon,\n        id: data.toUserId,\n        latestDate: data.latestDate,\n        latestMessage: data.toMessage,\n        messageType: data.messageType,\n        realName: data.toRealName,\n        unreadMessage: 0\n      };\n      this.replyList.unshift(item);\n    },\n    toggleBlink: function toggleBlink() {\n      var boo = this.replyList.some(function (o) {\n        return o.unreadMessage;\n      });\n      this.$emit('changeTwinkle', boo);\n    },\n    readInfo: function readInfo(item, isReply) {\n      var socket = this.$store.getters.socket;\n      var msgObj = {\n        method: \"UpdateReadMessage\",\n        formUserId: item.id,\n        token: this.$store.getters.token\n      };\n      var msg = JSON.stringify(msgObj);\n      socket.send(msg);\n      if (isReply) {\n        item.unreadMessage = 0;\n      } else {\n        for (var i = 0; i < this.replyList.length; i++) {\n          if (item.id === this.replyList[i].id) {\n            this.replyList[i].unreadMessage = 0;\n            break;\n          }\n        }\n      }\n      this.toggleBlink();\n      this.$refs.JNPFIm.list = [];\n      //获取消息列表\n      var messageList = {\n        method: \"MessageList\",\n        toUserId: item.id,\n        formUserId: this.userInfo.userId,\n        token: this.$store.getters.token,\n        currentPage: 1,\n        pageSize: 30,\n        sord: \"desc\"\n      };\n      var msg1 = JSON.stringify(messageList);\n      socket.send(msg1);\n      this.$refs.JNPFIm.init(item);\n    },\n    getMsgText: function getMsgText(text, type) {\n      var message = '';\n      switch (type) {\n        case 'voice':\n          message = '[语音]';\n          break;\n        case 'image':\n          message = '[图片]';\n          break;\n        default:\n          message = text;\n          break;\n      }\n      return message;\n    },\n    handleClose: function handleClose(done) {\n      this.$refs.JNPFIm.closeIM();\n      var vBody = this.$refs.userList;\n      vBody.removeEventListener(\"scroll\", function () {});\n      done();\n    }\n  }\n};",null]}