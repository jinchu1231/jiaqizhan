{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/directive/el-drag-dialog/drag.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/directive/el-drag-dialog/drag.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.regexp.replace\");\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nvar _default = exports.default = {\n  bind: function bind(el, binding, vnode) {\n    var dialogHeaderEl = el.querySelector('.el-dialog__header');\n    var dragDom = el.querySelector('.el-dialog');\n    dialogHeaderEl.style.cssText += ';cursor:move;';\n    dragDom.style.cssText += ';top:0px;';\n\n    // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n    var getStyle = function () {\n      if (window.document.currentStyle) {\n        return function (dom, attr) {\n          return dom.currentStyle[attr];\n        };\n      } else {\n        return function (dom, attr) {\n          return getComputedStyle(dom, false)[attr];\n        };\n      }\n    }();\n    dialogHeaderEl.onmousedown = function (e) {\n      // 鼠标按下，计算当前元素距离可视区的距离\n      var disX = e.clientX - dialogHeaderEl.offsetLeft;\n      var disY = e.clientY - dialogHeaderEl.offsetTop;\n      var dragDomWidth = dragDom.offsetWidth;\n      var dragDomHeight = dragDom.offsetHeight;\n      var screenWidth = document.body.clientWidth;\n      var screenHeight = document.body.clientHeight;\n      var minDragDomLeft = dragDom.offsetLeft;\n      var maxDragDomLeft = screenWidth - dragDom.offsetLeft - dragDomWidth;\n      var minDragDomTop = dragDom.offsetTop;\n      var maxDragDomTop = screenHeight - dragDom.offsetTop - dragDomHeight;\n\n      // 获取到的值带px 正则匹配替换\n      var styL = getStyle(dragDom, 'left');\n      var styT = getStyle(dragDom, 'top');\n      if (styL.includes('%')) {\n        styL = +document.body.clientWidth * (+styL.replace(/\\%/g, '') / 100);\n        styT = +document.body.clientHeight * (+styT.replace(/\\%/g, '') / 100);\n      } else {\n        styL = +styL.replace(/\\px/g, '');\n        styT = +styT.replace(/\\px/g, '');\n      }\n      document.onmousemove = function (e) {\n        // 通过事件委托，计算移动的距离\n        var left = e.clientX - disX;\n        var top = e.clientY - disY;\n\n        // 边界处理\n        if (-left > minDragDomLeft) {\n          left = -minDragDomLeft;\n        } else if (left > maxDragDomLeft) {\n          left = maxDragDomLeft;\n        }\n        if (-top > minDragDomTop) {\n          top = -minDragDomTop;\n        } else if (top > maxDragDomTop) {\n          top = maxDragDomTop;\n        }\n\n        // 移动当前元素\n        dragDom.style.cssText += \";left:\".concat(left + styL, \"px;top:\").concat(top + styT, \"px;\");\n\n        // emit onDrag event\n\n        vnode.child.$emit('dragDialog', e);\n      };\n      document.onmouseup = function (e) {\n        document.onmousemove = null;\n        document.onmouseup = null;\n      };\n    };\n  }\n};",null]}