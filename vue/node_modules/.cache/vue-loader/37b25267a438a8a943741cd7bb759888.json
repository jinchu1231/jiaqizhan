{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/workFlowForm/crmOrder/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/workFlowForm/crmOrder/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport comMixin from '../mixin'\nimport { CustomerList } from '@/api/extend/order'\nimport GoodsBox from '@/views/extend/order/GoodsBox'\nexport default {\n  mixins: [comMixin],\n  components: { GoodsBox },\n  data() {\n    return {\n      activeName: 'goods',\n      billEnCode: 'OrderNumber',\n      dataForm: {\n        id: '',\n        customerName: '',\n        salesmanId: '',\n        orderDate: '',\n        orderCode: '',\n        paymentMode: '',\n        receivableMoney: 0,\n        earnestRate: 0,\n        prepayEarnest: 0,\n        transportMode: '',\n        deliveryDate: '',\n        deliveryAddress: '',\n        description: '',\n        customerId: '',\n        salesmanName: '',\n        goodsList: [],\n        collectionPlanList: [],\n        fileJson: ''\n      },\n      dataRule: {\n        customerName: [\n          { required: true, message: '客户名称不能为空', trigger: 'click' },\n        ],\n        salesmanId: [\n          { required: true, message: '业务人员不能为空', trigger: 'click' }\n        ],\n        orderDate: [\n          { required: true, message: '订单日期不能为空', trigger: 'change' }\n        ],\n        paymentMode: [\n          { required: true, message: '付款方式不能为空', trigger: 'change' }\n        ],\n      },\n      options: ['现金', '转帐', '汇票'],\n      transportOptions: ['快递', '物流', '配送', '自提'],\n      goodsBoxVisible: false\n    }\n  },\n  watch: {\n    'dataForm.goodsList': {\n      handler(newVal, oldVal) {\n        let money = 0\n        for (let i = 0; i < newVal.length; i++) {\n          const e = newVal[i];\n          money += parseFloat(e.amount)\n        }\n        this.dataForm.receivableMoney = money\n      },\n      deep: true\n    }\n  },\n  methods: {\n    onChange(id, selectedData) {\n      if (!id) return this.dataForm.salesmanName = ''\n      this.dataForm.salesmanName = selectedData.fullName\n    },\n    querySearchAsync(queryString, cb) {\n      CustomerList(queryString).then(res => {\n        cb(res.data.list)\n      })\n    },\n    handleSelect(item) {\n      this.dataForm.customerName = item.text\n      this.dataForm.customerId = item.id\n    },\n    handleDel(index, row) {\n      this.dataForm.goodsList.splice(index, 1);\n    },\n    handleDelPlan(index, row) {\n      this.dataForm.collectionPlanList.splice(index, 1);\n    },\n    choice() {\n      this.goodsBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.goodsBox.init()\n      })\n    },\n    getSummaries(param) {\n      const { columns, data } = param;\n      const sums = [];\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '合计';\n          return;\n        }\n        if (index === 1) {\n          sums[index] = '';\n          return;\n        }\n        if (index === 11) {\n          sums[index] = '';\n          return;\n        }\n        const values = data.map(item => Number(item[column.property]));\n        if (!values.every(value => isNaN(value))) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr);\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0).toFixed(2);\n        } else {\n          sums[index] = '';\n        }\n      });\n      return sums\n    },\n    addPlan() {\n      let item = {\n        receivableDate: \"\", receivableRate: 0, receivableMoney: 0, receivableMode: \"\", abstract: \"\"\n      }\n      this.dataForm.collectionPlanList.push(item)\n    },\n    initList(list) {\n      for (let i = 0; i < list.length; i++) {\n        const e = list[i];\n        let item = {\n          goodsId: e.id,\n          goodsCode: e.code,\n          goodsName: e.text,\n          specifications: e.specifications,\n          unit: e.unit,\n          qty: 1,\n          price: e.price,\n          amount: e.price,\n          discount: 100,\n          cess: 0,\n          actualPrice: e.price,\n          actualAmount: e.price,\n          description: ''\n        }\n        this.dataForm.goodsList.push(item)\n      }\n    },\n    count(row) {\n      //金额 = 数量*单价\n      row.amount = this.jnpf.toDecimal(parseFloat(row.price) * parseFloat(row.qty))\n      //折扣价 = (单价*折扣)\n      var discountPrice = row.price * (row.discount ? row.discount / 100 : 1);\n      //实际单价 = 折扣价 * (1 + (税率 / 100))\n      row.actualPrice = this.jnpf.toDecimal(discountPrice * (1 + (row.cess ? row.cess / 100 : 0)));\n      //实际金额\n      row.actualAmount = this.jnpf.toDecimal(parseFloat(row.actualPrice) * parseFloat(row.qty))\n    }\n  }\n}\n",null]}