{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/extend/order/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/extend/order/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { OrderList, Delete, OrderEntryList, OrderReceivableList } from '@/api/extend/order'\nimport { getFlowIdByCode, getFlowList } from '@/api/workFlow/FlowEngine'\nimport Detail from './Detail'\nimport FlowBox from '@/views/workFlow/components/FlowBox'\nimport SelectFlow from '@/components/SelectFlowDialog'\nexport default {\n  name: 'extend-order',\n  components: { Detail, FlowBox, SelectFlow },\n  data() {\n    return {\n      keyword: '',\n      list: [],\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      formVisible: false,\n      detailVisible: false,\n      flowTemplateId: '',\n      pickerVal: [],\n      startTime: '',\n      endTime: '',\n      flowListVisible: false,\n      flowList: []\n    }\n  },\n  created() {\n    this.initData()\n    this.getFlowIdByCode()\n  },\n  methods: {\n    search() {\n      if (this.pickerVal && this.pickerVal.length) {\n        this.startTime = this.pickerVal[0]\n        this.endTime = this.pickerVal[1]\n      } else {\n        this.startTime = ''\n        this.endTime = ''\n      }\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    initData() {\n      this.listLoading = true\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        startTime: this.startTime,\n        endTime: this.endTime\n      }\n      OrderList(query).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        for (let i = 0; i < this.list.length; i++) {\n          this.$set(this.list[i], 'isExpanded', false)\n          this.$set(this.list[i], 'activeName', '0')\n          this.$set(this.list[i], 'childTable', [])\n          this.$set(this.list[i], 'childTable1', [])\n        }\n        this.listLoading = false\n      })\n    },\n    getFlowIdByCode() {\n      getFlowIdByCode('crmOrder').then(res => {\n        this.flowTemplateId = res.data\n        this.getFlowList()\n      })\n    },\n    getFlowList() {\n      getFlowList(this.flowTemplateId, '1').then(res => {\n        this.flowList = res.data\n      })\n    },\n    expandChange(rows) {\n      rows.isExpanded = !rows.isExpanded\n      if (!rows.isExpanded) return\n      if (rows.childTable.length || rows.childTable1.length) return\n      OrderEntryList(rows.id).then(res => {\n        rows.childTable = res.data.list\n      })\n      OrderReceivableList(rows.id).then(res => {\n        rows.childTable1 = res.data.list\n      })\n    },\n    sortChange({ column, prop, order }) {\n      this.listQuery.sort = order == 'ascending' ? 'asc' : 'desc'\n      this.listQuery.sidx = !order ? '' : prop\n      this.initData()\n    },\n    handleDel(index, id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        this.asyncDel(index, id);\n      }).catch(() => { });\n    },\n    asyncDel(index, id) {\n      Delete(id).then(res => {\n        this.list.splice(index, 1);\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    addHandle() {\n      if (!this.flowList.length) {\n        this.$message({\n          type: 'error',\n          message: '流程不存在'\n        });\n      } else if (this.flowList.length === 1) {\n        this.selectFlow(this.flowList[0])\n      } else {\n        this.flowListVisible = true\n        this.$nextTick(() => {\n          this.$refs.selectFlow.init(this.flowList)\n        })\n      }\n    },\n    updateHandle(row) {\n      let data = {\n        id: row.id,\n        flowId: row.flowId,\n        opType: '-1'\n      }\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(data)\n      })\n    },\n    toApprovalDetail(row) {\n      let data = {\n        id: row.id,\n        flowId: row.flowId,\n        opType: 0,\n      }\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(data)\n      })\n    },\n    toDetail(id) {\n      this.detailVisible = true\n      this.$nextTick(() => {\n        this.$refs.detail.init(id)\n      })\n    },\n    closeForm(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) this.refresh()\n    },\n    refresh() {\n      this.pickerVal = ''\n      this.startTime = ''\n      this.endTime = ''\n      this.keyword = ''\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    selectFlow(item) {\n      let data = {\n        id: '',\n        flowId: item.id,\n        opType: '-1'\n      }\n      this.flowListVisible = false\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(data)\n      })\n    }\n  }\n}\n",null]}