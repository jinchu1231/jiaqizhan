{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dictionary/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dictionary/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getDictionaryDataTypeSelector,\n  getDictionaryDataInfo,\n  updateDictionaryData,\n  createDictionaryData\n} from '@/api/systemData/dictionary'\n\nexport default {\n  data() {\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      parentDisabled: false,\n      dataForm: {\n        id: '',\n        dictionaryTypeId: '',\n        parentId: '0',\n        fullName: '',\n        enCode: '',\n        enabledMark: 1,\n        sortCode: 0,\n        description: ''\n      },\n      treeData: [],\n      dataRule: {\n        parentId: [\n          { required: true, message: '请选择', trigger: 'input' }\n        ],\n        fullName: [\n          { required: true, message: '请输入名称', trigger: 'blur' },\n          { max: 50, message: '字典名称最多为50个字符！', trigger: 'blur' }\n        ],\n        enCode: [\n          { required: true, message: '请输入编码', trigger: 'blur' },\n          { max: 50, message: '字典编码最多为50个字符！', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  methods: {\n    init(id, typeId, isTree) {\n      this.visible = true\n      this.dataForm.id = id || ''\n      this.dataForm.dictionaryTypeId = typeId\n      this.formLoading = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        if (isTree === 1) {\n          this.parentDisabled = false\n        } else {\n          this.parentDisabled = true\n        }\n        getDictionaryDataTypeSelector(this.dataForm.dictionaryTypeId, isTree, id || 0).then(res => {\n          this.treeData = res.data.list\n          if (this.dataForm.id) {\n            getDictionaryDataInfo(this.dataForm.id).then(res => {\n              this.dataForm = res.data\n              this.formLoading = false\n            })\n          } else {\n            this.dataForm.parentId = res.data.list[0].id\n            this.formLoading = false\n          }\n        })\n      })\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.btnLoading = true\n          this.dataForm.parentId = this.dataForm.dictionaryTypeId === this.dataForm.parentId ? '0' : this.dataForm.parentId\n          const formMethod = this.dataForm.id ? updateDictionaryData : createDictionaryData\n          formMethod(this.dataForm).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.$store.commit('base/SET_DICTIONARY_LIST', [])\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList')\n              }\n            })\n          }).catch(() => {\n            this.btnLoading = false\n          })\n        }\n      })\n    }\n  }\n}\n",null]}