{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/profile/components/Password.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/profile/components/Password.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport md5 from 'js-md5';\nimport { UpdatePassword } from '@/api/permission/userSetting'\nimport { getSystemConfig } from '@/api/system/sysConfig'\nexport default {\n  data() {\n    var validatePass = (rule, value, callback) => {\n      // const passwordreg = /(?=.*\\d)(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{6,16}/\n      //是否包含数字\n      const containsNumbers = /[0-9]+/\n      //是否包含小写字符\n      const includeLowercaseLetters = /[a-z]+/\n      //是否包含大写字符\n      const includeUppercaseLetters = /[A-Z]+/\n      //是否包含字符\n      const containsCharacters = /\\W/\n      const containsCharacters2 = /_/\n\n      if (value === '') {\n        callback(new Error('新密码不能为空'));\n      } else if(this.baseForm.passwordStrengthLimit == 1){\n        if(this.baseForm.passwordLengthMin){\n          if(value.length<this.baseForm.passwordLengthMinNumber){\n            callback(new Error('新密码长度不能小于'+this.baseForm.passwordLengthMinNumber+'位'));\n          }\n        }\n        if(this.baseForm.containsNumbers){\n          if (!containsNumbers.test(value)) {\n            callback(new Error('新密码必须包含数字'));\n          }\n        }\n        if(this.baseForm.includeLowercaseLetters){\n          if (!includeLowercaseLetters.test(value)) {\n            callback(new Error('新密码必须包含小写字母'));\n          }\n        }\n        if(this.baseForm.includeUppercaseLetters){\n          if (!includeUppercaseLetters.test(value)) {\n            callback(new Error('新密码必须包含大写字母'));\n          }\n        }\n        if(this.baseForm.containsCharacters){\n          if (!containsCharacters.test(value) && !containsCharacters2.test(value)) {\n            callback(new Error('新密码必须包含字符'));\n          }\n        }\n        if (this.dataForm.password2 !== '') {\n          this.$refs.dataForm.validateField('password2');\n        }\n        callback();\n      }else{\n        if (this.dataForm.password2 !== '') {\n          this.$refs.dataForm.validateField('password2');\n        }\n        callback();\n      }\n    };\n\n    //   if (value === '') {\n    //     callback(new Error('新密码不能为空'));\n    //   } else if (!passwordreg.test(value)) {\n    //     callback(new Error('密码必须由数字、字母、特殊字符组合,请输入6-16位'))\n    //   } else {\n    //     if (this.dataForm.password2 !== '') {\n    //       this.$refs.dataForm.validateField('password2');\n    //     }\n    //     callback();\n    //   }\n    // };\n    var validatePass2 = (rule, value, callback) => {\n      if (value !== this.dataForm.password) {\n        callback(new Error('两次密码输入不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      listLoading: false,\n      dataForm: {\n        oldPassword: '',\n        password: '',\n        password2: '',\n        code: '',\n      },\n      baseForm:{\n        passwordStrengthLimit:0,\n        passwordLengthMin:false,\n        passwordLengthMinNumber:0,\n        containsNumbers:false,\n        includeLowercaseLetters:false,\n        includeUppercaseLetters:false,\n        containsCharacters:false,\n      },\n      imgUrl: \"\",\n      timestamp: '',\n      dataRule: {\n        oldPassword: [\n          { required: true, message: '旧密码不能为空', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, validator: validatePass, trigger: 'blur' }\n        ],\n        password2: [\n          { required: true, message: '重复密码不能为空', trigger: 'blur' },\n          { validator: validatePass2, trigger: 'blur' }\n        ],\n        code: [\n          { required: true, message: '验证码不能为空', trigger: 'blur' }\n        ],\n      }\n    }\n  },\n  created() {\n    this.changeImg(),\n    this.initData()\n  },\n  methods: {\n    initData() {\n      this.listLoading = true\n      this.$nextTick(() => {\n        getSystemConfig().then(res => {\n          this.baseForm = res.data\n          this.baseForm.passwordLengthMin = this.baseForm.passwordLengthMin ? true : false\n          this.baseForm.containsNumbers = this.baseForm.containsNumbers ? true : false\n          this.baseForm.includeLowercaseLetters = this.baseForm.includeLowercaseLetters ? true : false\n          this.baseForm.includeUppercaseLetters = this.baseForm.includeUppercaseLetters ? true : false\n          this.baseForm.containsCharacters = this.baseForm.containsCharacters ? true : false\n          this.listLoading = false\n        }).catch(() => {\n          this.listLoading = false\n        })\n      })\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let query = {\n            oldPassword: md5(this.dataForm.oldPassword),\n            password: md5(this.dataForm.password),\n            code: this.dataForm.code,\n            timestamp: this.timestamp\n          }\n          UpdatePassword(query).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.$store.dispatch('user/resetToken').then(() => {\n                  this.$router.push(`/login`)\n                })\n              }\n            })\n          }).catch(() => {\n            this.changeImg()\n          })\n        }\n      })\n    },\n    changeImg() {\n      let timestamp = Math.random()\n      this.timestamp = timestamp\n      this.imgUrl = `/api/file/ImageCode/${timestamp}`\n    }\n  }\n\n}\n",null]}