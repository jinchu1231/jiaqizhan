{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataModel/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataModel/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataSourceListAll } from '@/api/systemData/dataSource'\nimport { DataModelList, DataModelDelete, DataModelFieldList, exportTpl } from '@/api/systemData/dataModel'\nimport Form from './Form'\nimport Preview from './Preview'\nimport FieldsList from './fields/index'\nexport default {\n  name: 'systemData-dataModel',\n  components: { Form, Preview, FieldsList },\n  data() {\n    return {\n      total: 0,\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      },\n      keyword: '',\n      list: [],\n      formVisible: false,\n      dataBase: '0',\n      dbOptions: [],\n      listLoading: false,\n      childTableLoading: false,\n      showData: false,\n      drawer: false,\n      dataType: 'MySQL',\n    }\n  },\n  created() {\n    this.initData()\n  },\n  methods: {\n    search() {\n      this.listQuery = {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.getTableData()\n    },\n    reset() {\n      this.keyword = '';\n      this.search()\n    },\n    initData() {\n      this.listLoading = true\n      getDataSourceListAll().then(res => {\n        const list = res.data.list || []\n        this.dbOptions = list.filter(o => o.children && o.children.length)\n        this.handleType()\n        this.getTableData()\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    handleType() {\n      let dbList = []\n      let options = JSON.parse(JSON.stringify(this.dbOptions))\n      const loop = (options) => {\n        for (let i = 0; i < options.length; i++) {\n          const item = options[i]\n          if (item.id == this.dataBase) {\n            dbList.push(item.dbType)\n          } else {\n            if (item.children && Array.isArray(item.children)) {\n              loop(item.children)\n            }\n          }\n        }\n      }\n      loop(options)\n      this.dbType = dbList[0]\n    },\n    getTableData() {\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword\n      }\n      this.listLoading = true\n      this.handleType()\n      DataModelList(this.dataBase, query).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        for (let i = 0; i < this.list.length; i++) {\n          this.$set(this.list[i], 'isExpanded', false)\n          this.$set(this.list[i], 'childTableLoading', false)\n          this.$set(this.list[i], 'childTable', [])\n        }\n        this.listLoading = false\n      }).catch(() => {\n        this.list = []\n        this.total = 0\n        this.listLoading = false\n      })\n    },\n    handleDel(index, tableName) {\n      this.$confirm('您确定要删除这些数据吗, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.asyncDel(index, tableName);\n      }).catch(() => { });\n    },\n    asyncDel(index, tableName) {\n      DataModelDelete(this.dataBase, tableName).then(res => {\n        this.list.splice(index, 1);\n        this.$message({\n          type: 'success',\n          message: res.msg\n        });\n      })\n    },\n    exportTpl(id) {\n      this.$confirm('您确定要导出该表, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        exportTpl(this.dataBase, id).then(res => {\n          this.jnpf.downloadFile(res.data.url)\n        })\n      }).catch(() => { });\n    },\n    // 新增 / 修改\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(this.dataBase, id, this.dbType)\n      })\n    },\n    expandChange(rows) {\n      rows.isExpanded = !rows.isExpanded\n      if (!rows.isExpanded) return\n      if (rows.childTable.length) return\n      rows.childTableLoading = true\n      DataModelFieldList(this.dataBase, rows.table).then(res => {\n        rows.childTableLoading = false\n        rows.childTable = res.data.list\n      }).catch(() => {\n        rows.childTableLoading = false\n      })\n    },\n    closeData() {\n      this.showData = false\n    },\n    closeForm(isRefresh) {\n      this.formVisible = false\n      if (isRefresh) {\n        this.keyword = ''\n        this.getTableData()\n      }\n    },\n    openData(table) {\n      this.showData = true\n      this.$nextTick(() => {\n        this.$refs.preview.init(this.dataBase, table)\n      })\n    },\n    handleFieldsManage() {\n      this.drawer = true\n      this.$nextTick(() => {\n        this.$refs.fieldsList.init()\n      })\n    },\n  }\n}\n",null]}