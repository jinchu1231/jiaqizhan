{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/list/detail/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/list/detail/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PrintDialog from '@/components/PrintDialog'\nimport { getDataChange, getConfigData } from '@/api/onlineDev/visualDev'\nimport { deepClone } from '@/utils'\nimport Parser from './Parser'\nimport PrintBrowse from '@/components/PrintBrowse'\nexport default {\n  name: 'Detail',\n  components: { Parser, PrintBrowse, PrintDialog },\n  data() {\n    return {\n      printId: '',\n      printDialogVisible: false,\n      visible: false,\n      dataForm: {\n        id: '',\n        data: ''\n      },\n      modelId: '',\n      formData: {},\n      formValue: {},\n      loading: true,\n      mainLoading: false,\n      detailVisible: false,\n      useFormPermission: false,\n      printBrowseVisible: false,\n      formOperates: []\n    }\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    printBrowseHandle(id) {\n      this.printDialogVisible = false\n      this.printId = id;\n      this.printBrowseVisible = true;\n    },\n    print() {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持打印', type: 'warning' })\n      this.printDialogVisible = true\n      this.$nextTick(() => {\n        if (this.formData.printId.length == 1) {\n          this.printBrowseHandle(this.formData.printId[0])\n          return\n        }\n        this.$refs.printDialog.init(this.formData.printId)\n      })\n    },\n    init(formData, modelId, id, useFormPermission) {\n      this.formData = deepClone(formData)\n      this.modelId = modelId\n      this.useFormPermission = useFormPermission\n      this.dataForm.id = id || ''\n      this.getFormOperates()\n      this.loading = true\n      this.$nextTick(() => {\n        if (this.dataForm.id) {\n          let extra = {\n            modelId,\n            id,\n            type: 2\n          }\n          this.$store.commit('generator/SET_DYNAMIC_MODEL_EXTRA', extra)\n          getDataChange(modelId, this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            if (!this.dataForm.data) return\n            this.formValue = JSON.parse(this.dataForm.data)\n            this.fillFormData(this.formData, this.formValue)\n            this.initRelationForm(this.formData.fields)\n            this.visible = true\n          })\n        } else {\n          this.formValue = {}\n          this.loading = false\n          this.visible = false\n          this.$emit('close')\n        }\n      })\n    },\n    initRelationForm(componentList) {\n      componentList.forEach(cur => {\n        const config = cur.__config__\n        if (config.jnpfKey == 'relationFormAttr' || config.jnpfKey == 'popupAttr') {\n          const relationKey = cur.relationField.split(\"_jnpfTable_\")[0]\n          componentList.forEach(item => {\n            const noVisibility = Array.isArray(item.__config__.visibility) && !item.__config__.visibility.includes('pc')\n            if ((relationKey == item.__vModel__) && (noVisibility || !!item.__config__.noShow) && !cur.__vModel__) {\n              cur.__config__.noShow = true\n            }\n          })\n        }\n        if (cur.__config__.children && cur.__config__.children.length) this.initRelationForm(cur.__config__.children)\n      })\n    },\n    toDetail(item) {\n      if (!item.__config__.defaultValue) return\n      this.mainLoading = true\n      getConfigData(item.modelId).then(res => {\n        this.mainLoading = false\n        if (!res.data) return\n        if (!res.data.formData) return\n        let formData = JSON.parse(res.data.formData)\n        formData.popupType = this.formData.popupType\n        this.detailVisible = true\n        this.$nextTick(() => {\n          this.$refs.Detail.init(formData, item.modelId, item.__config__.defaultValue)\n        })\n      }).catch(() => { this.mainLoading = false })\n    },\n    getFormOperates() {\n      if (!this.useFormPermission) return\n      const permissionList = this.$store.getters.permissionList\n      const modelId = this.$route.meta.modelId\n      const list = permissionList.filter(o => o.modelId === modelId)\n      this.formOperates = list[0] && list[0].form ? list[0].form : []\n    },\n    fillFormData(form, data) {\n      const loop = (list, parent) => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__) {\n            if (item.__config__.jnpfKey === 'relationForm' || item.__config__.jnpfKey === 'popupSelect') {\n              item.__config__.defaultValue = data[item.__vModel__ + '_id']\n              this.$set(item, 'name', data[item.__vModel__] || '')\n            } else {\n              const val = data.hasOwnProperty(item.__vModel__) ? data[item.__vModel__] : item.__config__.defaultValue\n              item.__config__.defaultValue = val\n            }\n            if (this.useFormPermission) {\n              let id = item.__config__.isSubTable ? parent.__vModel__ + '-' + item.__vModel__ : item.__vModel__\n              let noShow = true\n              if (this.formOperates && this.formOperates.length) {\n                noShow = !this.formOperates.some(o => o.enCode === id)\n              }\n              noShow = item.__config__.noShow ? item.__config__.noShow : noShow\n              this.$set(item.__config__, 'noShow', noShow)\n            }\n          } else {\n            if (['relationFormAttr', 'popupAttr'].includes(item.__config__.jnpfKey)) {\n              item.__config__.defaultValue = data[item.relationField.split('_jnpfTable_')[0] + '_' + item.showField];\n            }\n          }\n          if (item.__config__ && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children, item)\n          }\n        }\n      }\n      loop(form.fields)\n      this.loading = false\n    }\n  }\n}\n",null]}