{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RTreeSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RTreeSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.array.find-index\");\nrequire(\"core-js/modules/es6.object.keys\");\nrequire(\"core-js/modules/web.dom.iterable\");\nvar _mixin = _interopRequireDefault(require(\"../mixin\"));\nvar _dynamicMixin = _interopRequireDefault(require(\"../dynamicMixin\"));\nvar _handelFlidMixin = _interopRequireDefault(require(\"../handelFlidMixin\"));\nvar _TreeNodeDialog = _interopRequireDefault(require(\"./TreeNodeDialog\"));\nvar _dictionary = require(\"@/api/systemData/dictionary\");\nvar _index = _interopRequireDefault(require(\"@/views/systemData/dictionary/index.vue\"));\nvar _TreeEditing = _interopRequireDefault(require(\"./TreeEditing\"));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  mixins: [_mixin.default, _dynamicMixin.default, _handelFlidMixin.default],\n  components: {\n    TreeNodeDialog: _TreeNodeDialog.default,\n    dicIndex: _index.default,\n    TreeEditing: _TreeEditing.default\n  },\n  data: function data() {\n    return {\n      dialogVisible: false,\n      currentNode: {},\n      props: {\n        value: 'id',\n        label: 'fullName',\n        children: 'children'\n      },\n      renderKey: +new Date(),\n      dicVisible: false,\n      updateVisible: false,\n      node: '',\n      currentNodeId: \"\",\n      formData: {\n        fullName: '',\n        id: ''\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.getDataInterfaceInfo();\n  },\n  methods: {\n    selectChange: function selectChange() {\n      this.$emit('changeSelect');\n      this.dictionaryTypeChange(this.dictionaryId);\n    },\n    defaultValueChange: function defaultValueChange() {\n      this.selectChange();\n    },\n    goDictionary: function goDictionary() {\n      var _this = this;\n      this.dicVisible = true;\n      this.$nextTick(function () {\n        _this.$refs.dicIndex.initData();\n      });\n    },\n    addTreeItem: function addTreeItem() {\n      this.currentNodeId = '';\n      this.dialogVisible = true;\n      this.currentNode = this.activeData.options;\n    },\n    addNode: function addNode(data) {\n      var _this2 = this;\n      if (this.currentNodeId) {\n        Object.keys(data).forEach(function (key) {\n          _this2.node.data[key] = data[key];\n        });\n      } else {\n        this.currentNode.push(data);\n      }\n    },\n    update: function update(node, data) {\n      this.node = node;\n      this.currentNodeId = data.id;\n      this.dialogVisible = true;\n      this.currentNode = data;\n    },\n    append: function append(data) {\n      this.currentNodeId = '';\n      if (!data.children) {\n        this.$set(data, 'children', []);\n      }\n      this.dialogVisible = true;\n      this.currentNode = data.children;\n    },\n    remove: function remove(node, data) {\n      this.activeData.__config__.defaultValue = []; // 避免删除时报错\n      var parent = node.parent;\n      var children = parent.data.children || parent.data;\n      var index = children.findIndex(function (d) {\n        return d.id === data.id;\n      });\n      children.splice(index, 1);\n    },\n    onChange: function onChange() {\n      this.renderKey = +new Date();\n      this.activeData.__config__.renderKey = +new Date();\n      this.activeData.__config__.defaultValue = this.activeData.multiple ? [] : '';\n    },\n    dataTypeChange: function dataTypeChange(val) {\n      this.activeData.__config__.defaultValue = '';\n      this.activeData.options = [];\n      this.activeData.props.value = 'id';\n      this.activeData.props.label = 'fullName';\n      this.activeData.props.children = 'children';\n      this.activeData.__config__.dictionaryType = '';\n      this.activeData.__config__.propsUrl = '';\n      this.activeData.__config__.propsName = '';\n      this.activeData.__config__.templateJson = [];\n    },\n    dictionaryTypeChange: function dictionaryTypeChange(val) {\n      var _this3 = this;\n      this.activeData.__config__.defaultValue = this.activeData.multiple ? [] : '';\n      if (!val) {\n        this.activeData.options = [];\n        return;\n      }\n      (0, _dictionary.getDictionaryDataSelector)(val).then(function (res) {\n        _this3.activeData.options = res.data.list;\n      });\n    },\n    treeSelectItem: function treeSelectItem() {\n      var _this4 = this;\n      this.updateVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs.treeEditing.init(_this4.activeData.options);\n      });\n    },\n    handleSure: function handleSure(arr) {\n      this.activeData.options = arr || [];\n    }\n  }\n};",null]}