{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/interfaceOauth/VerifySignatureInfo.vue?vue&type=template&id=644a8968&scoped=true","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/interfaceOauth/VerifySignatureInfo.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n  <el-dialog class=\"JNPF-dialog JNPF-dialog_center\" title=\"验证签名使用说明\" append-to-body\n    :visible.sync=\"verifySignatureVisible\" width=\"800px\" @close=\"goback\">\n    <div class=\"doc-container\">\n      <div class=\"docu-container\">\n        <h4><a href=\"#验证开启\" id=\"验证开启\" name=\"验证开启\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>验证开启</a></h4>\n        <p>验证签名关闭，不使用验证机制</p>\n        <li>直接将appId和appSecret，按照 Authorization: appId::appSecret 格式加入到 Header 中。</li>\n        <p>验证签名开启，使用下列签名验证机制</p>\n        <p></p>\n        <h4><a href=\"#签名验证机制\" id=\"签名验证机制\" name=\"签名验证机制\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>签名验证机制</a></h4>\n        <p>和第三方服务对接时，需要建立通讯双方的信任关系，以及确保通讯内容不被篡改，不被重放等。通常，我们采用 HTTPS 和 KeyId/SecretKey 的方式：</p>\n        <ol>\n          <li>HTTPS 用来确定接收方的身份，利用公钥证书机制来保证。</li>\n          <li>根据双方共享的一对 keyId/secret，使用 HMAC 签名机制，发送方对请求内容进行签名，并加入到 Header\n            中，接收方使用同样的方式对请求进行签名计算，比对签名结果用来判别发送方的身份。</li>\n        </ol>\n        <p>当前HTTP授权证书支持globalsign, symantec, geotrust, comodo这四类，其余证书类型需要经过处理，暂时不推荐。</p>\n        <p>本系统内采用appId/appSecret来进行签名。</p>\n        <h4><a href=\"#签名过程\" id=\"签名过程\" name=\"签名过程\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>签名过程</a></h4>\n        <p>签名分为以下4个步骤:</p>\n        <ol>\n          <li>选择合适的签名方法</li>\n          <li>根据对应的签名，构建待签名的字符串</li>\n          <li>根据对应的签名算法和对应的appSecret，计算待签名字符串的 Hmac 签名</li>\n          <li>将签名按规定格式加入到 Header: Authorization中。\n            <p>通常使用: Authorization: SignVersion:KeyId:Scope:Signature;\n            </p>\n          </li>\n          <p>本系统内最终以KeyId:Signature规则展示</p>\n        </ol>\n        <h4><a href=\"#签名方法\" id=\"签名方法\" name=\"签名方法\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>签名方法</a></h4>\n        <p>为了使双方采用一致的算法计算签名，需要规定签名字符串的构建和签名算法，为了满足后续的签名算法升级，当前支持的签名方式为： HmacSHA256</p>\n        <p>待签名字符串，请按照以下顺序构建</p>\n        <ol>\n          <li>\n            <p>Http Method, 大写。例如 GET, POST。加上换行符 \\n</p>\n          </li>\n          <li>\n            <p>URI Path。query params string 之前的部分。 加上换行符 \\n</p>\n          </li>\n          <li>\n            <p>Header 中的 YmDate， 以时间戳的形式，例如（2022-06-28 16:26:11=>1656404771000）。加上换行符 \\n</p>\n            <p>该时间将会用来判断请求有效性，限定一分钟之内有效。若无效返回验证超时。</p>\n          </li>\n          <li>\n            <p>UserKey用于用户认证 \\n</p>\n          </li>\n          <li>\n            <p>Header 中的 Host，为开发者自身的域名，加上换行符 \\n</p>\n          </li>\n        </ol>\n        <p>Header规范化方法如下:</p>\n        <ol>\n          <li>将所有的 header name 都变成小写，按照字典序排序。</li>\n          <li>对每一个小写的 name, 取出所有的对应的 value。如果有多个 value, 对所有的 value 进行字典序排序，用逗号 (,) 连接。</li>\n          <li>对每一对 name, value。按照如下方式拼接：name:value\\n (\\n 为换行)</li>\n        </ol>\n        <h4><a href=\"#计算待签名字符串的签名\" id=\"计算待签名字符串的签名\" name=\"计算待签名字符串的签名\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>计算待签名字符串的签名</a></h4>\n        <p><b>签名使用的 Key</b></p>\n        <ol>\n          <li>HmacSHA256 方式直接使用 appId 对应的 appSecret。通常这是一个32位 Base64 字符串，将其 Base64 decode 为字节数组。\n          </li>\n          <li>其他方法，为了更加安全的保护 appSecret, 可能会使用特定的算法根据 appSecret 派生出新的签名用的 key。目前保留。</li>\n        </ol>\n        <p><b>计算签名</b></p>\n        <ol>\n          <li>使用 HmacSha256 计算 Hmac 签名。</li>\n          <li>将待签名字符串，获取对应的 UTF-8 字节数组。</li>\n          <li>使用签名算法对待签名字节数组计算 Hmac 签名。</li>\n          <li>将签名结果变成 Hex 字符串。</li>\n          <li>将签名结果，按照 Authorization: &lt;KeyId&gt;:&lt;Signature&gt; 格式加入到 Header 中。</li>\n        </ol>\n        <h4><a href=\"#签名示例\" id=\"签名示例\" name=\"签名示例\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>签名示例</a></h4>\n        <p>针对 appId, appSecret (abcde, xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyy)</p>\n        <p>appId和appSecret为必传参数。可以添加为请求头参数（Header）如：abcde:xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyy</p>\n        <p>其他参数：如果是GET请求，统一路径传参；如果是POST请求，统一Body-application/json传参。\n        <h5><a href=\"#get-请求\" id=\"get-请求\" name=\"get-请求\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>GET 请求：</a></h5>\n        <p><em>GET</em>\n          /api/system/DataInterface/{id}/Actions/Response?tenantId=xxxxx&amp;name=abc<br>\n          Host : localhost:30000<br>\n          YmDate : 1656404771000<br>\n          UserKey : xxxxxxx<br>\n        <p>按照规则生成的待签名字符串如下：</p>\n        <table class=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>签名结果</th>\n              <th>说明</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>待签名字段名</td>\n              <td>待签名字段值</td>\n            </tr>\n            <tr>\n              <td>Http Method</td>\n              <td>GET</td>\n            </tr>\n            <tr>\n              <td>URL Path</td>\n              <td> /api/system/DataInterface/{id}/Actions/Response</td>\n            </tr>\n            <tr>\n              <td>YmDate</td>\n              <td>1656404771000</td>\n            </tr>\n            <tr>\n              <td>UserKey</td>\n              <td>xxxxxxx</td>\n            </tr>\n            <tr>\n              <td>Host</td>\n              <td>localhost:30000</td>\n            </tr>\n            <tr>\n              <td>最终待签名字符串</td>\n              <td>以下 \\n\n                表明换行<br>GET\\n<br>/api/system/DataInterface/{id}/Actions/Response\\n<br>1656404771000\\n\n                <br>localhost:30000\\n<br>\n              </td>\n            </tr>\n            <tr>\n              <td>最终计算的 Authorization header</td>\n              <td>Authorization:\n                abcde::5a13e56353da7954a96605c7f21f0f14a26a49baf387f95e600cdbdd7f0dc604</td>\n            </tr>\n          </tbody>\n        </table>\n        <h5><a href=\"#post-请求\" id=\"post-请求\" name=\"post-请求\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>POST 请求：</a></h5>\n        <p><em>POST /api/system/DataInterface/{id}/Actions/Response<br>\n            Host : localhost:30000<br>\n            YmDate : 1656404771000<br>\n            UserKey : xxxxxxx<br>\n            body参数json格式如：{\"tenantId\":\"123\",\"name\":\"abc\"}</em></p>\n        <p>按照规则生成的待签名字符串如下：</p>\n        <table class=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>签名结果</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>待签名字段名</td>\n              <td>待签名字段值</td>\n            </tr>\n            <tr>\n              <td>Http Method</td>\n              <td>POST</td>\n            </tr>\n            <tr>\n              <td>URL Path</td>\n              <td>/api/system/DataInterface/{id}/Actions/Response</td>\n            </tr>\n            <tr>\n              <td>YmDate</td>\n              <td>1656404771000</td>\n            </tr>\n            <tr>\n              <td>UserKey</td>\n              <td>xxxxxxx</td>\n            </tr>\n            <tr>\n              <td>Host</td>\n              <td>localhost:30000</td>\n            </tr>\n\n            <tr>\n              <td>最终待签名字符串</td>\n              <td>以下 \\n 表明换行<br>POST\\n<br>/hmac/testPost\\n<br>1656404771000\\n\n                <br>localhost:30000\\n<br>\n              </td>\n            </tr>\n            <tr>\n              <td>最终计算的 Authorization header</td>\n              <td>Authorization :\n                abcde::7af664ac15b675633bc13a3ab03adc2d0c6e3834999785698e5830ae215a8545</td>\n            </tr>\n          </tbody>\n        </table>\n        <h4><a href=\"#javaversion\" id=\"javaversion\" name=\"javaversion\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>(java版)生成待签名字符串及Authorization代码示例:</a></h4>\n        <pre class=\" language-java\"><code class=\" language-java\"><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>binary<span class=\"token punctuation\">.</span>Base64<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>binary<span class=\"token punctuation\">.</span>Hex<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>Mac<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span>SecretKeySpec<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>UnsupportedEncodingException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>InvalidKeyException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>NoSuchAlgorithmException<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EncryDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchAlgorithmException<span class=\"token punctuation\">,</span> InvalidKeyException<span class=\"token punctuation\">,</span> UnsupportedEncodingException <span class=\"token punctuation\">{</span>\n        String secret <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyy\"</span><span class=\"token punctuation\">;</span>\n        String algorithmForMac <span class=\"token operator\">=</span> <span class=\"token string\">\"HmacSHA256\"</span><span class=\"token punctuation\">;</span>\n        String method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n        String urlPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/api/system/DataInterface/{id}/Actions/Response\"</span><span class=\"token punctuation\">;</span>\n        String YmDate <span class=\"token operator\">=</span> <span class=\"token string\">\"1656404771000\"</span><span class=\"token punctuation\">;</span>\n        String host <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost:30000\"</span><span class=\"token punctuation\">;</span>\n        String source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder()</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span>(method)<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span>(url)<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span>(ymdate)<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span>(host)<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.toString();</span>\n        Mac mac <span class=\"token operator\">=</span> Mac<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>algorithmForMac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        SecretKeySpec secretKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>Base64<span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> algorithmForMac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mac<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>secretKeySpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String signature <span class=\"token operator\">=</span> Hex<span class=\"token punctuation\">.</span><span class=\"token function\">encodeHexString</span><span class=\"token punctuation\">(</span>mac<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n        <h4><a href=\"#.netversion\" id=\".netversion\" name=\".netversion\" class=\"anchor\"><span\n              class=\"octicon octicon-link\"></span>(.net版)生成待签名字符串及Authorization代码示例:</a></h4>\n        <pre class=\" language-java\"><code class=\" language-java\"><span class=\"token keyword\">using</span><span > System.Security.Cryptography;</span>\n<span class=\"token keyword\">using</span><span> System.Text;</span>\n<span class=\"token keyword\">using</span><span > JNPF.Common.Extension;</span>\n<span class=\"token keyword\">namespace JNPF.Systems.System</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\"> internal class Class1</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\"> static void Main(string[] args)</span>\n      <span class=\"token punctuation\">{</span>\n        String secret <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyy\"</span><span class=\"token punctuation\">;</span>\n        String method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n        String urlPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/api/system/DataInterface/{id}/Actions/Response\"</span><span class=\"token punctuation\">;</span>\n        String YmDate <span class=\"token operator\">=</span> <span class=\"token string\">\"1656404771000\"</span><span class=\"token punctuation\">;</span>\n        String host <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost:30000\"</span><span class=\"token punctuation\">;</span>\n        String source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder()</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span>(method)<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span>(url)<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span>(ymdate)<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span>(host)<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.ToString();</span>\n        <span>using (var hmac = </span><span class=\"token keyword\">new</span><span> HMACSHA256(secret.</span><span class=\"token function\">ToBytes</span><span>(Encoding.UTF8)))</span>\n        <span class=\"token punctuation\">{</span>\n          <span>byte[] hashmessage = hmac.</span><span class=\"token function\">ComputeHash</span><span>(source.</span><span class=\"token function\">ToBytes</span><span>(Encoding.UTF8));</span>\n          <span>var signature = hashmessage.</span><span class=\"token function\">ToHexString</span><span>();</span>\n          <span>Console.</span><span class=\"token function\">WriteLine</span><span>(signature);</span>\n          <span>Console.</span><span class=\"token function\">ReadKey</span><span>();</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n    </div>\n  </el-dialog>\n",null]}