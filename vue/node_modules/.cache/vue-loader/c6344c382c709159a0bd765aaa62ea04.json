{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dictionary/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dictionary/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getDictionaryType,\n  getDictionaryDataList,\n  delDictionaryData,\n  updateDictionaryState\n} from '@/api/systemData/dictionary'\nimport Form from './Form'\nimport TypeList from './components/index'\n\nexport default {\n  name: 'systemData-dictionary',\n  components: {\n    Form,\n    TypeList\n  },\n  data() {\n    return {\n      defaultProps: {\n        children: 'children',\n        label: 'fullName'\n      },\n      listQuery: {\n        keyword: '',\n        isTree: 0\n      },\n      typeId: '',\n      drawer: false,\n      formVisible: false,\n      treeLoading: false,\n      listLoading: false,\n      treeData: [],\n      tableData: [],\n      expands: true,\n      expandsTree: true,\n      refreshTable: true,\n      refreshTree: true,\n      filterText: '',\n    }\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.treeBox.filter(val)\n    }\n  },\n  created() {\n    this.initData(true)\n  },\n  methods: {\n    search() {\n      this.getDictionaryList()\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.getDictionaryList()\n    },\n    initData(isInit) {\n      this.filterText = ''\n      this.treeLoading = true\n      getDictionaryType().then(res => {\n        this.treeData = res.data.list\n        this.$nextTick(() => {\n          if (isInit) this.typeId = this.treeData[0].id\n          this.listQuery.isTree = this.treeData[0].isTree\n          this.$refs.treeBox.setCurrentKey(this.typeId)\n          this.treeLoading = false\n          if (isInit) this.typeId && this.getDictionaryList()\n        })\n      }).catch(() => {\n        this.treeLoading = false\n      })\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.fullName.indexOf(value) !== -1;\n    },\n    toggleExpand() {\n      this.refreshTable = false;\n      this.expands = !this.expands;\n      this.$nextTick(() => {\n        this.refreshTable = true;\n      });\n    },\n    toggleTreeExpand(expands) {\n      this.filterText = ''\n      this.refreshTree = false\n      this.expandsTree = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(this.typeId)\n        })\n      })\n    },\n    getDictionaryList() {\n      this.listLoading = true\n      getDictionaryDataList(this.typeId, this.listQuery).then(res => {\n        this.tableData = res.data.list\n        this.listLoading = false\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    // 分类管理\n    handleTypeManage() {\n      this.drawer = true\n      this.$nextTick(() => {\n        this.$refs.TypeList.init()\n      })\n    },\n    handleNodeClick(data) {\n      if (this.typeId === data.id) return\n      this.typeId = data.id\n      this.listQuery.isTree = data.isTree\n      this.reset()\n    },\n    handleUpdateState(row) {\n      const txt = row.enabledMark ? '禁用' : '开启'\n      this.$confirm(`您确定要${txt}当前数据吗, 是否继续?`, '提示', {\n        type: 'warning'\n      }).then(() => {\n        updateDictionaryState(row.id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.$store.commit('base/SET_DICTIONARY_LIST', [])\n              row.enabledMark = row.enabledMark ? 0 : 1\n            }\n          })\n        })\n      }).catch(() => { })\n    },\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id, this.typeId, this.listQuery.isTree)\n      })\n    },\n    handleDel(id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        delDictionaryData(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1500,\n            onClose: () => {\n              this.$store.commit('base/SET_DICTIONARY_LIST', [])\n              this.getDictionaryList()\n            }\n          })\n        })\n      }).catch(() => { })\n    }\n  }\n}\n",null]}