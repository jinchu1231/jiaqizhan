{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport iconBox from \"@/components/JNPF-iconBox\";\nimport { create, update, info } from \"@/api/system/system\";\nimport singleImg from \"@/components/Upload/SingleImg\";\nimport clipboard from \"@/utils/clipboard\";\n\nexport default {\n  components: { iconBox, singleImg },\n  data() {\n    return {\n      visible: false,\n      dataForm: {\n        id: \"\",\n        fullName: \"\",\n        enCode: \"\",\n        sortCode: 0,\n        icon: \"\",\n        navigationIcon: \"\",\n        enabledMark: 1,\n        workflowEnabled: 1,\n        description: \"\",\n        workLogoIcon: \"\",\n        propertyJson: {\n          iconBackgroundColor: \"\"\n        }\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: \"名称不能为空\", trigger: \"blur\" }\n        ],\n        enCode: [{ required: true, message: \"编码不能为空\", trigger: \"blur\" }],\n        icon: [{ required: true, message: \"图标不能为空\", trigger: \"click\" }]\n      },\n      formLoading: false,\n      iconBoxVisible: false,\n      btnLoading: false,\n      selfUrl: \"\"\n    };\n  },\n  methods: {\n    init(id) {\n      this.dataForm.id = id || \"\";\n      this.selfUrl = \"\";\n      this.visible = true;\n      this.$nextTick(() => {\n        this.$refs[\"dataForm\"].resetFields();\n        if (this.dataForm.id) {\n          this.formLoading = true;\n          info(this.dataForm.id)\n            .then(res => {\n              this.dataForm = res.data;\n              const propertyJson = res.data.propertyJson\n                ? JSON.parse(res.data.propertyJson)\n                : null;\n              this.dataForm.propertyJson = propertyJson || {\n                iconBackgroundColor: \"\"\n              };\n              this.getSelfUrl(res.data.enCode);\n              this.$nextTick(() => {\n                this.formLoading = false;\n              });\n            })\n            .catch(() => { });\n        } else {\n          this.dataForm.propertyJson.iconBackgroundColor = \"\";\n          this.dataForm.description = \"\";\n          this.dataForm.workLogoIcon = \"\";\n          this.dataForm.navigationIcon = \"\";\n        }\n      });\n    },\n    openIconBox() {\n      this.iconBoxVisible = true;\n    },\n    dataFormSubmit() {\n      this.$refs[\"dataForm\"].validate(valid => {\n        if (valid) {\n          const query = {\n            ...this.dataForm,\n            propertyJson: JSON.stringify(this.dataForm.propertyJson)\n          };\n          const formMethod = this.dataForm.id ? update : create;\n          formMethod(query).then(res => {\n            this.$message({\n              message: res.msg,\n              type: \"success\",\n              duration: 1500,\n              onClose: () => {\n                this.visible = false;\n                this.btnLoading = false;\n                this.$emit(\"refreshDataList\");\n              }\n            });\n          }).catch(() => {\n            this.btnLoading = false;\n          });\n        }\n      });\n    },\n    choiceIcon(value) {\n      this.dataForm.icon = value;\n    },\n    getSelfUrl(enCode) {\n      if (!enCode) return (this.selfUrl = \"\");\n      this.selfUrl = `${window.location.origin}/JNPF_APP_${enCode}`;\n    },\n    handleCopy(text, event) {\n      if (text) clipboard(text, event);\n    },\n    openWindow(val) {\n      if (val) window.open(val);\n    }\n  }\n};\n",null]}