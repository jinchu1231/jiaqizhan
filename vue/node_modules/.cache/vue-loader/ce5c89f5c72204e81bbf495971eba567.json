{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataModel/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataModel/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Sortable from 'sortablejs'\nimport { DataModelInfo, DataModelUpdate, DataModelCreate, addTableFields } from '@/api/systemData/dataModel'\nimport { getList } from '@/api/systemData/commonFields'\nexport default {\n  data() {\n    return {\n      dataForm: {\n        table: '',\n        tableName: '',\n        newTable: ''\n      },\n      dataRule: {\n        newTable: [\n          { required: true, message: '表名称不能为空', trigger: 'blur' },\n          { pattern: /(^_([A-Za-z0-9]_?)*$)|(^[A-Za-z](_?[A-Za-z0-9])*_?$)/, message: '请输入正确的表名称', trigger: ['blur'] },\n        ],\n        tableName: [\n          { required: true, message: '表说明不能为空', trigger: 'blur' }\n        ]\n      },\n      list: [],\n      fieldList: [],\n      listLoading: false,\n      btnLoading: false,\n      refreshTable: true,\n      sortable: null,\n      dataBase: '',\n      options: [\n        { label: '字符串', value: 'varchar' },\n        { label: '整型', value: 'int' },\n        { label: '日期时间', value: 'datetime' },\n        { label: '浮点', value: 'decimal' },\n        { label: '长整型', value: 'bigint' },\n        { label: '文本', value: 'text' }\n      ],\n      dbType: 'mysql'\n    }\n  },\n  computed: {\n    isIdentity() {\n      return ['Oracle', 'PostgreSQL', 'KingbaseES'].includes(this.dbType);\n    }\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    getFieldList() {\n      getList().then(res => { this.fieldList = res.data.list })\n    },\n    init(dataBase, table, type) {\n      this.$refs['dataForm'].resetFields()\n      this.dataForm.table = table || ''\n      this.dbType = type\n      this.dataBase = dataBase\n      this.listLoading = true\n      this.getFieldList()\n      this.$nextTick(() => {\n        if (this.dataForm.table) {\n          DataModelInfo(dataBase, this.dataForm.table).then(res => {\n            this.dataForm = res.data.tableInfo\n            const hasTableData = res.data.hasTableData || false\n            this.$set(this.dataForm, 'newTable', this.dataForm.table)\n            this.list = res.data.tableFieldList.map((o, i) => ({ ...o, index: this.jnpf.idGenerator() }))\n            for (let index = 0; index < this.list.length; index++) {\n              const element = this.list[index];\n              if (hasTableData) element.disabled = true\n            }\n            this.listLoading = false\n            this.$nextTick(() => {\n              if (!hasTableData) this.setSort()\n            })\n          })\n        } else {\n          this.dataForm.newTable = table || ''\n          this.listLoading = false\n          this.list = []\n          this.setSort()\n        }\n      })\n    },\n    setSort() {\n      const el = this.$refs.dragTable.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n      this.sortable = Sortable.create(el, {\n        ghostClass: 'sortable-ghost', // Class name for the drop placeholder,\n        setData: function (dataTransfer) {\n          // to avoid Firefox bug\n          // Detail see : https://github.com/RubaXa/Sortable/issues/1012\n          dataTransfer.setData('Text', '')\n        },\n        onEnd: evt => {\n          const targetRow = this.list.splice(evt.oldIndex, 1)[0]\n          this.list.splice(evt.newIndex, 0, targetRow)\n        },\n        handle: '.drag-handler',\n      })\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          if (!this.list.length) {\n            this.$message({\n              message: '请至少添加一个字段',\n              type: 'error',\n              duration: 1000\n            })\n            return\n          }\n          if (!this.exist()) return\n          let boo = this.list.some(o => o.primaryKey === 1)\n          if (!boo) {\n            this.$message({\n              message: '请选择一个字段作为主键',\n              type: 'error',\n              duration: 1000\n            })\n            return\n          }\n          this.btnLoading = true\n          let tableFieldList = this.list.filter(o => !o.disabled)\n          if (tableFieldList.length && tableFieldList.length != this.list.length) {\n            let query = {\n              tableFieldList: tableFieldList.map(o => ({\n                ...o,\n                primaryKey: o.primaryKey ? 1 : 0,\n                allowNull: o.allowNull ? 1 : 0,\n                identity: o.identity && o.primaryKey ? 1 : 0,\n              })),\n              tableInfo: this.dataForm\n            }\n            addTableFields(this.dataBase, query).then((res) => {\n              this.$message({\n                message: res.msg,\n                type: 'success',\n                duration: 1500,\n                onClose: () => {\n                  this.visible = false\n                  this.btnLoading = false\n                  this.$emit('close', true)\n                }\n              })\n            }).catch(() => { this.btnLoading = false })\n            return\n          }\n          let query = {\n            tableFieldList: this.list,\n            tableInfo: this.dataForm\n          }\n          const formMethod = this.dataForm.table ? DataModelUpdate : DataModelCreate\n          formMethod(this.dataBase, query).then((res) => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('close', true)\n              }\n            })\n          }).catch(() => { this.btnLoading = false })\n        }\n      })\n    },\n    exist() {\n      let isOk = true;\n      //  遍历数组，判断非空\n      for (let i = 0; i < this.list.length; i++) {\n        const e = this.list[i];\n        if (!e.field) {\n          this.$message({\n            showClose: true,\n            message: `第${i + 1}行列名不能为空`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n        let reg = /(^_([a-zA-Z0-9]_?)*$)|(^[a-zA-Z](_?[a-zA-Z0-9])*_?$)/\n        if (!reg.test(e.field)) {\n          this.$message({\n            showClose: true,\n            message: `第${i + 1}行列名格式错误，请重新输入`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n        let num = this.list.filter(o => o.field == e.field)\n        if (num.length > 1) {\n          this.$message({\n            showClose: true,\n            message: `第${i + 1}行列名'${e.field}'已重复`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n        if (!e.fieldName) {\n          this.$message({\n            showClose: true,\n            message: `第${i + 1}行说明不能为空`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n      }\n      return isOk;\n    },\n    changeKey(val, row) {\n      row.allowNull = 0\n      if (!val) return\n      for (let i = 0; i < this.list.length; i++) {\n        if (row.field != this.list[i].field) {\n          this.$set(this.list[i], 'primaryKey', 0)\n          this.$set(this.list[i], 'identity', 0)\n        }\n      }\n    },\n    handleDel(index, row) {\n      this.list.splice(index, 1)\n    },\n    addHandle(row) {\n      let item = {}\n      if (!row) {\n        item = {\n          field: \"\", dataType: \"varchar\", dataLength: 50, allowNull: 1, identity: 0, primaryKey: 0, fieldName: \"\", index: this.jnpf.idGenerator()\n        }\n      } else {\n        item = {\n          field: row.field,\n          dataType: row.dataType,\n          dataLength: row.dataLength,\n          allowNull: row.allowNull,\n          fieldName: row.fieldName,\n          identity: row.identity,\n          index: this.jnpf.idGenerator(),\n          primaryKey: 0\n        }\n      }\n      this.list.push(item)\n    }\n  }\n}\n",null]}