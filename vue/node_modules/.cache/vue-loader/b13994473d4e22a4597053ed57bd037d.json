{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/menu/components/connectForm/DataTable.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/menu/components/connectForm/DataTable.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { addResizeListener, removeResizeListener } from 'element-ui/src/utils/resize-event';\nimport { DataModelList } from \"@/api/systemData/dataModel\";\nexport default {\n  name: 'dataTable',\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  props: {\n    dbLinkId: {\n      default: ''\n    },\n    value: {\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    size: String,\n  },\n  data() {\n    return {\n      treeData: [],\n      allList: [],\n      keyword: '',\n      innerValue: '',\n      visible: false,\n      loading: false,\n      props: {\n        children: 'children',\n        label: 'table',\n        isLeaf: 'isLeaf'\n      },\n      listLoading: true,\n      keyword: \"\",\n      list: [],\n      checked: \"\",\n      checkedList: [],\n      selectedData: [],\n      tagsList: [],\n      inputHovering: false,\n      inputWidth: 0,\n      initialInputHeight: 0,\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.multiple\n        ? Array.isArray(this.value) && this.value.length > 0\n        : this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.selectDisabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    },\n    currentPlaceholder() {\n      if (this.multiple && Array.isArray(this.value) && this.value.length) {\n        return ''\n      } else {\n        return this.placeholder\n      }\n    },\n    selectDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    selectSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    collapseTagSize() {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1\n        ? 'mini'\n        : 'small';\n    },\n  },\n  created() {\n    this.getData()\n  },\n  mounted() {\n    addResizeListener(this.$el, this.handleResize);\n\n    const reference = this.$refs.reference;\n    if (reference && reference.$el) {\n      const sizeMap = {\n        medium: 36,\n        small: 32,\n        mini: 28\n      };\n      const input = reference.$el.querySelector('input');\n      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];\n    }\n    if (this.multiple) {\n      this.resetInputHeight();\n    }\n    this.$nextTick(() => {\n      if (reference && reference.$el) {\n        this.inputWidth = reference.$el.getBoundingClientRect().width;\n      }\n    });\n    this.setDefault()\n  },\n  beforeDestroy() {\n    if (this.$el && this.handleResize) removeResizeListener(this.$el, this.handleResize);\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    },\n    selectDisabled() {\n      this.$nextTick(() => {\n        this.resetInputHeight();\n      });\n    }\n  },\n  methods: {\n    async getData() {\n      const dbLinkId = this.dbLinkId || \"0\";\n      DataModelList(dbLinkId, {\n        keyword: this.keyword,\n        currentPage: 1,\n        pageSize: 1000000\n      }).then((res) => {\n        this.allList = res.data.list\n        this.setDefault()\n      })\n    },\n    echoTable(rows) {\n      rows.forEach(row => {\n        this.$refs.multipleTable.$refs.JNPFTable.toggleRowSelection(row, true)\n      })\n    },\n    closeDialog() {\n      this.checked = \"\";\n      this.selectedData = [];\n      this.$emit(\"update:visible\", false);\n    },\n    onCloseVisible() {\n      if (this.allList.length && this.selectedData.length) {\n        this.$nextTick(() => {\n          let selData = []\n          this.allList.forEach(i => {  // 循环嵌套\n            this.selectedData.forEach(item => {\n              if (i.table === item.table) { // 判断哪些数据是需要回显的\n                selData.push(i)    // 需要回显的数据整合起来               \n              }\n            })\n          })\n          this.echoTable(selData) // 调用回显方法\n        })\n      }\n      this.visible = false\n    },\n    refresh() {\n      this.keyword = \"\";\n      this.initData();\n    },\n    initData() {\n      this.getData()\n      this.listLoading = true;\n      const dbLinkId = this.dbLinkId || \"0\";\n      DataModelList(dbLinkId, {\n        keyword: this.keyword,\n        currentPage: 1,\n        pageSize: 1000000\n      }).then((res) => {\n        this.list = res.data.list;\n        this.listLoading = false;\n        if (this.list.length && this.selectedData.length) {\n          this.$nextTick(() => {\n            let selData = []\n            this.list.forEach(i => {  // 循环嵌套\n              this.selectedData.forEach(item => {\n                if (i.table === item.table) { // 判断哪些数据是需要回显的\n                  selData.push(i)    // 需要回显的数据整合起来               \n                }\n              })\n            })\n            this.echoTable(selData) // 调用回显方法\n          })\n        }\n      });\n    },\n    handleSelectionChange(val) {\n      if (val.length > 0) {\n        this.selectedData = val;\n      }\n    },\n    onClose() { },\n    openDialog() {\n      if (this.selectDisabled) return\n      this.refresh()\n      this.setDefault()\n      this.visible = true\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    removeAll() {\n      this.selectedData = []\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n    },\n    confirm() {\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        let selectedIds = this.selectedData.map(o => o.table)\n        this.$emit('input', selectedIds)\n        this.$emit('change', selectedIds, this.selectedData)\n      }\n      this.visible = false\n    },\n    setDefault() {\n      if (!this.value || !this.value.length) {\n        this.innerValue = ''\n        this.selectedData = []\n        this.tagsList = []\n        return\n      }\n\n      const arr = this.multiple ? this.value : [this.value]\n      let selectedData = []\n      for (let i = 0; i < arr.length; i++) {\n        const item = arr[i];\n        inner: for (let j = 0; j < this.allList.length; j++) {\n          if (item === this.allList[j].table) {\n            selectedData.push(this.allList[j])\n            break inner\n          }\n        }\n      }\n      this.selectedData = selectedData\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        this.$nextTick(() => {\n          this.resetInputHeight();\n        })\n      } else {\n        if (!this.selectedData.length) return this.innerValue = ''\n        this.innerValue = this.selectedData[0].table\n      }\n    },\n    deleteTag(event, index) {\n      this.selectedData.splice(index, 1)\n      this.confirm()\n      event.stopPropagation();\n    },\n    handleClearClick(event) {\n      this.selectedData = []\n      this.confirm()\n      event.stopPropagation();\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    resetInputHeight() {\n      if (this.collapseTags) return;\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return;\n        let inputChildNodes = this.$refs.reference.$el.childNodes;\n        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];\n        const tags = this.$refs.tags;\n        const tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        const sizeInMap = this.initialInputHeight || 40;\n        input.style.height = this.selectedData.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tagsHeight + (tagsHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px';\n      });\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    }\n  }\n}\n",null]}