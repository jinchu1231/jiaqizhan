{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/OrganizeSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/OrganizeSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { addResizeListener, removeResizeListener } from 'element-ui/src/utils/resize-event';\nimport { getDepartmentSelectorByAuth } from \"@/api/permission/department\";\nimport { getOrganizeSelectorByAuth, getOrgByOrganizeCondition } from '@/api/permission/organize'\nimport emitter from 'element-ui/src/mixins/emitter'\nlet { methods: { dispatch } } = emitter\nexport default {\n  name: 'JnpfOrganizeSelect',\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  props: {\n    value: {\n      default: () => []\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    auth: {\n      type: Boolean,\n      default: false\n    },\n    isOnlyOrg: {\n      type: Boolean,\n      default: false\n    },\n    size: String,\n    currOrgId: {\n      default: '0'\n    },\n    parentId: {\n      default: ''\n    },\n    selectType: {\n      type: String,\n      default: 'all'\n    },\n    ableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      treeData: [],\n      allList: [],\n      keyword: '',\n      innerValue: '',\n      visible: false,\n      loading: false,\n      props: {\n        children: 'children',\n        label: 'fullName',\n        isLeaf: 'isLeaf'\n      },\n      selectedData: [],\n      selectedIds: [],\n      tagsList: [],\n      inputHovering: false,\n      inputWidth: 0,\n      initialInputHeight: 0,\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = Array.isArray(this.value) && this.value.length > 0\n      let criteria = this.clearable &&\n        !this.selectDisabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    },\n    currentPlaceholder() {\n      if (this.multiple && Array.isArray(this.value) && this.value.length) {\n        return ''\n      } else {\n        return this.placeholder\n      }\n    },\n    selectDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    selectSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    collapseTagSize() {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1\n        ? 'mini'\n        : 'small';\n    },\n  },\n  created() {\n    this.getData()\n  },\n  mounted() {\n    addResizeListener(this.$el, this.handleResize);\n\n    const reference = this.$refs.reference;\n    if (reference && reference.$el) {\n      const sizeMap = {\n        medium: 36,\n        small: 32,\n        mini: 28\n      };\n      const input = reference.$el.querySelector('input');\n      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];\n    }\n    if (this.multiple) {\n      this.resetInputHeight();\n    }\n    this.$nextTick(() => {\n      if (reference && reference.$el) {\n        this.inputWidth = reference.$el.getBoundingClientRect().width;\n      }\n    });\n    this.setDefault()\n  },\n  beforeDestroy() {\n    if (this.$el && this.handleResize) removeResizeListener(this.$el, this.handleResize);\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    },\n    selectDisabled() {\n      this.$nextTick(() => {\n        this.resetInputHeight();\n      });\n    },\n    allList: {\n      handler: function (val) {\n        this.setDefault()\n      },\n      deep: true\n    }\n  },\n  methods: {\n    async getData() {\n      const treeData = await this.$store.dispatch('generator/getDepTree')\n      const topItem = {\n        fullName: \"顶级节点\",\n        hasChildren: true,\n        id: \"-1\",\n        icon: \"icon-ym icon-ym-tree-organization3\",\n        organize: '顶级节点',\n        organizeIds: ['-1']\n      }\n      this.allList = [...this.$store.getters.departmentList, topItem]\n      if (this.selectType === 'all') {\n        if (this.auth) {\n          if (this.isOnlyOrg && this.parentId === '-1') {\n            this.treeData = [topItem]\n            return\n          }\n          const method = this.isOnlyOrg ? getOrganizeSelectorByAuth : getDepartmentSelectorByAuth\n          method(this.currOrgId).then(res => {\n            this.treeData = res.data.list\n          })\n        } else {\n          this.treeData = treeData\n        }\n      } else {\n        if (!this.ableIds.length) {\n          this.treeData = [];\n          return\n        }\n        const departIds = this.ableIds ? this.ableIds.map(o => o[o.length - 1]) : [];\n        const query = { departIds };\n        getOrgByOrganizeCondition(query).then(res => {\n          this.treeData = res.data.list;\n        })\n      }\n    },\n    onClose() { },\n    clear() {\n      if (this.selectDisabled) return\n      this.innerValue = ''\n      this.selectedData = []\n      this.selectedIds = []\n      this.tagsList = []\n      this.$emit('input', [])\n      this.$emit('change', [], [])\n      dispatch.call(this, 'ElFormItem', 'el.form.change', [])\n    },\n    openDialog() {\n      if (this.selectDisabled) return\n      this.keyword = ''\n      this.treeData = []\n      this.getData()\n      this.setDefault()\n      this.visible = true\n    },\n    search() {\n      this.$refs.tree && this.$refs.tree.filter(this.keyword)\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    getNodePath(node) {\n      let fullPath = []\n      const loop = (node) => {\n        if (node.level) fullPath.unshift(node.data)\n        if (node.parent) loop(node.parent)\n      }\n      loop(node)\n      return fullPath\n    },\n    handleNodeClick(data) {\n      if (data.disabled) return\n      let currId = data.organizeIds\n      let currData = data.organize\n      if (this.multiple) {\n        const boo = this.selectedIds.some(o => o.join('/') === currId.join('/'))\n        if (boo) return\n        this.selectedIds.push(currId)\n        this.selectedData.push(currData)\n      } else {\n        this.selectedIds = [currId]\n        this.selectedData = [currData]\n      }\n    },\n    removeAll() {\n      this.selectedData = []\n      this.selectedIds = []\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n      this.selectedIds.splice(index, 1)\n    },\n    confirm() {\n      let selectedData = []\n      for (let i = 0; i < this.selectedIds.length; i++) {\n        let item = []\n        let selectedNames = this.selectedData[i].split('/')\n        for (let j = 0; j < this.selectedIds[i].length; j++) {\n          item.push({\n            id: this.selectedIds[i][j],\n            fullName: selectedNames[j],\n          })\n        }\n        selectedData.push(item)\n      }\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        this.$emit('input', this.selectedIds)\n        this.$emit('change', this.selectedIds, selectedData)\n        dispatch.call(this, 'ElFormItem', 'el.form.change', this.selectedIds)\n      } else {\n        this.innerValue = this.selectedData.join(',')\n        this.$emit('input', this.selectedIds[0] || [])\n        this.$emit('change', this.selectedIds[0] || [], selectedData[0] || [])\n        dispatch.call(this, 'ElFormItem', 'el.form.change', this.selectedIds[0] || [])\n      }\n      this.visible = false\n    },\n    setDefault() {\n      if (!this.value || !this.value.length) {\n        this.innerValue = ''\n        this.selectedIds = []\n        this.selectedData = []\n        this.tagsList = []\n        this.$nextTick(() => {\n          this.resetInputHeight();\n        })\n        return\n      }\n      let selectedIds = this.multiple ? this.value : [this.value]\n      this.selectedIds = JSON.parse(JSON.stringify(selectedIds))\n      let textList = []\n      for (let i = 0; i < selectedIds.length; i++) {\n        const item = selectedIds[i];\n        let textItem = JSON.parse(JSON.stringify(item))\n        for (let j = 0; j < item.length; j++) {\n          inner: for (let ii = 0; ii < this.allList.length; ii++) {\n            if (item[j] === this.allList[ii].id) {\n              textItem[j] = this.allList[ii].fullName\n              break inner\n            }\n          }\n        }\n        textList.push(textItem)\n      }\n      this.selectedData = textList.map(o => o.join('/'))\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        this.$nextTick(() => {\n          this.resetInputHeight();\n        })\n      } else {\n        this.innerValue = this.selectedData.join(',')\n      }\n    },\n    deleteTag(event, index) {\n      this.selectedData.splice(index, 1)\n      this.selectedIds.splice(index, 1)\n      this.confirm()\n      event.stopPropagation();\n    },\n    handleClearClick(event) {\n      this.selectedData = []\n      this.selectedIds = []\n      this.confirm()\n      event.stopPropagation();\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    resetInputHeight() {\n      if (this.collapseTags) return;\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return;\n        let inputChildNodes = this.$refs.reference.$el.childNodes;\n        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];\n        const tags = this.$refs.tags;\n        const tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        const sizeInMap = this.initialInputHeight || 40;\n        input.style.height = this.selectedData.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tagsHeight + (tagsHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px';\n      });\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    }\n  }\n}\n",null]}