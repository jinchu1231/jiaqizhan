{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/MessageList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/MessageList.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMessageList, ReadInfo, MessageAllRead } from '@/api/system/message'\nimport ScheduleView from '@/components/ScheduleView'\n\nexport default {\n  name: 'messageList',\n  components: { ScheduleView },\n  data() {\n    return {\n      drawer: false,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        keyword: '',\n        type: '',\n        isRead: 0\n      },\n      messageList: [],\n      list: [],\n      activeItem: {},\n      loading: true,\n      visible: false,\n      finish: false,\n      files: [],\n      info: {},\n      type: '全部',\n      isNoRead: true,\n      scheduleVisible: false\n    }\n  },\n  watch: {\n    isNoRead(val) {\n      this.listQuery.isRead = ''\n      if (val) this.listQuery.isRead = 0\n      this.init()\n    }\n  },\n  created() {\n    this.getDictionaryData()\n  },\n  methods: {\n    init() {\n      this.finish = false\n      this.drawer = true\n      this.listQuery.currentPage = 1\n      this.list = []\n      this.getList()\n      this.$nextTick(() => {\n        this.bindScroll()\n      })\n    },\n    getDictionaryData() {\n      this.messageList = []\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSourceType' }).then((res) => {\n        let item = { id: '', fullName: '全部', enCode: '' }\n        this.messageList.push(item, ...res)\n      })\n    },\n    getList() {\n      this.loading = true\n      getMessageList(this.listQuery).then(res => {\n        if (res.data.list.length < this.listQuery.pageSize) {\n          this.finish = true\n        }\n        this.list = [...this.list, ...res.data.list]\n        this.loading = false\n      })\n    },\n    bindScroll() {\n      let _this = this,\n        vBody = _this.$refs.messageListBody;\n      vBody.addEventListener(\"scroll\", function () {\n        if (vBody.scrollHeight - vBody.clientHeight - vBody.scrollTop <= 200 && !_this.loading && !_this.finish) {\n          _this.listQuery.currentPage += 1\n          _this.getList()\n        }\n      });\n    },\n    readInfo(item) {\n      ReadInfo(item.id).then(res => {\n        this.info = res.data\n        this.files = res.data.files ? JSON.parse(res.data.files) : []\n        if (item.isRead == '0') {\n          item.isRead = '1'\n          this.$emit('read')\n        }\n        if (item.type == 4) {\n          let bodyText = JSON.parse(res.data.bodyText)\n          if (bodyText.type == 3) return\n          this.scheduleVisible = true\n          this.$nextTick(() => {\n            this.$refs.schedule.init(bodyText.id, '', bodyText.groupId)\n          })\n          return\n        }\n        if (item.type == 2 && item.flowType == 2) {\n          let bodyText = JSON.parse(res.data.bodyText)\n          this.drawer = false\n          this.$router.push('/workFlow/entrust?config=' + bodyText.type)\n        } else {\n          if (item.type == 1 || item.type == 3) {\n            this.visible = true\n          } else {\n            if (!res.data.bodyText) return\n            this.drawer = false\n            const Base64 = require('js-base64').Base64\n            this.$router.push('/workFlowDetail?config=' + encodeURIComponent(Base64.encode(res.data.bodyText)))\n          }\n        }\n      })\n    },\n    gotoCenter() {\n      this.drawer = false\n      this.$router.push('/messageRecord')\n    },\n    readAll() {\n      this.$confirm('您确定全部标识为已读状态, 是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        const query = {\n          keyword: this.listQuery.keyword,\n          type: this.listQuery.type,\n          isRead: this.isNoRead ? 0 : ''\n        }\n        MessageAllRead(query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.$emit('read', true)\n              if (this.isNoRead) {\n                this.init()\n              } else {\n                for (let i = 0; i < this.list.length; i++) {\n                  this.$set(this.list[i], 'isRead', '1')\n                }\n              }\n            }\n          })\n        })\n      }).catch(() => { });\n    },\n    handleClose(done) {\n      let vBody = this.$refs.messageListBody;\n      vBody.removeEventListener(\"scroll\", function () { });\n      done();\n    },\n    handleCommand(e) {\n      let item = this.messageList.filter(o => o.enCode == e)[0]\n      this.type = item.fullName\n      this.listQuery.type = e || ''\n      this.init()\n    },\n    search() {\n      this.init()\n    }\n  }\n}\n",null]}