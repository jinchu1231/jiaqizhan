{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/parser/Parser.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/parser/Parser.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport { deepClone } from '@/utils'\nimport { getDateDay, getLaterData, getBeforeData, getBeforeTime, getLaterTime } from '@/components/Generator/utils/index.js'\nimport jnpf from '@/utils/jnpf'\nimport render from '@/components/Generator/render/render.js'\nimport { dyOptionsList } from '@/components/Generator/generator/comConfig'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport { mapGetters } from \"vuex\"\n\nconst formClass = 'form-' + jnpf.idGenerator()\n\nconst layouts = {\n  colFormItem(h, scheme) {\n    const config = scheme.__config__\n    const listeners = buildListeners.call(this, scheme)\n    let labelWidth = config.labelWidth ? `${config.labelWidth}px` : null\n    let label = config.label ? config.label + (this.formConf.labelSuffix || '') : ''\n    if (config.showLabel === false) labelWidth = '0'\n    const Item = config.jnpfKey === 'cascader'\n      ? <JnpfCascader props={{ props: scheme.props }} v-model={this[this.formConf.formModel][scheme.__vModel__]} placeholder={scheme.placeholder} options={scheme.options}\n        disabled={scheme.disabled} show-all-levels={scheme.showAllLevels} separator={scheme.separator}\n        style={scheme.style} clearable={scheme.clearable} filterable={scheme.filterable} multiple={scheme.multiple}\n        onChange={val => this.onCascaderChange(val, scheme.on)} onBlur={val => this.onCascaderBlur(val, scheme.on)}\n        key={scheme.__config__.renderKey}></JnpfCascader>\n      : <render formData={this[this.formConf.formModel]} conf={scheme} {...{ on: listeners }} ref={config.jnpfKey === 'table' ? scheme.__vModel__ : undefined}\n        key={scheme.__config__.renderKey} relations={config.jnpfKey === 'table' ? this.relations : undefined} />\n    const visibility = !config.visibility || (Array.isArray(config.visibility) && config.visibility.includes('pc'))\n    if (visibility && !config.noShow) {\n      let toolTip = <el-col span={config.span} class={config.className}>\n        <jnpf-form-tip-item label-width={labelWidth} prop={scheme.__vModel__} key={config.renderKey} tip-label={config.label && config.showLabel ? config.tipLabel : \"\"}\n          label={config.showLabel ? label : ''}>\n          {Item}\n        </jnpf-form-tip-item>\n      </el-col>\n      if (config.jnpfKey === 'alert') {\n        toolTip = <el-col span={config.span} class={config.className}>\n          <jnpf-form-tip-item label-width={labelWidth} prop={scheme.__vModel__} key={config.renderKey} tip-label={config.label && config.showLabel ? config.tipLabel : \"\"}\n            label={config.showLabel ? config.label : ''}>\n            <div style=\"word-break: break-all\">\n              {Item}\n            </div>\n          </jnpf-form-tip-item>\n        </el-col>\n      }\n      if (config.jnpfKey === 'table') {\n        toolTip = <el-col span={config.span} class={config.className}>\n          <el-form-item label-width={labelWidth} prop={scheme.__vModel__} key={config.renderKey}\n            label={config.showLabel ? config.label : ''}>\n            {Item}\n          </el-form-item >\n        </el-col>\n      }\n      return (\n        toolTip\n      )\n    }\n  },\n  rowFormItem(h, scheme) {\n    const listeners = buildListeners.call(this, scheme)\n    const config = scheme.__config__\n    const visibility = !config.visibility || (Array.isArray(config.visibility) && config.visibility.includes('pc'))\n    if (!visibility || config.noShow) return\n    if (scheme.__config__.jnpfKey === 'tab') {\n      return (\n        <el-col span={scheme.__config__.span} class=\"mb-10\">\n          <el-tabs type={scheme.type} tab-position={scheme.tabPosition} vModel={scheme.__config__.active} {...{ on: listeners }}>\n            {\n              scheme.__config__.children.map((item, i) => {\n                let child = renderChildren.call(this, h, item)\n                return (\n                  <el-tab-pane name={item.name} label={item.title} >\n                    <el-row>\n                      {child}\n                    </el-row>\n                  </el-tab-pane>\n                )\n              })\n            }\n          </el-tabs>\n        </el-col>\n      )\n    }\n    if (scheme.__config__.jnpfKey === 'collapse') {\n      return (\n        <el-col span={scheme.__config__.span} class=\"mb-20\">\n          <el-collapse vModel={scheme.__config__.active} accordion={scheme.accordion} {...{ on: listeners }}>\n            {\n              scheme.__config__.children.map((item, i) => {\n                let child = renderChildren.call(this, h, item)\n                return (\n                  <el-collapse-item key={item.name} title={item.title} name={item.name} >\n                    <el-row>\n                      {child}\n                    </el-row>\n                  </el-collapse-item>\n                )\n              })\n            }\n          </el-collapse>\n        </el-col>\n      )\n    }\n    if (scheme.__config__.jnpfKey === 'tableGrid') {\n      return (\n        <el-col span={scheme.__config__.span} >\n          <el-row gutter={scheme.__config__.gutter}>\n            <table class=\"table-grid-box\"\n              style={{ '--borderType': scheme.__config__.borderType, '--borderColor': scheme.__config__.borderColor, '--borderWidth': scheme.__config__.borderWidth + 'px' }}>\n              <tbody>\n                {\n                  scheme.__config__.children.map((item) => {\n                    return (\n                      <tr>\n                        {\n                          item.__config__.children.map((it, colIndex) => {\n                            let child = renderChildren.call(this, h, it)\n                            return !it.__config__.merged ? (\n                              <td colspan={it.__config__.colspan || 1} rowspan={it.__config__.rowspan || 1} style={{ '--backgroundColor': it.__config__.backgroundColor }}>\n                                <el-col>\n                                  <el-row gutter={scheme.__config__.gutter} >\n                                    {child}\n                                  </el-row>\n                                </el-col>\n                              </td>\n                            ) : ''\n                          })\n                        }\n                      </tr>\n                    )\n                  })\n                }\n              </tbody>\n            </table>\n          </el-row>\n        </el-col>\n      )\n    }\n    let child = renderChildren.apply(this, arguments)\n    if (scheme.__config__.jnpfKey === 'table') {\n      if (!scheme.__config__.noShow) this.tableRefs[scheme.__vModel__] = scheme\n      const param = { ...scheme, config: scheme }\n      return layouts.colFormItem.call(this, h, param)\n    }\n    if (scheme.__config__.jnpfKey === 'card') {\n      let toolTip = scheme.header\n      if (scheme.__config__.tipLabel) {\n        toolTip = <span slot=\"label\">{scheme.header}\n          <el-tooltip placement=\"top\" content={scheme.__config__.tipLabel}>\n            <a class='el-icon-question tooltip-question' style='margin-left:4px'></a>\n          </el-tooltip>\n        </span >\n      }\n      let header = ''\n      if (scheme.header) {\n        header = <div slot=\"header\" ><span>{toolTip}</span></div>\n      }\n      return (\n        <el-col span={scheme.__config__.span} class=\"item-card\">\n          <el-card shadow={scheme.shadow} header={scheme.header} class=\"mb-20\">\n            {header}\n            {child}\n          </el-card>\n        </el-col>\n      )\n    }\n    if (scheme.__config__.jnpfKey === 'row') {\n      if (scheme.type === 'flex') {\n        child = <el-row type={scheme.type} justify={scheme.justify} align={scheme.align}>\n          {child}\n        </el-row>\n      }\n      return (\n        <el-col span={scheme.__config__.span}>\n          <el-row gutter={scheme.gutter}>\n            {child}\n          </el-row>\n        </el-col>\n      )\n    }\n  }\n}\n\nfunction renderFrom(h) {\n  const { formConfCopy } = this\n  let classStyle = [formClass]\n  if (formConfCopy.formStyle) classStyle.push(formConfCopy.formStyle)\n  if (formConfCopy.className) classStyle = [...classStyle, ...formConfCopy.className]\n  return (\n    <el-row gutter={formConfCopy.gutter} class={classStyle}>\n      <el-form\n        size={formConfCopy.size}\n        label-position={formConfCopy.labelPosition}\n        disabled={formConfCopy.disabled}\n        label-width={`${formConfCopy.labelWidth}px`}\n        ref={formConfCopy.formRef}\n        // model不能直接赋值 https://github.com/vuejs/jsx/issues/49#issuecomment-472013664\n        props={{ model: this[formConfCopy.formModel] }}\n        rules={this[formConfCopy.formRules]}\n        nativeOnSubmit={event => { event.preventDefault() }}\n      >\n        {renderFormItem.call(this, h, formConfCopy.fields)}\n        {\n          // {formConfCopy.formBtns && formBtns.call(this, h)}\n        }\n      </el-form>\n    </el-row>\n  )\n}\n\nfunction formBtns(h) {\n  return <el-col>\n    <el-form-item size=\"large\">\n      <el-button type=\"primary\" onClick={this.submitForm}>提交</el-button>\n      <el-button onClick={this.resetForm}>重置</el-button>\n    </el-form-item>\n  </el-col>\n}\n\nfunction renderFormItem(h, elementList) {\n  return elementList.map(scheme => {\n    const config = scheme.__config__\n    const layout = layouts[config.layout]\n\n    if (layout) {\n      return layout.call(this, h, scheme)\n    }\n    throw new Error(`没有与${config.layout}匹配的layout`)\n  })\n}\n\nfunction renderChildren(h, scheme) {\n  const config = scheme.__config__\n  if (!Array.isArray(config.children)) return null\n  return renderFormItem.call(this, h, config.children)\n}\n\nfunction setValue(event, config, scheme) {\n  this.$set(config, 'defaultValue', event)\n  this.$set(this[this.formConf.formModel], scheme.__vModel__, event)\n}\n\nfunction buildListeners(scheme) {\n\n  const config = scheme.__config__\n  const listeners = {}\n  if (scheme.on) {\n    // 响应 组件事件\n    Object.keys(scheme.on).forEach(key => {\n      const str = scheme.on[key];\n      const func = this.jnpf.getScriptFunc.call(this, str);\n      if (!func) return\n      listeners[key] = params => {\n        if (key === 'change') {\n          let data = ''\n          if (['select', 'radio', 'checkbox'].includes(config.jnpfKey)) {\n            const options = scheme.options\n            if (scheme.multiple || config.jnpfKey === 'checkbox') {\n              let _data = []\n              outer: for (let i = 0; i < params[0].length; i++) {\n                inner: for (let j = 0; j < options.length; j++) {\n                  if (params[0][i] === options[j][scheme.props.value]) {\n                    _data.push(options[j])\n                    break inner\n                  }\n                }\n              }\n              data = _data\n            } else {\n              let _data = {}\n              for (let i = 0; i < options.length; i++) {\n                if (params[0] === options[i][scheme.props.value]) {\n                  _data = options[i]\n                  break\n                }\n              }\n              data = _data\n            }\n          } else if (config.jnpfKey === 'inputNumber') {\n            data = params[0]\n          } else {\n            data = params.length > 1 ? params[1] : params[0]\n          }\n          if (config.jnpfKey === 'popupSelect' || config.jnpfKey === 'relationForm') this.setTransferFormData(data, config, config.jnpfKey)\n          func.call(this, { data, ...this.parameter })\n          this.handleRelation(scheme.__vModel__)\n        } else {\n          func.call(this, { data: params[0], ...this.parameter })\n        }\n      }\n    })\n  }\n  // 响应 render.js 中的 vModel $emit('input', val)\n  listeners.input = event => setValue.call(this, event, config, scheme)\n\n  return listeners\n}\n\nexport default {\n  components: {\n    render\n  },\n  props: {\n    formConf: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    const data = {\n      formConfCopy: deepClone(this.formConf),\n      [this.formConf.formModel]: {},\n      [this.formConf.formRules]: {},\n      options: {},\n      tableRefs: {},\n      relations: {},\n      isTableValid: false\n    }\n    this.initCss(data.formConfCopy)\n    this.initFormData(data.formConfCopy.fields, data[this.formConf.formModel])\n    this.initRelationForm(data.formConfCopy.fields)\n    this.buildRules(data.formConfCopy.fields, data[this.formConf.formRules])\n    this.buildOptions(data.formConfCopy.fields, data.options, data[this.formConf.formModel])\n    this.buildRelations(data.formConfCopy.fields, data.relations)\n    this.$nextTick(() => {\n      this.onLoad(data.formConfCopy)\n    })\n    return data\n  },\n  provide() {\n    return {\n      parameter: this.parameter\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n    formDataConf() {\n      const name = this.formConf.formModel\n      return this[name]\n    },\n    parameter() {\n      const oldFormData = this.formConfCopy.formData ? this.formConfCopy.formData : {}\n      this[this.formConf.formModel].id = oldFormData.id || ''\n      this[this.formConf.formModel].flowId = oldFormData.flowId || ''\n      return {\n        formData: this[this.formConf.formModel],\n        setFormData: this.setFormData,\n        setShowOrHide: this.setShowOrHide,\n        setRequired: this.setRequired,\n        setDisabled: this.setDisabled,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n    }\n  },\n  mounted() {\n    this.initRelationData()\n    this.$nextTick(() => {\n      this.$refs[this.formConf.formRef].clearValidate()\n    })\n  },\n  methods: {\n    setTransferFormData(data, config, jnpfKey) {\n      if (!config.transferList || !config.transferList.length) return\n      for (let index = 0; index < config.transferList.length; index++) {\n        const element = config.transferList[index];\n        this.setFormData(element.sourceValue, data[element.targetField])\n      }\n    },\n    initRelationData() {\n      const handleRelationFun = (list) => {\n        list.forEach(cur => {\n          this.handleDefaultRelation(cur.__vModel__)\n          if (cur.__config__.children) handleRelationFun(cur.__config__.children)\n        })\n      }\n      handleRelationFun(this.formConfCopy.fields)\n    },\n    initCss(formCopy) {\n      if (document.getElementById('styleId')) {\n        document.getElementById('styleId').remove()\n      }\n      let head = document.getElementsByTagName('head')[0]\n      let style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = 'styleId'\n      style.innerText = this.buildCSS(formCopy.classJson)\n      head.appendChild(style)\n    },\n    buildCSS(str) {\n      str = str.trim();\n      let newStr = '';\n      let cut = str.split('}');\n      cut.forEach(item => {\n        if (item) {\n          item = '.' + formClass + ' ' + item + '}';\n          newStr += item;\n        }\n      });\n      return newStr;\n    },\n    initFormData(componentList, formData) {\n      this.$store.commit('generator/UPDATE_RELATION_DATA', {})\n      componentList.forEach(cur => {\n        const config = cur.__config__\n        if (cur.__vModel__) formData[cur.__vModel__] = config.defaultValue\n        if (cur.__config__.jnpfKey == 'table') return\n        if (config.children) this.initFormData(config.children, formData)\n      })\n    },\n    buildRelations(componentList, relations) {\n      componentList.forEach(cur => {\n        const config = cur.__config__\n        if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n          if (config.dataType === 'dynamic') {\n            if (config.templateJson && config.templateJson.length) {\n              for (let i = 0; i < config.templateJson.length; i++) {\n                const e = config.templateJson[i];\n                if (e.relationField) {\n                  let item = {\n                    ...cur,\n                    realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n                    opType: 'setOptions'\n                  }\n                  if (relations.hasOwnProperty(e.relationField)) {\n                    let boo = relations[e.relationField].some(o => o.realVModel === cur.realVModel)\n                    if (!boo) {\n                      relations[e.relationField].push(item)\n                    }\n                  } else {\n                    relations[e.relationField] = [item]\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (config.jnpfKey === 'userSelect' && ['dep', 'pos', 'role', 'group'].includes(cur.selectType)) {\n          if (cur.relationField) {\n            let item = {\n              ...cur,\n              realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n              opType: 'setUserOptions'\n            }\n            if (relations.hasOwnProperty(cur.relationField)) {\n              let boo = relations[cur.relationField].some(o => o.realVModel === cur.realVModel)\n              if (!boo) {\n                relations[cur.relationField].push(item)\n              }\n            } else {\n              relations[cur.relationField] = [item]\n            }\n\n          }\n        }\n        if (config.jnpfKey === 'areaSelect' && ['address', 'cities'].includes(cur.selectType)) {\n          if (cur.relationField) {\n            let item = {\n              ...cur,\n              realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n              opType: 'setAddressOptions'\n            }\n            if (relations.hasOwnProperty(cur.relationField)) {\n              let boo = relations[cur.relationField].some(o => o.realVModel === cur.realVModel)\n              if (!boo) {\n                relations[cur.relationField].push(item)\n              }\n            } else {\n              relations[cur.relationField] = [item]\n            }\n\n          }\n        }\n        if (config.jnpfKey === 'popupSelect') {\n          if (cur.templateJson && cur.templateJson.length) {\n            for (let i = 0; i < cur.templateJson.length; i++) {\n              const e = cur.templateJson[i];\n              if (e.relationField) {\n                let item = {\n                  ...cur,\n                  realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n                  opType: 'setPopupOptions'\n                }\n                if (relations.hasOwnProperty(e.relationField)) {\n                  let boo = relations[e.relationField].some(o => o.realVModel === cur.realVModel)\n                  if (!boo) {\n                    relations[e.relationField].push(item)\n                  }\n                } else {\n                  relations[e.relationField] = [item]\n                }\n              }\n            }\n          }\n        }\n        if (config.jnpfKey === 'datePicker') {\n          if (config.startTimeRule) {\n            if (config.startTimeType == 1) {\n              cur.startTime = config.startTimeValue\n            } else if (config.startTimeType == 3) {\n              cur.startTime = new Date().getTime()\n            } else if (config.startTimeType == 4) {\n              let previousDate = '';\n              if (config.startTimeTarget == 1 || config.startTimeTarget == 2) {\n                previousDate = getDateDay(config.startTimeTarget, config.startTimeType, config.startTimeValue)\n                cur.startTime = new Date(previousDate).getTime()\n              } else if (config.startTimeTarget == 3) {\n                previousDate = getBeforeData(config.startTimeValue)\n                cur.startTime = new Date(previousDate).getTime()\n              } else {\n                cur.startTime = getBeforeTime(config.startTimeTarget, config.startTimeValue).getTime()\n              }\n            } else if (config.startTimeType == 5) {\n              let previousDate = '';\n              if (config.startTimeTarget == 1 || config.startTimeTarget == 2) {\n                previousDate = getDateDay(config.startTimeTarget, config.startTimeType, config.startTimeValue)\n                cur.startTime = new Date(previousDate).getTime()\n              } else if (config.startTimeTarget == 3) {\n                previousDate = getLaterData(config.startTimeValue)\n                cur.startTime = new Date(previousDate).getTime()\n              } else {\n                cur.startTime = getLaterTime(config.startTimeTarget, config.startTimeValue).getTime()\n              }\n            }\n          }\n          if (config.endTimeRule) {\n            if (config.endTimeType == 1) {\n              cur.endTime = config.endTimeValue\n            } else if (config.endTimeType == 3) {\n              cur.endTime = new Date().getTime()\n            } else if (config.endTimeType == 4) {\n              let previousDate = '';\n              if (config.endTimeTarget == 1 || config.endTimeTarget == 2) {\n                previousDate = getDateDay(config.endTimeTarget, config.endTimeType, config.endTimeValue)\n                cur.endTime = new Date(previousDate).getTime()\n              } else if (config.endTimeTarget == 3) {\n                previousDate = getBeforeData(config.endTimeValue)\n                cur.endTime = new Date(previousDate).getTime()\n              } else {\n                cur.endTime = getBeforeTime(config.endTimeTarget, config.endTimeValue).getTime()\n              }\n            } else if (config.endTimeType == 5) {\n              let previousDate = '';\n              if (config.endTimeTarget == 1 || config.endTimeTarget == 2) {\n                previousDate = getDateDay(config.endTimeTarget, config.endTimeType, config.endTimeValue)\n                cur.endTime = new Date(previousDate).getTime()\n              } else if (config.endTimeTarget == 3) {\n                previousDate = getLaterData(config.endTimeValue)\n                cur.endTime = new Date(previousDate).getTime()\n              } else {\n                cur.endTime = getLaterTime(config.endTimeTarget, config.endTimeValue).getTime()\n              }\n            }\n          }\n          if (cur.__config__.startRelationField) {\n            let item = {\n              ...cur,\n              realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n              opType: 'setDate'\n            }\n            if (relations.hasOwnProperty(cur.__config__.startRelationField)) {\n              let boo = relations[cur.__config__.startRelationField].some(o => o.realVModel === cur.realVModel)\n              if (!boo) {\n                relations[cur.__config__.startRelationField].push(item)\n              }\n            } else {\n              relations[cur.__config__.startRelationField] = [item]\n            }\n          }\n          if (cur.__config__.endRelationField) {\n            let item = {\n              ...cur,\n              realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n              opType: 'setDate'\n            }\n            if (relations.hasOwnProperty(cur.__config__.endRelationField)) {\n              let boo = relations[cur.__config__.endRelationField].some(o => o.realVModel === cur.realVModel)\n              if (!boo) {\n                relations[cur.__config__.endRelationField].push(item)\n              }\n            } else {\n              relations[cur.__config__.endRelationField] = [item]\n            }\n          }\n        }\n        if (config.jnpfKey === 'timePicker') {\n          let format = cur.format === 'HH:mm' ? 'HH:mm:00' : cur.format\n          if (config.startTimeRule) {\n            if (config.startTimeType == 1) {\n              cur.startTime = config.startTimeValue || '00:00:00'\n              if (cur.startTime.split(':').length == 3) {\n                cur.startTime = cur.startTime\n              } else {\n                cur.startTime = cur.startTime + ':00'\n              }\n            } else if (config.startTimeType == 3) {\n              cur.startTime = this.jnpf.toDate(new Date(), format)\n            } else if (config.startTimeType == 4) {\n              let previousDate = '';\n              previousDate = getBeforeTime(config.startTimeTarget, config.startTimeValue)\n              cur.startTime = this.jnpf.toDate(previousDate, format)\n            } else if (config.startTimeType == 5) {\n              let previousDate = '';\n              previousDate = getLaterTime(config.startTimeTarget, config.startTimeValue)\n              cur.startTime = this.jnpf.toDate(previousDate, format)\n            }\n          }\n          if (config.endTimeRule) {\n            if (config.endTimeType == 1) {\n              cur.endTime = config.endTimeValue || '23:59:59'\n              if (cur.endTime.split(':').length == 3) {\n                cur.endTime = cur.endTime\n              } else {\n                cur.endTime = cur.endTime + ':00'\n              }\n            } else if (config.endTimeType == 3) {\n              cur.endTime = this.jnpf.toDate(new Date(), format)\n            } else if (config.endTimeType == 4) {\n              let previousDate = '';\n              previousDate = getBeforeTime(config.endTimeTarget, config.endTimeValue)\n              cur.endTime = this.jnpf.toDate(previousDate, format)\n            } else if (config.endTimeType == 5) {\n              let previousDate = '';\n              previousDate = getLaterTime(config.endTimeTarget, config.endTimeValue)\n              cur.endTime = this.jnpf.toDate(previousDate, format)\n            }\n          }\n          if (cur.__config__.startRelationField) {\n            let item = {\n              ...cur,\n              realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n              opType: 'setTime'\n            }\n            if (relations.hasOwnProperty(cur.__config__.startRelationField)) {\n              let boo = relations[cur.__config__.startRelationField].some(o => o.realVModel === cur.realVModel)\n              if (!boo) {\n                relations[cur.__config__.startRelationField].push(item)\n              }\n            } else {\n              relations[cur.__config__.startRelationField] = [item]\n            }\n          }\n          if (cur.__config__.endRelationField) {\n            let item = {\n              ...cur,\n              realVModel: cur.__config__.isSubTable ? cur.__config__.parentVModel + '-' + cur.__vModel__ : cur.__vModel__,\n              opType: 'setTime'\n            }\n            if (relations.hasOwnProperty(cur.__config__.endRelationField)) {\n              let boo = relations[cur.__config__.endRelationField].some(o => o.realVModel === cur.realVModel)\n              if (!boo) {\n                relations[cur.__config__.endRelationField].push(item)\n              }\n            } else {\n              relations[cur.__config__.endRelationField] = [item]\n            }\n          }\n        }\n        if (config.children) this.buildRelations(config.children, relations)\n      })\n    },\n    handleRelation(field) {\n      if (!field) return\n      const currRelations = this.relations\n      for (let key in currRelations) {\n        if (key === field) {\n          for (let i = 0; i < currRelations[key].length; i++) {\n            const e = currRelations[key][i];\n            let vModel = e.realVModel || e.__vModel__\n            const config = e.__config__\n            const jnpfKey = config.jnpfKey\n            let defaultValue = ''\n            if (['checkbox', 'cascader'].includes(jnpfKey) || (['select', 'treeSelect', 'popupSelect', 'popupTableSelect', 'userSelect'].includes(jnpfKey) && e.multiple)) {\n              defaultValue = []\n            }\n            if (vModel.includes('-')) {\n              // 子表字段\n              const tableVModel = vModel.split('-')[0]\n              this.$refs[tableVModel] && this.$refs[tableVModel].$children[0] && this.$refs[tableVModel].$children[0].handleRelationForParent(e, defaultValue)\n            } else {\n              this.setFormData(e.__vModel__, defaultValue)\n              if (e.opType === 'setOptions') {\n                let query = {\n                  paramList: this.getParamList(config.templateJson, this[this.formConf.formModel])\n                }\n                getDataInterfaceRes(config.propsUrl, query).then(res => {\n                  let data = res.data\n                  this.setFieldOptions(e.__vModel__, data)\n                })\n              }\n              if (e.opType === 'setUserOptions') {\n                let value = this[this.formConf.formModel][e.relationField] || []\n                this.comSet('ableRelationIds', e.__vModel__, Array.isArray(value) ? value : [value])\n              }\n              if (e.opType === 'setAddressOptions') {\n                let value = this[this.formConf.formModel][e.relationField] || []\n                this.comSet('ableAddressIds', e.__vModel__, Array.isArray(value) ? value : [value])\n              }\n              if (e.opType === 'setPopupOptions') { }\n\n              if (e.opType === 'setDate') {\n                let startTime = ''\n                let endTime = ''\n                if (e.__config__.startTimeType == 2) {\n                  startTime = this[this.formConf.formModel][e.__config__.startRelationField] || 0\n                } else {\n                  startTime = e.startTime\n                }\n                if (e.__config__.endTimeType == 2) {\n                  endTime = this[this.formConf.formModel][e.__config__.endRelationField] || 0\n                } else {\n                  endTime = e.endTime\n                }\n                this.comSet('startTime', e.__vModel__, startTime)\n                this.comSet('endTime', e.__vModel__, endTime)\n              }\n              if (e.opType === 'setTime') {\n                let startTime = ''\n                let endTime = ''\n                if (e.__config__.startTimeType == 2) {\n                  startTime = this[this.formConf.formModel][e.__config__.startRelationField] || '00:00:00'\n                  if (startTime && (startTime.split(':').length == 3)) {\n                    startTime = startTime\n                  } else {\n                    startTime = startTime + ':00'\n                  }\n                } else {\n                  startTime = e.startTime\n                }\n                if (e.__config__.endTimeType == 2) {\n                  endTime = this[this.formConf.formModel][e.__config__.endRelationField] || '23:59:59'\n                  if (endTime && (endTime.split(':').length == 3)) {\n                    endTime = endTime\n                  } else {\n                    endTime = endTime + ':00'\n                  }\n                } else {\n                  endTime = e.endTime\n                }\n                this.comSet('startTime', e.__vModel__, startTime)\n                this.comSet('endTime', e.__vModel__, endTime)\n              }\n            }\n          }\n        }\n      }\n    },\n    handleDefaultRelation(field) {\n      if (!field) return\n      const currRelations = this.relations\n      for (let key in currRelations) {\n        if (key === field) {\n          for (let i = 0; i < currRelations[key].length; i++) {\n            const e = currRelations[key][i];\n            let vModel = e.realVModel || e.__vModel__\n            const config = e.__config__\n            if (vModel.includes('-')) {\n              const tableVModel = vModel.split('-')[0]\n              this.$refs[tableVModel] && this.$refs[tableVModel].$children[0] && this.$refs[tableVModel].$children[0].handleRelationForParent(e, '', true)\n            } else {\n              if (e.opType === 'setUserOptions') {\n                let value = this[this.formConf.formModel][e.relationField] || []\n                this.comSet('ableRelationIds', e.__vModel__, Array.isArray(value) ? value : [value])\n              }\n              if (e.opType === 'setAddressOptions') {\n                let value = this[this.formConf.formModel][e.relationField] || []\n                this.comSet('ableAddressIds', e.__vModel__, Array.isArray(value) ? value : [value])\n              }\n              if (e.opType === 'setDate') {\n                let startTime = ''\n                let endTime = ''\n                if (e.__config__.startTimeType == 2) {\n                  startTime = this[this.formConf.formModel][e.__config__.startRelationField] || 0\n                } else {\n                  startTime = e.startTime\n                }\n                if (e.__config__.endTimeType == 2) {\n                  endTime = this[this.formConf.formModel][e.__config__.endRelationField] || 0\n                } else {\n                  endTime = e.endTime\n                }\n                this.comSet('startTime', e.__vModel__, startTime)\n                this.comSet('endTime', e.__vModel__, endTime)\n              }\n              if (e.opType === 'setTime') {\n                let startTime = ''\n                let endTime = ''\n                if (e.__config__.startTimeType == 2) {\n                  startTime = this[this.formConf.formModel][e.__config__.startRelationField] || '00:00:00'\n                } else {\n                  startTime = e.startTime\n                }\n                if (e.__config__.endTimeType == 2) {\n                  endTime = this[this.formConf.formModel][e.__config__.endRelationField] || '23:59:59'\n                  if (endTime && (endTime.split(':').length == 3)) {\n                    endTime = endTime\n                  } else {\n                    endTime = endTime + ':00'\n                  }\n                } else {\n                  endTime = e.endTime\n                }\n                if (startTime) {\n                  if (startTime.split(':').length == 3) {\n                    startTime = startTime\n                  } else {\n                    startTime = startTime + ':00'\n                  }\n                }\n                if (endTime) {\n                  if (endTime.split(':').length == 3) {\n                    endTime = endTime\n                  } else {\n                    endTime = endTime + ':00'\n                  }\n                }\n                this.comSet('startTime', e.__vModel__, startTime)\n                this.comSet('endTime', e.__vModel__, endTime)\n              }\n            }\n          }\n        }\n      }\n    },\n    getParamList(templateJson, formData) {\n      for (let i = 0; i < templateJson.length; i++) {\n        if (templateJson[i].relationField) {\n          templateJson[i].defaultValue = formData[templateJson[i].relationField] || ''\n        }\n      }\n      return templateJson\n    },\n    initRelationForm(componentList) {\n      componentList.forEach(cur => {\n        const config = cur.__config__\n        if (config.jnpfKey == 'relationFormAttr' || config.jnpfKey == 'popupAttr') {\n          const relationKey = cur.relationField.split(\"_jnpfTable_\")[0]\n          componentList.forEach(item => {\n            const noVisibility = Array.isArray(item.__config__.visibility) && !item.__config__.visibility.includes('pc')\n            if ((relationKey == item.__vModel__) && (noVisibility || !!item.__config__.noShow) && !cur.__vModel__) {\n              cur.__config__.noShow = true\n            }\n          })\n        }\n        if (cur.__config__.children && cur.__config__.children.length) this.initRelationForm(cur.__config__.children)\n      })\n    },\n    buildOptions(componentList, data, formData) {\n      componentList.forEach(cur => {\n        const config = cur.__config__\n        if (dyOptionsList.indexOf(config.jnpfKey) > -1) {\n          if (config.dataType === 'dictionary' && config.dictionaryType) {\n            cur.options = []\n            this.$store.dispatch('base/getDicDataSelector', config.dictionaryType).then(res => {\n              cur.options = res\n              data[cur.__vModel__ + 'Options'] = cur.options\n            })\n          } else if (config.dataType === 'dynamic' && config.propsUrl) {\n            cur.options = []\n            let query = {\n              paramList: config.templateJson ? this.getParamList(config.templateJson, formData) : [],\n            }\n            getDataInterfaceRes(config.propsUrl, query).then(res => {\n              cur.options = Array.isArray(res.data) ? res.data : []\n              data[cur.__vModel__ + 'Options'] = cur.options\n            })\n          } else {\n            data[cur.__vModel__ + 'Options'] = cur.options\n          }\n        }\n        if (config.children && config.jnpfKey !== 'table') this.buildOptions(config.children, data, formData)\n      })\n    },\n    buildRules(componentList, rules) {\n      componentList.forEach(cur => {\n        const config = JSON.parse(JSON.stringify(cur.__config__))\n        if (!Array.isArray(config.regList)) config.regList = []\n        if (config.required) {\n          const required = { required: config.required, message: cur.placeholder }\n          if (Array.isArray(config.defaultValue)) {\n            required.type = 'array'\n            required.message = `请至少选择一个${config.label}`\n          }\n          required.message === undefined && (required.message = `${config.label}不能为空`)\n          config.regList.push(required)\n        }\n        rules[cur.__vModel__] = config.regList.map(item => {\n          item.pattern && this.isRegExp(item.pattern) && (item.pattern = eval(item.pattern))\n          item.trigger = config.trigger || 'blur'\n          return item\n        })\n        if (config.children && config.jnpfKey !== 'table') this.buildRules(config.children, rules)\n      })\n    },\n    isRegExp(val) {\n      try {\n        return Object.prototype.toString.call(eval(val)) === '[object RegExp]'\n      } catch {\n        return false\n      }\n    },\n    onLoad(formConfCopy) {\n      if (!formConfCopy || !formConfCopy.funcs || !formConfCopy.funcs.onLoad) return\n      const onLoadFunc = this.jnpf.getScriptFunc.call(this, formConfCopy.funcs.onLoad)\n      if (!onLoadFunc) return\n      onLoadFunc(this.parameter)\n    },\n    resetForm() {\n      this.$store.commit('generator/UPDATE_RELATION_DATA', {})\n      this.formConfCopy = deepClone(this.formConf)\n      this.$refs[this.formConf.formRef].resetFields()\n      Object.keys(this.tableRefs).forEach(vModel => {\n        this.$refs[vModel] && this.$refs[vModel].$children && this.$refs[vModel].$children[0].resetTable()\n      })\n    },\n    checkTableData() {\n      let valid = true\n      Object.keys(this.tableRefs).forEach(vModel => {\n        if (this.$refs[vModel] && this.$refs[vModel].$children) {\n          const res = this.$refs[vModel].$children[0].submit()  // 返回false或表单数据\n          res ? (this[this.formConf.formModel][vModel] = res) : (valid = false)\n        }\n      })\n      return valid\n    },\n    getFieldOptions(prop) {\n      if (!prop) return []\n      const isChildTable = prop.indexOf('.') > -1\n      if (isChildTable) {\n        const list = prop.split('.')\n        if (this.$refs[list[0]] && this.$refs[list[0]].$children[0]) {\n          let res = this.$refs[list[0]].$children[0].getTableFieldOptions(list[1])\n          return res\n        } else {\n          return []\n        }\n      } else {\n        return this.options[prop + 'Options'] || []\n      }\n    },\n    setFormData(prop, value) {\n      if (!prop || this[this.formConf.formModel][prop] === value) return;\n      const isChildTable = prop.indexOf('.') > -1\n      if (isChildTable) {\n        const list = prop.split('.')\n        if (this.$refs[list[0]] && this.$refs[list[0]].$children[0]) {\n          this.$refs[list[0]].$children[0].setTableFormData(list[1], value)\n        }\n      } else {\n        this.comSet('defaultValue', prop, value)\n        this[this.formConf.formModel][prop] = value\n      }\n      this.handleRelation(prop)\n    },\n    setShowOrHide(prop, value) {\n      const newVal = !!value\n      const isChildTable = prop.indexOf('.') > -1\n      if (!isChildTable) {\n        this.comSet('noShow', prop, !newVal)\n      } else {\n        const list = prop.split('.')\n        if (this.$refs[list[0]] && this.$refs[list[0]].$children[0]) {\n          this.$refs[list[0]].$children[0].setTableShowOrHide(list[1], !newVal)\n        }\n      }\n    },\n    setRequired(prop, value) {\n      const newVal = !!value\n      const isChildTable = prop.indexOf('.') > -1\n      if (!isChildTable) {\n        this.comSet('required', prop, newVal)\n        this.buildRules(this.formConfCopy.fields, this[this.formConf.formRules])\n      }\n    },\n    setDisabled(prop, value) {\n      const newVal = !!value\n      const isChildTable = prop.indexOf('.') > -1\n      if (!isChildTable) {\n        this.comSet('disabled', prop, newVal)\n      }\n    },\n    setFieldOptions(prop, value) {\n      const newVal = Array.isArray(value) ? value : []\n      const isChildTable = prop.indexOf('.') > -1\n      if (!isChildTable) {\n        this.comSet('options', prop, newVal)\n      }\n    },\n    comSet(field, prop, value) {\n      if (!prop) return\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__ && item.__vModel__ === prop) {\n            switch (field) {\n              case 'disabled':\n                this.$set(item, field, value)\n                break;\n              case 'ableRelationIds':\n                this.$set(item, field, value)\n                break;\n              case 'ableAddressIds':\n                this.$set(item, field, value)\n                break;\n              case 'startTime':\n                this.$set(item, field, value)\n                break;\n              case 'endTime':\n                this.$set(item, field, value)\n                break;\n              case 'options':\n                if (dyOptionsList.indexOf(item.__config__.jnpfKey) > -1) {\n                  item.options = value\n                }\n                break;\n              default:\n                this.$set(item.__config__, field, value)\n                break;\n            }\n            item.__config__.renderKey = +new Date() + item.__vModel__\n            break;\n          }\n          if (item.__config__ && item.__config__.jnpfKey !== 'table' && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children)\n          }\n        }\n      }\n      loop(this.formConfCopy.fields)\n    },\n    beforeSubmit() {\n      if (!this.formConfCopy || !this.formConfCopy.funcs || !this.formConfCopy.funcs.beforeSubmit) return Promise.resolve()\n      const func = this.jnpf.getScriptFunc.call(this, this.formConfCopy.funcs.beforeSubmit)\n      if (!func) return Promise.resolve()\n      return func(this.parameter)\n    },\n    afterSubmit() {\n      if (!this.formConfCopy || !this.formConfCopy.funcs || !this.formConfCopy.funcs.afterSubmit) return\n      const func = this.jnpf.getScriptFunc.call(this, this.formConfCopy.funcs.afterSubmit)\n      if (!func) return\n      func(this.parameter)\n    },\n    submitForm(type) {\n      this.isTableValid = this.checkTableData()\n      try {\n        this.beforeSubmit().then(() => {\n          this.submit(type)\n        })\n      } catch (e) {\n        this.submit(type)\n      }\n    },\n    submit(type) {\n      this.$refs[this.formConf.formRef].validate(valid => {\n        if (!valid) return false\n        if (!this.isTableValid) return false\n        // 触发submit事件\n        this.$emit('submit', this[this.formConf.formModel], this.afterSubmit, type)\n        return true\n      })\n    },\n    onCascaderChange(data, on) {\n      if (!on || !on.change) return\n      const func = this.jnpf.getScriptFunc.call(this, on.change)\n      if (!func) return\n      func.call(this, { data, ...this.parameter })\n    },\n    onCascaderBlur(data, on) {\n      if (!on || !on.blur) return\n      const func = this.jnpf.getScriptFunc.call(this, on.blur)\n      if (!func) return\n      func.call(this, { data, ...this.parameter })\n    }\n  },\n  render(h) {\n    return renderFrom.call(this, h)\n  }\n}\n",null]}