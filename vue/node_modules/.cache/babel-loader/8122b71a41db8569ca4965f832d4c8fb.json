{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/store/modules/generator.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/store/modules/generator.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _organize = require(\"@/api/permission/organize\");\nvar _department = require(\"@/api/permission/department\");\nvar _dictionary = require(\"@/api/systemData/dictionary\");\nvar _group = require(\"@/api/permission/group\");\nvar _jnpf = _interopRequireDefault(require(\"@/utils/jnpf\"));\nvar state = {\n  companyTree: [],\n  depTree: [],\n  departmentList: [],\n  groupTree: [],\n  groupList: [],\n  dicTree: [],\n  formItemList: [],\n  subTable: [],\n  allTable: [],\n  dataBase: '',\n  hasTable: false,\n  relationData: {},\n  dynamicModelExtra: {},\n  ruleData: {},\n  complexHeaderData: []\n};\nvar mutations = {\n  SET_FILTER_DATA: function SET_FILTER_DATA(state, ruleData) {\n    state.ruleData = ruleData;\n  },\n  SET_COMPANY_TREE: function SET_COMPANY_TREE(state, companyTree) {\n    state.companyTree = companyTree;\n  },\n  SET_DEP_TREE: function SET_DEP_TREE(state, depTree) {\n    state.depTree = depTree;\n  },\n  SET_DEP_LIST: function SET_DEP_LIST(state, data) {\n    state.departmentList = data;\n  },\n  SET_GROUP_TREE: function SET_GROUP_TREE(state, groupTree) {\n    state.groupTree = groupTree;\n  },\n  SET_GROUP_LIST: function SET_GROUP_LIST(state, data) {\n    state.groupList = data;\n  },\n  SET_DIC_TREE: function SET_DIC_TREE(state, dicTree) {\n    state.dicTree = dicTree;\n  },\n  UPDATE_FORMITEM_LIST: function UPDATE_FORMITEM_LIST(state, list) {\n    state.formItemList = list;\n  },\n  UPDATE_SUB_TABLE: function UPDATE_SUB_TABLE(state, subTable) {\n    state.subTable = subTable;\n  },\n  SET_ALL_TABLE: function SET_ALL_TABLE(state, allTable) {\n    state.allTable = allTable;\n  },\n  SET_DATABASE: function SET_DATABASE(state, dataBase) {\n    state.dataBase = dataBase;\n  },\n  SET_TABLE: function SET_TABLE(state, val) {\n    state.hasTable = val;\n  },\n  UPDATE_RELATION_DATA: function UPDATE_RELATION_DATA(state, val) {\n    state.relationData = val;\n  },\n  SET_DYNAMIC_MODEL_EXTRA: function SET_DYNAMIC_MODEL_EXTRA(state, val) {\n    state.dynamicModelExtra = val;\n  },\n  SET_HEADER_DATA: function SET_HEADER_DATA(state, complexHeaderData) {\n    state.complexHeaderData = complexHeaderData;\n  }\n};\nvar actions = {\n  getCompanyTree: function getCompanyTree(_ref) {\n    var state = _ref.state,\n      commit = _ref.commit;\n    return new Promise(function (resolve, reject) {\n      if (!state.companyTree.length) {\n        (0, _organize.getOrganizeTree)().then(function (res) {\n          commit(\"SET_COMPANY_TREE\", res.data.list);\n          resolve(res.data.list);\n        }).catch(function (error) {\n          reject(error);\n        });\n      } else {\n        resolve(state.companyTree);\n      }\n    });\n  },\n  getDepTree: function getDepTree(_ref2) {\n    var state = _ref2.state,\n      commit = _ref2.commit;\n    return new Promise(function (resolve, reject) {\n      if (!state.depTree.length) {\n        (0, _department.getDepartmentSelector)().then(function (res) {\n          commit(\"SET_DEP_TREE\", res.data.list);\n          var data = _jnpf.default.treeToArray(res.data.list);\n          commit(\"SET_DEP_LIST\", data);\n          resolve(res.data.list);\n        }).catch(function (error) {\n          reject(error);\n        });\n      } else {\n        resolve(state.depTree);\n      }\n    });\n  },\n  getGroupTree: function getGroupTree(_ref3) {\n    var state = _ref3.state,\n      commit = _ref3.commit;\n    return new Promise(function (resolve, reject) {\n      if (!state.groupTree.length) {\n        (0, _group.getGroupSelector)().then(function (res) {\n          commit(\"SET_GROUP_TREE\", res.data);\n          var data = _jnpf.default.treeToArray(res.data, 'group');\n          commit(\"SET_GROUP_LIST\", data);\n          resolve(res.data);\n        }).catch(function (error) {\n          reject(error);\n        });\n      } else {\n        resolve(state.groupTree);\n      }\n    });\n  },\n  getDicTree: function getDicTree(_ref4) {\n    var state = _ref4.state,\n      commit = _ref4.commit;\n    return new Promise(function (resolve, reject) {\n      if (!state.dicTree.length) {\n        (0, _dictionary.getDictionaryType)().then(function (res) {\n          commit(\"SET_DIC_TREE\", res.data.list);\n          resolve(res.data.list);\n        }).catch(function (error) {\n          reject(error);\n        });\n      } else {\n        resolve(state.dicTree);\n      }\n    });\n  }\n};\nvar _default = exports.default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}