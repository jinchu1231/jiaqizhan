{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/task/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/task/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { TimeTaskInfo, TimeTaskUpdate, TimeTaskCreate, getTaskMethods } from '@/api/system/timeTask'\nimport vcrontab from \"vcrontab\"\nimport InterfaceDialog from '@/components/Process/PropPanel/InterfaceDialog'\n\nexport default {\n  components: { vcrontab, InterfaceDialog },\n  data() {\n    const checkStartTime = (rule, value, callback) => {\n      if (!this.dataForm.executeContent.endTime) {\n        callback()\n      } else {\n        if (this.dataForm.executeContent.endTime <= value) {\n          callback(new Error('任务结束时间不能早于任务开始时间'));\n        } else {\n          this.$refs.dataForm.validateField('executeContent.endTime');\n          callback()\n        }\n      }\n    }\n    const checkEndTime = (rule, value, callback) => {\n      if (!this.dataForm.executeContent.startTime || !value) {\n        callback()\n      } else {\n        if (this.dataForm.executeContent.startTime >= value) {\n          callback(new Error('任务结束时间不能早于任务开始时间'));\n        } else {\n          callback()\n        }\n      }\n    }\n    return {\n      showCron: false,\n      showCrontab: true,\n      dataForm: {\n        id: '',\n        fullName: '',\n        enCode: '',\n        executeType: '1',\n        enabledMark: 1,\n        description: '',\n        executeContent: {\n          cron: '',\n          interfaceId: '',\n          interfaceName: '',\n          parameter: [],\n          localHostTaskId: '',\n          startTime: null,\n          endTime: null\n        }\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: '任务名称不能为空', trigger: 'blur' },\n        ],\n        enCode: [\n          { required: true, message: '任务编码不能为空', trigger: 'blur' },\n          { validator: this.formValidate('enCode', '任务编码只能输入英文、数字和小数点且小数点不能放在首尾'), trigger: 'blur' },\n        ],\n        'executeContent.cron': [\n          { required: true, message: 'Cron表达式不能为空', trigger: 'click' }\n        ],\n        'executeContent.interfaceId': [\n          { required: true, message: '接口选择不能为空', trigger: 'click' }\n        ],\n        'executeContent.localHostTaskId': [\n          { required: true, message: '方法选择不能为空', trigger: 'change' }\n        ],\n        'executeContent.startTime': [\n          { required: true, message: '任务开始时间不能为空', trigger: 'change' },\n          { validator: checkStartTime, trigger: 'change' }\n        ],\n        'executeContent.endTime': [\n          { validator: checkEndTime, trigger: 'change' }\n        ]\n      },\n      formVisible: false,\n      btnLoading: false,\n      taskOptions: []\n    }\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    init(id) {\n      this.dataForm = {\n        id: '',\n        fullName: '',\n        enCode: '',\n        executeType: '1',\n        enabledMark: 1,\n        description: '',\n        executeContent: {\n          cron: '',\n          interfaceId: '',\n          interfaceName: '',\n          parameter: [],\n          localHostTaskId: '',\n          startTime: null,\n          endTime: null\n        }\n      }\n      this.dataForm.id = id || ''\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        getTaskMethods().then(res => {\n          this.taskOptions = res.data || []\n          if (this.dataForm.id) {\n            TimeTaskInfo(this.dataForm.id).then(res => {\n              this.dataForm = res.data\n              this.dataForm.executeContent = JSON.parse(res.data.executeContent)\n            })\n          }\n        })\n      })\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          if (this.dataForm.executeType === '1' || this.dataForm.executeType === '2') {\n            let boo = false\n            for (let i = 0; i < this.dataForm.executeContent.parameter.length; i++) {\n              const item = this.dataForm.executeContent.parameter[i]\n              if (item.required && !item.value) {\n                this.$message.error(`${item.field}的参数值为必填`)\n                boo = true\n                break\n              }\n            }\n            if (boo) return\n          }\n          this.btnLoading = true\n          let executeContent = JSON.stringify(this.dataForm.executeContent)\n          let query = { ...this.dataForm, executeContent }\n          const formMethod = this.dataForm.id ? TimeTaskUpdate : TimeTaskCreate\n          formMethod(query).then((res) => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('close', true)\n              }\n            })\n          }).catch(() => { this.btnLoading = false })\n        }\n      })\n    },\n    onFuncChange(id, row) {\n      if (!id) {\n        this.dataForm.executeContent.interfaceId = ''\n        this.dataForm.executeContent.interfaceName = ''\n        this.dataForm.executeContent.parameter = []\n        return\n      }\n      if (this.dataForm.executeContent.interfaceId === id) return\n      this.dataForm.executeContent.interfaceId = id\n      this.dataForm.executeContent.interfaceName = row.fullName\n      this.dataForm.executeContent.parameter = row.templateJson.map(o => ({\n        ...o,\n        value: ''\n      }))\n    },\n    onExecuteTypeChange() {\n      this.dataForm.executeContent.interfaceId = ''\n      this.dataForm.executeContent.interfaceName = ''\n      this.dataForm.executeContent.parameter = []\n      this.dataForm.executeContent.localHostTaskId = ''\n    },\n    onLocalHostTaskIdChange(val) {\n      if (!val) return\n      let list = this.taskOptions.filter(o => o.id === val) || []\n      if (!list.length) return\n      let item = list[0]\n      if (!item.cron) return\n      this.dataForm.executeContent.cron = item.cron\n    },\n    getCrontabValue() {\n      this.$refs.vcrontab && this.$refs.vcrontab.submitFill()\n    },\n    resetCrontab() {\n      this.$refs.vcrontab && this.$refs.vcrontab.clearCron()\n    },\n    crontabFill(value) {\n      this.dataForm.executeContent.cron = value\n    },\n    showDialog() {\n      this.showCron = true\n      this.showCrontab = true\n    }\n  }\n}\n",null]}