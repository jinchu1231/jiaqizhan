{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HNotice/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HNotice/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CardHeader from \"../CardHeader\"\nimport { getNotice } from '@/api/home'\nimport Form from '@/views/basic/messageRecord/Form'\nexport default {\n  components: { CardHeader, Form },\n  props: {\n    showType: { type: String, default: 'pc' },\n    activeData: { type: Object, default: () => { } },\n  },\n  data() {\n    return {\n      coverImage: require(\"@/assets/images/gg.png\"),\n      coverImage2: require('@/assets/images/tz.png'),\n      key: +new Date(),\n      defaultValue: [],\n      list: [],\n      typeList: [],\n      formVisible: false,\n    }\n  },\n  watch: {\n    'activeData.option.noticeCount'() {\n      this.initData()\n    }\n  },\n  created() {\n    this.initData()\n  },\n  methods: {\n    tableRowClassName({ row, rowIndex }) {\n      let styleJson = {}\n      styleJson['font-size'] = this.activeData.option.tableFontSize + 'px'\n      styleJson['color'] = this.activeData.option.tableFontColor\n      if (rowIndex % 2 == 0) {\n        styleJson.background = this.activeData.option.noticeOddLineColor ? this.activeData.option.noticeOddLineColor : this.activeData.option.noticeBgColor\n        return styleJson\n      } else {\n        styleJson.background = this.activeData.option.noticeEventLineColor ? this.activeData.option.noticeEventLineColor : this.activeData.option.noticeBgColor\n        return styleJson\n      }\n    },\n    readInfo(row) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(row.id)\n      })\n    },\n    initData() {\n      let sysType = this.showType === 'app' ? 'appColumnList' : this.showType === 'pc' && this.activeData.option.styleType != 1 ? 'rowData' : 'columnData'\n      this.activeData.option[sysType].forEach((o, i) => {\n        if (o.classify && o.classify.length) {\n          this.typeList = o.classify\n        }\n      });\n      let data = {\n        typeList: this.typeList\n      }\n      getNotice(data).then(res => {\n        this.defaultValue = JSON.parse(JSON.stringify(res.data.list)) || []\n        this.defaultValue = this.defaultValue.slice(0, this.activeData.option.noticeCount)\n        if (this.activeData.option.styleType == 1) {\n          this.defaultValue.map(o => {\n            o.creatorTime = this.jnpf.toDate(o.creatorTime)\n            o.releaseTime = this.jnpf.toDate(o.releaseTime)\n          })\n          this.list = this.activeData.option.columnData.filter(o => o.show || !o.show && o.id == 1)\n        } else {\n          this.list = this.activeData.option.rowData\n        }\n      })\n    }\n  }\n}\n",null]}