{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/components/MaskConfigDialog/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/components/MaskConfigDialog/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/asyncToGenerator.js\"));\nvar _useTextMask2 = require(\"@/components/Generator/utils/useTextMask\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar fillerOptions = [{\n  id: '*',\n  fullName: '*'\n}, {\n  id: '●',\n  fullName: '●'\n}, {\n  id: '-',\n  fullName: '-'\n}, {\n  id: '.',\n  fullName: '.'\n}, {\n  id: '#',\n  fullName: '#'\n}];\nvar maskTypeOptions = [{\n  id: 1,\n  fullName: '全掩盖'\n}, {\n  id: 2,\n  fullName: '姓名-显示前1个字，后1个字'\n}, {\n  id: 3,\n  fullName: '手机号-显示前3位，后4位'\n}, {\n  id: 4,\n  fullName: '邮箱-显示前3个字，@和之后的字'\n}, {\n  id: 5,\n  fullName: '身份证-显示前6位，后3位，虚拟为4位'\n}, {\n  id: 6,\n  fullName: 'IP地址-显示第1段IP'\n}, {\n  id: 7,\n  fullName: '车牌号-显示前1个字，后2位'\n}, {\n  id: 8,\n  fullName: '银行卡号-显示前6位，后4位'\n}, {\n  id: 0,\n  fullName: '自定义规则'\n}];\nvar prefixTypeOptions = [{\n  id: 1,\n  fullName: '不显示'\n}, {\n  id: 2,\n  fullName: '指定字数'\n}, {\n  id: 3,\n  fullName: '指定字符之前的字'\n}, {\n  id: 4,\n  fullName: '指定字符和之前的字'\n}];\nvar suffixTypeOptions = [{\n  id: 1,\n  fullName: '不显示'\n}, {\n  id: 2,\n  fullName: '指定字数'\n}, {\n  id: 3,\n  fullName: '指定字符之后的字'\n}, {\n  id: 4,\n  fullName: '指定字符和之后的字'\n}];\nvar _default = exports.default = {\n  props: ['type'],\n  components: {},\n  data: function data() {\n    return {\n      visible: false,\n      fillerOptions: fillerOptions,\n      maskTypeOptions: maskTypeOptions,\n      prefixTypeOptions: prefixTypeOptions,\n      suffixTypeOptions: suffixTypeOptions,\n      formData: _useTextMask2.defaultMaskOptions,\n      rules: {\n        fullName: [{\n          required: true,\n          message: '请输入选项名'\n        }],\n        id: [{\n          required: true,\n          message: '请输入选项值'\n        }]\n      },\n      testText: '',\n      originTestText: '',\n      isMask: false,\n      props: {\n        label: \"fullName\",\n        value: \"id\"\n      }\n    };\n  },\n  methods: {\n    openModal: function openModal(data) {\n      var _this = this;\n      this.visible = true;\n      this.isMask = false;\n      this.formData = JSON.parse(JSON.stringify(data));\n      this.testText = '';\n      this.$nextTick(function () {\n        _this.$refs.formRef.clearValidate();\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.visible = false;\n    },\n    handleSubmit: function () {\n      var _handleSubmit = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                this.visible = false;\n                this.$emit('confirm', this.formData);\n              } catch (_) {}\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function handleSubmit() {\n        return _handleSubmit.apply(this, arguments);\n      }\n      return handleSubmit;\n    }(),\n    handleMask: function handleMask() {\n      if (!this.testText) return;\n      this.originTestText = this.testText;\n      this.isMask = true;\n      var _useTextMask = (0, _useTextMask2.useTextMask)(this.formData),\n        getMaskedText = _useTextMask.getMaskedText;\n      this.testText = getMaskedText(this.testText);\n    },\n    handleRevert: function handleRevert() {\n      this.testText = this.originTestText;\n      this.originTestText = '';\n      this.isMask = false;\n    },\n    onNumberChange: function onNumberChange(val, key) {\n      var _this2 = this;\n      if (val) return;\n      if (key === 'unrealMaskLength') return this.$nextTick(function () {\n        _this2.formData[key] = 1;\n      });\n      this.$nextTick(function () {\n        _this2.formData[key] = 0;\n      });\n    },\n    onMaskTypeChange: function onMaskTypeChange(val) {\n      this.testText = '';\n      this.originTestText = '';\n      this.isMask = false;\n      this.formData = _objectSpread(_objectSpread({}, _useTextMask2.defaultMaskOptions), {}, {\n        maskType: val\n      });\n    }\n  }\n};",null]}