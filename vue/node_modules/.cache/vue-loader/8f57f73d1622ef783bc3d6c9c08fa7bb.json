{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/JNPFEditor/monaco.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/JNPFEditor/monaco.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\nimport * as monaco from \"monaco-editor\"\nconst defaultOptions = {\n  selectOnLineNumbers: true,\n  roundedSelection: false,\n  wordWrap: 'on', // 自动换行 'on','off'\n  language: 'java', // 常用的有css/html/java/javascript/json/csharp(.net)'\n  theme: 'vs', // vs, hc-black, or vs-dark\n  formatOnPaste: true,\n  formatOnType: true,\n  glyphMargin: true, //字形边缘\n  fontSize: 14, // 字体大小\n  readOnly: false // 只读\n}\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    options: {\n      type: Object,\n      default: () => { }\n    },\n    value: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      content: this.value,\n      monacoEditor: null\n    }\n  },\n  watch: {\n    value(val) {\n      this.content = val\n    },\n    options: {\n      handler(val) {\n        this.monacoEditor.updateOptions({ ...val })\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.initEditor()\n  },\n  methods: {\n    initEditor() {\n      // 初始化编辑器实例\n      this.monacoEditor = monaco.editor.create(this.$refs['codeEditor'], {\n        value: this.content,\n        autoIndex: true,\n        ...defaultOptions,\n        ...this.options\n      })\n      // 监听编辑器content变化\n      this.monacoEditor.onDidChangeModelContent(() => {\n        this.$emit('input', this.monacoEditor.getValue())\n      })\n    },\n    changeEditor(data) {\n      this.monacoEditor.setValue(data.value)\n      this.monacoEditor.updateOptions({ ...data.options })\n    },\n    insert(text) {\n      text = text || ''\n      var position = this.monacoEditor.getPosition();\n      this.monacoEditor.executeEdits('', [\n        {\n          range: {\n            startLineNumber: position.lineNumber,\n            startColumn: position.column,\n            endLineNumber: position.lineNumber,\n            endColumn: position.column\n          },\n          text: text\n        }\n      ]);\n    },\n  }\n}\n\n",null]}