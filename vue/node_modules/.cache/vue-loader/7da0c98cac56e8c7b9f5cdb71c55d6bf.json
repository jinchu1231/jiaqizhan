{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/Home.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/Home.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport draggable from 'vuedraggable'\nimport { debounce } from 'throttle-debounce'\nimport render from '@/components/Generator/render/render'\nimport JsonDrawer from './JsonDrawer'\nimport RightPanel from './RightPanel'\nimport Preview from '../preview'\nimport {\n  inputComponents, selectComponents, systemComponents, layoutComponents, formConf\n} from '@/components/Generator/generator/config'\nimport { noVModelList, noTableAllowList, calculateItem, onlinePeculiarList } from '@/components/Generator/generator/comConfig'\nimport {\n  exportDefault, beautifierConf, isNumberStr, titleCase, deepClone\n} from '@/components/Generator/utils'\nimport drawingDefalut from '@/components/Generator/generator/drawingDefalut'\nimport DraggableItem from './DraggableItem'\nimport DraggableItemApp from './DraggableItemApp'\nimport {\n  getDrawingList, saveDrawingList, getIdGlobal, saveIdGlobal, getFormConf\n} from '@/components/Generator/utils/db'\nimport { validURL } from '@/utils/validate'\n\nconst emptyActiveData = { style: {}, autosize: {} }\nlet oldActiveId\nlet tempActiveData\nconst idGlobal = getIdGlobal()\n\nexport default {\n  components: {\n    draggable,\n    render,\n    JsonDrawer,\n    RightPanel,\n    DraggableItem,\n    DraggableItemApp,\n    Preview\n  },\n  props: ['conf', 'modelType', 'webType', 'dbType', 'formInfo'],\n  data() {\n    return {\n      idGlobal: 100,\n      formConf: deepClone(formConf),\n      inputComponents,\n      selectComponents,\n      systemComponents,\n      layoutComponents,\n      labelWidth: 100,\n      drawingList: [],\n      drawingData: {},\n      activeId: null,\n      drawerVisible: false,\n      previewVisible: false,\n      formData: {},\n      dialogVisible: false,\n      jsonDrawerVisible: false,\n      generateConf: null,\n      showFileName: false,\n      activeData: {},\n      saveDrawingListDebounce: debounce(340, saveDrawingList),\n      saveIdGlobalDebounce: debounce(340, saveIdGlobal),\n      isDrawingListChange: true,\n      showTip: true,\n      activeItem: {},\n      activeTableItem: {},\n      showType: 'pc',\n      leftComponents: [\n        {\n          title: '基础控件',\n          list: inputComponents\n        },\n        {\n          title: '高级控件',\n          list: selectComponents\n        },\n        {\n          title: '系统控件',\n          list: systemComponents\n        },\n        {\n          title: '布局控件',\n          list: layoutComponents\n        }\n      ],\n      rowIndex: 0,\n      colIndex: 0,\n      rowData: [],\n      colData: [],\n      selectCell: {\n        __config__: {\n          rowspan: 1,\n          colspan: 1\n        }\n      }\n    }\n  },\n  provide() {\n    return {\n      getShowType: () => this.showType\n    }\n  },\n  computed: {\n    mergeLeftColDisabled() {\n      if (!this.colData.length) return true\n      return (this.colIndex <= 0) || (this.colData[this.colIndex - 1].__config__.rowspan !== this.selectCell.__config__.rowspan)\n    },\n    mergeRightColDisabled() {\n      if (!this.colData.length) return true\n      let rightColIndex = this.colIndex + this.selectCell.__config__.colspan\n      return (this.colIndex >= this.colData.length - 1) || (rightColIndex > this.colData.length - 1)\n        || (this.colData[rightColIndex].__config__.rowspan !== this.selectCell.__config__.rowspan)\n    },\n    mergeWholeRowDisabled() {\n      if (!this.selectCell.__config__ || !this.rowData.length) return true\n      let rowDataChildren = this.rowData[this.rowIndex].__config__.children\n      let startRowspan = rowDataChildren[0].__config__.rowspan\n      let unmatchedFlag = false\n      for (let i = 1; i < rowDataChildren.length; i++) {\n        if (rowDataChildren[i].__config__.rowspan !== startRowspan) {\n          unmatchedFlag = true\n          break;\n        }\n      }\n      if (unmatchedFlag) return true\n      return (this.colData.length <= 1) || (this.colData.length === this.selectCell.__config__.colspan)\n    },\n    mergeAboveRowDisabled() {\n      if (!this.rowData.length || this.rowIndex <= 0) return true\n      return (this.rowData[this.rowIndex - 1].__config__.children[this.colIndex].__config__.colspan\n        !== this.selectCell.__config__.colspan) || this.rowData[this.rowIndex - 1].__config__.children[this.colIndex].__config__.merged\n    },\n    mergeBelowRowDisabled() {\n      if (!this.rowData.length || (this.rowIndex == this.rowData.length)) return true\n      let belowRowIndex = this.rowIndex + this.selectCell.__config__.rowspan\n      return (this.rowIndex >= this.rowData.length - 1) || (belowRowIndex > this.rowData.length - 1)\n        || (this.rowData[belowRowIndex].__config__.children[this.colIndex].__config__.colspan !== this.selectCell.__config__.colspan)\n        || this.rowData[belowRowIndex].__config__.children[this.colIndex].__config__.merged\n    },\n    mergeWholeColDisabled() {\n      if (!this.rowData.length) return true\n      let startColspan = this.rowData[0].__config__.children[this.colIndex].__config__.colspan\n      let unmatchedFlag = false\n      for (let i = 1; i < this.rowData.length; i++) {\n        if (this.rowData[i].__config__.children[this.colIndex].__config__.colspan !== startColspan) {\n          unmatchedFlag = true\n          break;\n        }\n      }\n      if (unmatchedFlag) return true\n      return (this.rowData.length <= 1) || (this.rowData.length === this.selectCell.__config__.rowspan)\n    },\n    undoMergeRowDisabled() {\n      return this.selectCell.__config__.merged || (this.selectCell.__config__.colspan <= 1)\n    },\n    undoMergeColDisabled() {\n      return this.selectCell.__config__.merged || (this.selectCell.__config__.rowspan <= 1)\n    },\n    deleteWholeColDisabled() {\n      if (!this.rowData.length) return true\n      if (this.rowData[0].__config__.children[0].__config__.colspan === this.rowData[0].__config__.children.length) return true\n      let startColspan = this.rowData[0].__config__.children[this.colIndex].__config__.colspan\n      let unmatchedFlag = false\n      for (let i = 1; i < this.rowData.length; i++) {\n        if (this.rowData[i].__config__.children[this.colIndex].__config__.colspan !== startColspan) {\n          unmatchedFlag = true\n          break;\n        }\n      }\n      if (unmatchedFlag) return true\n      return (this.selectCell.__config__.colspan === this.colData.length)\n    },\n    deleteWholeRowDisabled() {\n      if (!this.rowData.length || this.rowData.length <= this.rowIndex) return true\n      if (this.rowData[0].__config__.children[0].__config__.rowspan === this.rowData.length) return true\n      //整行所有单元格行高不一致不可删除！！\n      let startRowspan = this.rowData[this.rowIndex].__config__.children[0].__config__.rowspan\n      let unmatchedFlag = false\n      for (let i = 1; i < this.rowData[this.rowIndex].__config__.children.length; i++) {\n        if (this.rowData[this.rowIndex].__config__.children[i].__config__.rowspan !== startRowspan) {\n          unmatchedFlag = true\n          break;\n        }\n      }\n      if (unmatchedFlag) return true\n      return (this.rowData.length === 1) || (this.selectCell.__config__.rowspan === this.rowData.length)\n    },\n    getFormInfo() {\n      return this.formInfo || {}\n    }\n  },\n  watch: {\n    // eslint-disable-next-line func-names\n    'activeData.__config__.label': function (val, oldVal) {\n      // if (\n      //   this.activeData.placeholder === undefined\n      //   || !this.activeData.__config__.tag\n      //   || oldActiveId !== this.activeId\n      // ) {\n      //   return\n      // }\n      // this.activeData.placeholder = this.activeData.placeholder.replace(oldVal, '') + val\n    },\n    activeId: {\n      handler(val) {\n        oldActiveId = val\n      },\n      immediate: true\n    },\n    drawingList: {\n      handler(val) {\n        this.saveDrawingListDebounce(val)\n        if (val.length === 0) {\n          this.idGlobal = 100\n          this.activeData = {}\n        }\n        // if (!this.isDrawingListChange) {\n        //   this.isDrawingListChange = true\n        //   return\n        // }\n        this.$emit('drawingListChange')\n      },\n      deep: true\n    },\n    idGlobal: {\n      handler(val) {\n        this.formConf.idGlobal = val\n        // this.saveIdGlobalDebounce(val)\n      },\n      immediate: true\n    }\n  },\n  created() {\n    if (typeof this.conf === 'object' && this.conf !== null) {\n      this.isDrawingListChange = false\n      this.drawingList = deepClone(this.conf.fields)\n      Object.assign(this.formConf, this.conf)\n      this.idGlobal = this.formConf.idGlobal\n      if (this.drawingList.length) this.activeFormItem(this.drawingList[0])\n    } else {\n      this.drawingList = []\n      this.idGlobal = 100\n    }\n    if (this.modelType == 1 || this.modelType == 6) {\n      this.leftComponents[1].list = [...this.leftComponents[1].list, calculateItem]\n      this.leftComponents[0].list = [...this.leftComponents[0].list, ...onlinePeculiarList]\n    }\n    if (this.webType != 2 || this.modelType == 3 || this.modelType == 6) this.formConf.popupType = 'fullScreen'\n  },\n  mounted() {\n    // fix: firefox 下 拖拽 会新打卡一个选项卡\n    // https://github.com/JakHuang/form-generator/issues/15\n    document.body.ondrop = event => {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n  },\n  methods: {\n    // 供父组件使用 获取表单JSON\n    getData() {\n      return new Promise((resolve, reject) => {\n        if (!this.drawingList.length) {\n          reject({ msg: '表单不允许为空', target: 1 })\n          return\n        }\n        const loop = list => {\n          for (let i = 0; i < list.length; i++) {\n            const e = list[i]\n            const config = e.__config__\n            if (config.layout === \"colFormItem\" && !noVModelList.includes(config.jnpfKey) && !e.__vModel__) {\n              reject({ msg: `${config.label}的控件字段不能为空`, target: 1 })\n              break\n            }\n            if (e.isStorage == 1 && !e.__vModel__) {\n              reject({ msg: `${config.label}的控件字段不能为空`, target: 1 })\n              break\n            }\n            if (config.jnpfKey === 'billRule') {\n              if (!config.rule) {\n                reject({ msg: '单据组件“单据模板”属性为必填项', target: 1 })\n                break\n              }\n            }\n            if (config.jnpfKey === 'relationForm') {\n              if (!e.modelId) {\n                reject({ msg: '关联表单控件“关联功能”属性为必填项', target: 1 })\n                break\n              }\n              if (!e.relationField) {\n                reject({ msg: '关联表单控件“显示字段”属性为必填项', target: 1 })\n                break\n              }\n            }\n            if (config.jnpfKey === 'popupSelect') {\n              if (!e.interfaceId) {\n                reject({ msg: '弹窗选择控件“远端数据”属性为必填项', target: 1 })\n                break\n              }\n              if (!e.propsValue) {\n                reject({ msg: '弹窗选择控件“储存字段”属性为必填项', target: 1 })\n                break\n              }\n              if (!e.relationField) {\n                reject({ msg: '弹窗选择控件“显示字段”属性为必填项', target: 1 })\n                break\n              }\n            }\n            if (config.jnpfKey === 'popupTableSelect') {\n              if (!e.interfaceId) {\n                reject({ msg: '下拉表格控件“远端数据”属性为必填项', target: 1 })\n                break\n              }\n              if (!e.propsValue) {\n                reject({ msg: '下拉表格控件“储存字段”属性为必填项', target: 1 })\n                break\n              }\n              if (!e.relationField) {\n                reject({ msg: '下拉表格控件“显示字段”属性为必填项', target: 1 })\n                break\n              }\n            }\n            if (config.jnpfKey === 'autoComplete') {\n              if (!e.interfaceId) {\n                reject({ msg: '下拉补全控件“远端数据”属性为必填项', target: 1 })\n                break\n              }\n              if (!e.relationField) {\n                reject({ msg: '下拉补全控件“显示字段”属性为必填项', target: 1 })\n                break\n              }\n            }\n            if (config.layout === 'rowFormItem' && !config.children.length) {\n              reject({ msg: `您的${config.label}控件中没有组件`, target: 1 })\n              break\n            }\n            if (config && config.children && Array.isArray(config.children)) {\n              loop(config.children)\n            }\n            if (config.jnpfKey === 'uploadFile') {\n              if (e.pathType === 'selfPath') {\n                if (e.isAccount === 0) {\n                  if (!e.folder) {\n                    reject({ msg: '请设置自定义路径', target: 1 })\n                    break\n                  }\n                }\n              }\n            }\n            if (config.jnpfKey === 'uploadImg') {\n              if (e.pathType === 'selfPath') {\n                if (e.isAccount === 0) {\n                  if (!e.folder) {\n                    reject({ msg: '请设置自定义路径', target: 1 })\n                    break\n                  }\n                }\n              }\n            }\n            if (config.jnpfKey === 'link') {\n              if (e.href && !validURL(e.href)) {\n                reject({ msg: '请输入正确的链接地址', target: 1 })\n                break\n              }\n            }\n          }\n        }\n        loop(this.drawingList)\n        this.AssembleFormData()\n        if (this.formData.hasPrintBtn && (!this.formData.printId || !this.formData.printId.length)) {\n          reject({ msg: `请选择打印模板`, target: 1 })\n        }\n        resolve({ formData: this.formData, target: 1 })\n      })\n    },\n    //  阻止表格中嵌套行容器\n    shouldClone(to, from, target, event, conf) {\n      const targetConf = target._underlying_vm_\n      const isRowContainer = conf.__config__.cmpType === 'common' && conf.__config__.jnpfKey === 'row'\n      if (isRowContainer) return true\n      if (conf.cmpType === 'custom') return false\n      if (conf.__config__.jnpfKey === 'table') {\n        if (noTableAllowList.includes(targetConf.__config__.jnpfKey)) {\n          // if (this.showTip) {\n          //   this.$message.warning(`子表内暂不支持使用该组件`)\n          //   this.showTip = false\n          // }\n          return false\n        }\n        if (targetConf.__config__.layout === 'rowFormItem') return false\n        if (this.$store.getters.hasTable) {\n          if (!conf.__config__.tableName) {\n            if (this.showTip) {\n              this.$message.warning(`子表请先关联数据表`)\n              this.showTip = false\n            }\n            return false\n          }\n        }\n        this.activeItem = targetConf\n        this.activeTableItem = conf\n      }\n      if (conf.__config__.jnpfKey === 'tableGridTd' && targetConf.__config__.jnpfKey === 'tableGrid') return false\n      return true\n    },\n    activeFormItem(element) {\n      this.activeData = element\n      this.activeId = element.__config__.formId\n    },\n    onEnd(obj) {\n      this.showTip = true\n      if (obj.from !== obj.to) {\n        this.activeData = tempActiveData\n        this.activeId = tempActiveData.__config__.formId\n      }\n      if (obj.to.className.indexOf('table-wrapper') > -1) {\n        this.$set(this.activeItem.__config__, 'isSubTable', true)\n        this.$set(this.activeItem.__config__, 'parentVModel', this.activeTableItem.__vModel__)\n        if (this.$store.getters.hasTable) {\n          this.$set(this.activeItem.__config__, 'relationTable', this.activeTableItem.__config__.tableName)\n          this.activeItem.__vModel__ = ''\n        }\n      }\n    },\n    onCenterEnd(obj) {\n      this.showTip = true\n      if (obj.from == obj.to) return\n      if (obj.to.className.indexOf('table-wrapper') > -1) {\n        this.$set(this.activeItem.__config__, 'isSubTable', true)\n        this.$set(this.activeItem.__config__, 'parentVModel', this.activeTableItem.__vModel__)\n        if (this.$store.getters.hasTable) {\n          this.$set(this.activeItem.__config__, 'relationTable', this.activeTableItem.__config__.tableName)\n          this.activeItem.__vModel__ = ''\n        }\n      }\n    },\n    onTableEnd(obj, target, conf) {\n      if (obj.from == obj.to) return\n      if (obj.to.className.indexOf('table-wrapper') < 0) {\n        this.$set(this.activeItem.__config__, 'isSubTable', false)\n        this.$set(this.activeItem.__config__, 'parentVModel', '')\n        if (this.$store.getters.hasTable) this.activeItem.__vModel__ = ''\n      } else {\n        this.$set(this.activeItem.__config__, 'isSubTable', true)\n        this.$set(this.activeItem.__config__, 'parentVModel', this.activeTableItem.__vModel__)\n        if (this.$store.getters.hasTable) {\n          this.$set(this.activeItem.__config__, 'relationTable', this.activeTableItem.__config__.tableName)\n          this.activeItem.__vModel__ = ''\n        }\n      }\n    },\n    addComponent(item) {\n      if (item.__config__.dragDisabled) return\n      const clone = this.cloneComponent(item)\n      this.drawingList.push(clone)\n      this.activeFormItem(clone)\n    },\n    cloneComponent(origin) {\n      const clone = deepClone(origin)\n      const config = clone.__config__\n      config.span = this.formConf.span // 生成代码时，会根据span做精简判断\n      this.createIdAndKey(clone)\n      // clone.placeholder !== undefined && (clone.placeholder += config.label)\n      tempActiveData = clone\n      return tempActiveData\n    },\n    createIdAndKey(item, parent) {\n      const config = item.__config__\n      config.formId = ++this.idGlobal\n      config.renderKey = +new Date() // 改变renderKey后可以实现强制更新组件\n      if (config.layout === 'colFormItem') {\n        if (!this.$store.getters.hasTable) {\n          // 分割线和按钮不加vModel\n          if (noVModelList.indexOf(config.jnpfKey) < 0 || item.isStorage == 1) {\n            item.__vModel__ = this.toggleVmodelCase(`${config.jnpfKey}Field${this.idGlobal}`)\n          }\n        } else {\n          if (noVModelList.indexOf(config.jnpfKey) < 0 || item.isStorage == 1) {\n            item.__vModel__ = \"\"\n          }\n        }\n        if (parent && parent.__vModel__ && parent.__config__.jnpfKey === 'table') {\n          item.__config__.parentVModel = parent.__vModel__\n        }\n      } else if (config.layout === 'rowFormItem') {\n        if (config.jnpfKey === 'table') {\n          item.__vModel__ = this.toggleVmodelCase(`${config.jnpfKey}Field${this.idGlobal}`);\n        }\n        config.componentName = `row${this.idGlobal}`\n        !Array.isArray(config.children) && (config.children = [])\n        // delete config.label // rowFormItem无需配置label属性\n      }\n      if (Array.isArray(config.children)) {\n        config.children = config.children.map(childItem => this.createIdAndKey(childItem, item))\n      }\n      return item\n    },\n    setVModel(item) {\n      const config = item.__config__\n      item.__vModel__ = this.toggleVmodelCase(`${config.jnpfKey}Field${config.formId}`)\n    },\n    toggleVmodelCase(str) {\n      const dbType = this.dbType || ''\n      if (dbType.toLowerCase() === 'Oracle'.toLowerCase() || dbType.toLowerCase() === 'DM'.toLowerCase()) {\n        return str.toUpperCase()\n      }\n      if (dbType.toLowerCase() === 'PostgreSQL'.toLowerCase() || dbType.toLowerCase() === 'KingBaseES'.toLowerCase()) {\n        return str.toLowerCase()\n      }\n      return str\n    },\n    AssembleFormData() {\n      this.formData = {\n        ...this.formConf,\n        fields: deepClone(this.drawingList),\n      }\n    },\n    empty() {\n      this.$confirm('确定要清空所有组件吗？', '提示', { type: 'warning' }).then(() => {\n        this.drawingList = []\n        this.idGlobal = 100\n      }).catch(() => { })\n    },\n    drawingItemCopy(item, parent, isActiveFormItem = true) {\n      let clone = deepClone(item)\n      clone = this.createIdAndKey(clone)\n      parent.push(clone)\n      isActiveFormItem && this.activeFormItem(clone)\n    },\n    drawingItemDelete(index, parent) {\n      parent.splice(index, 1)\n      this.$nextTick(() => {\n        const len = this.drawingList.length\n        if (len) {\n          this.activeFormItem(this.drawingList[len - 1])\n        }\n      })\n    },\n    preview() {\n      this.AssembleFormData()\n      this.previewVisible = true\n    },\n    showJson() {\n      this.AssembleFormData()\n      this.jsonDrawerVisible = true\n    },\n    tagChange(newTag) {\n      newTag = this.cloneComponent(newTag)\n      const config = newTag.__config__\n      newTag.__vModel__ = this.activeData.__vModel__\n      config.formId = this.activeId\n      config.span = this.activeData.__config__.span\n      this.activeData.__config__.tag = config.tag\n      this.activeData.__config__.tagIcon = config.tagIcon\n      this.activeData.__config__.document = config.document\n      if (typeof this.activeData.__config__.defaultValue === typeof config.defaultValue) {\n        config.defaultValue = this.activeData.__config__.defaultValue\n      }\n      Object.keys(newTag).forEach(key => {\n        if (this.activeData[key] !== undefined) {\n          newTag[key] = this.activeData[key]\n        }\n      })\n      this.activeData = newTag\n      this.updateDrawingList(newTag, this.drawingList)\n    },\n    updateDrawingList(newTag, list) {\n      const index = list.findIndex(item => item.__config__.formId === this.activeId)\n      if (index > -1) {\n        list.splice(index, 1, newTag)\n      } else {\n        list.forEach(item => {\n          if (Array.isArray(item.__config__.children)) this.updateDrawingList(newTag, item.__config__.children)\n        })\n      }\n    },\n    refreshJson(data) {\n      this.drawingList = deepClone(data.fields)\n      delete data.fields\n      this.formConf = data\n    },\n    relationChange(vmodel) {\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const config = list[i].__config__\n          if (list[i].relationField && list[i].relationField === list[i].__vModel__) {\n            list[i].showField = ''\n          }\n          if (config && config.children && Array.isArray(config.children)) {\n            loop(config.children)\n          }\n        }\n      }\n      loop(this.drawingList)\n    },\n    handleTableAddRow(element, insertPos, cloneRowIdx) {\n      const row = element.__config__.children\n      let rowIdx = (insertPos === undefined) ? row.length : insertPos + row[cloneRowIdx].__config__.children[this.colIndex].__config__.rowspan - 1\n      let newRow = (cloneRowIdx === undefined) ? deepClone(row[row.length - 1]) : deepClone(row[cloneRowIdx])\n      newRow.__config__.children.forEach(col => {\n        col.__config__.formId = ++this.idGlobal\n        col.__config__.merged = false\n        col.__config__.colspan = 1\n        col.__config__.rowspan = 1\n        col.__config__.children = []\n      })\n      newRow.__config__.formId = ++this.idGlobal\n      newRow.__config__.jnpfKey = \"tableGridTr\"\n      row.splice(rowIdx, 0, newRow)\n    },\n    handleTableAddCol(element, insertPos, cloneRowIdx) {\n      const row = element.__config__.children\n      let colIdx = (insertPos === undefined) ? row[0].__config__.children.length : insertPos  //确定插入列位置\n      row.forEach(item => {\n        let newCol = {\n          __config__: {\n            jnpfKey: \"tableGridTd\",\n            merged: false,\n            colspan: 1,\n            rowspan: 1,\n            formId: ++this.idGlobal,\n            children: [],\n            backgroundColor: '',\n          }\n        }\n        item.__config__.children.splice(colIdx, 0, newCol)\n      })\n    },\n    mergeTableCol(element, type) {\n      let mergedColIndex = type == 1 ? this.colIndex : this.colIndex + this.colData[this.colIndex].__config__.colspan\n      let remainedColIndex = type == 1 ? this.colIndex - this.colData[this.colIndex - 1].__config__.colspan : this.colIndex\n      const colChildren = this.colData[mergedColIndex].__config__.children\n      const colChildren_ = this.colData[remainedColIndex].__config__.children\n      this.colData[remainedColIndex].__config__.children = [...colChildren_, ...deepClone(colChildren)]\n      let newColspan = this.colData[mergedColIndex].__config__.colspan * 1 + this.colData[remainedColIndex].__config__.colspan * 1\n      this.setPropsOfMergedCols(remainedColIndex, newColspan, this.selectCell.__config__.rowspan)\n    },\n    mergeWholeCol() {\n      let childrenData = this.colData.filter((colItem) => {\n        return !colItem.merged && colItem.__config__.children && colItem.__config__.children.length\n      })\n      if (childrenData && childrenData.length) {\n        childrenData.map((o, i) => {\n          if (i == 0) this.colData[0].__config__.children = cloneDeep(o.__config__.children);\n          if (i != 0) this.colData[0].__config__.children.push(...deepClone(o.__config__.children))\n        })\n      }\n      this.setPropsOfMergedCols(0, this.colData.length, this.colData[this.colIndex].__config__.rowspan)\n    },\n    mergeTableRow(type) {\n      let mergedRowIndex = type == 1 ? this.rowIndex : this.rowIndex + this.selectCell.__config__.rowspan\n      let remainedRowIndex = type == 1 ? this.rowIndex - 1 : this.rowIndex\n      let childrenData = this.rowData[mergedRowIndex].__config__.children[this.colIndex].__config__.children\n      let childrenData_ = this.rowData[remainedRowIndex].__config__.children[this.colIndex].__config__.children\n      this.rowData[remainedRowIndex].__config__.children[this.colIndex].__config__.children = [...childrenData_, ...deepClone(childrenData)]\n      let newRowspan = this.rowData[mergedRowIndex].__config__.children[this.colIndex].__config__.rowspan * 1 + this.rowData[remainedRowIndex].__config__.children[this.colIndex].__config__.rowspan * 1\n      this.setPropsOfMergedRows(remainedRowIndex, this.selectCell.__config__.colspan, newRowspan)\n    },\n    mergeWholeRow() {\n      let childrenData = []\n      this.rowData.forEach(o => {\n        let tempCell = o.__config__.children[this.colIndex]\n        if (!o.__config__.merged && !!o.__config__.children && o.__config__.children.length) {\n          childrenData.push(tempCell)\n        }\n      })\n      let firstCellOfCol = this.rowData[0].__config__.children[this.colIndex]\n      if (childrenData && childrenData.length) {\n        childrenData.map((o, i) => {\n          if (i != 0) firstCellOfCol.__config__.children.push(...deepClone(o.__config__.children))\n        })\n      }\n      this.setPropsOfMergedRows(0, firstCellOfCol.__config__.colspan, this.rowData.length)\n    },\n    undoMergeCol() {\n      this.setPropsOfSplitCol(this.colIndex, this.selectCell.__config__.colspan, this.selectCell.__config__.rowspan)\n    },\n    undoMergeRow() {\n      this.setPropsOfSplitRow(this.colIndex, this.selectCell.__config__.colspan, this.selectCell.__config__.rowspan)\n    },\n    deleteWholeCol() {\n      let startColspan = this.rowData[0].__config__.children[this.colIndex].__config__.colspan\n      this.rowData.forEach((rItem) => {\n        rItem.__config__.children.splice(this.colIndex, startColspan)\n      })\n    },\n    deleteWholeRow() {\n      let startRowspan = this.rowData[this.rowIndex].__config__.children[0].__config__.rowspan\n      this.rowData.splice(this.rowIndex, startRowspan)\n    },\n    setPropsOfMergedCols(startColIndex, newColspan, rowspan) {\n      for (let i = this.rowIndex; i < this.rowIndex + rowspan; i++) {\n        for (let j = startColIndex; j < startColIndex + newColspan; j++) {\n          if ((i === this.rowIndex) && (j === startColIndex)) {\n            this.rowData[i].__config__.children[j].__config__.colspan = newColspan\n            continue\n          }\n          this.rowData[i].__config__.children[j].__config__.merged = true\n          this.rowData[i].__config__.children[j].__config__.colspan = newColspan\n          this.rowData[i].__config__.children[j].__config__.children = []\n        }\n      }\n    },\n    setPropsOfMergedRows(startRowIndex, colspan, newRowspan, colIndex) {\n      if (!colIndex) colIndex = this.colIndex\n      for (let i = startRowIndex; i < startRowIndex + newRowspan; i++) {\n        for (let j = colIndex; j < colIndex + colspan; j++) {\n          if ((i === startRowIndex) && (j === colIndex)) {\n            this.rowData[i].__config__.children[j].__config__.rowspan = newRowspan\n            continue\n          }\n          this.rowData[i].__config__.children[j].__config__.merged = true\n          this.rowData[i].__config__.children[j].__config__.rowspan = newRowspan\n          this.rowData[i].__config__.children[j].__config__.children = []\n        }\n      }\n    },\n    setPropsOfSplitCol(startColIndex, colspan, rowspan) {\n      for (let i = this.rowIndex; i < this.rowIndex + rowspan; i++) {\n        for (let j = startColIndex; j < startColIndex + colspan; j++) {\n          this.rowData[i].__config__.children[j].__config__.merged = false;\n          this.rowData[i].__config__.children[j].__config__.rowspan = 1\n          this.rowData[i].__config__.children[j].__config__.colspan = 1\n        }\n      }\n    },\n    setPropsOfSplitRow(startColIndex, colspan, rowspan) {\n      for (let i = this.rowIndex; i < this.rowIndex + rowspan; i++) {\n        for (let j = startColIndex; j < startColIndex + colspan; j++) {\n          this.rowData[i].__config__.children[j].__config__.merged = false;\n          this.rowData[i].__config__.children[j].__config__.rowspan = 1\n          this.rowData[i].__config__.children[j].__config__.colspan = 1\n        }\n      }\n    },\n    handleTableSetting(e, element) {\n      switch (e) {\n        case '1':\n          //插入左侧列\n          this.handleTableAddCol(element, this.colIndex)\n          break;\n        case '2':\n          //插入右侧列\n          this.handleTableAddCol(element, this.colIndex + 1)\n          break;\n        case '3':\n          //插入上方行\n          this.handleTableAddRow(element, this.rowIndex, this.rowIndex)\n          break;\n        case '4':\n          //插入下方行\n          this.handleTableAddRow(element, this.rowIndex + 1, this.rowIndex)\n          break;\n        case '5':\n          //向左合并\n          this.mergeTableCol(element, 1)\n          break;\n        case '6':\n          //向右合并\n          this.mergeTableCol(element)\n          break;\n        case '7':\n          //合并整行\n          this.mergeWholeCol(element)\n          break;\n        case '8':\n          //向上合并\n          this.mergeTableRow(1)\n          break;\n        case '9':\n          //向下合并\n          this.mergeTableRow()\n          break;\n        case '10':\n          //合并整列\n          this.mergeWholeRow()\n          break;\n        case '11':\n          //撤销行合并\n          this.undoMergeCol()\n          break;\n        case '12':\n          //撤销列合并\n          this.undoMergeRow()\n          break;\n        case '13':\n          //删除整列\n          this.deleteWholeCol()\n          break;\n        case '14':\n          //删除整行\n          this.deleteWholeRow()\n          break;\n        default:\n          break;\n      }\n      this.resetData()\n    },\n    resetData() {\n      this.rowIndex = 0,\n        this.colIndex = 0,\n        this.rowData = [],\n        this.colData = [],\n        this.selectCell = {\n          __config__: {\n            rowspan: 1,\n            colspan: 1\n          }\n        }\n    },\n    handleShowMenu(element, rowIndex, colIndex) {\n      this.rowIndex = rowIndex\n      this.colIndex = colIndex\n      this.rowData = element.__config__.children\n      this.colData = this.rowData[rowIndex].__config__.children\n      this.selectCell = this.colData[colIndex]\n    }\n  }\n}\n",null]}