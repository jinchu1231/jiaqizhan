{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/LaunchFlowNode.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/LaunchFlowNode.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FlowModal from './FlowModal';\nimport { sourceTypeOptions } from '../FlowCard/define.js';\nconst emptyChildItem = { field: '', symbol: '==', fieldValueType: 1, fieldValue: undefined, jnpfKey: '', fieldValueJnpfKey: '', cellKey: +new Date() };\nconst emptyItem = { logic: 'and', groups: [emptyChildItem] };\nexport default {\n  name: 'addDataNode',\n  components: { FlowModal },\n  props: {\n    formConf: {\n      type: Object,\n      default: () => { }\n    },\n    integrateType: {\n      type: Number,\n      default: 1\n    },\n    formFieldsOptions: {\n      type: Array,\n      default: () => []\n    },\n    getFormFieldList: {\n      type: Function,\n      default: null\n    },\n    getFlowFormFieldList: {\n      type: Function,\n      default: null\n    },\n    usedFormItems: {\n      type: Array,\n      default: () => []\n    },\n    flowOptions: {\n      type: Array,\n      default: () => []\n    },\n  },\n  data() {\n    return {\n      sourceTypeOptions,\n      transferList: JSON.parse(JSON.stringify(this.formConf.transferList)),\n      flowId: JSON.parse(JSON.stringify(this.formConf.flowId)),\n      initiator: JSON.parse(JSON.stringify(this.formConf.initiator || []))\n    }\n  },\n  computed: {\n    getRuleOptions() {\n      let formFieldList = this.formConf.formFieldList.filter(o => o.id.indexOf('-') < 0)\n      return formFieldList.filter(o => !['relationFormAttr', 'popupAttr', 'uploadFile', 'uploadImg', 'colorPicker', 'editor'].includes(o.__config__.jnpfKey))\n    }\n  },\n  methods: {\n    onChangeFlow() {\n      if (!this.flowId) return (this.formConf.flowName = '');\n      let item = this.flowOptions.filter(o => o.id === this.flowId)[0]\n      this.formConf.flowName = item.fullName\n    },\n    onChangeSourceValue(item) {\n      if (item.sourceValue) item.sourceValue = undefined\n    },\n    getItem() {\n      let item = {\n        transferList: this.transferList,\n        flowId: this.flowId,\n        initiator: this.initiator || []\n      }\n      return item\n    },\n    onChangeUpdate() {\n      this.$forceUpdate()\n    },\n    onFlowIdChange(id, item) {\n      this.formConf.transferList = [JSON.parse(JSON.stringify(emptyItem))];\n      if (!id) return handleNull();\n      this.formConf.flowName = item.fullName;\n      this.getFlowFormFieldList(id, 'launchFlow');\n      this.flowId = id;\n      this.transferList = [];\n      this.formConf.transferList = [];\n      this.formConf.flowId = id\n    },\n    handleNull() {\n      this.formConf.flowName = '';\n      this.formConf.flowId = '';\n      this.flowId = '';\n      this.formConf.formFieldList = [];\n      this.transferList = [];\n    },\n    addTransferItem() {\n      this.transferList.push({ targetField: '', targetFieldLabel: '', sourceType: 1, sourceValue: '', required: false });\n    },\n    delTransferItem(index) {\n      this.transferList.splice(index, 1);\n    },\n    getTargetOptions(index) {\n      let ignoreOptions = [];\n      for (let i = 0; i < this.transferList.length; i++) {\n        const e = this.transferList[i];\n        if (e.targetField && index !== i) ignoreOptions.push(e.targetField);\n      }\n      const list = this.formConf.formFieldList.filter(o => !ignoreOptions.includes(o.id));\n      return list;\n    }\n  }\n}\n\n",null]}