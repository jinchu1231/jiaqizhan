{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/flowTodo/BatchList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/flowTodo/BatchList.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FlowBeforeList, getBatchFlowSelector, getBatchFlowJsonList, getNodeSelector, BatchCandidate, BatchOperation, RejectList } from '@/api/workFlow/FlowBefore'\nimport ApproveDialog from '@/views/workFlow/components/ApproveDialog'\nimport ActionDialog from '@/views/workFlow/components/ActionDialog'\nimport ErrorForm from '../components/ErrorForm'\nexport default {\n  components: { ApproveDialog, ErrorForm, ActionDialog },\n  props: ['categoryList'],\n  data() {\n    return {\n      id: '',\n      title: '',\n      list: [],\n      total: 0,\n      listLoading: false,\n      btnLoading: false,\n      listQuery: {\n        keyword: '',\n        templateId: '',\n        flowId: '',\n        nodeCode: '',\n        flowCategory: '',\n        creatorUserId: '',\n        startTime: '',\n        endTime: '',\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      templateOptions: [],\n      flowOptions: [],\n      nodeOptions: [],\n      multipleSelection: [],\n      currentBatchType: null,\n      candidateType: 1,\n      userBoxVisible: false,\n      approveVisible: false,\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近一周',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      pickerVal: [],\n      showAll: false,\n      errorVisible: false,\n      errorNodeList: [],\n      batchOperationData: {},\n    }\n  },\n  watch: {\n    'listQuery.nodeCode': function (val) {\n      this.search()\n    }\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    init() {\n      this.reset()\n      this.getBatchFlowSelector()\n    },\n    initData() {\n      this.listLoading = true\n      FlowBeforeList(4, this.listQuery).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    getBatchFlowSelector() {\n      getBatchFlowSelector().then(res => {\n        this.templateOptions = res.data\n      })\n    },\n    getBatchFlowJsonList() {\n      getBatchFlowJsonList(this.listQuery.templateId).then(res => {\n        this.flowOptions = res.data\n      })\n    },\n    getNodeSelector() {\n      getNodeSelector(this.listQuery.flowId).then(res => {\n        this.nodeOptions = res.data\n      })\n    },\n    onTemplateIdChange(val) {\n      this.listQuery.flowId = ''\n      this.listQuery.nodeCode = ''\n      this.flowOptions = []\n      this.nodeOptions = []\n      if (!val) return\n      this.getBatchFlowJsonList()\n    },\n    onFlowChange(val) {\n      this.listQuery.nodeCode = ''\n      if (!val) return this.nodeOptions = []\n      this.getNodeSelector()\n    },\n    visibleFlowChange(val) {\n      if (!val) return\n      if (!this.listQuery.templateId) this.$message.warning('请先选择所属流程')\n    },\n    visibleChange(val) {\n      if (!val) return\n      if (!this.listQuery.flowId) this.$message.warning('请先选择所属名称')\n    },\n    handleChange(val) {\n      this.multipleSelection = val\n    },\n    handleBatch(batchType) {\n      // batchType 0-通过 1-退回 2-转审\n      if (!this.multipleSelection.length) return this.$message.error('请先选择数据')\n      let isDiffer = this.multipleSelection.some(o => o.flowVersion !== this.multipleSelection[0].flowVersion)\n      if (isDiffer) return this.$message.error('请选择相同的版本审批单')\n      this.currentBatchType = batchType\n      const item = this.multipleSelection[0]\n      const properties = item.approversProperties ? JSON.parse(item.approversProperties) : {}\n      if (batchType === 0) {\n        if (!properties.hasAuditBtn) return this.$message.error('当前审批节点无通过权限')\n        this.btnLoading = true\n        const query = {\n          flowId: item.flowId,\n          taskOperatorId: item.id\n        }\n        BatchCandidate(query).then(res => {\n          let data = res.data\n          this.btnLoading = false\n          this.candidateType = data.type\n          let branchList = []\n          let candidateList = []\n          if (data.type == 1) {\n            branchList = data.list\n            this.approveVisible = true\n            this.$nextTick(() => {\n              this.$refs.approveDialog.init(properties, item.id, 'audit', branchList, candidateList, item.flowId)\n            })\n          }\n          if (data.type == 2) {\n            let list = data.list.filter(o => o.isCandidates)\n            candidateList = list.map(o => ({\n              ...o,\n              label: '审批人',\n              value: [],\n              rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n            }))\n            this.approveVisible = true\n            this.$nextTick(() => {\n              this.$refs.approveDialog.init(properties, item.id, 'audit', branchList, candidateList, item.flowId)\n            })\n          } else {\n            if (!properties.hasSign && !properties.hasOpinion && !properties.hasFreeApprover && !properties.isCustomCopy) {\n              this.$confirm('此操作将通过该审批单，是否继续？', '提示', {\n                type: 'warning'\n              }).then(() => {\n                this.batchOperation()\n              }).catch(() => { });\n              return\n            }\n            this.approveVisible = true\n            this.$nextTick(() => {\n              this.$refs.approveDialog.init(properties, item.id, 'audit', branchList, candidateList, item.flowId)\n            })\n          }\n\n        }).catch(() => {\n          this.btnLoading = false\n        })\n        return\n      }\n      if (batchType === 1) {\n        if (!properties.hasRejectBtn) return this.$message.error('当前审批节点无退回权限')\n        RejectList(item.id).then(res => {\n          properties.showReject = res.data.isLastAppro\n          properties.rejectList = res.data.list || []\n          properties.nodeCode = properties.rejectList[0].nodeCode\n          if (!properties.hasSign && !properties.hasOpinion && !properties.showReject) {\n            this.$confirm('此操作将退回该审批单，是否继续？', '提示', {\n              type: 'warning'\n            }).then(() => {\n              this.batchOperation()\n            }).catch(() => { });\n            return\n          }\n          this.approveVisible = true\n          this.$nextTick(() => {\n            this.$refs.approveDialog.init(properties, item.id, 'reject', [], [], item.flowId)\n          })\n        }).catch({})\n        return\n      }\n      if (batchType === 2) {\n        if (!properties.hasTransferBtn) return this.$message.error('当前审批节点无转审权限')\n        this.userBoxVisible = true\n        this.$nextTick(() => {\n          this.$refs.userBox.init(properties, 'transfer')\n        })\n      }\n    },\n    handleTransfer(data) {\n      this.batchOperation(data)\n    },\n    batchOperation(data) {\n      if (!data) {\n        data = {\n          branchList: [],\n          copyIds: \"\",\n          freeApproverUserId: \"\",\n          handleOpinion: \"\",\n          signImg: \"\",\n        }\n      }\n      const ids = this.multipleSelection.map(o => o.id)\n      const query = {\n        ...data,\n        enCode: this.multipleSelection[0].flowCode,\n        batchType: this.currentBatchType,\n        candidateType: this.candidateType,\n        ids\n      }\n      BatchOperation(query).then(res => {\n        const errorData = res.data\n        if (errorData && Array.isArray(errorData) && errorData.length) {\n          this.errorNodeList = errorData\n          this.errorVisible = true\n          this.batchOperationData = data\n        } else {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000,\n            onClose: () => {\n              this.initData()\n              this.errorVisible = false\n              this.$refs.approveDialog && this.$refs.approveDialog.closeDialog()\n              this.$refs.userBox && this.$refs.userBox.closeDialog()\n            }\n          })\n        }\n      }).catch(() => {\n        this.$refs.approveDialog && (this.$refs.approveDialog.btnLoading = false)\n        this.$refs.userBox && this.$refs.userBox.closeDialog()\n        this.errorVisible = false\n      })\n    },\n    handleError(data) {\n      this.batchOperationData.errorRuleUserList = data\n      this.batchOperation(this.batchOperationData)\n    },\n    reset() {\n      this.list = []\n      this.nodeOptions = []\n      this.flowOptions = []\n      this.pickerVal = []\n      this.listQuery = {\n        keyword: '',\n        templateId: '',\n        flowId: '',\n        nodeCode: '',\n        flowCategory: '',\n        creatorUserId: '',\n        startTime: '',\n        endTime: '',\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      }\n      this.initData()\n    },\n    search() {\n      if (this.pickerVal && this.pickerVal.length) {\n        this.listQuery.startTime = this.pickerVal[0]\n        this.listQuery.endTime = this.pickerVal[1]\n      } else {\n        this.listQuery.startTime = ''\n        this.listQuery.endTime = ''\n      }\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = 20\n      this.initData()\n    }\n  }\n}\n",null]}