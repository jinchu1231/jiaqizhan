{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/msgCenter/msgTemplate/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/msgCenter/msgTemplate/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMsgTemplateDetail, addMsgTemplate, editMsgTemplate } from '@/api/msgCenter/msgTemplate'\nimport { deepClone } from '@/utils'\nconst defaultParameterList = [\n  { field: '@Title', fieldName: '标题' },\n  { field: '@CreatorUserName', fieldName: '创建人' },\n]\nconst noticeParameterList = [\n  ...defaultParameterList,\n  { field: '@Content', fieldName: '内容' },\n  { field: '@Remark', fieldName: '摘要' },\n]\nconst flowParameterList = [\n  ...defaultParameterList,\n  { field: '@FlowLink', fieldName: '流程链接' },\n]\nconst systemParameterList = defaultParameterList\nconst scheduleParameterList = [\n  ...defaultParameterList,\n  { field: '@Content', fieldName: '内容' },\n  { field: '@StartDate', fieldName: '开始日期' },\n  { field: '@StartTime', fieldName: '开始时间' },\n  { field: '@EndDate', fieldName: '结束日期' },\n  { field: '@EndTime', fieldName: '结束时间' },\n]\nexport default {\n  name: 'msgTemplate-Form',\n  data() {\n    return {\n      dataForm: {\n        id: '',\n        fullName: '',\n        enCode: '',\n        templateType: 0,\n        messageType: '',\n        messageSource: '',\n        enabledMark: 1,\n        sortCode: 0,\n        description: '',\n        title: '',\n        content: '',\n        templateCode: '',\n        wxSkip: '1',\n        xcxAppId: ''\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: '模板名称不能为空', trigger: 'blur' },\n        ],\n        enCode: [\n          { required: true, message: '模板编码不能为空', trigger: 'blur' },\n          { validator: this.formValidate('enCode'), trigger: 'blur' },\n        ],\n        messageSource: [\n          { required: true, message: '请选择消息来源', trigger: 'change' },\n        ],\n        messageType: [\n          { required: true, message: '请选择消息类型', trigger: 'change' },\n        ],\n        title: [\n          { required: true, message: '消息标题不能为空', trigger: 'blur' },\n        ],\n        content: [\n          { required: true, message: '消息内容不能为空', trigger: 'blur' },\n        ],\n        templateCode: [\n          { required: true, message: '模版编号不能为空', trigger: 'blur' },\n        ],\n        wxSkip: [\n          { required: true, message: '跳转方式不能为空', trigger: 'blur' },\n        ],\n        xcxAppId: [\n          { required: true, message: '关联小程序ID不能为空', trigger: 'blur' },\n        ],\n      },\n      fieldRule: {\n        field: [\n          { required: true, message: '参数名称不能为空', trigger: 'blur' },\n          { validator: this.formValidate('filed'), trigger: 'blur' },\n        ],\n        fieldName: [\n          { required: true, message: '参数说明不能为空', trigger: 'blur' },\n        ],\n      },\n      fieldForm: {\n        field: '',\n        fieldName: ''\n      },\n      dialogVisible: false,\n      btnLoading: false,\n      loading: false,\n      messageSourceList: [],\n      messageTypeList: [],\n      isEdit: false,\n      keyword: \"\",\n      parameterList: [],\n      allParameterList: [],\n      smsList: [],\n      wxSkipList: [\n        { enCode: \"1\", fullName: '小程序' },\n        { enCode: \"2\", fullName: '页面' }\n      ]\n    }\n  },\n  methods: {\n    init(id) {\n      this.dataForm.id = id || ''\n      this.parameterList = []\n      this.allParameterList = this.parameterList\n      this.getConfig()\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        if (this.dataForm.id) {\n          this.loading = true\n          getMsgTemplateDetail(this.dataForm.id).then(res => {\n            this.loading = false\n            this.dataForm = res.data\n            this.parameterList = res.data.templateParamList\n            this.allParameterList = this.parameterList\n            this.smsList = res.data.smsFieldList\n          }).catch(() => {\n            this.loading = false\n          })\n        }\n      })\n    },\n    getConfig() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSendType' }).then((res) => {\n        this.messageTypeList = res\n        if (this.messageTypeList.length) this.dataForm.messageType = this.messageTypeList[0].enCode\n      })\n      this.$store.dispatch('base/getDictionaryData', { sort: 'msgSourceType' }).then((res) => {\n        this.messageSourceList = res\n      })\n    },\n    dataFormSubmit() {\n      this.dataForm.templateParamList = []\n      this.dataForm.smsFieldList = []\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.dataForm.templateParamList = this.parameterList\n          this.dataForm.smsFieldList = this.smsList\n          this.btnLoading = true\n          const formMethod = this.dataForm.id ? editMsgTemplate : addMsgTemplate\n          let isOk = true;\n          for (let i = 0; i < this.dataForm.smsFieldList.length; i++) {\n            let list = this.dataForm.smsFieldList[i]\n            let num = this.dataForm.smsFieldList.filter(o => o.smsField == list.smsField)\n            if (num.length > 1) {\n              this.$message({\n                showClose: true,\n                message: `第${i + 1}行短信变量'${list.smsField}'已重复`,\n                type: 'error',\n                duration: 1000\n              });\n              this.visible = false\n              this.btnLoading = false\n              isOk = false\n              break\n            }\n          }\n          if (isOk) {\n            formMethod(this.dataForm).then((res) => {\n              this.$message({\n                message: res.msg,\n                type: 'success',\n                duration: 1500,\n                onClose: () => {\n                  this.visible = false\n                  this.btnLoading = false\n                  this.$emit('close', true)\n                }\n              })\n            }).catch(() => { this.btnLoading = false })\n          }\n        }\n      })\n    },\n    addEditParameter(item) {\n      this.dialogVisible = true\n      this.isEdit = false\n      this.$nextTick(() => {\n        this.$refs['fieldForm'].resetFields()\n        if (item) {\n          this.isEdit = true\n          this.fieldForm = JSON.parse(JSON.stringify(item))\n        }\n      })\n    },\n    removeParameter(index) {\n      this.$confirm('此操作删除该参数, 不能恢复，是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.parameterList.splice(index, 1)\n        this.allParameterList = this.parameterList\n      }).catch(() => { });\n    },\n    /**\n     * 查找是否有相同参数，没有则添加\n     */\n    addParameter() {\n      this.$refs['fieldForm'].validate((valid) => {\n        if (valid) {\n          if (!this.isEdit) {\n            let boo = this.parameterList.some(o => o.field === this.fieldForm.field)\n            if (boo) {\n              this.$message({\n                type: 'error',\n                message: '参数名重复，请重新输入'\n              })\n              return\n            }\n            this.parameterList.push(deepClone(this.fieldForm))\n          } else {\n            for (let index = 0; index < this.parameterList.length; index++) {\n              if (this.fieldForm.field === this.parameterList[index].field) {\n                this.$set(this.parameterList, index, deepClone(this.fieldForm))\n                break\n              }\n            }\n          }\n          this.allParameterList = this.parameterList\n          this.dialogVisible = false\n        }\n      })\n    },\n    addContent(item) {\n      const content = '{' + item.field + '}'\n      this.dataForm.content += content\n      this.dataForm.title += content\n      this.$refs.dataForm.clearValidate(['title', 'content'])\n    },\n    searchParameter() {\n      this.parameterList = this.allParameterList.filter(item => {\n        if (item.field.toLowerCase().includes(this.keyword.toLowerCase()) || item.fieldName.toLowerCase().includes(this.keyword.toLowerCase())) {\n          return item\n        }\n      })\n    },\n    addSmsData() {\n      this.smsList.push({\n        smsField: \"\",\n        field: \"\",\n        fieldId: this.jnpf.idGenerator()\n      })\n    },\n    removeSmsData(index) {\n      this.smsList.splice(index, 1)\n    },\n    onMsgTypeChange(e) {\n      this.dataForm.content = ''\n    },\n    goBack() {\n      this.$emit('close')\n    },\n    changeKey(val, row) {\n      if (!val) return\n      for (let i = 0; i < this.smsList.length; i++) {\n        if (row.fieldId != this.smsList[i].fieldId) {\n          this.$set(this.smsList[i], 'isTitle', 0)\n        }\n      }\n    },\n    onMessageSourceChange(val) {\n      if (val == 1) this.parameterList = JSON.parse(JSON.stringify(noticeParameterList))\n      if (val == 2) this.parameterList = JSON.parse(JSON.stringify(flowParameterList))\n      if (val == 3) this.parameterList = JSON.parse(JSON.stringify(systemParameterList))\n      if (val == 4) this.parameterList = JSON.parse(JSON.stringify(scheduleParameterList))\n      this.allParameterList = this.parameterList\n    },\n    getIsSystem(val) {\n      return val && val.startsWith('@') ? true : false\n    },\n    getTipLabel() {\n      return this.dataForm.messageSource == '2' ? '系统参数格式：{@系统参数名}；自定义参数格式：{自定义参数名}' : '系统参数格式：{@系统参数名}'\n    }\n  }\n}\n",null]}