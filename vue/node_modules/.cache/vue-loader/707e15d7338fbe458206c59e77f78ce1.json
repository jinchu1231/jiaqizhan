{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataSource/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataSource/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { DataSourceInfo, DataSourceUpdate, DataSourceCreate, TestDbConnection } from '@/api/systemData/dataSource'\nexport default {\n  data() {\n    return {\n      visible: false,\n      dataForm: {\n        dbType: '',\n        id: 0,\n        fullName: '',\n        host: '',\n        port: '',\n        userName: '',\n        password: '',\n        serviceName: '',\n        dbSchema: '',\n        tableSpace: '',\n        sortCode: 0,\n        enabledMark: 1,\n        oracleExtend: false,\n        oracleLinkType: '',\n        oracleService: '',\n        oracleRole: ''\n      },\n      dataRule: {\n        dbType: [\n          { required: true, message: '连接驱动不能为空', trigger: 'change' }\n        ],\n        fullName: [\n          { required: true, message: '连接名称不能为空', trigger: 'blur' }\n        ],\n        host: [\n          { required: true, message: '主机地址不能为空', trigger: 'blur' },\n        ],\n        port: [\n          { required: true, message: '端口不能为空', trigger: 'blur' },\n          { pattern: /^([0-9]|[1-9]\\d{1,3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/, message: '请输入正确的端口号', trigger: 'blur' }\n        ],\n        userName: [\n          { required: true, message: '用户不能为空', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '密码不能为空', trigger: 'blur' }\n        ],\n        serviceName: [\n          { required: true, message: '库名不能为空', trigger: 'blur' }\n        ],\n        tableSpace: [\n          { required: true, message: '表空间不能为空', trigger: 'blur' }\n        ]\n      },\n      dbOptions: [],\n      btnLoading: false,\n      testLoad: false\n    }\n  },\n  methods: {\n    init(id) {\n      this.dataForm.id = id || 0\n      this.visible = true\n      this.$nextTick(async () => {\n        this.$refs['dataForm'].resetFields()\n        this.dataForm.serviceName = ''\n        this.dataForm.dbSchema = ''\n        this.dataForm.oracleExtend = false\n        this.dataForm.oracleLinkType = ''\n        this.dataForm.oracleService = ''\n        this.dataForm.oracleRole = ''\n        const res = await this.$store.dispatch('base/getDictionaryData', { sort: 'dbType' })\n        this.dbOptions = JSON.parse(JSON.stringify(res))\n        if (this.dataForm.id) {\n          DataSourceInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n          })\n        }\n      })\n    },\n    dataFormSubmit() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.btnLoading = true\n          const formMethod = this.dataForm.id ? DataSourceUpdate : DataSourceCreate\n          formMethod(this.dataForm).then(res => {\n            this.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: () => {\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList')\n              }\n            })\n          }).catch(() => { this.btnLoading = false })\n        }\n      })\n    },\n    handleChange(val) {\n      let port = ''\n      let dbSchema = ''\n      switch (val) {\n        case 'SQLServer':\n          port = '1433'\n          dbSchema = 'dbo'\n          break;\n        case 'MySQL':\n          port = '3306'\n          break;\n        case 'Oracle':\n          port = '1521'\n          break;\n        case 'DM':\n          port = '5236'\n          break;\n        case 'KingbaseES':\n          port = '54321'\n          dbSchema = 'public'\n          break;\n        case 'PostgreSQL':\n          port = '5432'\n          dbSchema = 'public'\n          break;\n        default:\n          port = ''\n          break;\n      }\n      this.dataForm.serviceName = '';\n      this.dataForm.port = port\n      this.dataForm.dbSchema = dbSchema\n      this.$refs['dataForm'].clearValidate()\n    },\n    test() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.testLoad = true\n          TestDbConnection(this.dataForm).then(res => {\n            if (res.code == 200) {\n              this.$message({\n                message: res.msg,\n                type: 'success',\n                duration: 1500\n              })\n            } else {\n              this.$message({\n                message: res.msg,\n                type: 'error',\n                duration: 1500\n              })\n            }\n            this.testLoad = false\n          }).catch(() => {\n            this.testLoad = false\n          })\n        }\n      })\n    }\n  }\n}\n",null]}