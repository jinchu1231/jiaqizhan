{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HSchedule/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/VisualPortal/HSchedule/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CardHeader from \"../CardHeader\"\nimport FullCalendar from '@fullcalendar/vue'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { List } from '@/api/onlineDev/schedule'\nimport Form from './Form'\nimport { mapGetters } from \"vuex\";\nimport ScheduleView from '@/components/ScheduleView'\n// import listPlugin from '@fullcalendar/list'\nimport { calendar } from \"./calendar\"\nexport default {\n  components: {\n    CardHeader, FullCalendar, Form, ScheduleView\n  },\n  props: {\n    title: { type: String, default: '' },\n    option: { type: Object, default: () => { } },\n    card: { type: Object, default: () => { } },\n    activeData: { type: Object, default: () => { } },\n    jnpfKey: { type: String, default: '' }\n  },\n  data() {\n    return {\n      calendarOptions: {},\n      creatorUserId: '',\n      calendarApi: '',\n      formVisible: false,\n      scheduleVisible: false,\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo'])\n  },\n  created() {\n    this.init()\n    this.creatorUserId = this.userInfo.userId\n\n  },\n  watch: {\n    'activeData.firstDay'(val) {\n      this.calendarOptions.firstDay = this.activeData.firstDay\n    },\n    'activeData.showLunarCalendar'(val) {\n      this.init()\n    },\n    'activeData.defaultView'(val) {\n      this.init()\n    }\n  },\n  mounted() {\n    this.$eventBus.$on('eChart' + this.activeData.i, () => {\n      this.$refs.calendar && this.$refs.calendar.calendar.updateSize()\n    })\n    this.$nextTick(() => {\n      this.$refs.calendar && this.$refs.calendar.calendar.updateSize()\n    })\n  },\n  methods: {\n    init() {\n      const that = this\n      this.calendarOptions = {\n        // 引入的插件，比如fullcalendar/daygrid，fullcalendar/timegrid引入后才可显示月，周，日\n        plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n        initialView: this.activeData.defaultView, // 默认为那个视图（月：dayGridMonth，周：timeGridWeek，日：timeGridDay）\n        firstDay: this.activeData.firstDay, // 设置一周中显示的第一天是哪天，周日是0，周一是1，类推\n        locale: 'zh-cn', // 切换语言，当前为中文\n        eventColor: '#3BB2E3', // 全部日历日程背景色\n        themeSystem: 'bootstrap', // 主题色(本地测试未能生效)\n        // initialDate: moment().format('YYYY-MM-DD'), // 自定义设置背景颜色时一定要初始化日期时间\n        aspectRatio: 1.65, // 设置日历单元格宽度与高度的比例。\n        // displayEventTime: false, // 是否显示时间\n        // allDaySlot: false, // 周，日视图时，all-day 不显示\n        allDayText: '全天',//设置all-day 标题\n        // eventLimit: true, // 设置月日程，与all-day slot的最大显示数量，超过的通过弹窗显示\n        headerToolbar: { // 日历头部按钮位置\n          left: 'prev next today',\n          center: 'title',\n          right: 'timeGridDay,timeGridWeek,dayGridMonth'\n        },\n        buttonText: {\n          today: '今天',\n          month: '月',\n          week: '周',\n          day: '日'\n        },\n        slotLabelFormat: {\n          hour: '2-digit',\n          minute: '2-digit',\n          meridiem: false,\n          hour12: false // 设置时间为24小时\n        },\n        // eventLimitNum: { // 事件显示数量限制(本地测试未能生效)\n        //   dayGrid: {\n        //     eventLimit: 5\n        //   },\n        //   timeGrid: {\n        //     eventLimit: 2 // adjust to 6 only for timeGridWeek/timeGridDay\n        //   }\n        // },\n        // 事件\n        dateClick: this.handleEventClick, // 点击日历日程事件\n        eventClick: this.eventClick, // 点击日历日程事件\n        events: [],\n        // eventDblClick: this.eventDblClick, // 双击日历日程事件 (这部分是在源码中添加的)\n        // eventClickDelete: this.eventClickDelete, // 点击删除标签事件 (这部分是在源码中添加的)\n        // eventDrop: this.eventDrop, // 拖动日历日程事件\n        // eventResize: this.eventResize, // 修改日历日程大小事件\n        // select: this.handleEventClick, // 选中日历格事件\n        // eventDidMount: this.eventDidMount, // 安装提示事件\n        // loading: this.loadingEvent, // 视图数据加载中、加载完成触发（用于配合显示/隐藏加载指示器。）\n        // selectAllow: this.selectAllow, //编程控制用户可以选择的地方，返回true则表示可选择，false表示不可选择\n        // eventMouseEnter: this.eventMouseEnter, // 鼠标滑过\n        // allowContextMenu: false,\n        editable: false, // 是否可以进行（拖动、缩放）修改\n        eventStartEditable: false, // Event日程开始时间可以改变，默认true，如果是false其实就是指日程块不能随意拖动，只能上下拉伸改变他的endTime\n        eventDurationEditable: false, // Event日程的开始结束时间距离是否可以改变，默认true，如果是false则表示开始结束时间范围不能拉伸，只能拖拽\n        selectable: false, // 是否可以选中日历格\n        selectMirror: false,\n        selectMinDistance: 0, // 选中日历格的最小距离\n        dayMaxEvents: false,\n        weekends: true,\n        navLinks: false, // 天链接\n        // selectHelper: false,\n        datesSet: this.datesRender,\n        slotEventOverlap: false, // 相同时间段的多个日程视觉上是否允许重叠，默认true允许\n        views: {\n          //对应月视图\n          dayGridMonth: {\n            displayEventTime: false,//是否显示时间\n            dayMaxEventRows: 3,\n            // eventMaxStack: 30,\n            // moreLinkContent: \"更多\",\n            moreLinkClick: \"popover\",\n            dayCellContent(item) {\n              let date = new Date(item.date);  // 参数需要毫秒数，所以这里将秒数乘于 1000\n              let Y = date.getFullYear() + '-';\n              let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n              let D = date.getDate()\n              let date_ = Y + M + D\n              let _date = date_.split('-')\n              let _dateF = calendar.solar2lunar(_date[0], _date[1], _date[2])\n              let myClass = ''\n              if (_dateF.isToday) myClass = 'today-month'\n              if (that.activeData.showLunarCalendar) {\n                let IDayCn = _dateF.IDayCn\n                if (IDayCn == '初一') IDayCn = _dateF.IMonthCn\n                return { html: `<p class='calendar-right'><label class='${myClass}'>${_dateF.cDay}</label><span>${IDayCn}</span></p>` }\n              }\n              return { html: `<p class='calendar-right'><label class='${myClass}'>${_dateF.cDay}</label></p>` }\n            },\n          },\n          //对应周视图调整\n          timeGridWeek: {\n            // slotMinTime: \"09:00\",//周视图开始时间\n            // slotMaxTime: \"20:00\",//周视图结束时间\n            displayEventTime: false,//是否显示时间\n            dayHeaderContent(item) {\n              let date = new Date(item.date);  // 参数需要毫秒数，所以这里将秒数乘于 1000\n              let Y = date.getFullYear() + '-';\n              let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n              let D = date.getDate()\n              let date_ = Y + M + D\n              let _date = date_.split('-')\n              let _dateF = calendar.solar2lunar(_date[0], _date[1], _date[2])\n              let myClass = 'calender-week'\n              if (_dateF.isToday) myClass = 'calender-week today-week'\n              if (that.activeData.showLunarCalendar) {\n                const htmlVal = `<div class='${myClass}'>${_dateF.cDay}</div><div class=\"list-week\"><div>周${_dateF.ncWeek.slice(2)}</div><div class='list-calendar'>${_dateF.IDayCn}</div></div></div>`\n                return {\n                  html: htmlVal\n                }\n              }\n              return { html: `<div class='${myClass}'>${_dateF.cDay}</div><div class='list-week'><div >周${_dateF.ncWeek.slice(2)}</div></div></div>` }\n            }\n          },\n          timeGridDay: {\n            // slotMinTime: \"09:00\",//周视图开始时间\n            // slotMaxTime: \"20:00\",//周视图结束时间\n            displayEventTime: false,//是否显示时间\n            dayHeaderContent(item) {\n              let date = new Date(item.date);  // 参数需要毫秒数，所以这里将秒数乘于 1000\n              let Y = date.getFullYear() + '-';\n              let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n              let D = date.getDate()\n              let date_ = Y + M + D\n              let _date = date_.split('-')\n              let _dateF = calendar.solar2lunar(_date[0], _date[1], _date[2])\n              let myClass = 'calender-week'\n              if (_dateF.isToday) myClass = 'calender-week today-week'\n              if (that.activeData.showLunarCalendar) {\n                return {\n                  html: `<div class='${myClass}'>${_dateF.cDay}</div><div class='list-week'><div>周${_dateF.ncWeek.slice(2)}</div><div class='list-calendar'>${_dateF.IDayCn}</div></div></div>`\n                }\n              }\n              return { html: `<div class='${myClass}'>${_dateF.cDay}</div><div class='list-week'><div >周${_dateF.ncWeek.slice(2)}</div></div></div>` }\n\n            }\n          }\n        },\n\n      }\n    },\n    datesRender(calendar) {\n      let view = calendar.view\n      this.startTime = this.jnpf.toDate(view.activeStart, \"yyyy-MM-dd HH:mm\")\n      this.endTime = this.jnpf.toDate(view.activeEnd, \"yyyy-MM-dd HH:mm\")\n      this.initData()\n    },\n    handleEventClick(arg) {\n      let startTime = this.jnpf.toDate(arg.date, \"yyyy-MM-dd HH:00\"),\n        clickTime = this.jnpf.toDate(arg.date, \"yyyyMMdd\"),\n        currTime = this.jnpf.toDate(new Date(), \"yyyyMMdd\");\n      if (clickTime == currTime) {\n        let thisDate = new Date();\n        thisDate.setHours(thisDate.getHours() + 1);\n        startTime = this.jnpf.toDate(thisDate, \"yyyy-MM-dd HH:00\");\n      }\n      this.addOrUpdateHandle('', startTime)\n      this.addOrUpdateHandle('', new Date(startTime).getTime())\n    },\n    eventClick(data) {\n      this.addOrUpdateHandle(data.event.id, '', data.event.extendedProps.creatorUserId)\n    },\n    initData() {\n      let query = {\n        startTime: this.startTime,\n        endTime: this.endTime,\n      }\n      List(query).then(res => {\n        this.calendarOptions.events = res.data.list.map(o => {\n          return {\n            id: o.id,\n            title: o.title,\n            start: o.startDay,\n            end: o.endDay,\n            color: o.color,\n            editable: false,\n            allDay: o.allDay,\n            creatorUserId: o.creatorUserId\n          }\n        })\n      })\n    },\n    // 新增 / 修改\n    addOrUpdateHandle(id, startTime, creatorUserId) {\n      if (id && (creatorUserId != this.creatorUserId)) {\n        this.scheduleVisible = true\n        this.$nextTick(() => {\n          this.$refs.schedule.init(id, 1, '')\n        })\n        return\n      }\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(id, startTime, this.activeData.duration)\n      })\n    },\n    refreshDataList() {\n      this.formVisible = false\n      this.scheduleVisible = false\n      this.initData()\n    }\n  }\n}\n",null]}