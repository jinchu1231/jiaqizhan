{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/StartNode.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/StartNode.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FlowFormModal from './FormListModal';\nimport Condition from \"@/components/ColumnDesign/condition\";\nimport { noticeOptions, msgUserOptions } from '../FlowCard/define.js';\nimport MsgDialog from '@/components/Process/PropPanel/msgDialog'\nimport Detail from '@/components/Process/PropPanel/TemplateDetail'\nimport vcrontab from \"vcrontab\"\nimport clipboard from '@/utils/clipboard'\nimport BatchDialog from './model/BatchDialog'\nimport WebhookRequestDialog from './model/WebhookRequestDialog'\nimport store from '@/store'\nconst triggerEventOptions = [\n  { id: 1, fullName: '新增数据' },\n  { id: 2, fullName: '修改数据' },\n  { id: 3, fullName: '删除数据' },\n];\nconst endTimeTypeOptions = [\n  { id: 1, fullName: '触发次数' },\n  { id: 2, fullName: '指定时间' },\n  { id: 3, fullName: '不结束' },\n];\nexport default {\n  name: 'StartNode',\n  components: { FlowFormModal, Condition, MsgDialog, Detail, vcrontab, BatchDialog, WebhookRequestDialog },\n  props: {\n    formConf: {\n      type: Object,\n      default: () => { }\n    },\n    integrateType: {\n      type: Number,\n      default: 1\n    },\n    formFieldsOptions: {\n      type: Array,\n      default: () => []\n    },\n    getFormFieldList: {\n      type: Function,\n      default: null\n    },\n    formInfo: {\n      type: Object,\n      default: () => { }\n    }\n  },\n  data() {\n    return {\n      activeKey: '1',\n      triggerEventOptions,\n      columnOptions: [],\n      msgUserOptions,\n      props: {\n        label: \"fullName\",\n        value: \"id\"\n      },\n      noticeOptions,\n      viewVisible: false,\n      showCron: false,\n      showCrontab: true,\n      endTimeTypeOptions,\n      jsonVisible: false,\n      webhookRequestVisible: false,\n      formId: JSON.parse(JSON.stringify(this.formConf.formId))\n    }\n  },\n  created() {\n    if (this.integrateType == 3) this.formConf.formFieldList = this.formConf.formFieldList.filter(o => o.id !== '@formId')\n  },\n  computed: {\n    formFieldList() {\n      return this.formConf.formFieldList.filter(o => o.id.indexOf('-') < 0)\n    },\n    getWebhookUrl() {\n      const sysConfig = store.getters && store.getters.sysConfig\n      return sysConfig.jnpfDomain + this.formConf.webhookUrl\n    }\n  },\n  methods: {\n    getFormConf() {\n      let isOk = false\n      if (this.integrateType == 1) {\n        if (!this.formConf.formId) {\n          this.$message.error('请选择触发表单');\n          return isOk\n        }\n        let item = this.$refs.base && this.$refs.base.getData() || ''\n        if (!item) return isOk;\n        this.formConf.ruleMatchLogic = item.matchLogic\n        this.formConf.ruleList = item.conditionList\n        if (!this.formConf.ruleList || !this.validData()) {\n          return isOk;\n        }\n      } else if (this.integrateType == 2) {\n        if (!this.formConf.startTime) {\n          this.$message.error('请选择触发开始时间');\n          return isOk\n        }\n        if (!this.formConf.cron) {\n          this.$message.error('请设置Cron表达式');\n          return isOk\n        }\n        if (this.formConf.endTimeType == 2 && !this.formConf.endTime) {\n          this.$message.error('请选择触发结束时间');\n          return isOk\n        }\n        if (this.formConf.startMsgConfig.on == 1 && !this.formConf.startMsgConfig.msgId) {\n          this.$message.error('请选择开始执行发送配置');\n          return isOk\n        }\n        if (this.formConf.failMsgConfig.on == 1 && !this.formConf.failMsgConfig.msgId) {\n          this.$message.error('请选择执行失败发送配置');\n          return isOk\n        }\n      } else {\n        if (!this.formConf.formFieldList.length) {\n          this.$message.error('请设置接口字段');\n          return isOk\n        }\n        if (!this.formFieldListExist()) return;\n        if (this.formConf.failMsgConfig.on === 1 && !this.formConf.failMsgConfig.msgId) {\n          this.$message.error('请选择执行失败发送配置');\n\n        }\n        if (this.formConf.startMsgConfig.on === 1 && !this.formConf.startMsgConfig.msgId) {\n          this.$message.error('请选择开始执行发送配置');\n          return isOk\n        }\n      }\n      return this.formConf;\n    },\n    getCrontabValue() {\n      this.$refs.vcrontab && this.$refs.vcrontab.submitFill()\n    },\n    resetCrontab() {\n      this.$refs.vcrontab && this.$refs.vcrontab.clearCron()\n    },\n    crontabFill(value) {\n      this.formConf.cron = value\n    },\n    showDialog() {\n      this.showCron = true\n      this.showCrontab = true\n    },\n    validData() {\n      let isOk = true;\n      for (let i = 0; i < this.formConf.ruleList.length; i++) {\n        const e = this.formConf.ruleList[i];\n        for (let j = 0; j < e.groups.length; j++) {\n          const child = e.groups[j];\n          if (!child.field) {\n            this.$message.warning('条件字段不能为空');\n            isOk = false;\n            break;\n          }\n          if (!child.symbol) {\n            this.$message.warning('条件符号不能为空');\n            isOk = false;\n            break;\n          }\n          if (\n            !['null', 'notNull'].includes(child.symbol) && !['switch'].includes(child.jnpfKey) &&\n            (!child.fieldValue || this.jnpf.isEmpty(child.fieldValue)) &&\n            (!['inputNumber', 'calculate', 'rate'].includes(child.jnpfKey) || (['inputNumber', 'calculate', 'rate'].includes(child.jnpfKey) && child.fieldValue !== 0))\n          ) {\n            this.$message.warning('数据值不能为空');\n            isOk = false;\n            break;\n          }\n        }\n      }\n      return isOk;\n    },\n    onFormIdChange(id, item) {\n      if (!id) return this.handleNull();\n      this.formConf.ruleList = []\n      this.getFormFieldList(id, 'start');\n      if (this.formConf.formId == id) return\n      this.formConf.formName = item.fullName;\n      this.formConf.formId = id;\n    },\n    handleNull() {\n      this.formConf.formName = '';\n      this.formConf.formId = '';\n      this.formConf.formFieldList = [];\n      this.formConf.ruleList = []\n    },\n    onRelationFieldChange(val, item) {\n      if (!val) return\n      let list = this.formFieldsOptions.filter(o => val === o.__vModel__)\n      if (!list.length) return\n      let obj = list[0]\n      this.$set(item, 'isSubTable', obj.__config__ && obj.__config__.isSubTable ? obj.__config__.isSubTable : false)\n    },\n    onMsgChange(obj, key, params) {\n      const [id, item] = params\n      if (!id) {\n        this[obj][key].msgId = ''\n        this[obj][key].msgName = ''\n        this[obj][key].templateJson = []\n        return\n      }\n      if (this[obj][key].msgId === id) return\n      this[obj][key].msgId = id\n      this[obj][key].msgName = item.fullName\n      this[obj][key].templateJson = item.templateJson\n    },\n    goDetail(id) {\n      this.viewVisible = true\n      this.$nextTick(() => {\n        this.$refs.View.init(id)\n      })\n    },\n    oneEndLimitChange(val) {\n      this.$nextTick(() => {\n        if (!val) this.formConf.endLimit = 1;\n      })\n    },\n    addItem() {\n      this.formConf.formFieldList.push({ id: '', fullName: '', label: '' });\n    },\n    delItem(index) {\n      this.formConf.formFieldList.splice(index, 1);\n    },\n    onItemChange(item) {\n      item.label = item.fullName ? item.id + '(' + item.fullName + ')' : item.id;\n    },\n    handleCopy(event) {\n      clipboard(this.getWebhookUrl, event)\n    },\n    openBatch() {\n      this.jsonVisible = true\n      this.$nextTick(() => {\n        this.$refs.jsonBatch.init()\n      })\n    },\n    openWebhookRequest() {\n      this.webhookRequestVisible = true\n      this.$nextTick(() => {\n        this.$refs.webhookRequest.init({ url: this.formConf.webhookGetFieldsUrl, randomStr: this.formConf.webhookRandomStr, id: this.formInfo.id })\n      })\n    },\n    addItemForOther(data) {\n      this.webhookRequestVisible = false\n      this.jsonVisible = false\n      const list = data.map(o => ({ ...o, label: o.fullName ? o.id + '(' + o.fullName + ')' : o.id }));\n      if (!this.formConf.formFieldList.length) return (this.formConf.formFieldList = list);\n      for (let i = 0; i < list.length; i++) {\n        const e = list[i];\n        if (!e.id) {\n          this.formConf.formFieldList.push(e);\n        } else {\n          const findIndex = this.formConf.formFieldList.findIndex(o => o.id === e.id);\n          findIndex < 0 ? this.formConf.formFieldList.push(e) : (this.formConf.formFieldList[findIndex] = e);\n        }\n      }\n    },\n    // webhook接口字段验证\n    formFieldListExist() {\n      const list = this.formConf.formFieldList;\n      let isOk = true;\n      for (let i = 0; i < list.length; i++) {\n        const e = list[i];\n        if (!e.id) {\n          this.$message.warning(`第${i + 1}行字段不能为空`);\n          isOk = false;\n          break;\n        }\n        if (!e.fullName) {\n          this.$message.warning(`第${i + 1}行字段说明不能为空`);\n          isOk = false;\n          break;\n        }\n      }\n      return isOk;\n    }\n  }\n\n}\n\n",null]}