{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/GetDataNode.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/GetDataNode.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Condition from \"@/components/ColumnDesign/condition\";\nimport FlowFormModal from './FormListModal';\nimport InterfaceDialog from '@/components/Process/PropPanel/InterfaceDialog'\nimport { getConfigData } from '@/api/onlineDev/visualDev'\nconst interfaceSourceTypeOptions = [\n  { id: 2, fullName: '自定义' },\n  { id: 3, fullName: '为空' },\n];\nconst emptyChildItem = { field: '', symbol: '==', fieldValueType: 1, fieldValue: undefined, jnpfKey: '', fieldValueJnpfKey: '', cellKey: +new Date() };\nconst emptyItem = { logic: 'and', groups: [emptyChildItem] };\n\nexport default {\n  name: 'addDataNode',\n  components: { Condition, FlowFormModal, InterfaceDialog },\n  props: {\n    formConf: {\n      type: Object,\n      default: () => { }\n    },\n    integrateType: {\n      type: Number,\n      default: 1\n    },\n    formFieldsOptions: {\n      type: Array,\n      default: () => []\n    },\n    usedFormItems: {\n      type: Array,\n      default: () => []\n    },\n  },\n  data() {\n    return {\n      dataForm: JSON.parse(JSON.stringify(this.formConf)),\n      interfaceSourceTypeOptions\n    }\n  },\n  methods: {\n    getItem() {\n      let item = this.$refs.base && this.$refs.base.getData() || ''\n      this.dataForm.ruleList = item ? item.conditionList : []\n      if (!this.validData()) {\n        return '';\n      }\n      return this.dataForm\n    },\n    onFormTypeChange() {\n      this.handleNull();\n    },\n    handleNull() {\n      this.dataForm.formName = '';\n      this.dataForm.formId = '';\n      this.dataForm.formFieldList = [];\n      this.dataForm.ruleList = [];\n      this.dataForm.interfaceTemplateJson = [];\n    },\n    validData() {\n      let isOk = true;\n      for (let i = 0; i < this.dataForm.ruleList.length; i++) {\n        const e = this.dataForm.ruleList[i];\n        for (let j = 0; j < e.groups.length; j++) {\n          const child = e.groups[j];\n          if (!child.field) {\n            this.$message.warning('条件字段不能为空');\n            isOk = false;\n            return;\n          }\n          if (!child.symbol) {\n            this.$message.warning('条件符号不能为空');\n            isOk = false;\n            return;\n          }\n          if (\n            !['null', 'notNull'].includes(child.symbol) &&\n            (!child.fieldValue || this.jnpf.isEmpty(child.fieldValue)) &&\n            (!['inputNumber', 'calculate'].includes(child.jnpfKey) || (['inputNumber', 'calculate'].includes(child.jnpfKey) && child.fieldValue !== 0))\n          ) {\n            this.$message.warning('数据值不能为空');\n            isOk = false;\n            return;\n          }\n        }\n      }\n      return isOk;\n    },\n    onInterfaceChange(id, item) {\n      if (!id) return this.handleNull();\n      if (this.dataForm.formId === id) return;\n      this.dataForm.formName = item.fullName;\n      this.dataForm.formId = id;\n      this.dataForm.ruleList = [];\n      const formFieldList = item.fieldJson ? JSON.parse(item.fieldJson) : [];\n      this.dataForm.formFieldList = formFieldList.map(o => ({\n        ...o,\n        id: o.defaultValue,\n        fullName: o.field,\n        label: o.field ? o.defaultValue + '(' + o.field + ')' : o.defaultValue,\n      }));\n      this.dataForm.interfaceTemplateJson = (item.templateJson || []).map(o => ({ ...o, sourceType: 2, relationField: '' }));\n    },\n    onFormIdChange(id, item) {\n      if (!id) return this.handleNull();\n      this.dataForm.formName = item.fullName;\n      this.dataForm.formId = id;\n      this.dataForm.ruleList = [];\n      this.getFormFieldList(id);\n    },\n    getFormFieldList(id) {\n      getConfigData(id).then(res => {\n        const { formData, enableFlow, flowId } = res.data;\n        let formJson = {},\n          fieldList = [];\n        if (formData) formJson = JSON.parse(formData);\n        fieldList = formJson.fields || [];\n        let list = this.transformFieldList(fieldList);\n        this.dataForm.formFieldList = list.map(o => ({ ...o, label: o.fullName ? o.id + '(' + o.fullName + ')' : o.id }));\n      });\n    },\n    transformFormJson(list) {\n      const fieldList = list.map(o => ({\n        __config__: {\n          label: o.filedName,\n          jnpfKey: o.jnpfKey || '',\n          required: o.required || false,\n        },\n        __vModel__: o.filedId,\n        multiple: o.multiple || false,\n      }));\n      return fieldList;\n    },\n    transformFieldList(formFieldList) {\n      let list = [];\n      const loop = (data, parent) => {\n        if (!data) return;\n        if (data.__vModel__ && data.__config__.jnpfKey !== 'table') {\n          const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table';\n          list.push({\n            id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n            ...data,\n          });\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent));\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data);\n        }\n      };\n      loop(formFieldList);\n      return list;\n    },\n  }\n}\n\n",null]}