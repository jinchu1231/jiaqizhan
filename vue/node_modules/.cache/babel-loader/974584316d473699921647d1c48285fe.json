{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/node_modules/_vue-esign@1.1.4@vue-esign/src/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-esign@1.1.4@vue-esign/src/index.vue","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/toConsumableArray.js\"));\nrequire(\"core-js/modules/es6.number.constructor\");\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  props: {\n    width: {\n      type: Number,\n      default: 800\n    },\n    height: {\n      type: Number,\n      default: 300\n    },\n    lineWidth: {\n      type: Number,\n      default: 4\n    },\n    lineColor: {\n      type: String,\n      default: '#000000'\n    },\n    bgColor: {\n      type: String,\n      default: ''\n    },\n    isCrop: {\n      type: Boolean,\n      default: false\n    },\n    isClearBgColor: {\n      type: Boolean,\n      default: true\n    },\n    format: {\n      type: String,\n      default: 'image/png'\n    },\n    quality: {\n      type: Number,\n      default: 1\n    }\n  },\n  data: function data() {\n    return {\n      hasDrew: false,\n      resultImg: '',\n      points: [],\n      canvasTxt: null,\n      startX: 0,\n      startY: 0,\n      isDrawing: false,\n      sratio: 1\n    };\n  },\n  computed: {\n    ratio: function ratio() {\n      return this.height / this.width;\n    },\n    stageInfo: function stageInfo() {\n      return this.$refs.canvas.getBoundingClientRect();\n    },\n    myBg: function myBg() {\n      return this.bgColor ? this.bgColor : 'rgba(255, 255, 255, 0)';\n    }\n  },\n  watch: {\n    'myBg': function myBg(newVal) {\n      this.$refs.canvas.style.background = newVal;\n    }\n  },\n  beforeMount: function beforeMount() {\n    window.addEventListener('resize', this.$_resizeHandler);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.$_resizeHandler);\n  },\n  mounted: function mounted() {\n    var _this = this;\n    var canvas = this.$refs.canvas;\n    canvas.height = this.height;\n    canvas.width = this.width;\n    canvas.style.background = this.myBg;\n    this.$_resizeHandler();\n    // 在画板以外松开鼠标后冻结画笔\n    document.onmouseup = function () {\n      _this.isDrawing = false;\n    };\n  },\n  methods: {\n    $_resizeHandler: function $_resizeHandler() {\n      var canvas = this.$refs.canvas;\n      canvas.style.width = this.width + \"px\";\n      var realw = parseFloat(window.getComputedStyle(canvas).width);\n      canvas.style.height = this.ratio * realw + \"px\";\n      this.canvasTxt = canvas.getContext('2d');\n      this.canvasTxt.scale(1 * this.sratio, 1 * this.sratio);\n      this.sratio = realw / this.width;\n      this.canvasTxt.scale(1 / this.sratio, 1 / this.sratio);\n    },\n    // pc\n    mouseDown: function mouseDown(e) {\n      e = e || event;\n      e.preventDefault();\n      this.isDrawing = true;\n      this.hasDrew = true;\n      var obj = {\n        x: e.offsetX,\n        y: e.offsetY\n      };\n      this.drawStart(obj);\n    },\n    mouseMove: function mouseMove(e) {\n      e = e || event;\n      e.preventDefault();\n      if (this.isDrawing) {\n        var obj = {\n          x: e.offsetX,\n          y: e.offsetY\n        };\n        this.drawMove(obj);\n      }\n    },\n    mouseUp: function mouseUp(e) {\n      e = e || event;\n      e.preventDefault();\n      var obj = {\n        x: e.offsetX,\n        y: e.offsetY\n      };\n      this.drawEnd(obj);\n      this.isDrawing = false;\n    },\n    // mobile\n    touchStart: function touchStart(e) {\n      e = e || event;\n      e.preventDefault();\n      this.hasDrew = true;\n      if (e.touches.length === 1) {\n        var obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        };\n        this.drawStart(obj);\n      }\n    },\n    touchMove: function touchMove(e) {\n      e = e || event;\n      e.preventDefault();\n      if (e.touches.length === 1) {\n        var obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        };\n        this.drawMove(obj);\n      }\n    },\n    touchEnd: function touchEnd(e) {\n      e = e || event;\n      e.preventDefault();\n      if (e.touches.length === 1) {\n        var obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        };\n        this.drawEnd(obj);\n      }\n    },\n    // 绘制\n    drawStart: function drawStart(obj) {\n      this.startX = obj.x;\n      this.startY = obj.y;\n      this.canvasTxt.beginPath();\n      this.canvasTxt.moveTo(this.startX, this.startY);\n      this.canvasTxt.lineTo(obj.x, obj.y);\n      this.canvasTxt.lineCap = 'round';\n      this.canvasTxt.lineJoin = 'round';\n      this.canvasTxt.lineWidth = this.lineWidth * this.sratio;\n      this.canvasTxt.stroke();\n      this.canvasTxt.closePath();\n      this.points.push(obj);\n    },\n    drawMove: function drawMove(obj) {\n      this.canvasTxt.beginPath();\n      this.canvasTxt.moveTo(this.startX, this.startY);\n      this.canvasTxt.lineTo(obj.x, obj.y);\n      this.canvasTxt.strokeStyle = this.lineColor;\n      this.canvasTxt.lineWidth = this.lineWidth * this.sratio;\n      this.canvasTxt.lineCap = 'round';\n      this.canvasTxt.lineJoin = 'round';\n      this.canvasTxt.stroke();\n      this.canvasTxt.closePath();\n      this.startY = obj.y;\n      this.startX = obj.x;\n      this.points.push(obj);\n    },\n    drawEnd: function drawEnd(obj) {\n      this.canvasTxt.beginPath();\n      this.canvasTxt.moveTo(this.startX, this.startY);\n      this.canvasTxt.lineTo(obj.x, obj.y);\n      this.canvasTxt.lineCap = 'round';\n      this.canvasTxt.lineJoin = 'round';\n      this.canvasTxt.stroke();\n      this.canvasTxt.closePath();\n      this.points.push(obj);\n      this.points.push({\n        x: -1,\n        y: -1\n      });\n    },\n    // 操作\n    generate: function generate(options) {\n      var _this2 = this;\n      var imgFormat = options && options.format ? options.format : this.format;\n      var imgQuality = options && options.quality ? options.quality : this.quality;\n      var pm = new Promise(function (resolve, reject) {\n        if (!_this2.hasDrew) {\n          reject(\"Warning: Not Signned!\");\n          return;\n        }\n        var resImgData = _this2.canvasTxt.getImageData(0, 0, _this2.$refs.canvas.width, _this2.$refs.canvas.height);\n        _this2.canvasTxt.globalCompositeOperation = \"destination-over\";\n        _this2.canvasTxt.fillStyle = _this2.myBg;\n        _this2.canvasTxt.fillRect(0, 0, _this2.$refs.canvas.width, _this2.$refs.canvas.height);\n        _this2.resultImg = _this2.$refs.canvas.toDataURL(imgFormat, imgQuality);\n        var resultImg = _this2.resultImg;\n        _this2.canvasTxt.clearRect(0, 0, _this2.$refs.canvas.width, _this2.$refs.canvas.height);\n        _this2.canvasTxt.putImageData(resImgData, 0, 0);\n        _this2.canvasTxt.globalCompositeOperation = \"source-over\";\n        if (_this2.isCrop) {\n          var _this2$canvasTxt;\n          var crop_area = _this2.getCropArea(resImgData.data);\n          var crop_canvas = document.createElement('canvas');\n          var crop_ctx = crop_canvas.getContext('2d');\n          crop_canvas.width = crop_area[2] - crop_area[0];\n          crop_canvas.height = crop_area[3] - crop_area[1];\n          var crop_imgData = (_this2$canvasTxt = _this2.canvasTxt).getImageData.apply(_this2$canvasTxt, (0, _toConsumableArray2.default)(crop_area));\n          crop_ctx.globalCompositeOperation = \"destination-over\";\n          crop_ctx.putImageData(crop_imgData, 0, 0);\n          crop_ctx.fillStyle = _this2.myBg;\n          crop_ctx.fillRect(0, 0, crop_canvas.width, crop_canvas.height);\n          resultImg = crop_canvas.toDataURL(imgFormat, imgQuality);\n          crop_canvas = null;\n        }\n        resolve(resultImg);\n      });\n      return pm;\n    },\n    reset: function reset() {\n      this.canvasTxt.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\n      if (this.isClearBgColor) {\n        this.$emit('update:bgColor', '');\n        this.$refs.canvas.style.background = 'rgba(255, 255, 255, 0)';\n      }\n      this.points = [];\n      this.hasDrew = false;\n      this.resultImg = '';\n    },\n    getCropArea: function getCropArea(imgData) {\n      var topX = this.$refs.canvas.width;\n      var btmX = 0;\n      var topY = this.$refs.canvas.height;\n      var btnY = 0;\n      for (var i = 0; i < this.$refs.canvas.width; i++) {\n        for (var j = 0; j < this.$refs.canvas.height; j++) {\n          var pos = (i + this.$refs.canvas.width * j) * 4;\n          if (imgData[pos] > 0 || imgData[pos + 1] > 0 || imgData[pos + 2] || imgData[pos + 3] > 0) {\n            btnY = Math.max(j, btnY);\n            btmX = Math.max(i, btmX);\n            topY = Math.min(j, topY);\n            topX = Math.min(i, topX);\n          }\n        }\n      }\n      topX++;\n      btmX++;\n      topY++;\n      btnY++;\n      var data = [topX, topY, btmX, btnY];\n      return data;\n    }\n  }\n};",null]}