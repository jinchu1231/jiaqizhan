{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/OrgTransfer/orgTransfer.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/OrgTransfer/orgTransfer.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'JNPF-transfer',\n  data() {\n    return {\n      selectedData: [],\n      selectedTextData: [],\n      filterText: '',\n      activeName: 'organize',\n    }\n  },\n  props: {\n    height: {\n      type: String,\n      default: \"400px\"\n    },\n    dynamicList: {\n      type: Array,\n      default: () => []\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    treeData: {\n      type: Array,\n      default: () => []\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    props: {\n      type: Object,\n      default: () => {\n        return { value: \"id\", label: \"fullName\", children: \"children\" };\n      }\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    allList() {\n      return this.$store.getters.departmentList || []\n    }\n  },\n  watch: {\n    value(val) {\n      this.initHandle()\n    },\n  },\n  methods: {\n    initHandle() {\n      if (!this.value || !this.value.length) {\n        this.selectedTextData = [];\n        this.selectedData = [];\n        return\n      }\n      let allList = [...this.dynamicList, ...this.allList]\n      let selectedData = this.value\n      this.selectedData = JSON.parse(JSON.stringify(selectedData))\n      let textList = []\n      for (let i = 0; i < selectedData.length; i++) {\n        const item = selectedData[i];\n        let textItem = JSON.parse(JSON.stringify(item))\n        for (let j = 0; j < item.length; j++) {\n          inner: for (let ii = 0; ii < allList.length; ii++) {\n            if (item[j] === allList[ii].id) {\n              textItem[j] = allList[ii].fullName\n              break inner\n            }\n          }\n        }\n        textList.push(textItem)\n      }\n      this.selectedTextData = textList.map(o => o.join('/'))\n    },\n    search() {\n      this.$refs.treeBox.filter(this.filterText);\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.fullName.indexOf(value) !== -1;\n    },\n    handleNodeClick(data) {\n      let currId = data.organizeIds\n      let currData = data.organize\n      const boo = this.selectedData.some(o => o.join('/') === currId.join('/'))\n      if (boo) return\n      this.selectedData.push(currId)\n      this.selectedTextData.push(currData)\n      this.$emit('input', this.selectedData)\n      this.$emit('getValue', this.selectedData, this.selectedTextData)\n    },\n    removeData(item, index) {\n      this.selectedData.splice(index, 1)\n      this.selectedTextData.splice(index, 1)\n      this.$emit('input', this.selectedData)\n      this.$emit('getValue', this.selectedData, this.selectedTextData)\n    },\n    removeAll() {\n      this.selectedData = []\n      this.selectedTextData = []\n      this.$emit('input', this.selectedData)\n      this.$emit('getValue', this.selectedData, this.selectedTextData)\n    },\n  }\n};\n",null]}