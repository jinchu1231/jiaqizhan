{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightPanel.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightPanel.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { noVModelList, calculateItem, onlinePeculiarList } from '@/components/Generator/generator/comConfig'\nimport { inputComponents, selectComponents, systemComponents, layoutComponents } from '@/components/Generator/generator/config'\nimport { isNumberStr } from '@/components/Generator/utils'\nimport { saveFormConf, getDrawingList } from '@/components/Generator/utils/db'\nimport { getDictionaryTypeSelector } from \"@/api/systemData/dictionary\"\nimport { getDataInterfaceSelector } from \"@/api/systemData/dataInterface\"\nimport { DataModelFieldList } from '@/api/systemData/dataModel'\nimport { getPrintDevSelector } from '@/api/system/printDev'\nimport FormScript from './FormScript'\nimport FieldDialog from './FieldDialog'\nimport RInput from './RightComponents/RInput'\nimport RTextarea from './RightComponents/RTextarea'\nimport RLink from './RightComponents/RLink'\nimport RText from './RightComponents/RText'\nimport RAlert from './RightComponents/RAlert'\nimport RInputNumber from './RightComponents/RInputNumber'\nimport RRadio from './RightComponents/RRadio'\nimport RCheckbox from './RightComponents/RCheckbox'\nimport RSelect from './RightComponents/RSelect'\nimport RCascader from './RightComponents/RCascader/index'\nimport RTimePicker from './RightComponents/RTimePicker'\nimport RTimeRange from './RightComponents/RTimeRange'\nimport RDatePicker from './RightComponents/RDatePicker'\nimport RDateRange from './RightComponents/RDateRange'\nimport RColorPicker from './RightComponents/RColorPicker'\nimport RRate from './RightComponents/RRate'\nimport RSwitch from './RightComponents/RSwitch'\nimport RSlider from './RightComponents/RSlider'\nimport RDivider from './RightComponents/RDivider'\nimport RUploadFile from './RightComponents/RUploadFile'\nimport RUploadImg from './RightComponents/RUploadImg'\nimport ComRight from './RightComponents/ComRight'\nimport RAreaSelect from './RightComponents/RAreaSelect'\nimport RTreeSelect from './RightComponents/RTreeSelect'\nimport RGroupTitle from './RightComponents/RGroupTitle'\nimport RRelationForm from './RightComponents/RRelationForm'\nimport RRelationFormAttr from './RightComponents/RRelationFormAttr'\nimport RCalculate from './RightComponents/RCalculate'\nimport RPopupSelect from './RightComponents/RPopupSelect'\nimport RAutoComplete from './RightComponents/RAutoComplete'\nimport RPopupAttr from './RightComponents/RPopupAttr'\nimport RTab from './RightComponents/RTab'\nimport RCollapse from './RightComponents/RCollapse'\nimport TableConfig from './RightComponents/RTable'\nimport StyleScript from './StyleScript'\nimport RIframe from './RightComponents/RIframe'\nimport RSign from './RightComponents/RSign'\nimport RLocation from './RightComponents/RLocation'\nconst commonRightList = ['organizeSelect', 'depSelect', 'posSelect', 'userSelect', 'usersSelect', 'groupSelect', \"roleSelect\", 'editor']\nconst systemList = ['createUser', 'createTime', 'modifyUser', 'modifyTime', 'currOrganize', 'currDept', 'currPosition', 'billRule']\n//不设置宽度\nconst noWithList = ['switch', 'radio', 'checkbox', 'uploadFile', 'uploadImg', 'colorPicker', 'rate', 'link', 'button', 'text', 'alert', 'qrcode', 'barcode']\nconst layoutList = [\"groupTitle\", 'divider', 'collapse', 'tab', 'row', 'card', 'table']\n\nexport default {\n  components: {\n    StyleScript,\n    FormScript,\n    FieldDialog,\n    RInput,\n    RTextarea,\n    RInputNumber,\n    RLink,\n    RText,\n    RAlert,\n    RRadio,\n    RCheckbox,\n    RSelect,\n    RCascader,\n    RTimePicker,\n    RTimeRange,\n    RDatePicker,\n    RDateRange,\n    RColorPicker,\n    RRate,\n    RSwitch,\n    RSlider,\n    RDivider,\n    RUploadFile,\n    RUploadImg,\n    ComRight,\n    RAreaSelect,\n    RTreeSelect,\n    RGroupTitle,\n    RRelationForm,\n    RRelationFormAttr,\n    RCalculate,\n    RPopupSelect,\n    RPopupAttr,\n    RTab,\n    RCollapse,\n    TableConfig,\n    RAutoComplete,\n    RIframe,\n    RSign,\n    RLocation\n  },\n  inject: [\"getShowType\", \"getFormInfo\"],\n  props: ['showField', 'activeData', 'formConf', 'modelType', 'webType', 'drawingList', 'formInfo'],\n  data() {\n    return {\n      currentTab: 'field',\n      currentNode: null,\n      dialogVisible: false,\n      iconsVisible: false,\n      formScriptVisible: false,\n      fieldDialogVisible: false,\n      comScriptVisible: false,\n      currentIconModel: null,\n      activeScript: '',\n      activeFunc: '',\n      isConf: false,\n      noVModelList,\n      printTplList: [],\n      fieldOptions: [],\n      dictionaryOptions: [],\n      dataInterfaceOptions: [],\n      styleScriptVisible: false,\n      storageType: [\n        {\n          label: '展示数据',\n          value: 0\n        }, {\n          label: '存储数据',\n          value: 1\n        }],\n      justifyOptions: [\n        {\n          label: 'start',\n          value: 'start'\n        },\n        {\n          label: 'end',\n          value: 'end'\n        },\n        {\n          label: 'center',\n          value: 'center'\n        },\n        {\n          label: 'space-around',\n          value: 'space-around'\n        },\n        {\n          label: 'space-between',\n          value: 'space-between'\n        }\n      ],\n      barcodeFormatOptions: [\n        {\n          label: 'code128',\n          value: 'code128'\n        },\n        {\n          label: 'ean13',\n          value: 'ean13'\n        },\n        {\n          label: 'ean8',\n          value: 'ean8'\n        },\n        {\n          label: 'ean5',\n          value: 'ean5'\n        },\n        {\n          label: 'ean2',\n          value: 'ean2'\n        },\n        {\n          label: 'code39',\n          value: 'code39'\n        },\n        {\n          label: 'itf14',\n          value: 'itf14'\n        },\n        {\n          label: 'msi10',\n          value: 'msi10'\n        },\n        {\n          label: 'msi11',\n          value: 'msi11'\n        },\n        {\n          label: 'pharmacode',\n          value: 'pharmacode'\n        },\n        {\n          label: 'upc',\n          value: 'upc'\n        },\n        {\n          label: 'codabar',\n          value: 'codabar'\n        }\n      ],\n      generalWidthOptions: ['600px', '800px', '1000px', '40%', '50%', '60%', '70%', '80%'],\n      fullScreenWidthOptions: ['800px', '1000px', '1200px', '1400px', '50%', '60%', '70%', '80%', '90%', '100%'],\n      layoutTreeProps: {\n        label(data, node) {\n          const config = data.__config__\n          return data.componentName || `${config.label}: ${data.__vModel__}`\n        }\n      },\n      noWithList: [...noWithList, ...layoutList]\n    }\n  },\n  computed: {\n    showType() {\n      return this.getShowType()\n    },\n    changeName() {\n\n    },\n    activeTag() {\n      return this.activeData.__config__.tag\n    },\n    formItemList: {\n      get() {\n        return this.$store.state.generator.formItemList\n      },\n      set(val) {\n        this.$store.commit('generator/UPDATE_FORMITEM_LIST', val)\n      }\n    },\n    subTable: {\n      get() {\n        return this.$store.state.generator.subTable || []\n      },\n      set(val) {\n        this.$store.commit('generator/UPDATE_SUB_TABLE', val)\n      }\n    },\n    allTable: {\n      get() {\n        return this.$store.state.generator.allTable || []\n      },\n      set(val) {\n        this.$store.commit('generator/SET_ALL_TABLE', val)\n      }\n    },\n    mainTable() {\n      let allTable = this.$store.state.generator.allTable\n      let item = allTable.filter(o => o.typeId == '1')[0]\n      if (!item || !item.table) return ''\n      return item.table\n    },\n    isCommon() {\n      return commonRightList.indexOf(this.activeData.__config__.jnpfKey) > -1\n    },\n    isSystem() {\n      return systemList.indexOf(this.activeData.__config__.jnpfKey) > -1\n    },\n    drawingOptions() {\n      let list = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.jnpfKey !== 'table' && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__vModel__ && data.__config__.jnpfKey !== 'table') {\n          list.push(data)\n        }\n      }\n      loop(this.drawingList)\n      return list\n    },\n    getCompName() {\n      const allComps = [...inputComponents, ...selectComponents, ...systemComponents, ...layoutComponents, calculateItem, ...onlinePeculiarList]\n      const comp = allComps.filter(o => o.__config__.jnpfKey === this.activeData.__config__.jnpfKey);\n      if (!comp.length) return '';\n      return comp[0].__config__.label;\n    },\n    getScriptType() {\n      return ['onLoad', 'beforeSubmit', 'afterSubmit'].includes(this.activeFunc) ? 'form' : 'formField'\n    },\n    enableFlow() {\n      return this.formInfo && this.formInfo.enableFlow || false\n    }\n  },\n  watch: {\n    formConf: {\n      handler(val) {\n        // saveFormConf(val)\n        if (val.formStyle === 'word-form' && val.labelPosition === 'top') {\n          val.labelPosition = 'left'\n        }\n      },\n      deep: true\n    },\n    activeData(val) {\n      if (!val || !val.__config__) return\n      if (val.__config__.jnpfKey === 'relationFormAttr') {\n        this.$nextTick(() => {\n          this.$refs.relationFormAttr && this.$refs.relationFormAttr.getOptions()\n        })\n      }\n      if (val.__config__.jnpfKey === 'popupSelect' || val.__config__.jnpfKey === 'popupTableSelect') {\n        this.$nextTick(() => {\n          this.$refs.popupAll && this.$refs.popupAll.getDataInterfaceInfo()\n        })\n      }\n      if (val.__config__.jnpfKey === 'popupAttr') {\n        this.$nextTick(() => {\n          this.$refs.popupAttr && this.$refs.popupAttr.getOptions()\n        })\n      }\n      if (val.__config__.jnpfKey !== 'calculate') {\n        this.$nextTick(() => {\n          this.$refs.calculate && this.$refs.calculate.reloadExpressionTemp()\n        })\n      }\n      if (!val.__config__.tableName && val.__config__.jnpfKey !== 'table') {\n        val.__config__.tableName = this.mainTable\n      }\n      if (!this.activeData.__config__.visibility) this.$set(this.activeData.__config__, \"visibility\", [\"pc\", \"app\"])\n      this.setDefaultOptions()\n    }\n  },\n  created() {\n    this.getDictionaryType()\n    this.getDataInterfaceSelector()\n    this.getPrintTplList()\n    if (!this.activeData || !this.activeData.__config__) return\n    if (!this.activeData.__config__.visibility) this.$set(this.activeData.__config__, \"visibility\", [\"pc\", \"app\"])\n    if (!this.activeData.__config__.tableName && this.activeData.__config__.jnpfKey !== 'table') {\n      this.activeData.__config__.tableName = this.mainTable\n    }\n    this.setDefaultOptions()\n  },\n  methods: {\n    refreshPrintOptions() {\n      getPrintDevSelector(2).then(res => {\n        let data = res.data.list\n        let list = data.filter(o => o.children && o.children.length)\n        this.printTplList = list.map(o => ({\n          ...o,\n          hasChildren: true\n        }))\n      }).catch(error => {\n        reject(error)\n      })\n    },\n    // 如果要跳转新页面，请用函数包裹打开新页签。否则会出现被拦截\n    open(url) {\n      window.open(url, \"_blank\");\n    },\n    // 打印模板快捷入口\n    openPrint() {\n      let routeUrl = this.$router.resolve({\n        path: '/system/printDev?open=true'\n      });\n      this.open(routeUrl.href)\n    },\n    addStyle() {\n      this.$nextTick(() => {\n        this.styleScriptVisible = true\n      })\n    },\n    updateStyleScript(func) {\n      this.formConf.classJson = func\n      this.formConf.classNames = this.spiltByDoc(func).map(o => o.key)\n    },\n    spiltByDoc(str) {\n      let func = str.trim()\n      let arr = []\n      let cut = func.split(\"}\")\n      cut.forEach(item => {\n        if (item) {\n          let afterCut = item.split(\"{\")\n          let classObject = {}\n          let name = ''\n          if (afterCut[0].split(\" \").length > 1) {\n            name = afterCut[0].split(\" \")[0]\n          } else {\n            name = afterCut[0]\n          }\n          if (name.split(\"\\.\").length > 1) {\n            name = name.split(\"\\.\")[1]\n          }\n          name = name.split(\"\\:\")[0]\n          let matching = new RegExp(/^[a-zA-Z]-?.*[a-zA-Z0-9_]*$/)\n          if (matching.test(name)) {\n            classObject.key = name.replace(/\\r|\\n/ig, '').trim()\n            classObject.value = item.replace(/\\r|\\n/ig, '') + \"}\"\n            arr.push(classObject)\n          }\n        }\n      })\n      return arr\n    },\n    addReg() {\n      this.activeData.__config__.regList.push({\n        pattern: '',\n        message: ''\n      })\n    },\n    setDefaultValue(val) {\n      if (Array.isArray(val)) {\n        return val.join(',')\n      }\n      // if (['string', 'number'].indexOf(typeof val) > -1) {\n      //   return val\n      // }\n      if (typeof val === 'boolean') {\n        return `${val}`\n      }\n      return val\n    },\n    onDefaultValueInput(str) {\n      if (Array.isArray(this.activeData.__config__.defaultValue)) {\n        // 数组\n        this.$set(\n          this.activeData.__config__,\n          'defaultValue',\n          str.split(',').map(val => (isNumberStr(val) ? +val : val))\n        )\n      } else if (['true', 'false'].indexOf(str) > -1) {\n        // 布尔\n        this.$set(this.activeData.__config__, 'defaultValue', JSON.parse(str))\n      } else {\n        // 字符串和数字\n        this.$set(\n          this.activeData.__config__,\n          'defaultValue',\n          isNumberStr(str) ? +str : str\n        )\n      }\n    },\n    getSubTableFiled(key) {\n      let item = {}\n      let list = this.subTable.filter(o => o.table === key)\n      if (list.length) {\n        item = list[0]\n      }\n      let arr = []\n      if (item && item.fields) arr = item.fields.filter(o => o.primaryKey != 1)\n      return arr\n    },\n    fieldChange1(val) {\n      if (!val) return\n      const drawingList = getDrawingList() || []\n      let boo = false\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const e = list[i]\n          const config = e.__config__\n          if (config.jnpfKey === 'table' && config.tableName === this.activeData.__config__.relationTable) {\n            for (let j = 0; j < config.children.length; j++) {\n              const child = config.children[j]\n              if (child.__vModel__ === val) {\n                boo = true\n                break\n              }\n            }\n          }\n          if (config && config.jnpfKey != 'table' && config.children && Array.isArray(config.children)) {\n            loop(config.children)\n          }\n        }\n      }\n      loop(drawingList)\n      if (boo) {\n        this.$message.warning(`子表字段【${val}】已存在,请重新选择!`)\n        this.activeData.__vModel__ = ''\n        return\n      }\n      let options = this.getSubTableFiled(this.activeData.__config__.relationTable)\n      let item = options.filter(o => o.field == val)[0]\n      if (!item || !item.fieldName) return\n      this.activeData.__config__.label = item.fieldName\n    },\n    fieldChange(val) {\n      if (!val) return\n      const drawingList = getDrawingList() || []\n      let boo = false\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const e = list[i]\n          const config = e.__config__\n          if (e.__vModel__ === val) {\n            boo = true\n            break\n          }\n          if (config && config.jnpfKey != 'table' && config.children && Array.isArray(config.children)) {\n            loop(config.children)\n          }\n        }\n      }\n      loop(drawingList)\n      if (boo) {\n        this.$message.warning(`字段【${val}】已存在,请重新选择!`)\n        this.activeData.__vModel__ = ''\n        return\n      }\n      let item = this.fieldOptions.filter(o => o.realField == val)[0]\n      if (!item || !item.fieldName) return\n      this.activeData.__config__.label = item.fieldName\n      this.$forceUpdate()\n    },\n    inputFieldChange(val, formId, parentVModel) {\n      if (!val) return\n      let boo = false\n      let childBoo = false\n      if (parentVModel) {\n        const loop = (data, parent) => {\n          if (!data) return\n          if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n            loop(data.__config__.children, data)\n          }\n          if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n          if (parent && parent.__config__ && parent.__config__.jnpfKey == 'table') {\n            if (data.__vModel__ && data.__vModel__.toLowerCase() === val.toLowerCase() && data.__config__.formId !== formId && data.__config__.parentVModel === parentVModel) {\n              childBoo = true\n              return\n            }\n          }\n        }\n        loop(getDrawingList())\n      } else {\n        const loop = (data, parent) => {\n          if (!data) return\n          if (data.__config__ && data.__config__.jnpfKey !== 'table' && data.__config__.children && Array.isArray(data.__config__.children)) {\n            loop(data.__config__.children, data)\n          }\n          if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n          if (data.__vModel__ && data.__vModel__.toLowerCase() === val.toLowerCase() && data.__config__.formId !== formId) {\n            boo = true\n            return\n          }\n        }\n        loop(getDrawingList())\n      }\n      if (boo) {\n        this.$message.warning(`字段【${val}】已存在,请重新输入!`)\n        this.activeData.__vModel__ = ''\n        return\n      }\n      if (childBoo) {\n        this.$message.warning(`子表字段【${val}】已存在,请重新输入!`)\n        this.activeData.__vModel__ = ''\n      }\n    },\n    tableChange() {\n      this.activeData.__vModel__ = ''\n      this.setDefaultOptions()\n    },\n    changeStorage() {\n      this.activeData.__vModel__ = ''\n      if (this.activeData.isStorage == 0) this.activeData.__vModel__ = ''\n      if (!this.$store.getters.hasTable && this.activeData.isStorage == 1) this.$emit('setVModel', this.activeData)\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const e = list[i]\n          const config = e.__config__\n          if (config.jnpfKey === 'table' && e.__vModel__ === this.activeData.__config__.parentVModel) {\n            this.activeData.__config__.relationTable = config.tableName\n          }\n          if (config && config.jnpfKey != 'table' && config.children && Array.isArray(config.children)) {\n            loop(config.children)\n          }\n        }\n      }\n      loop(this.drawingList)\n    },\n    setDefaultOptions() {\n      if (!this.$store.getters.hasTable) return\n      if ((this.activeData.__vModel__ === undefined && this.activeData.isStorage != 1) || this.activeData.__config__.jnpfKey === 'table') return\n      if (!this.activeData.__config__.tableName || this.activeData.__config__.tableName === this.mainTable) {\n        let fieldOptions = this.formItemList.map(o => ({ ...o, realField: o.field }))\n        this.fieldOptions = fieldOptions.filter(o => o.primaryKey != 1)\n      } else {\n        let list = this.allTable.filter(o => o.table === this.activeData.__config__.tableName)\n        if (!list.length) {\n          this.activeData.__config__.tableName = this.mainTable\n          let fieldOptions = this.formItemList.map(o => ({ ...o, realField: o.field }))\n          this.fieldOptions = fieldOptions.filter(o => o.primaryKey != 1)\n          this.activeData.__vModel__ = ''\n        } else {\n          let item = list[0]\n          let options = item.fields.map(o => ({\n            ...o,\n            realField: 'jnpf_' + this.activeData.__config__.tableName + '_jnpf_' + o.field,\n          }))\n          this.fieldOptions = options.filter(o => o.primaryKey != 1)\n        }\n      }\n    },\n    spanChange(val) {\n      this.formConf.span = val\n    },\n    onTableNameChange(tableName) {\n      if (!tableName) return\n      const drawingList = getDrawingList() || []\n      let boo = false\n      const loop = list => {\n        for (let i = 0; i < list.length; i++) {\n          const e = list[i]\n          const config = e.__config__\n          if (config.jnpfKey === 'table' && config.tableName === tableName) {\n            boo = true\n            break\n          }\n          if (config && config.jnpfKey != 'table' && config.children && Array.isArray(config.children)) {\n            loop(config.children)\n          }\n        }\n      }\n      loop(drawingList)\n      if (boo) {\n        this.$message.warning(`子表【${tableName}】已存在,请重新选择!`)\n        this.activeData.__config__.tableName = ''\n        return\n      }\n      for (let i = 0; i < this.activeData.__config__.children.length; i++) {\n        this.$set(this.activeData.__config__.children[i].__config__, 'relationTable', tableName)\n        this.$set(this.activeData.__config__.children[i], '__vModel__', '')\n      }\n    },\n    onBorderWidthChange(val) {\n      if (!val) this.$nextTick(() => this.$set(this.activeData.__config__, 'borderWidth', 1))\n    },\n    getDictionaryType() {\n      getDictionaryTypeSelector().then(res => {\n        this.dictionaryOptions = res.data.list.filter(o => o.children && o.children.length);\n      })\n    },\n    getDataInterfaceSelector() {\n      getDataInterfaceSelector().then(res => {\n        this.dataInterfaceOptions = res.data\n      })\n    },\n    getPrintTplList() {\n      this.$store.dispatch('base/getPrintFormTree').then(res => {\n        let list = res.filter(o => o.children && o.children.length)\n        this.printTplList = list.map(o => ({\n          ...o,\n          hasChildren: true\n        }))\n      })\n    },\n    getTipText(key) {\n      let text = ''\n      switch (key) {\n        case 'change':\n          text = '发生变化时触发'\n          break;\n        case 'blur':\n          text = '失去焦点时触发'\n          break;\n        case 'click':\n          text = '点击时触发'\n          break;\n        case 'tabClick':\n          text = '面板点击时触发'\n          break;\n        default:\n          text = ''\n          break;\n      }\n      return text\n    },\n    updateScript(data) {\n      if (this.isConf) {\n        this.formConf.funcs[this.activeFunc] = data\n      } else {\n        this.activeData.on[this.activeFunc] = data\n      }\n    },\n    editFunc(str, funcName, isConf) {\n      this.activeScript = str\n      this.activeFunc = funcName\n      this.isConf = isConf || false\n      this.formScriptVisible = true\n    },\n    openFieldDialog() {\n      let tableName = ''\n      if (!this.activeData.__config__.isSubTable) {\n        tableName = this.activeData.__config__.tableName\n      } else {\n        tableName = this.activeData.__config__.relationTable\n      }\n      let dataBase = this.$store.state.generator.dataBase || '0'\n      this.fieldDialogVisible = true\n      this.$nextTick(() => {\n        this.$refs.fieldDialog.init(dataBase, tableName)\n      })\n    },\n    async updateFieldOptions(data) {\n      let tableName = ''\n      if (!this.activeData.__config__.isSubTable) {\n        tableName = this.activeData.__config__.tableName\n      } else {\n        tableName = this.activeData.__config__.relationTable\n      }\n      let queryType = 0, type = this.getFormInfo().type\n      if (type == 3 || type == 4 || type == 5) queryType = 1\n      let res = await DataModelFieldList(this.getFormInfo().dbLinkId, tableName, queryType)\n      let fields = res.data.list\n      for (let i = 0; i < this.allTable.length; i++) {\n        if (this.allTable[i].table === tableName) {\n          this.allTable[i].fields = fields\n          break\n        }\n      }\n      if (!this.activeData.__config__.isSubTable) {\n        if (this.activeData.__config__.tableName === this.mainTable) this.formItemList = fields\n        this.setDefaultOptions()\n      } else {\n        this.subTable = this.allTable.filter(o => o.typeId == '0')\n      }\n    },\n    onBarcodeTextChange(val) {\n      if (!val) return\n      let reg = /^[A-Za-z0-9]+$/\n      if (!reg.test(val)) {\n        this.$message({\n          message: '固定值请输入数字或者英文字母',\n          type: 'error',\n          duration: 1500,\n        })\n      }\n    },\n    onRuleChange(id, item) {\n      if (!id) {\n        this.activeData.__config__.rule = ''\n        this.activeData.__config__.ruleName = ''\n        return\n      }\n      if (this.activeData.__config__.rule === id) return\n      this.activeData.__config__.rule = id\n      this.activeData.__config__.ruleName = item.fullName\n    },\n    addComponent(item, parent) {\n      this.$emit('copyItem', item, parent, false)\n    }\n  }\n}\n",null]}