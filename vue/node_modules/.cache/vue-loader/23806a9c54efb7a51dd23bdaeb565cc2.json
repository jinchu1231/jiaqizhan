{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/DataInterfaceNode.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/DataInterfaceNode.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport InterfaceDialog from '@/components/Process/PropPanel/InterfaceDialog'\nimport { interfaceSourceTypeOptions } from '../FlowCard/define.js';\nconst noNullOptions = interfaceSourceTypeOptions.filter(o => o.id != 3);\nexport default {\n  name: 'DeleteDataNode',\n  components: { InterfaceDialog },\n  props: {\n    formConf: {\n      type: Object,\n      default: () => { }\n    },\n    integrateType: {\n      type: Number,\n      default: 1\n    },\n    formFieldsOptions: {\n      type: Array,\n      default: () => []\n    },\n  },\n  data() {\n    return {\n      interfaceSourceTypeOptions,\n      noNullOptions\n    }\n  },\n  computed: {\n    getRuleOptions() {\n      return this.formConf.formFieldList.filter(o => o.id.indexOf('-') < 0)\n    }\n  },\n  methods: {\n    getRuleList() {\n      return this.formConf\n    },\n    onFormIdChange(id, item) {\n      if (!id) return this.handleNull();\n      this.formConf.formName = item.fullName;\n      this.formConf.formId = id;\n      this.formConf.templateJson = (item.templateJson || []).map(o => ({ ...o, sourceType: 1, relationField: '' }));\n      this.$forceUpdate()\n    },\n    handleNull() {\n      this.formConf.formName = '';\n      this.formConf.formId = '';\n      this.formConf.templateJson = [];\n    },\n    onRelationFieldChange(val, row) {\n      if (!val) return;\n      let list = this.formFieldsOptions.filter(o => o.id === val);\n      if (!list.length) return;\n      let item = list[0];\n      row.isSubTable = item.__config__ && item.__config__.isSubTable ? item.__config__.isSubTable : false;\n    }\n  }\n}\n\n",null]}