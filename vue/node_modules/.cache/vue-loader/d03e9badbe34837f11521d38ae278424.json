{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/ChangeField/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/ChangeField/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    type: {\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    selectedList: {\n      type: Array,\n      default: () => []\n    },\n    list: {\n      type: Array,\n      default: () => []\n    },\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    size: String,\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data() {\n    return {\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: ''\n      },\n      treeData: [],\n      allList: [],\n      keyword: '',\n      innerValue: '',\n      visible: false,\n      loading: false,\n      props: {\n        children: 'children',\n        label: 'table',\n        isLeaf: 'isLeaf'\n      },\n      listLoading: false,\n      keyword: \"\",\n      checked: \"\",\n      checkedList: [],\n      selectedData: [],\n      tagsList: [],\n      inputHovering: false,\n      inputWidth: 0,\n      initialInputHeight: 0,\n      total: 0,\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.disabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    }\n  },\n  created() { },\n  watch: {\n    selectDisabled() {\n      this.$nextTick(() => {\n        this.resetInputHeight();\n      });\n    }\n  },\n  methods: {\n    echoTable(rows) {\n      rows.forEach(row => {\n        this.$refs.multipleTable.$refs.JNPFTable.toggleRowSelection(row, true)\n      })\n    },\n    closeDialog() {\n      this.checked = \"\";\n      this.selectedData = [];\n      this.$emit(\"update:visible\", false);\n    },\n    handleSelectionChange(val) {\n      this.selectedData = val;\n    },\n    onClose() { },\n    openDialog() {\n      if (this.selectDisabled) return\n      this.selectedData = this.selectedList\n      if (!this.selectedData.length) this.selectedData = []\n      this.visible = true\n      this.$nextTick(() => {\n        if (this.list) {\n          this.list.forEach(i => { this.$refs.multipleTable.$refs.JNPFTable.toggleRowSelection(i, false) })\n        }\n        if (this.list.length && this.selectedList.length) {\n          let selData = []\n          this.list.forEach(i => {\n            // 循环嵌套\n            this.selectedList.forEach(item => {\n              if (i.__vModel__ == item.__vModel__) { // 判断哪些数据是需要回显的\n                selData.push(i)\n              }\n            })\n          })\n          this.echoTable(selData) // 调用回显方法\n        }\n      })\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    confirm() {\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        let selectedIds = this.selectedData.map(o => o.id)\n        this.$emit('input', selectedIds)\n        this.$emit('change', selectedIds, this.selectedData)\n        this.$emit('changeField', this.selectedData)\n      }\n      this.visible = false\n    },\n    deleteTag(event, index) {\n      this.selectedData.splice(index, 1)\n      this.confirm()\n      event.stopPropagation();\n    },\n    handleClearClick(event) {\n      this.selectedData = []\n      this.confirm()\n      event.stopPropagation();\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    resetInputHeight() {\n      if (this.collapseTags) return;\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return;\n        let inputChildNodes = this.$refs.reference.$el.childNodes;\n        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];\n        const tags = this.$refs.tags;\n        const tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        const sizeInMap = this.initialInputHeight || 40;\n        input.style.height = this.selectedData.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tagsHeight + (tagsHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px';\n      });\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    }\n  }\n}\n",null]}