{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/view/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/view/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getModelList, getModelSubList, deleteModel, batchDelete, exportModel, createModel, updateModel, getConfigData } from '@/api/onlineDev/visualDev'\nimport { Create, Update } from '@/api/workFlow/workFlowForm'\nimport { getDictionaryDataSelector } from '@/api/systemData/dictionary'\nimport { getDataInterfaceRes } from '@/api/systemData/dataInterface'\nimport { getColumnsByModuleId } from '@/api/common'\nimport { Candidates } from '@/api/workFlow/FlowBefore'\nimport Search from '../list/Search'\nimport ExportBox from '@/components/ExportBox'\nimport CustomBox from '@/components/JNPFCustom'\n\nexport default {\n  name: 'dynamicModel',\n  props: ['config', 'modelId', 'isPreview'],\n  components: { Search, ExportBox, CustomBox },\n  data() {\n    return {\n      keyword: '',\n      treeProps: {\n        children: 'children',\n        label: 'fullName',\n        value: 'id',\n        isLeaf: 'isLeaf'\n      },\n      list: [],\n      cacheList: [],\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n        sidx: '',\n        menuId: '',\n        queryJson: '',\n        superQueryJson: ''\n      },\n      defaultListQuery: {\n        pageSize: 20,\n        sort: 'desc',\n        sidx: '',\n      },\n      treeData: [],\n      expandsTree: true,\n      treeActiveId: '',\n      columnData: {\n        columnBtnsList: []\n      },\n      formData: {},\n      columnList: [],\n      childColumnList: [],\n      columnOptions: [],\n      exportList: [],\n      columnBtnsList: [],\n      customBtnsList: [],\n      hasBatchBtn: false,\n      refreshTable: false,\n      expandsTable: true,\n      multipleSelection: [],\n      settingsColumnList: [],\n      mergeList: [],\n      expandObj: {},\n      flowTemplateJson: {},\n      isCustomCopy: false,\n      candidateVisible: false,\n      candidateType: 1,\n      branchList: [],\n      candidateList: [],\n      currRow: {},\n      workFlowFormData: {},\n      rowStyle: null,\n      cellStyle: null,\n      refreshTree: true,\n      exportBoxVisible: false,\n      customBoxVisible: false,\n    }\n  },\n  watch: {\n    keyword(val) {\n      if (this.columnData.treeMethod == 1) this.$refs.treeBox.filter(val)\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    async init() {\n      this.listLoading = true\n      this.listQuery.menuId = this.$route.meta.modelId\n      this.refreshTable = false\n      if (!this.config.columnData) return\n      this.columnData = JSON.parse(this.config.columnData)\n      this.columnData.searchList = this.columnData.searchList.map(o => ({\n        value: undefined,\n        ...o\n      }));\n      if (this.columnData.type === 3) {\n        this.columnData.columnList = this.columnData.columnList.filter(o => o.prop != this.columnData.groupField)\n      }\n      if (this.config.enableFlow == 1) {\n        this.flowTemplateJson = this.config.flowTemplateJson ? JSON.parse(this.config.flowTemplateJson) : {}\n        this.isCustomCopy = this.flowTemplateJson.properties && this.flowTemplateJson.properties.isCustomCopy\n      }\n      this.customBtnsList = this.columnData.customBtnsList || []\n      this.columnBtnsList = this.columnData.columnBtnsList || []\n      this.listLoading = true\n      if (this.isPreview) this.listQuery.menuId = \"270579315303777093\"\n      let res = await getColumnsByModuleId(this.listQuery.menuId)\n      this.settingsColumnList = res.data || []\n      this.rowStyle = this.jnpf.getScriptFunc.call(this, this.columnData.funcs && this.columnData.funcs.rowStyle)\n      this.cellStyle = this.jnpf.getScriptFunc.call(this, this.columnData.funcs && this.columnData.funcs.cellStyle)\n      this.getColumnList()\n      this.$nextTick(() => {\n        this.refreshTable = true\n      })\n      if (this.isPreview) return this.listLoading = false\n      this.listQuery.pageSize = this.columnData.pageSize\n      this.listQuery.sort = this.columnData.sort\n      this.listQuery.sidx = this.columnData.defaultSidx\n      this.defaultListQuery.pageSize = this.columnData.pageSize\n      this.defaultListQuery.sort = this.columnData.sort\n      this.defaultListQuery.sidx = this.columnData.defaultSidx\n      if (this.columnData.type === 3 || !this.columnData.hasPage) this.listQuery.pageSize = 10000\n      this.initData()\n    },\n    initData() {\n      if (this.isPreview) return\n      this.listLoading = true\n      getModelList(this.modelId, this.listQuery).then(res => {\n        if (this.columnData.type === 4) {\n          this.list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            rowEdit: false\n          }))\n          this.cacheList = JSON.parse(JSON.stringify(this.list))\n        } else {\n          this.list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            hasChildren: true\n          }))\n        }\n        if (this.columnData.type !== 3 && this.columnData.hasPage) this.total = res.data.pagination.total\n        this.listLoading = false\n        this.$nextTick(() => {\n          if (this.columnData.funcs && this.columnData.funcs.afterOnload) this.setTableLoadFunc()\n        })\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    getTreeView() {\n      if (this.columnData.treeDataSource === \"dictionary\") {\n        if (!this.columnData.treeDictionary) return\n        getDictionaryDataSelector(this.columnData.treeDictionary).then(res => {\n          this.treeData = res.data.list\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"organize\") {\n        this.$store.dispatch('generator/getDepTree').then(res => {\n          this.treeData = res\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"department\") {\n        this.$store.dispatch('generator/getDepTree').then(res => {\n          this.treeData = res\n          this.initData()\n        })\n      }\n      if (this.columnData.treeDataSource === \"api\") {\n        if (!this.columnData.treePropsUrl) return\n        getDataInterfaceRes(this.columnData.treePropsUrl).then(res => {\n          let data = res.data\n          if (Array.isArray(data)) {\n            this.treeData = data\n          } else {\n            this.treeData = []\n          }\n          this.initData()\n        })\n      }\n    },\n    /**\n    * 对表格进行合计\n    */\n    getTableSummaries(param) {\n      const { columns, data } = param;\n      const sums = [];\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '合计';\n          return;\n        } else if (this.columnData.summaryField.includes(column.property)) {\n          const values = data.map(item => Number(item[column.property]));\n          if (!values.every(value => isNaN(value))) {\n            sums[index] = values.reduce((prev, curr) => {\n              const value = Number(curr);\n              if (!isNaN(value)) {\n                return prev + curr;\n              } else {\n                return prev;\n              }\n            }, 0).toFixed(2);\n          } else {\n            sums[index] = '';\n          }\n        }\n      })\n      return sums;\n    },\n    getColumnList() {\n      if (this.isPreview) {\n        const columnList = this.columnData.columnList\n        this.columnList = this.transformColumnList(columnList)\n        return\n      }\n      let columnPermissionList = []\n      if (!this.columnData.useColumnPermission) {\n        columnPermissionList = this.columnData.columnList\n      } else {\n        const permissionList = this.$store.getters.permissionList\n        const modelId = this.$route.meta.modelId\n        const list = permissionList.filter(o => o.modelId === modelId)\n        const columnList = list[0] && list[0].column ? list[0].column : []\n        for (let i = 0; i < this.columnData.columnList.length; i++) {\n          inner: for (let j = 0; j < columnList.length; j++) {\n            if (this.columnData.columnList[i].prop === columnList[j].enCode) {\n              columnPermissionList.push(this.columnData.columnList[i])\n              break inner\n            }\n          }\n        }\n      }\n      if (![3, 5].includes(this.columnData.type)) columnPermissionList = this.getComplexColumns(columnPermissionList)\n      this.columnList = this.transformColumnList(columnPermissionList)\n    },\n    getComplexColumns(columns) {\n      let complexHeaderList = this.columnData.complexHeaderList || [];\n      if (!complexHeaderList.length) return columns;\n      let childColumns = [];\n      for (let i = 0; i < complexHeaderList.length; i++) {\n        const e = complexHeaderList[i];\n        e.label = e.fullName;\n        e.align = e.align;\n        e.dataIndex = e.id;\n        e.prop = e.id;\n        e.children = [];\n        e.jnpfKey = 'complexHeader';\n        e.sortable = false;\n        if (e.childColumns && e.childColumns.length) {\n          childColumns.push(...e.childColumns);\n          for (let j = 0; j < columns.length; j++) {\n            const o = columns[j];\n            if (e.childColumns.includes(o.id) && o.fixed !== 'left' && o.fixed !== 'right') e.children.push({ ...o });\n          }\n        }\n      }\n      complexHeaderList = complexHeaderList.filter(o => o.children.length);\n      for (let i = 0; i < columns.length; i++) {\n        const item = columns[i];\n        if (!childColumns.includes(item.id)) complexHeaderList.push(item);\n      }\n      return complexHeaderList;\n    },\n    transformColumnList(columnList) {\n      let list = []\n      for (let i = 0; i < columnList.length; i++) {\n        const e = columnList[i];\n        if (!e.prop.includes('-')) {\n          list.push(e)\n        } else {\n          let prop = e.prop.split('-')[0]\n          let vModel = e.prop.split('-')[1]\n          let label = e.label.split('-')[0]\n          let childLabel = e.label.replace(label + '-', '');\n          let newItem = {\n            align: \"center\",\n            jnpfKey: \"table\",\n            prop,\n            label,\n            children: []\n          }\n          e.vModel = vModel\n          e.childLabel = childLabel\n          if (!this.expandObj.hasOwnProperty(`${prop}Expand`)) this.$set(this.expandObj, `${prop}Expand`, false)\n          if (!list.some(o => o.prop === prop)) list.push(newItem)\n          for (let i = 0; i < list.length; i++) {\n            if (list[i].prop === prop) {\n              list[i].children.push(e)\n              break\n            }\n          }\n        }\n      }\n      this.getMergeList(list)\n      this.getExportList(list)\n      this.childColumnList = list.filter(o => o.jnpfKey === 'table')\n      return list\n    },\n    getExportList(list) {\n      let exportList = []\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].jnpfKey === 'table') {\n          if (this.columnData.type != 4) exportList.push(...list[i].children)\n        } else if (list[i].jnpfKey === 'complexHeader') {\n          exportList.push(...list[i].children)\n        } else {\n          exportList.push(list[i])\n        }\n      }\n      this.exportList = exportList\n    },\n    getMergeList(list) {\n      list.forEach(item => {\n        if (item.children && item.children.length > 0 && item.jnpfKey == 'table') {\n          item.children.forEach((child, index) => {\n            if (index == 0) {\n              this.mergeList.push({\n                prop: child.prop,\n                rowspan: 1,\n                colspan: item.children.length\n              })\n            } else {\n              this.mergeList.push({\n                prop: child.prop,\n                rowspan: 0,\n                colspan: 0\n              })\n            }\n          })\n        } else {\n          this.mergeList.push({\n            prop: item.prop,\n            rowspan: 1,\n            colspan: 1\n          })\n        }\n      })\n    },\n    arraySpanMethod({ column }) {\n      for (let i = 0; i < this.mergeList.length; i++) {\n        if (column.property == this.mergeList[i].prop) {\n          return [this.mergeList[i].rowspan, this.mergeList[i].colspan]\n        }\n      }\n    },\n    toggleExpand(row, field) {\n      row[field] = !row[field]\n    },\n    getNodePath(node) {\n      let fullPath = []\n      const loop = (node) => {\n        if (node.level) fullPath.unshift(node.data)\n        if (node.parent) loop(node.parent)\n      }\n      loop(node)\n      return fullPath\n    },\n    handleNodeClick(data, node) {\n      if (this.treeActiveId == data[this.treeProps.value]) return\n      this.treeActiveId = data[this.treeProps.value]\n      this.$refs.Search.treeReset()\n      let queryJson = {}\n      if (this.columnData.treeDataSource === \"organize\") {\n        const nodePath = this.getNodePath(node)\n        const currValue = nodePath.map(o => o[this.treeProps.value])\n        queryJson = { [this.columnData.treeRelation]: currValue }\n        this.treeActiveId = currValue\n      } else {\n        queryJson = { [this.columnData.treeRelation]: data[this.treeProps.value] }\n      }\n      this.search(JSON.stringify(queryJson))\n    },\n    handleDel(id, index) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        if (id) {\n          deleteModel(this.modelId, id).then(res => {\n            this.$message({\n              type: 'success',\n              message: res.msg,\n              duration: 1000,\n              onClose: () => { this.initData() }\n            });\n          })\n        } else {\n          this.list.splice(index, 1)\n        }\n      }).catch(() => { });\n    },\n    saveForRowEdit(row, status, candidateData) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      if (this.config.enableFlow == 1) {\n        let query = {\n          id: row.id,\n          status: status || \"1\",\n          candidateType: this.candidateType,\n          formData: row,\n          flowId: this.config.flowId,\n          flowUrgent: 1\n        }\n        if (candidateData) query = { ...query, ...candidateData }\n        const formMethod = query.id ? Update : Create\n        formMethod(query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.candidateVisible = false\n              this.initData()\n            }\n          })\n        })\n      } else {\n        let query = {\n          id: row.id,\n          data: JSON.stringify(row)\n        }\n        const formMethod = query.id ? updateModel : createModel\n        formMethod(this.modelId, query).then(res => {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              this.candidateVisible = false\n              this.initData()\n            }\n          })\n        })\n      }\n    },\n    submitForRowEdit(row) {\n      this.currRow = row\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.workFlowFormData = {\n        id: row.id,\n        formData: row,\n        flowId: this.config.flowId\n      }\n      Candidates(0, this.workFlowFormData).then(res => {\n        let data = res.data\n        this.candidateType = data.type\n        if (data.type == 1) {\n          this.branchList = res.data.list.filter(o => o.isBranchFlow)\n          this.candidateList = res.data.list.filter(o => !o.isBranchFlow && o.isCandidates)\n          this.candidateVisible = true\n        } else if (data.type == 2) {\n          this.branchList = []\n          this.candidateList = res.data.list.filter(o => o.isCandidates)\n          this.candidateVisible = true\n        } else {\n          if (this.isCustomCopy) {\n            this.branchList = []\n            this.candidateList = []\n            this.candidateVisible = true\n            return\n          }\n          this.$confirm('您确定要提交当前流程吗, 是否继续?', '提示', {\n            type: 'warning'\n          }).then(() => {\n            this.saveForRowEdit(row, '0')\n          }).catch(() => { })\n        }\n      }).catch(() => { })\n    },\n    submitCandidate(data) {\n      this.saveForRowEdit(this.currRow, '0', data)\n    },\n    cancelRowEdit(row, index) {\n      if (!row.id) return this.list.splice(index, 1)\n      row.rowEdit = false\n      let item = JSON.parse(JSON.stringify(this.cacheList[index]))\n      this.$set(this.list, index, item)\n    },\n    handleSelectionChange(val) {\n      const res = val.map(item => item.id)\n      this.multipleSelection = res\n    },\n    sortChange({ column, prop, order }) {\n      this.listQuery.sort = order == 'ascending' ? 'asc' : 'desc'\n      this.listQuery.sidx = !order ? '' : prop\n      this.initData()\n    },\n    reset() {\n      this.listQuery.sort = this.defaultListQuery.sort\n      this.listQuery.sidx = this.defaultListQuery.sidx\n      if (this.columnData.type === 2) {\n        let obj = { [this.columnData.treeRelation]: this.treeActiveId }\n        let queryJson = this.treeActiveId ? JSON.stringify(obj) : ''\n        this.search(queryJson)\n      } else {\n        this.search('')\n      }\n    },\n    searchData(queryJson) {\n      if (this.columnData.type === 2 && this.treeActiveId) {\n        queryJson = JSON.parse(queryJson)\n        queryJson = { [this.columnData.treeRelation]: this.treeActiveId, ...queryJson }\n        queryJson = JSON.stringify(queryJson)\n      }\n      this.search(queryJson)\n    },\n    search(queryJson) {\n      if (this.isPreview) return\n      if (!queryJson) this.$refs.treeBox && this.$refs.treeBox.setCurrentKey(null);\n      this.listQuery.queryJson = queryJson\n      this.listQuery.currentPage = 1\n      this.initData()\n    },\n    superQuery(queryJson) {\n      if (this.isPreview) return\n      this.listQuery.superQueryJson = queryJson\n      this.listQuery.currentPage = 1\n      this.initData()\n    },\n    customBtnsHandel(item, row, index) {\n      if (item.event.btnType == 1) this.handlePopup(item.event, row, index)\n      if (item.event.btnType == 2) this.handleScriptFunc(item.event, row, index)\n      if (item.event.btnType == 3) this.handleInterface(item.event, row, index)\n    },\n    handlePopup(item, row, index) {\n      this.customBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.CustomBox.init(item, this.modelId, '', this.isPreview, row)\n      })\n    },\n    handleScriptFunc(item, row, index) {\n      const parameter = {\n        data: row,\n        index,\n        refresh: this.initData,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n      const func = this.jnpf.getScriptFunc.call(this, item.func)\n      if (!func) return\n      func.call(this, parameter)\n    },\n    handleInterface(item, row, index) {\n      const handlerInterface = () => {\n        if (item.templateJson && item.templateJson.length) {\n          item.templateJson.forEach((ele) => {\n            ele.defaultValue = row[ele.relationField] || \"\"\n          })\n        }\n        let query = { paramList: item.templateJson || [] }\n        getDataInterfaceRes(item.interfaceId, query).then(res => {\n          this.$message({ message: res.msg, type: 'success' });\n        })\n      }\n      if (!item.useConfirm) return handlerInterface()\n      this.$confirm(item.confirmTitle || '确认执行此操作', '提示', { type: 'warning' }).then(() => {\n        handlerInterface()\n      }).catch(() => { })\n    },\n    setTableLoadFunc() {\n      const JNPFTable = this.$refs.tableRef.$refs.JNPFTable\n      const parameter = {\n        data: this.list,\n        tableRef: JNPFTable,\n        onlineUtils: this.jnpf.onlineUtils,\n      }\n      const func = this.jnpf.getScriptFunc.call(this, this.columnData.funcs.afterOnload)\n      if (!func) return\n      func.call(this, parameter)\n    },\n    toggleTreeExpand(expands) {\n      this.refreshTree = false\n      this.expandsTree = expands\n      this.$nextTick(() => {\n        this.refreshTree = true\n        this.$nextTick(() => {\n          this.$refs.treeBox.setCurrentKey(null)\n        })\n      })\n    },\n    toggleExpandList() {\n      this.refreshTable = false;\n      this.expandsTable = !this.expandsTable;\n      this.$nextTick(() => {\n        this.refreshTable = true;\n      });\n    },\n    loadNode(node, resolve) {\n      const nodeData = node.data\n      const config = this.columnData\n      if (config.treeInterfaceId) {\n        if (config.treeTemplateJson && config.treeTemplateJson.length) {\n          for (let i = 0; i < config.treeTemplateJson.length; i++) {\n            const element = config.treeTemplateJson[i];\n            element.defaultValue = nodeData[element.relationField] || ''\n          }\n        }\n        let query = {\n          paramList: config.treeTemplateJson || [],\n        }\n        getDataInterfaceRes(config.treeInterfaceId, query).then(res => {\n          let data = res.data\n          if (Array.isArray(data)) {\n            resolve(data);\n          } else {\n            resolve([]);\n          }\n        })\n      }\n    },\n    treeLoad(tree, treeNode, resolve) {\n      getModelSubList(this.modelId, tree.id, this.listQuery).then(res => {\n        if (res.data.list && Array.isArray(res.data.list)) {\n          const list = res.data.list.map(o => ({\n            ...o,\n            ...this.expandObj,\n            hasChildren: true\n          }))\n          resolve(list);\n        } else {\n          resolve([]);\n        }\n      })\n    },\n    headBtnsHandel(key) {\n      if (key == 'download') {\n        this.exportBoxVisible = true\n        this.$nextTick(() => {\n          this.$refs.ExportBox.init(this.exportList)\n        })\n      }\n    },\n    download(data) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据导出', type: 'warning' })\n      let query = { ...this.listQuery, ...data }\n      exportModel(this.modelId, query).then(res => {\n        if (!res.data.url) return\n        this.jnpf.downloadFile(res.data.url)\n        this.$refs.ExportBox.visible = false\n        this.exportBoxVisible = false\n      })\n    },\n    getFixed(item, i) {\n      if (i == 0 && this.columnData.groupField && this.columnData.type == 3) {\n        if (this.columnList.some(o => o.fixed == 'left')) return 'left'\n        return false\n      } else if (this.columnData.childTableStyle != 2) {\n        return item.fixed == 'none' ? false : item.fixed\n      } else {\n        return false\n      }\n    }\n  }\n}\n",null]}