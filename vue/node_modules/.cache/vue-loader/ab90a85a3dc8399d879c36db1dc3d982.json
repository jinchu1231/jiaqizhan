{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/main.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/main.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport FlowCard from \"./FlowCard/index.vue\";\nimport PropPanel from \"./PropPanel/index.vue\";\nimport { NodeUtils, getMockData } from \"./FlowCard/util.js\";\nimport { getDrawingList } from '@/components/Generator/utils/db'\nconst requiredDisabled = (jnpfKey) => {\n  return ['billRule', 'createUser', 'createTime', 'modifyTime', 'modifyUser', 'currPosition', 'currOrganize', 'table'].includes(jnpfKey)\n}\nconst getDataType = (data) => {\n  if (!data.__config__ || !data.__config__.jnpfKey) return ''\n  const jnpfKey = data.__config__.jnpfKey\n  if (['inputNumber', 'datePicker', 'rate', 'slider'].includes(jnpfKey)) {\n    return 'number'\n  } else if (['checkbox', 'uploadFile', 'uploadImg', 'cascader', 'organizeSelect', 'areaSelect'].includes(jnpfKey)) {\n    return 'array'\n  } else if (['select', 'depSelect', 'posSelect', 'userSelect', 'usersSelect', 'treeSelect', 'roleSelect', 'groupSelect', 'popupSelect', 'popupTableSelect'].includes(jnpfKey)) {\n    if (data.multiple) return 'array'\n  }\n  return ''\n}\n\nexport default {\n  name: 'ProcessMain',\n  props: ['conf', 'flowType', 'verifyMode', 'formInfo'],\n  data() {\n    let data = {}\n    data = this.conf\n    return {\n      data, // 流程图数据\n      scaleVal: 100, // 流程图缩放比例 100%\n      step: 5, // 缩放步长\n      updateId: 0, // key值 用于模拟$forceUpdate\n      activeData: null, // 被激活的流程卡片数据，用于属性面板编辑\n      isProcessCmp: true,\n      // verifyMode: false\n    };\n  },\n  methods: {\n    updateFiled(flowTemplateJson) {\n      const loop = data => {\n        if (Array.isArray(data)) data.forEach(d => loop(d))\n        if (data.type === 'approver' || data.type === 'start') {\n          this.initFormOperates(data)\n        }\n        if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n        if (data.childNode) loop(data.childNode)\n      }\n      loop(flowTemplateJson)\n    },\n    initFormOperates(target) {\n      const formOperates = target.properties && target.properties.formOperates || []\n      let res = []\n      const getWriteById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].write : NodeUtils.isStartNode(target)\n      }\n      const getReadById = id => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].read : true\n      }\n      const getRequiredById = (id) => {\n        const arr = formOperates.filter(o => o.id === id)\n        return arr.length ? arr[0].required : false\n      }\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__vModel__) {\n          const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table'\n          const id = isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__\n          res.push({\n            id: id,\n            name: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n            required: data.__config__.required || getRequiredById(id),\n            requiredDisabled: requiredDisabled(data.__config__.jnpfKey) || data.__config__.required,\n            jnpfKey: data.__config__.jnpfKey,\n            dataType: getDataType(data),\n            read: getReadById(id),\n            write: getWriteById(id)\n          })\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n      }\n      loop(getDrawingList())\n      target.properties.formOperates = res\n    },\n    /**\n     * 接收所有FlowCard事件触发\n     * @param { Object } data - 含有event(事件名称)/args(参数)两个属性\n     */\n    eventReceiver({ event, args }) {\n      if (event === \"edit\") {\n        this.activeData = args[0]; // 打开属性面板\n        return;\n      }\n      // 本实例只监听了第一层数据（startNode）变动\n      // 为了实时更新  采用$forceUpdate刷新 但是由于某些条件下触发失效（未排除清除原因）\n      // 使用key + 监听父组件updateId方式强制刷新\n      NodeUtils[event](...args);\n      this.forceUpdate();\n    },\n\n    forceUpdate() {\n      this.updateId = this.updateId + 1;\n    },\n    /**\n     * 控制流程图缩放\n     * @param { Object } val - 缩放增量 是step的倍数 可正可负\n     */\n    changeScale(val) {\n      if (this.scaleVal >= 0 && this.scaleVal <= 200) {\n        if (this.scaleVal === 200 && this.scaleVal + val > 200) return\n        if (this.scaleVal === 0 && this.scaleVal + val < 0) return\n        // 缩放介于0%~200%\n        this.scaleVal += val;\n      }\n    },\n    /**\n     * 属性面板提交事件\n     * @param { Object } value - 被编辑的节点的properties属性对象\n     */\n    onPropEditConfirm(value, content) {\n      this.activeData.content = content || '请设置条件'\n      let oldProp = this.activeData.properties;\n      this.activeData.properties = value;\n      // 修改优先级\n      if (NodeUtils.isConditionNode(this.activeData)) {\n        value.priority !== oldProp.priority\n          && NodeUtils.resortPrioByCNode(\n            this.activeData,\n            oldProp.priority,\n            this.data\n          );\n        NodeUtils.setDefaultCondition(this.activeData, this.data)\n      }\n      if (NodeUtils.isStartNode(this.activeData)) this.$emit('startNodeChange', this.data)\n      this.onClosePanel();\n      this.forceUpdate();\n    },\n    /**\n     * 属性面板取消事件\n     */\n    onClosePanel() {\n      this.activeData = null;\n    },\n\n    // 传formIds 查询指定组件 未传时  判断所有组件\n    isFilledPCon(formIds) {\n      let res = false\n      const loopChild = (parent, callback) => parent.childNode && loop(parent.childNode, callback)\n      const loop = (data, callback) => {\n        if (res || !data) return // 查找到就退出\n        if (Array.isArray(data.conditionNodes)) {\n          const uesd = data.conditionNodes.some(c => {\n            const cons = c.properties.conditions || []\n            return Array.isArray(formIds)\n              ? cons.some(item => formIds.includes(item.formId)) // 查询特定组件\n              : cons.length > 0 // 只要有节点设置了条件 说明就有组件作为条件被使用\n          })\n          uesd ? callback() : data.conditionNodes.forEach(t => loopChild(t, callback))\n        }\n        loopChild(data, callback)\n      }\n      loop(this.data, () => res = true)\n      return res\n    }\n  },\n  render: function (h) {\n    return (\n      <div class=\"flow-container\">\n        <div class=\"scale-slider\">\n          <i class=\"btn  el-icon-minus\"\n            onClick={this.changeScale.bind(this, -this.step)}></i>\n          <span style=\"font-size:14px;\">{this.scaleVal}%</span>\n          <i class=\"btn  el-icon-plus \"\n            onClick={this.changeScale.bind(this, this.step)}></i>\n        </div>\n        <FlowCard\n          verifyMode={this.verifyMode}\n          key={this.updateId}\n          data={this.data}\n          onEmits={this.eventReceiver}\n          style={{ transform: `scale(${this.scaleVal / 100})` }}\n        />\n        <PropPanel\n          value={this.activeData}\n          flowType={this.flowType || 0}\n          processData={this.data}\n          formInfo={this.formInfo}\n          onConfirm={this.onPropEditConfirm}\n          onCancel={this.onClosePanel}\n        />\n      </div>\n    );\n  }\n};\n",null]}