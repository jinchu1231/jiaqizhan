{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/ResetPassword.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/ResetPassword.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _userSetting = require(\"@/api/permission/userSetting\");\nvar _jsMd = _interopRequireDefault(require(\"js-md5\"));\nvar _sysConfig = require(\"@/api/system/sysConfig\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  data: function data() {\n    var _this = this;\n    var validatePass = function validatePass(rule, value, callback) {\n      //是否包含数字\n      var containsNumbers = /[0-9]+/;\n      //是否包含小写字符\n      var includeLowercaseLetters = /[a-z]+/;\n      //是否包含大写字符\n      var includeUppercaseLetters = /[A-Z]+/;\n      //是否包含字符\n      var containsCharacters = /\\W/;\n      var containsCharacters2 = /_/;\n      if (value === '') {\n        callback(new Error('新密码不能为空'));\n      } else if (_this.baseForm.passwordStrengthLimit == 1) {\n        if (_this.baseForm.passwordLengthMin) {\n          if (value.length < _this.baseForm.passwordLengthMinNumber) {\n            callback(new Error('新密码长度不能小于' + _this.baseForm.passwordLengthMinNumber + '位'));\n          }\n        }\n        if (_this.baseForm.containsNumbers) {\n          if (!containsNumbers.test(value)) {\n            callback(new Error('新密码必须包含数字'));\n          }\n        }\n        if (_this.baseForm.includeLowercaseLetters) {\n          if (!includeLowercaseLetters.test(value)) {\n            callback(new Error('新密码必须包含小写字母'));\n          }\n        }\n        if (_this.baseForm.includeUppercaseLetters) {\n          if (!includeUppercaseLetters.test(value)) {\n            callback(new Error('新密码必须包含大写字母'));\n          }\n        }\n        if (_this.baseForm.containsCharacters) {\n          if (!containsCharacters.test(value) && !containsCharacters2.test(value)) {\n            callback(new Error('新密码必须包含字符'));\n          }\n        }\n        if (_this.dataForm.password2 !== '') {\n          _this.$refs.dataForm.validateField('password2');\n        }\n        callback();\n      } else {\n        if (_this.dataForm.password2 !== '') {\n          _this.$refs.dataForm.validateField('password2');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = function validatePass2(rule, value, callback) {\n      if (value !== _this.dataForm.password) {\n        callback(new Error('两次密码输入不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      visible: false,\n      formLoading: false,\n      btnLoading: false,\n      imgUrl: \"\",\n      timestamp: '',\n      dataForm: {\n        oldPassword: '',\n        password: '',\n        password2: '',\n        code: ''\n      },\n      baseForm: {\n        passwordStrengthLimit: 0,\n        passwordLengthMin: false,\n        passwordLengthMinNumber: 0,\n        containsNumbers: false,\n        includeLowercaseLetters: false,\n        includeUppercaseLetters: false,\n        containsCharacters: false\n      },\n      dataRule: {\n        oldPassword: [{\n          required: true,\n          message: '旧密码不能为空',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        password2: [{\n          required: true,\n          message: '重复密码不能为空',\n          trigger: 'blur'\n        }, {\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        code: [{\n          required: true,\n          message: '验证码不能为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.changeImg(), this.initData();\n  },\n  methods: {\n    initData: function initData() {\n      var _this2 = this;\n      this.listLoading = true;\n      this.$nextTick(function () {\n        (0, _sysConfig.getSystemConfig)().then(function (res) {\n          _this2.baseForm = res.data;\n          _this2.baseForm.passwordLengthMin = _this2.baseForm.passwordLengthMin ? true : false;\n          _this2.baseForm.containsNumbers = _this2.baseForm.containsNumbers ? true : false;\n          _this2.baseForm.includeLowercaseLetters = _this2.baseForm.includeLowercaseLetters ? true : false;\n          _this2.baseForm.includeUppercaseLetters = _this2.baseForm.includeUppercaseLetters ? true : false;\n          _this2.baseForm.containsCharacters = _this2.baseForm.containsCharacters ? true : false;\n          _this2.listLoading = false;\n        }).catch(function () {\n          _this2.listLoading = false;\n        });\n      });\n    },\n    init: function init(id, account) {\n      var _this3 = this;\n      this.visible = true;\n      this.formLoading = true;\n      this.$nextTick(function () {\n        _this3.$refs['dataForm'].resetFields();\n        _this3.dataForm.id = id;\n        _this3.dataForm.account = account;\n        _this3.formLoading = false;\n      });\n    },\n    dataFormSubmit: function dataFormSubmit() {\n      var _this4 = this;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          _this4.btnLoading = true;\n          var query = {\n            oldPassword: (0, _jsMd.default)(_this4.dataForm.oldPassword),\n            password: (0, _jsMd.default)(_this4.dataForm.password),\n            code: _this4.dataForm.code,\n            timestamp: _this4.timestamp\n          };\n          (0, _userSetting.UpdatePassword)(query).then(function (res) {\n            _this4.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: function onClose() {\n                _this4.visible = false;\n                _this4.btnLoading = false;\n                _this4.$emit('refreshDataList');\n              }\n            });\n          }).catch(function () {\n            _this4.btnLoading = false;\n          });\n        }\n      });\n    },\n    changeImg: function changeImg() {\n      var timestamp = Math.random();\n      this.timestamp = timestamp;\n      this.imgUrl = \"/api/file/ImageCode/\".concat(timestamp);\n    }\n  }\n};",null]}