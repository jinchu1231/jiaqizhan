{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/OrgTransfer/roleTransfer.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/OrgTransfer/roleTransfer.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getRoleSelectorByPermission } from '@/api/permission/role'\nexport default {\n  name: 'JNPF-roleTransfer',\n  data() {\n    return {\n      allLoading: false,\n      loading: false,\n      activeName: '',\n      treeData: [],\n      treeData2: [],\n      selectedData: [],\n      allList: [],\n      props: {\n        children: 'children',\n        label: 'fullName'\n      },\n      keyword: '',\n      ids: [],\n      dynamicDataList: []\n    }\n  },\n  props: {\n    height: {\n      type: String,\n      default: \"400px\"\n    },\n    dynamicList: {\n      type: Array,\n      default: () => []\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    auth: {\n      type: Boolean,\n      default: false\n    },\n  },\n  watch: {\n    activeName(val) {\n      this.keyword = ''\n      this.search()\n    }\n  },\n  methods: {\n    init() {\n      this.selectedData = []\n      this.ids = []\n      this.keyword = ''\n      this.activeName = 'organize'\n      this.dynamicDataList = this.dynamicList.map(o => ({\n        'type': 'role',\n        ...o\n      }))\n      this.getList()\n    },\n    getSelectList() {\n      this.allLoading = true\n      if (!this.value.length) return this.allLoading = false\n      let list = []\n      for (let i = 0; i < this.value.length; i++) {\n        inner: for (let j = 0; j < this.allList.length; j++) {\n          if (this.value[i] === this.allList[j].id) {\n            list.push(this.allList[j])\n            break inner\n          }\n        }\n      }\n      this.selectedData = list\n      this.ids = this.selectedData.map(o => o.id)\n      this.allLoading = false\n    },\n    search() {\n      const tree = this.activeName === 'organize' ? 'tree2' : 'tree1'\n      this.$refs[tree].filter(this.keyword)\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    getList() {\n      this.loading = true\n      if (this.auth) {\n        getRoleSelectorByPermission().then(res => {\n          let list = res.data.list\n          this.treeData = list.filter(o => o.id === '1')\n          this.treeData2 = list.filter(o => o.id !== '1')\n          this.$store.dispatch('base/getRoleList').then(res => {\n            this.allList = [...res, ...this.dynamicDataList]\n            this.getSelectList()\n            this.loading = false\n          })\n        })\n      } else {\n        this.$store.dispatch('base/getRoleTree').then(res => {\n          this.treeData = res.filter(o => o.id === '1')\n          this.treeData2 = res.filter(o => o.id !== '1')\n          this.$store.dispatch('base/getRoleList').then(res => {\n            this.allList = [...res, ...this.dynamicDataList]\n            this.getSelectList()\n            this.loading = false\n          })\n        })\n      }\n    },\n    handleNodeClick(data) {\n      if (data.type === 'system' || data.type === 'role') {\n        const boo = this.selectedData.some(o => o.id === data.id)\n        if (boo) return\n        const item = {\n          id: data.id,\n          fullName: data.fullName\n        }\n        this.multiple ? this.selectedData.push(item) : this.selectedData = [item]\n        this.multiple ? this.ids.push(item.id) : this.ids = [item.id]\n        this.$emit('input', this.ids)\n        this.$emit('getValue', this.ids, this.selectedData)\n      }\n    },\n    removeAll() {\n      this.selectedData = []\n      this.ids = []\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n      this.ids.splice(index, 1)\n      this.$emit('input', this.ids)\n      this.$emit('getValue', this.ids, this.selectedData)\n    },\n  }\n};\n",null]}