{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RCalculate.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/index/RightComponents/RCalculate.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport comMixin from './mixin';\nimport { mergeNumberOfExps, validExp } from '@/components/Generator/utils'\nimport { getDrawingList } from '@/components/Generator/utils/db'\nimport { deepClone } from '@/utils'\nexport default {\n  props: ['activeData'],\n  mixins: [comMixin],\n  data() {\n    return {\n      expressionTemp: [],\n      expDialogVisible: false,\n      expValid: true,\n    }\n  },\n  computed: {\n    calculateCmps() {\n      const drawingList = getDrawingList() || []\n      const calcList = []\n      const loop = (data, parent) => {\n        if (!data) return\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data)\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent))\n        if (data.__config__ && data.__config__.jnpfKey && data.__vModel__) {\n          if (['inputNumber', 'calculate'].includes(data.__config__.jnpfKey)) {\n            const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table'\n            if (isTableChild && !this.isSameSource(data)) return;\n            calcList.push({\n              __vModel__: isTableChild ? parent.__vModel__ + '.' + data.__vModel__ : data.__vModel__,\n              label: isTableChild ? parent.__config__.label + '.' + data.__config__.label : data.__config__.label\n            })\n          }\n        }\n      }\n      loop(drawingList)\n      return calcList\n    }\n  },\n  created() { },\n  methods: {\n    reloadExpressionTemp() {\n      const isValid = d => {\n        const target = this.calculateCmps.find(cmp => cmp.__vModel__ === d.__vModel__ && cmp.__vModel__ === d.__vModel__)\n        return target ? true : false\n      }\n      this.expressionTemp = this.activeData.expression.map(t => {\n        return typeof t === 'string' || isValid(t) ? t : { __vModel__: t.__vModel__, label: '无效的值' }\n      })\n      this.activeData.expression = this.expressionTemp\n    },\n    onOpen() {\n      this.expressionTemp = deepClone(this.activeData.expression)\n      this.expValid = true\n    },\n    checkExpression() {\n      if (!this.expressionTemp.length) {\n        this.activeData.expression = this.expressionTemp // calcRPN(toRPN(formatExp))\n        this.expDialogVisible = false\n        return\n      }\n      let formatExp = mergeNumberOfExps(this.expressionTemp)\n      const temp = formatExp.map(t => typeof t === 'object' ? 1 : t)\n      let boo = this.expressionTemp.some(o => o.label === '无效的值')\n      if (boo) return this.$message.error(`编辑的公式含有无效的值，无法计算`)\n      this.expValid = validExp(temp, false)\n      if (this.expValid) {\n        this.activeData.expression = this.expressionTemp // calcRPN(toRPN(formatExp))\n        this.expDialogVisible = false\n      } else {\n        this.$message.error(`编辑的公式不符合计算法则，无法计算`)\n      }\n    },\n    isSameSource(data) {\n      const isSubTable = this.activeData.__config__.isSubTable;\n      if (isSubTable) return data.__config__.isSubTable && this.activeData.__config__.parentVModel === data.__config__.parentVModel;\n      return !data.__config__.isSubTable;\n    }\n  }\n}\n",null]}