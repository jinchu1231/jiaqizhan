{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/userList/UserList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/userList/UserList.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport { getImUser } from '@/api/permission/user'\nimport { getIMReply, deleteChatRecord, relocation } from '@/api/system/message'\nimport Im from './Im'\nexport default {\n  name: 'UserList',\n  components: { Im },\n  data() {\n    return {\n      top: 0,\n      left: 0,\n      selectedTag: {},\n      visitedViews: '',\n      drawer: false,\n      activeTab: 'reply',\n      userList: [],\n      replyList: [],\n      loading: false,\n      replyLoading: false,\n      visibleMenu: false,\n      visible: false,\n      finish: false,\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      }\n    }\n  },\n  created() { },\n  computed: {\n    ...mapGetters(['userInfo']),\n  },\n  watch: {\n    activeTab(val) {\n      if (val === 'contacts' && !this.userList.length) {\n        this.getUserList()\n      }\n    },\n    visibleMenu(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    }\n  },\n  methods: {\n    closeMenu() {\n      this.visibleMenu = false\n    },\n    openMenu(tag, e) {\n      const menuMinWidth = 105\n      const offsetLeft = this.$el.getBoundingClientRect().left // container margin left\n      const offsetWidth = this.$el.offsetWidth // container width\n      const maxLeft = offsetWidth - menuMinWidth // left boundary\n      const left = e.clientX - offsetLeft + 30 // 15: margin right\n      if (left > maxLeft) {\n        this.left = maxLeft\n      } else {\n        this.left = left\n      }\n      this.top = e.clientY - 95\n      this.visibleMenu = true\n      this.selectedTag = tag\n    },\n    relocation() {\n      this.$refs.JNPFIm.closeIM()\n      relocation(this.selectedTag.id).then((res) => {\n        const list = this.replyList.filter(o => o.id !== this.selectedTag.id)\n        this.replyList = list\n      });\n    },\n    deleteChatRecord() {\n      this.$refs.JNPFIm.closeIM()\n      this.$confirm(\"是否清空当前聊天的所有记录?\", \"提示\", {\n        type: \"warning\",\n      }).then(() => {\n        deleteChatRecord(this.selectedTag.id).then((res) => {\n          for (let index = 0; index < this.replyList.length; index++) {\n            const element = this.replyList[index];\n            if (element.id === this.selectedTag.id) {\n              element.unreadMessage = ''\n              element.latestMessage = ''\n              element.messageType = ''\n            }\n          }\n        });\n      }).catch(() => { });\n    },\n    init() {\n      this.finish = false\n      this.drawer = true\n      this.listQuery.currentPage = 1\n      this.listQuery.keyword = ''\n      this.activeTab = 'reply'\n      this.userList = []\n      this.replyList = []\n      this.getReplyList()\n      this.$nextTick(() => {\n        this.bindScroll()\n      })\n    },\n    bindScroll() {\n      let _this = this,\n        vBody = _this.$refs.userList;\n      vBody.addEventListener(\"scroll\", function () {\n        if (vBody.scrollHeight - vBody.clientHeight - vBody.scrollTop <= 300 && !_this.loading && !_this.finish) {\n          _this.listQuery.currentPage += 1\n          _this.getUserList()\n        }\n      });\n    },\n    getReplyList() {\n      this.replyLoading = true\n      getIMReply().then(res => {\n        this.replyList = res.data.list\n        this.replyLoading = false\n      })\n    },\n    getUserList() {\n      this.loading = true\n      getImUser(this.listQuery).then(res => {\n        if (res.data.list.length < this.listQuery.pageSize) this.finish = true\n        this.userList = [...this.userList, ...res.data.list]\n        this.loading = false\n      })\n    },\n    search() {\n      this.userList = []\n      this.finish = false\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = 20\n      this.getUserList()\n    },\n    updateReply(data, isAdd) {\n      let boo = false\n      const len = this.replyList.length\n      for (let i = 0; i < len; i++) {\n        if (data.formUserId === this.replyList[i].id) {\n          if (isAdd) this.replyList[i].unreadMessage += 1\n          this.replyList[i].latestMessage = data.formMessage\n          this.replyList[i].messageType = data.messageType\n          this.replyList[i].latestDate = data.latestDate\n          boo = true\n          break\n        }\n      }\n      if (boo) return\n      if (isAdd) data.unreadMessage = 1\n      data.latestMessage = data.formMessage\n      data.id = data.formUserId\n      this.replyList.unshift(data)\n    },\n    updateLatestMessage(data) {\n      let boo = false\n      const len = this.replyList.length\n      for (let i = 0; i < len; i++) {\n        if (data.toUserId === this.replyList[i].id) {\n          this.replyList[i].latestMessage = data.toMessage\n          this.replyList[i].messageType = data.messageType\n          this.replyList[i].latestDate = data.latestDate\n          boo = true\n          break\n        }\n      }\n      if (boo) return\n      const item = {\n        account: data.toAccount,\n        headIcon: data.toHeadIcon,\n        id: data.toUserId,\n        latestDate: data.latestDate,\n        latestMessage: data.toMessage,\n        messageType: data.messageType,\n        realName: data.toRealName,\n        unreadMessage: 0\n      }\n      this.replyList.unshift(item)\n    },\n    toggleBlink() {\n      const boo = this.replyList.some(o => o.unreadMessage)\n      this.$emit('changeTwinkle', boo)\n    },\n    readInfo(item, isReply) {\n      let socket = this.$store.getters.socket\n      let msgObj = {\n        method: \"UpdateReadMessage\",\n        formUserId: item.id,\n        token: this.$store.getters.token\n      }\n      let msg = JSON.stringify(msgObj);\n      socket.send(msg)\n      if (isReply) {\n        item.unreadMessage = 0\n      } else {\n        for (let i = 0; i < this.replyList.length; i++) {\n          if (item.id === this.replyList[i].id) {\n            this.replyList[i].unreadMessage = 0\n            break\n          }\n        }\n      }\n      this.toggleBlink()\n      this.$refs.JNPFIm.list = []\n      //获取消息列表\n      var messageList = {\n        method: \"MessageList\",\n        toUserId: item.id,\n        formUserId: this.userInfo.userId,\n        token: this.$store.getters.token,\n        currentPage: 1,\n        pageSize: 30,\n        sord: \"desc\"\n      }\n      let msg1 = JSON.stringify(messageList);\n      socket.send(msg1)\n      this.$refs.JNPFIm.init(item)\n    },\n    getMsgText(text, type) {\n      let message = ''\n      switch (type) {\n        case 'voice':\n          message = '[语音]'\n          break;\n        case 'image':\n          message = '[图片]'\n          break;\n        default:\n          message = text\n          break;\n      }\n      return message\n    },\n    handleClose(done) {\n      this.$refs.JNPFIm.closeIM()\n      let vBody = this.$refs.userList;\n      vBody.removeEventListener(\"scroll\", function () { });\n      done();\n    }\n  }\n}\n",null]}