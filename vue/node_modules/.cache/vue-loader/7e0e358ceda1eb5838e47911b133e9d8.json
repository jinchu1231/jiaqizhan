{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/system/printDev/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/system/printDev/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getPrintDevInfo, Update, Create, getFields } from '@/api/system/printDev'\nimport { getDataSourceListAll } from '@/api/systemData/dataSource'\nimport PrintTemplater from './ts-print-templater'\nexport default {\n  components: { PrintTemplater },\n  data() {\n    return {\n      visible: false,\n      loading: false,\n      nextBtnLoading: false,\n      activeStep: 0,\n      showPrint: true,\n      dataForm: {\n        id: '',\n        fullName: '',\n        enCode: '',\n        dbLinkId: '0',\n        type: 1,\n        enabledMark: 1,\n        sortCode: 0,\n        category: '',\n        sqlTemplate: '',\n        leftFields: '',\n        printTemplate: '',\n        description: '',\n        pageParam: {}\n      },\n      dataRule: {\n        fullName: [\n          { required: true, message: '模板名称不能为空', trigger: 'blur' },\n        ],\n        enCode: [\n          { required: true, message: '模板编码不能为空', trigger: 'blur' },\n          { validator: this.formValidate('enCode'), trigger: 'blur' },\n        ],\n        category: [\n          { required: true, message: '模板分类不能为空', trigger: 'change' },\n        ],\n        dbLinkId: [\n          { required: true, message: '数据连接不能为空', trigger: 'change' },\n        ],\n        sqlTemplate: [\n          { required: true, message: 'SQL语句不能为空', trigger: 'click' },\n        ]\n      },\n      formVisible: false,\n      btnLoading: false,\n      sqlTemplate: [],\n      categoryList: [],\n      treeData: [],\n      dbOptions: [],\n      pageParam: {\n        mt: \"10\",\n        mb: \"10\",\n        ml: \"10\",\n        mr: \"10\",\n        type: \"2\",\n        width: 210,\n        height: 297,\n        direction: \"纵向\"\n      },\n    }\n  },\n  methods: {\n    pageParamInit(e) {\n      this.pageParam = e\n    },\n    pageParamChange(pageParam) {\n      this.dataForm.pageParam = pageParam && JSON.stringify(pageParam)\n    },\n    init(categoryList, id) {\n      this.categoryList = categoryList\n      this.activeStep = 0\n      this.dataForm.id = id || ''\n      this.getDbOptions()\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].resetFields()\n        if (this.dataForm.id) {\n          this.loading = true\n          this.showPrint = false\n          getPrintDevInfo(this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            this.sqlTemplate = this.dataForm.sqlTemplate && JSON.parse(this.dataForm.sqlTemplate) || []\n            let e = res.data.pageParam && JSON.parse(res.data.pageParam)\n            this.pageParam = e\n            this.pageParam.direction = \"纵向\"\n            this.showPrint = true\n            this.loading = false\n          }).catch(() => { this.loading = false })\n          this.showPrint = true\n        }\n      })\n    },\n    dataFormSubmit() {\n      this.btnLoading = true\n      // this.dataForm.sqlTemplate = JSON.stringify(this.sqlTemplate)\n      const formMethod = this.dataForm.id ? Update : Create\n      formMethod(this.dataForm).then((res) => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            this.closeDialog(true)\n          }\n        })\n      }).catch(() => { this.btnLoading = false })\n    },\n    delSql(i) {\n      this.sqlTemplate.splice(i, 1)\n    },\n    addSql() {\n      let item = { sql: \"\" }\n      this.sqlTemplate.push(item)\n    },\n    exist() {\n      if (!this.sqlTemplate.length) {\n        this.$message.error('请输入SQL语句')\n        return false\n      }\n      let isOk = true;\n      //  遍历数组，判断非空\n      for (let i = 0; i < this.sqlTemplate.length; i++) {\n        const e = this.sqlTemplate[i];\n        if (!e.sql) {\n          this.$message({\n            message: `第${i + 1}行SQL语句不能为空`,\n            type: 'error',\n            duration: 1000\n          });\n          isOk = false\n          break\n        }\n      }\n      return isOk;\n    },\n    next() {\n      if (this.activeStep < 1) {\n        if (!this.exist()) return\n        this.dataForm.sqlTemplate = JSON.stringify(this.sqlTemplate)\n        this.$refs['dataForm'].validate((valid) => {\n          if (valid) {\n            this.nextBtnLoading = true\n            const query = {\n              dbLinkId: this.dataForm.dbLinkId,\n              sqlTemplate: this.dataForm.sqlTemplate\n            }\n            getFields(query).then(res => {\n              this.treeData = res.data\n              this.activeStep += 1\n              this.nextBtnLoading = false\n            }).catch(() => {\n              this.nextBtnLoading = false\n            })\n          }\n        })\n      }\n    },\n    closeDialog(isRefresh) {\n      this.visible = false\n      this.$emit('close', isRefresh)\n    },\n    prev() {\n      this.activeStep -= 1\n    },\n    stepChick(key) {\n      if (this.activeStep <= key) return\n      this.activeStep = key\n    },\n    getDbOptions() {\n      getDataSourceListAll().then(res => {\n        const list = res.data.list || []\n        this.dbOptions = list.filter(o => o.children && o.children.length);\n      })\n    }\n  }\n}\n",null]}