{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/TreeSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/TreeSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nrequire(\"core-js/modules/es6.number.constructor\");\nvar _vuex = require(\"vuex\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar isFirst = 1;\nvar _default2 = exports.default = {\n  name: \"JnpfTreeSelect\",\n  props: {\n    // 在过滤条件时候传true,设置不显示根节点标题\n    conditionFilter: {\n      type: Boolean,\n      default: false\n    },\n    // 配置项\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          value: 'id',\n          // ID字段名\n          label: 'fullName',\n          // 显示名称\n          children: 'children',\n          // 子级字段名\n          disabled: function disabled(data) {\n            return data.disabled;\n          }\n        };\n      }\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 选项列表数据(树形结构的对象数组)\n    options: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    // 初始值\n    value: {\n      type: [String, Number, Array]\n    },\n    // 可清空选项\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    // 能否搜索\n    filterable: {\n      type: Boolean,\n      default: true\n    },\n    // 只能选择最后一层的数值\n    lastLevel: {\n      type: Boolean,\n      default: false\n    },\n    // 只能选择最后一层的数值时，需要根据 lastLevelKey来判断是否最后一层\n    lastLevelKey: {\n      type: String,\n      default: \"hasChildren\"\n    },\n    lastLevelValue: {\n      default: false\n    },\n    // 自动收起\n    accordion: {\n      type: Boolean,\n      default: false\n    },\n    defaultExpandAll: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    // 是否多选，默认单选\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    isDataInterface: {\n      type: Number,\n      default: 0\n    }\n  },\n  computed: _objectSpread({}, (0, _vuex.mapState)({\n    themeClass: function themeClass(state) {\n      return state.settings.themeClass;\n    }\n  })),\n  data: function data() {\n    return {\n      valueTitle: '',\n      defaultExpandedKey: [],\n      selectOptions: [],\n      optionTitle: \"\",\n      key: +new Date()\n    };\n  },\n  mounted: function mounted() {\n    if (this.value) {\n      this.initHandle();\n    }\n  },\n  methods: {\n    visibleChange: function visibleChange(val) {\n      this.$emit('visible-change', val);\n    },\n    selectFilter: function selectFilter(val) {\n      if (this.options.length) this.$refs.selectTree.filter(val);\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    selectFocus: function selectFocus() {\n      var _this = this;\n      if (this.isDataInterface === 1) {\n        this.$emit('selectChange');\n      }\n      this.initHandle();\n      if (isFirst && this.$refs.elSelect) {\n        isFirst = 0;\n        this.$refs.elSelect.focus();\n        this.$nextTick(function () {\n          _this.$refs.elSelect.blur();\n        });\n      }\n    },\n    // 初始化值\n    initHandle: function initHandle() {\n      var _this2 = this;\n      this.$refs.selectTree.filter('');\n      if (this.value) {\n        if (this.multiple) {\n          setTimeout(function () {\n            var titleList = [];\n            _this2.$refs.selectTree.setCheckedKeys(_this2.value);\n            if (_this2.lastLevel) {\n              titleList = _this2.$refs.selectTree.getCheckedNodes(true);\n            } else {\n              titleList = _this2.$refs.selectTree.getCheckedNodes(_this2.conditionFilter);\n            }\n            _this2.selectOptions = titleList;\n            _this2.valueTitle = titleList.map(function (o) {\n              return o[_this2.props.value];\n            });\n          }, 10);\n        } else {\n          setTimeout(function () {\n            _this2.valueTitle = _this2.$refs.selectTree.getNode(_this2.value) ? _this2.$refs.selectTree.getNode(_this2.value).data[_this2.props.label] : ''; // 初始化显示\n            _this2.$refs.selectTree.setCurrentKey(_this2.value); // 设置默认选中\n            _this2.defaultExpandedKey = [_this2.value]; // 设置默认展开\n          }, 10);\n        }\n      } else {\n        if (this.multiple) {\n          this.valueTitle = [];\n          this.$refs.selectTree.setCheckedKeys([]);\n        } else {\n          this.valueTitle = '';\n          this.$refs.selectTree.setCurrentKey(null);\n        }\n      }\n      this.initScroll();\n    },\n    // 初始化滚动条\n    initScroll: function initScroll() {\n      this.$nextTick(function () {\n        var list = document.querySelectorAll('.JNPF-select-tree .el-scrollbar .el-select-dropdown__wrap');\n        // 有多个下拉框，造成页面错位\n        var index = list.length - 1;\n        var scrollWrap = list[index];\n        var scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar');\n        scrollWrap.style && (scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;');\n        for (var i = 0; i < scrollBar.length; i++) {\n          scrollBar[i].style.width = 0;\n        }\n      });\n    },\n    // 单选切换选项\n    handleNodeClick: function handleNodeClick(node) {\n      if (node.disabled) return;\n      if (!this.multiple) {\n        if (this.lastLevel && node[this.lastLevelKey] != undefined && node[this.lastLevelKey] != this.lastLevelValue) return;\n        this.valueTitle = node[this.props.label];\n        this.$emit('input', node[this.props.value], node);\n        this.$emit('change', node[this.props.value], node);\n        this.defaultExpandedKey = [];\n        this.$refs.elSelect.blur();\n      }\n    },\n    // 多选选择\n    check: function check(node) {\n      if (!this.multiple) return;\n      var selectedData = [],\n        titleList = [],\n        selectedTextData = [];\n      if (this.lastLevel) {\n        selectedTextData = this.$refs.selectTree.getCheckedNodes(true);\n        for (var i = 0; i < selectedTextData.length; i++) {\n          var e = selectedTextData[i];\n          if (e[this.lastLevelKey] == this.lastLevelValue) {\n            selectedData.push(e[this.props.value]);\n            titleList.push(e[this.props.label]);\n          }\n        }\n      } else {\n        selectedTextData = this.$refs.selectTree.getCheckedNodes();\n        for (var _i = 0; _i < selectedTextData.length; _i++) {\n          var _e = selectedTextData[_i];\n          selectedData.push(_e[this.props.value]);\n          titleList.push(_e[this.props.label]);\n        }\n      }\n      this.$emit('input', selectedData, selectedTextData);\n      this.$emit('change', selectedData, selectedTextData);\n    },\n    removeTag: function removeTag(tag) {\n      this.$refs.selectTree.setChecked(tag, false);\n      this.check();\n    },\n    // 清除选中\n    clearHandle: function clearHandle() {\n      if (this.multiple) {\n        this.valueTitle = [];\n        this.$emit('input', []);\n        this.$emit('change', [], []);\n        this.$refs.selectTree.setCheckedKeys([]);\n      } else {\n        this.valueTitle = '';\n        this.$emit('input', '');\n        this.$emit('change', '', '');\n      }\n      this.defaultExpandedKey = [];\n      this.clearSelected();\n    },\n    // 清空选中样式\n    clearSelected: function clearSelected() {\n      var allNode = document.querySelectorAll('#tree-option .el-tree-node');\n      for (var i = 0; i < allNode.length; i++) {\n        allNode[i].classList.remove('is-current');\n      }\n    }\n  },\n  watch: {\n    value: function value(val) {\n      this.initHandle();\n    },\n    multiple: function multiple(val) {\n      this.key = +new Date();\n    },\n    options: function options(val) {\n      if (this.value) this.initHandle();\n    }\n  }\n};",null]}