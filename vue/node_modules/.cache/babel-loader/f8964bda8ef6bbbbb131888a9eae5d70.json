{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/permission/user/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/permission/user/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.regexp.split\");\nvar _position = require(\"@/api/permission/position\");\nvar _role = require(\"@/api/permission/role\");\nvar _group = require(\"@/api/permission/group\");\nvar _user = require(\"@/api/permission/user\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  data: function data() {\n    return {\n      visible: false,\n      btnLoading: false,\n      dataForm: {\n        id: '',\n        sortCode: 0,\n        enabledMark: 1,\n        account: '',\n        realName: '',\n        organizeId: '',\n        organizeIdTree: [],\n        managerId: '',\n        positionId: '',\n        roleId: '',\n        groupId: '',\n        description: '',\n        headIcon: '',\n        gender: null,\n        nation: '',\n        nativePlace: '',\n        entryDate: null,\n        certificatesType: '',\n        certificatesNumber: '',\n        education: '',\n        birthday: null,\n        telePhone: '',\n        landline: '',\n        mobilePhone: '',\n        email: '',\n        urgentContacts: '',\n        urgentTelePhone: '',\n        postalAddress: '',\n        ranks: ''\n      },\n      ranksList: [],\n      roleId: [],\n      groupId: [],\n      positionId: [],\n      positionTreeData: [],\n      roleTreeData: [],\n      groupTreeData: [],\n      genderTreeData: [],\n      nationTreeData: [],\n      educationTreeData: [],\n      certificatesTypeTreeData: [],\n      uploadHeaders: {\n        Authorization: this.$store.getters.token\n      },\n      formLoading: false,\n      genderProps: {\n        value: 'enCode',\n        label: 'fullName'\n      },\n      dataRule: {\n        account: [{\n          required: true,\n          message: '请输入账户',\n          trigger: 'blur'\n        }, {\n          validator: this.formValidate('fullName', '账户不能含有特殊符号'),\n          trigger: 'blur'\n        }, {\n          max: 50,\n          message: '账户最多为50个字符！',\n          trigger: 'blur'\n        }],\n        realName: [{\n          required: true,\n          message: '请输入真实姓名',\n          trigger: 'blur'\n        }, {\n          validator: this.formValidate('fullName', '真实姓名不能含有特殊符号'),\n          trigger: 'blur'\n        }, {\n          max: 50,\n          message: '真实姓名最多为50个字符！',\n          trigger: 'blur'\n        }],\n        gender: [{\n          required: true,\n          message: '请选择性别',\n          trigger: 'change'\n        }],\n        organizeIdTree: [{\n          required: true,\n          message: '请选择所属组织',\n          trigger: 'click',\n          type: 'array'\n        }]\n      }\n    };\n  },\n  methods: {\n    init: function init(id, organizeIdTree) {\n      var _this = this;\n      this.visible = true;\n      this.dataForm.id = id || '';\n      this.roleId = [];\n      this.groupId = [];\n      this.positionId = [];\n      this.positionTreeData = [];\n      this.roleTreeData = [];\n      this.dataForm.organizeIdTree = [];\n      this.$nextTick(function () {\n        _this.formLoading = true;\n        _this.$refs['dataForm'].resetFields();\n        // 获取分组下拉列表\n        (0, _group.getGroupSelector)().then(function (res) {\n          _this.groupTreeData = res.data;\n        });\n        // 获取民族\n        _this.$store.dispatch('base/getDictionaryData', {\n          sort: 'Nation'\n        }).then(function (res) {\n          _this.nationTreeData = res;\n          // 获取学历\n          _this.$store.dispatch('base/getDictionaryData', {\n            sort: 'Education'\n          }).then(function (res) {\n            _this.educationTreeData = res;\n          });\n          // 获取证件类型\n          _this.$store.dispatch('base/getDictionaryData', {\n            sort: 'certificateType'\n          }).then(function (res) {\n            _this.certificatesTypeTreeData = res;\n          });\n          // 获取性别\n          _this.$store.dispatch('base/getDictionaryData', {\n            sort: 'sex'\n          }).then(function (res) {\n            _this.genderTreeData = res;\n          });\n          //获取职级\n          _this.$store.dispatch('base/getDictionaryData', {\n            sort: 'Rank'\n          }).then(function (res) {\n            _this.ranksList = res;\n          });\n        });\n        if (_this.dataForm.id) {\n          (0, _user.getUserInfo)(_this.dataForm.id).then(function (res) {\n            _this.dataForm = res.data;\n            if (_this.dataForm.roleId) _this.roleId = _this.dataForm.roleId.split(',');\n            if (_this.dataForm.groupId) _this.groupId = _this.dataForm.groupId.split(',');\n            if (_this.dataForm.positionId) _this.positionId = _this.dataForm.positionId.split(',');\n            if (_this.dataForm.organizeIdTree && _this.dataForm.organizeIdTree.length) {\n              _this.getOptionsByOrgIds(_this.dataForm.organizeIdTree);\n            }\n            _this.formLoading = false;\n          }).catch(function () {\n            return _this.formLoading = false;\n          });\n        } else {\n          _this.dataForm.organizeIdTree = organizeIdTree.length ? [organizeIdTree] : [];\n          if (_this.dataForm.organizeIdTree && _this.dataForm.organizeIdTree.length) {\n            _this.getOptionsByOrgIds(_this.dataForm.organizeIdTree);\n          }\n          _this.formLoading = false;\n        }\n      });\n    },\n    goBack: function goBack() {\n      this.$emit('close');\n    },\n    onChange: function onChange(key) {\n      this.dataForm[key] = this[key].join();\n    },\n    onOrganizeChange: function onOrganizeChange(val) {\n      this.dataForm.positionId = '';\n      this.dataForm.roleId = '';\n      this.dataForm.organizeId = '';\n      this.positionId = [];\n      this.roleId = [];\n      if (!val || !val.length) return;\n      this.getOptionsByOrgIds(val);\n    },\n    getOptionsByOrgIds: function getOptionsByOrgIds(organizeIdTree) {\n      var _this2 = this;\n      var organizeIds = organizeIdTree.map(function (o) {\n        return o[o.length - 1];\n      });\n      this.dataForm.organizeId = organizeIds.join();\n      (0, _position.getPositionByOrganize)(organizeIds).then(function (res) {\n        _this2.positionTreeData = res.data.list.filter(function (o) {\n          return o.children && Array.isArray(o.children) && o.children.length;\n        });\n      });\n      (0, _role.getRoleByOrganize)(organizeIds).then(function (res) {\n        _this2.roleTreeData = res.data.list.filter(function (o) {\n          return o.children && Array.isArray(o.children) && o.children.length;\n        });\n      });\n    },\n    visibleChange: function visibleChange(val) {\n      if (!val) return;\n      if (!this.dataForm.organizeIdTree || !this.dataForm.organizeIdTree.length) this.$message.warning('请先选择所属组织');\n    },\n    handleAvatarSuccess: function handleAvatarSuccess(res) {\n      if (res.code === 200 && res.data && res.data.url) {\n        this.dataForm.headIcon = res.data.url;\n      } else {\n        this.$message.error('头像上传失败');\n      }\n    },\n    handleConfirm: function handleConfirm() {\n      var _this3 = this;\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          _this3.btnLoading = true;\n          var formMethod = _this3.dataForm.id ? _user.updateUser : _user.createUser;\n          formMethod(_this3.dataForm).then(function (res) {\n            _this3.$message({\n              message: res.msg,\n              type: 'success',\n              duration: 1500,\n              onClose: function onClose() {\n                _this3.visible = false;\n                _this3.btnLoading = false;\n                _this3.$emit('close', true);\n              }\n            });\n          }).catch(function () {\n            _this3.btnLoading = false;\n          });\n        }\n      });\n    }\n  }\n};",null]}