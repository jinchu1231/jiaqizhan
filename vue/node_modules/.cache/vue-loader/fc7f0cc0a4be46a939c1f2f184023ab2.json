{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/components/FlowSelect.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/components/FlowSelect.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { addResizeListener, removeResizeListener } from 'element-ui/src/utils/resize-event';\nimport { FlowEngineAll, FlowEngineListByIds } from '@/api/workFlow/FlowEngine'\nexport default {\n  name: 'flowSelect',\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  props: {\n    value: {\n      type: Array,\n      default: []\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: '全部流程'\n    },\n  },\n  data() {\n    return {\n      tableData: [],\n      innerValue: '',\n      listQuery: {\n        currentPage: 1,\n        pageSize: 20,\n        sort: 'desc',\n      },\n      keyword: '',\n      total: 0,\n      listLoading: false,\n      query: {\n        categoryId: '',\n        keyword: '',\n      },\n      treeLoading: false,\n      visible: false,\n      multipleSelection: '',\n      categoryList: [],\n      selectedData: [],\n      tagsList: [],\n      inputWidth: 0,\n    }\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    },\n    selectDisabled() {\n      this.$nextTick(() => {\n        this.resetInputHeight();\n      });\n    },\n\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.multiple\n        ? Array.isArray(this.value) && this.value.length > 0\n        : this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.selectDisabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    },\n    currentPlaceholder() {\n      if (this.multiple && Array.isArray(this.value) && this.value.length) {\n        return ''\n      } else {\n        return this.placeholder\n      }\n    },\n    selectDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    selectSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    collapseTagSize() {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1\n        ? 'mini'\n        : 'small';\n    },\n  },\n  created() {\n    this.getDictionaryData()\n    this.setDefault()\n  },\n  mounted() {\n    addResizeListener(this.$el, this.handleResize);\n    const reference = this.$refs.reference;\n    if (reference && reference.$el) {\n      const sizeMap = {\n        medium: 36,\n        small: 32,\n        mini: 28\n      };\n      const input = reference.$el.querySelector('input');\n      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];\n    }\n    if (this.multiple) {\n      this.resetInputHeight();\n    }\n    this.$nextTick(() => {\n      if (reference && reference.$el) {\n        this.inputWidth = reference.$el.getBoundingClientRect().width;\n      }\n    });\n    this.setDefault()\n  },\n  beforeDestroy() {\n    if (this.$el && this.handleResize) removeResizeListener(this.$el, this.handleResize);\n  },\n  methods: {\n    initData() {\n      this.listLoading = true\n      this.tableData = []\n      let query = {\n        ...this.listQuery,\n        keyword: this.keyword,\n        category: this.categoryId ? this.categoryId : \"\"\n      }\n      FlowEngineAll(query).then((res) => {\n        this.tableData = res.data.list\n        this.total = res.data.pagination.total\n        if (this.tableData.length && this.selectedData.length) {\n          let arr = []\n          this.$nextTick(() => {\n            this.tableData.forEach(row => {  // 循环嵌套\n              this.selectedData.forEach(item => {\n                if (row.id === item.id) { // 判断哪些数据是需要回显的\n                  arr.push(row)\n                  this.$refs.multipleTable.$refs.JNPFTable.toggleRowSelection(row, true)\n                }\n              })\n            })\n          })\n        }\n        this.listLoading = false\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    setDefault() {\n      if (!this.value || !this.value.length) {\n        this.innerValue = ''\n        this.selectedData = []\n        this.tagsList = []\n        return\n      }\n      const arr = this.multiple ? this.value : [this.value]\n      FlowEngineListByIds(arr).then((res) => {\n        this.selectedData = res.data\n        if (this.multiple) {\n          this.innerValue = ''\n          this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        } else {\n          this.innerValue = this.selectedData.length ? this.selectedData[0].fullName : ''\n        }\n        this.$nextTick(() => {\n          if (this.multiple) {\n            this.resetInputHeight();\n          }\n        })\n\n      })\n    },\n\n    flowSelect() {\n      this.visible = true\n      this.reset()\n    },\n    getDictionaryData() {\n      this.$store.dispatch('base/getDictionaryData', { sort: 'WorkFlowCategory' }).then((res) => {\n        this.categoryList.push({\n          id: 0,\n          encode: \"all\",\n          fullName: \"全部流程\",\n        })\n\n        this.categoryList.push(...res)\n      })\n      this.categoryId = 0\n    },\n    handleNodeClick(data) {\n      this.categoryId = data.id ? data.id : 0\n      this.initData()\n\n    },\n    reset() {\n      this.keyword = ''\n      this.search()\n    },\n    search() {\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = 20\n      this.listQuery.sort = 'desc'\n      this.initData()\n    },\n    handleSelection(selection, val) {\n      const index = this.selectedData.findIndex((item) => {\n        return item.id == val.id\n      })\n      if (index == -1) {\n        this.selectedData.push(val)\n      } else {\n        this.selectedData.splice(index, 1)\n      }\n      this.selectedData = [...new Set(this.selectedData)]\n    },\n\n    handleSelectionAll(selection) {\n      if (selection.length) {\n        if (this.selectedData.length) {\n          this.selectedData.forEach((item, index) => {\n            selection.forEach(it => {\n              if (item.id != it.id) {\n                this.selectedData.push(it)\n              }\n            });\n          });\n        } else {\n          this.selectedData.push(...selection)\n        }\n      } else {\n        if (this.selectedData.length && this.tableData.length) {\n          this.tableData.forEach(item => {\n            const index = this.selectedData.findIndex((it) => {\n              return item.id == it.id\n            })\n            if (index != -1) {\n              this.selectedData.splice(index, 1)\n            }\n          });\n        }\n      }\n      const map = new Map()\n      this.selectedData = this.selectedData.filter(key => !map.has(key.id) && map.set(key.id))\n    },\n    //确定\n    confirm() {\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        let selectedIds = this.selectedData.map(o => o.id)\n        this.$emit('input', selectedIds)\n        this.$emit('changeName', this.tagsList)\n      } else {\n        if (!this.selectedData.length) {\n          this.innerValue = ''\n          this.$emit('input', '')\n          this.$emit('changeName', '', {})\n          this.visible = false\n          return\n        }\n        this.innerValue = this.selectedData[0].fullName\n        let selectedIds = this.selectedData.map(o => o.id)\n        this.$emit('input', selectedIds[0])\n        this.$emit('changeName', this.tagsList)\n      }\n      this.visible = false\n    },\n    cancelConfirm() {\n      this.setDefault()\n      this.visible = false\n    },\n\n    removeAll() {\n      this.selectedData = []\n    },\n    removeData(index) {\n      this.selectedData.splice(index, 1)\n    },\n    deleteTag(event, index) {\n      this.selectedData.splice(index, 1)\n      this.confirm()\n      event.stopPropagation();\n    },\n    handleClearClick(event) {\n      this.selectedData = []\n      this.confirm()\n      event.stopPropagation();\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    resetInputHeight() {\n      if (this.collapseTags) return;\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return;\n        let inputChildNodes = this.$refs.reference.$el.childNodes;\n        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];\n        const tags = this.$refs.tags;\n        const tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        const sizeInMap = this.initialInputHeight || 40;\n        input.style.height = this.selectedData.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tagsHeight + (tagsHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px';\n      });\n    },\n  }\n}\n",null]}