{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/workFlow/components/FlowBox.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/workFlow/components/FlowBox.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PrintDialog from '@/components/PrintDialog'\nimport SignImgDialog from '@/components/SignImgDialog'\nimport EventLog from './EventLog'\nimport { FlowBeforeInfo, Audit, Reject, Transfer, Recall, Cancel, Assign, SaveAudit, Candidates, CandidateUser, Resurgence, ResurgenceList, RejectList, suspend, restore, subFlowInfo } from '@/api/workFlow/FlowBefore'\nimport { Revoke, Press } from '@/api/workFlow/FlowLaunch'\nimport { Create, Update } from '@/api/workFlow/workFlowForm'\nimport recordList from './RecordList'\nimport Comment from './Comment'\nimport RecordSummary from './RecordSummary'\nimport CandidateForm from './CandidateForm'\nimport ErrorForm from './ErrorForm'\nimport CandidateUserSelect from './CandidateUserSelect'\nimport Process from '@/components/Process/Preview'\nimport PrintBrowse from '@/components/PrintBrowse'\nimport ActionDialog from '@/views/workFlow/components/ActionDialog'\nimport HasFreeApprover from './HasFreeApprover'\nimport SuspendDialog from './SuspendDialog'\nimport CommonWordsDialog from './CommonWordsDialog'\nimport { mapGetters } from \"vuex\"\nexport default {\n  name: 'FlowBox',\n  components: { PrintDialog, SignImgDialog, HasFreeApprover, recordList, Process, PrintBrowse, Comment, RecordSummary, CandidateForm, CandidateUserSelect, ErrorForm, ActionDialog, SuspendDialog, CommonWordsDialog, EventLog },\n  data() {\n    return {\n      printTemplateId: '',\n      printDialogVisible: false,\n      subFlowTab: '',\n      resurgenceVisible: false,\n      actionVisible: false,\n      resurgenceForm: {\n        taskNodeId: '',\n        handleOpinion: '',\n        fileList: []\n      },\n      resurgenceRules: {\n        taskNodeId: [\n          {\n            required: true,\n            message: '请选择节点',\n            trigger: 'change'\n          }\n        ],\n      },\n      logVisible: false,\n      previewVisible: false,\n      assignNodeList: [],\n      resurgenceNodeList: [],\n      currentView: '',\n      previewTitle: '',\n      formData: {},\n      setting: {},\n      monitorList: [{ fullName: '1', flowName: '1', startTime: '1', userName: '1', thisStep: '1' }, { fullName: '1', flowName: '1', startTime: '1', userName: '1', thisStep: '1' }],\n      flowFormInfo: {},\n      flowTemplateInfo: {},\n      flowTaskInfo: {},\n      flowTaskNodeList: [],\n      flowTemplateJson: {},\n      flowTaskOperatorRecordList: [],\n      properties: {},\n      endTime: 0,\n      suspendVisible: false,\n      visible: false,\n      handleId: '',\n      activeTab: '0',\n      isComment: false,\n      isSummary: false,\n      summaryType: 0,\n      loading: false,\n      btnLoading: false,\n      approvalBtnLoading: false,\n      resurgenceBtnLoading: false,\n      candidateLoading: false,\n      candidateVisible: false,\n      hasFreeApproverVisible: false,\n      signVisible: false,\n      candidateType: 1,\n      countersignOver: false,\n      branchList: [],\n      candidateList: [],\n      candidateForm: {\n        branchList: [],\n        candidateList: [],\n        fileList: [],\n        handleOpinion: '',\n        rejectStep: '',\n        rejectType: 1\n      },\n      printBrowseVisible: false,\n      rejectList: [],\n      showReject: false,\n      eventType: '',\n      signImg: '',\n      copyIds: [],\n      fullName: '',\n      thisStep: '',\n      allBtnDisabled: false,\n      flowUrgent: 1,\n      flowUrgentList: [\n        { name: '普通', color: '#409EFF', state: 1, },\n        { name: '重要', color: '#E6A23C', state: 2, },\n        { name: '紧急', color: '#F56C6C', state: 3, },\n      ],\n      errorVisible: false,\n      errorNodeList: [],\n      isValidate: false,\n      moreBtnList: [],\n      subFlowVisible: false,\n      flowBoxVisible: false,\n      subFlowInfoList: [],\n      commonWordsVisible: false,\n      noOperateAuth: true, // 是否没有操作权限\n      processKey: 0,\n    }\n  },\n  computed: {\n    title() {\n      if ([2, 3, 4].includes(this.setting.opType)) return this.fullName\n      return this.thisStep ? this.fullName + '/' + this.thisStep : this.fullName\n    },\n    selectState() {\n      const index = this.flowUrgentList.findIndex(c => this.flowUrgent === c.state)\n      return index\n    },\n    ...mapGetters(['userInfo'])\n  },\n  watch: {\n    activeTab(val) {\n      if (val === 'comment') {\n        this.$refs.comment && this.$refs.comment.init()\n        this.moreBtnList.push({ label: \"评 论\", key: \"comment\" })\n      } else {\n        this.moreBtnList = this.moreBtnList.filter(o => o.key != \"comment\")\n      }\n      if (val === 'recordSummary') {\n        this.$refs.recordSummary && this.$refs.recordSummary.init()\n      }\n    }\n  },\n  methods: {\n    common(val) {\n      this.commonWordsVisible = false\n      if (val) {\n        if (this.resurgenceVisible) {\n          this.resurgenceForm.handleOpinion += val.commonWordsText\n        } else {\n          this.candidateForm.handleOpinion += val.commonWordsText\n        }\n\n      }\n    },\n    beforeClose() {\n      this.visible = false\n      this.$refs.commonWordsDialog.close()\n    },\n    addSign() {\n      this.signVisible = true\n      this.$nextTick(() => {\n        this.$refs.SignImg.init()\n      })\n    },\n    signDialog(val) {\n      this.signVisible = false\n      if (val) {\n        this.signImg = val\n      }\n    },\n    approverDialog(needClose) {\n      if (needClose) this.$emit('close', true)\n    },\n    handelNodeLog(item) {\n      this.logVisible = true\n      this.$nextTick(() => {\n        this.$refs.EventLog.init(item.taskNodeId, item.nodeName)\n      })\n    },\n    activeClick() {\n      let data = this.subFlowInfoList.filter(o => o.flowTaskInfo.id == this.subFlowTab) || []\n      if (data.length) {\n        this.fullName = data[0].flowTaskInfo.fullName\n        this.flowTaskOperatorRecordList = data[0].flowTaskOperatorRecordList || []\n        let templateJson = data[0].flowTemplateInfo.flowTemplateJson && typeof data[0].flowTemplateInfo.flowTemplateJson === \"string\" ? JSON.parse(data[0].flowTemplateInfo.flowTemplateJson || null) : data[0].flowTemplateInfo.flowTemplateJson\n        data[0].flowTemplateInfo.flowTemplateJson = templateJson\n        this.isComment = templateJson.properties.isComment\n        this.isSummary = templateJson.properties.isSummary\n        this.summaryType = templateJson.properties.summaryType\n        this.flowUrgent = data[0].flowTaskInfo.flowUrgent || 1\n        this.setting.id = data[0].flowTaskInfo.id\n        if (data[0].flowTaskNodeList.length) {\n          let assignNodeList = []\n          for (let i = 0; i < data[0].flowTaskNodeList.length; i++) {\n            const nodeItem = data[0].flowTaskNodeList[i]\n            data.opType == 4 && nodeItem.type == 1 && nodeItem.nodeType === 'approver' && assignNodeList.push(nodeItem)\n            const loop = data => {\n              if (Array.isArray(data)) data.forEach(d => loop(d))\n              if (data.nodeId === nodeItem.nodeCode) {\n                if (nodeItem.type == 0) data.state = 'state-past'\n                if (nodeItem.type == 1) data.state = 'state-curr'\n                if (nodeItem.nodeType === 'approver' || nodeItem.nodeType === 'start' || nodeItem.nodeType === 'subFlow') data.content = nodeItem.userName\n                return\n              }\n              if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n              if (data.childNode) loop(data.childNode)\n            }\n            loop(data[0].flowTemplateInfo.flowTemplateJson)\n          }\n          this.assignNodeList = assignNodeList\n        } else {\n          data[0].flowTemplateInfo.flowTemplateJson.state = 'state-curr'\n        }\n        this.processKey = +new Date()\n      }\n    },\n    subFlow(enCode) {\n      let flowTaskNodeList = this.flowTaskNodeList.filter(res => res.nodeCode == enCode)\n      if (!flowTaskNodeList.length) return\n      if (!flowTaskNodeList[0].type || flowTaskNodeList[0].nodeType != 'subFlow') return\n      let item = {\n        subFlowVisible: true,\n        ...flowTaskNodeList,\n        ...this.setting,\n      }\n      if (document.getElementById('Process')) document.getElementById('Process').style.display = 'none'\n      this.flowBoxVisible = true\n      this.$nextTick(() => {\n        this.$refs.FlowBox.init(item)\n      })\n    },\n    handleResurgence(errorRuleUserList) {\n      this.$refs['resurgenceForm'].validate((valid) => {\n        if (!valid) return\n        let query = {\n          ...this.resurgenceForm,\n          taskId: this.setting.taskId,\n          resurgence: this.flowTaskInfo.completion == 100\n        }\n        if (errorRuleUserList) query.errorRuleUserList = errorRuleUserList\n        this.resurgenceBtnLoading = true\n        Resurgence(query).then(res => {\n          const errorData = res.data\n          if (errorData && Array.isArray(errorData) && errorData.length) {\n            this.errorNodeList = errorData\n            this.eventType = 'resurgence'\n            this.errorVisible = true\n            this.resurgenceBtnLoading = false\n          } else {\n            this.$message({\n              type: 'success',\n              message: res.msg,\n              duration: 1000,\n              onClose: () => {\n                this.resurgenceBtnLoading = false\n                this.visible = false\n                this.errorVisible = false\n                this.$emit('close', true)\n              }\n            })\n          }\n        }).catch(() => { this.resurgenceBtnLoading = false })\n      })\n    },\n    flowResurgence() {\n      this.resurgenceVisible = true\n      ResurgenceList(this.setting.taskId).then(res => {\n        this.resurgenceNodeList = res.data\n      })\n    },\n    goBack(isRefresh) {\n      if (this.subFlowVisible) document.getElementById('Process').style.display = 'block'\n      this.$emit('close', isRefresh)\n    },\n    init(data) {\n      this.loading = true\n      this.activeTab = '0'\n      this.setting = data\n      if (data.subFlowVisible) {\n        this.subFlowInfo(data)\n      } else {\n        /**\n         * opType\n         * -1 - 我发起的新建/编辑\n         * 0 - 我发起的详情\n         * 1 - 待办事宜\n         * 2 - 已办事宜\n         * 3 - 抄送事宜\n         * 4 - 流程监控\n         */\n        this.getBeforeInfo(data)\n      }\n\n    },\n    getBeforeInfo(data) {\n      FlowBeforeInfo(data.id || 0, { taskNodeId: data.taskNodeId, taskOperatorId: data.taskId, flowId: data.flowId }).then(res => {\n        this.flowFormInfo = res.data.flowFormInfo\n        this.flowTaskInfo = res.data.flowTaskInfo || {}\n        this.flowTemplateInfo = res.data.flowTemplateInfo\n        this.noOperateAuth = res.data.noOperateAuth || false;\n        const fullName = data.opType == '-1' ? this.flowTemplateInfo.fullName : this.flowTaskInfo.fullName\n        data.fullName = fullName\n        this.fullName = fullName\n        this.thisStep = this.flowTaskInfo.thisStep\n        this.flowUrgent = this.flowTaskInfo.flowUrgent || 1\n        data.status = this.flowTaskInfo.status;\n        data.type = this.flowTemplateInfo.type\n        data.draftData = res.data.draftData || null\n        data.formData = res.data.formData || {}\n        data.formEnCode = this.flowFormInfo.enCode\n        const formUrl = this.flowFormInfo.formType == 2 ? 'workFlow/workFlowForm/dynamicForm' : this.flowFormInfo.urlAddress ? this.flowFormInfo.urlAddress.replace(/\\s*/g, \"\") : `workFlow/workFlowForm/${this.flowFormInfo.enCode}`\n        this.currentView = (resolve) => require([`@/views/${formUrl}`], resolve)\n        this.flowTaskNodeList = res.data.flowTaskNodeList || []\n        this.flowTemplateJson = this.flowTemplateInfo.flowTemplateJson ? JSON.parse(this.flowTemplateInfo.flowTemplateJson) : null\n        this.isComment = this.flowTemplateJson.properties.isComment\n        this.isSummary = this.flowTemplateJson.properties.isSummary\n        this.summaryType = this.flowTemplateJson.properties.summaryType\n        this.flowTaskOperatorRecordList = res.data.flowTaskOperatorRecordList || []\n        this.flowTaskOperatorRecordList = this.flowTaskOperatorRecordList.reverse()\n        this.properties = res.data.approversProperties || {}\n        this.candidateForm.rejectType = this.properties.rejectType == 3 ? 1 : this.properties.rejectType\n        this.endTime = this.flowTaskInfo.completion == 100 ? this.flowTaskInfo.endTime : 0\n        data.formConf = this.flowFormInfo.propertyJson\n        if (data.opType != 1 && data.opType != '-1') data.readonly = true\n        data.formOperates = res.data.formOperates || []\n        if (data.opType == 0) {\n          for (let i = 0; i < data.formOperates.length; i++) {\n            data.formOperates[i].write = false\n          }\n        }\n        data.flowTemplateJson = this.flowTemplateJson\n        if (this.flowTaskNodeList.length) {\n          let assignNodeList = []\n          for (let i = 0; i < this.flowTaskNodeList.length; i++) {\n            const nodeItem = this.flowTaskNodeList[i]\n            data.opType == 4 && nodeItem.type == 1 && nodeItem.nodeType === 'approver' && assignNodeList.push(nodeItem)\n            const loop = data => {\n              if (Array.isArray(data)) data.forEach(d => loop(d))\n              if (data.nodeId === nodeItem.nodeCode) {\n                if (nodeItem.type == 0) data.state = 'state-past'\n                if (nodeItem.type == 1) data.state = 'state-curr'\n                if (nodeItem.nodeType === 'approver' || nodeItem.nodeType === 'start' || nodeItem.nodeType === 'subFlow') data.content = nodeItem.userName\n                return\n              }\n              if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n              if (data.childNode) loop(data.childNode)\n            }\n            loop(this.flowTemplateJson)\n          }\n          this.assignNodeList = assignNodeList\n        } else {\n          this.flowTemplateJson.state = 'state-curr'\n        }\n        this.processKey = +new Date()\n        this.setting = data\n        this.initBtnList()\n      }).catch(() => { this.loading = false })\n    },\n    initBtnList() {\n      const list = []\n      const setting = this.setting\n      const opType = this.setting.opType\n      const properties = this.properties\n      const flowTaskInfo = this.flowTaskInfo\n      if (opType == '-1' && !setting.hideCancelBtn) list.push({ label: properties.saveBtnText || '暂 存', key: 'save' })\n      if (opType == 0 && setting.status == 1 && (properties.hasRevokeBtn || properties.hasRevokeBtn === undefined)) list.push({ label: properties.revokeBtnText || '撤 回', key: 'revoke' })\n      if (opType != 4 && setting.id && properties.hasPrintBtn && properties.printId) list.push({ label: properties.printBtnText || '打 印', key: 'print' })\n      if (opType == 1) {\n        if (properties.hasTransferBtn) list.push({ label: properties.transferBtnText || '转 审', key: 'transfer' })\n        if (properties.hasSaveBtn) list.push({ label: properties.saveBtnText || '暂 存', key: 'saveAudit' })\n        if (properties.hasRejectBtn) list.push({ label: properties.rejectBtnText || '退 回', key: 'reject' })\n        if (properties.hasFreeApproverBtn) list.push({ label: properties.hasFreeApproverBtnText || '加 签', key: 'hasFreeApprover' })\n        if (properties.hasCancelBtn) list.push({ label: properties.cancelBtnText || '驳回', key: 'approvalCancel' });\n      }\n      if (opType == 4) {\n        if (this.noOperateAuth) return (state.moreBtnList = []);\n        if (flowTaskInfo.completion == 100) list.push({ label: '复 活', key: 'resurgence' })\n        if (flowTaskInfo.completion > 0 && flowTaskInfo.completion < 100 && !flowTaskInfo.rejectDataId && (setting.status == 1 || setting.status == 3)) list.push({ label: '变 更', key: 'resurgence' })\n        if (setting.status == 1 && this.assignNodeList.length) list.push({ label: '指 派', key: 'assign' })\n        if (flowTaskInfo.status == 1) list.push({ label: '挂 起', key: 'suspend' })\n        if (flowTaskInfo.status == 6 && !flowTaskInfo.suspend) list.push({ label: '恢 复', key: 'recovery' })\n      }\n      this.moreBtnList = list\n    },\n    subFlowInfo(data) {\n      this.loading = false\n      this.activeTab = '0'\n      this.subFlowVisible = true\n      subFlowInfo(data[0].id).then(res => {\n        this.subFlowInfoList = res.data || []\n        this.subFlowTab = this.subFlowInfoList[0].flowTaskInfo.id\n        this.flowUrgent = this.subFlowInfoList[0].flowTaskInfo.flowUrgent || 1\n        this.fullName = this.subFlowInfoList[0].flowTaskInfo.fullName\n        this.flowTaskOperatorRecordList = this.subFlowInfoList[0].flowTaskOperatorRecordList || []\n        this.flowTaskOperatorRecordList = this.flowTaskOperatorRecordList.reverse()\n        for (let index = 0; index < this.subFlowInfoList.length; index++) {\n          let element = this.subFlowInfoList[index];\n          element.flowTemplateInfo.flowTemplateJson = element.flowTemplateInfo && element.flowTemplateInfo.flowTemplateJson ? JSON.parse(element.flowTemplateInfo.flowTemplateJson) : {}\n          if (element.flowTaskNodeList.length) {\n            let assignNodeList = []\n            for (let i = 0; i < element.flowTaskNodeList.length; i++) {\n              const nodeItem = element.flowTaskNodeList[i]\n              data.opType == 4 && nodeItem.type == 1 && nodeItem.nodeType === 'approver' && assignNodeList.push(nodeItem)\n              const loop = data => {\n                if (Array.isArray(data)) data.forEach(d => loop(d))\n                if (data.nodeId === nodeItem.nodeCode) {\n                  if (nodeItem.type == 0) data.state = 'state-past'\n                  if (nodeItem.type == 1) data.state = 'state-curr'\n                  if (nodeItem.nodeType === 'approver' || nodeItem.nodeType === 'start' || nodeItem.nodeType === 'subFlow') data.content = nodeItem.userName\n                  return\n                }\n                if (data.conditionNodes && Array.isArray(data.conditionNodes)) loop(data.conditionNodes)\n                if (data.childNode) loop(data.childNode)\n              }\n              loop(element.flowTemplateInfo.flowTemplateJson)\n            }\n            element.assignNodeList = assignNodeList\n          } else {\n            element.flowTemplateInfo.flowTemplateJson.state = 'state-curr'\n          }\n          let templateJson = element.flowTemplateInfo.flowTemplateJson\n          this.isComment = templateJson.properties.isComment\n          this.isSummary = templateJson.properties.isSummary\n          this.summaryType = templateJson.properties.summaryType\n          this.setting.id = this.subFlowInfoList[0].flowTaskInfo.id\n        }\n      }).catch(() => { this.loading = false })\n\n\n    },\n    printBrowseHandle(id) {\n      this.printTemplateId = id\n      this.printDialogVisible = false\n      this.printBrowseVisible = true\n    },\n    printDialog() {\n      this.printDialogVisible = true\n      this.$nextTick(() => {\n        this.$refs.printDialog.init(this.properties.printId)\n      })\n    },\n    handleMore(e) {\n      if (e == 'revoke') return this.actionLauncher('revoke')\n      if (e == 'transfer') return this.actionLauncher('transfer')\n      if (e == 'saveAudit') return this.eventLauncher('saveAudit')\n      if (e == 'reject') return this.eventReceiver({}, 'reject')\n      if (e == 'resurgence') return this.flowResurgence()\n      if (e == 'assign') return this.actionLauncher('assign')\n      if (e == 'approvalCancel') return this.actionLauncher('approvalCancel');\n      if (e == 'comment') return this.addComment()\n      if (e == 'print') return this.printDialog()\n      if (e == 'suspend') return this.suspend()\n      if (e == 'recovery') return this.recovery()\n      this.eventLauncher(e)\n    },\n    suspend() {\n      this.suspendVisible = true\n      this.$nextTick(() => {\n        this.$refs.suspendDialog.init(this.setting.id)\n      })\n    },\n    recovery() {\n      let data = {\n        handleOpinion: '',\n        fileList: [],\n      }\n      restore(this.setting.id, data).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            this.$emit('close', true)\n          }\n        })\n      }).catch(() => {\n        this.$refs.suspendDialog.btnLoading = false\n      })\n    },\n    suspendReceiver(dataForm) {\n      suspend(this.setting.id, dataForm).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            this.$emit('close', true)\n          }\n        })\n      })\n    },\n    eventLauncher(eventType) {\n      this.$refs.form && this.$refs.form.dataFormSubmit(eventType, this.flowUrgent)\n    },\n    eventReceiver(formData, eventType) {\n      this.formData = formData\n      this.formData.flowId = this.setting.flowId\n      this.formData.id = this.setting.id\n      this.eventType = eventType\n      if (eventType === 'save' || eventType === 'submit') {\n        return this.submitOrSave()\n      }\n      if (eventType === 'saveAudit') {\n        return this.saveAudit()\n      }\n      if (eventType === 'hasFreeApprover') {\n        return this.hasFreeApproverVisible = true\n      }\n      if (eventType === 'audit' || eventType === 'reject') {\n        this.handleId = ''\n        this.candidateForm.handleOpinion = ''\n        this.candidateForm.fileList = []\n        this.copyIds = []\n        this.isValidate = false\n        if (this.properties.hasSign) this.signImg = this.userInfo.signImg\n        if (eventType === 'reject') {\n          RejectList(this.setting.taskId).then(res => {\n            this.showReject = res.data.isLastAppro\n            this.rejectList = res.data.list || []\n            this.candidateForm.rejectStep = this.rejectList.length && this.rejectList[0].nodeCode || ''\n            if (!this.properties.hasSign && !this.properties.hasOpinion && !this.properties.isCustomCopy && !this.showReject) {\n              this.$confirm('此操作将退回该审批单，是否继续？', '提示', {\n                type: 'warning'\n              }).then(() => {\n                this.handleApproval()\n              }).catch(() => { });\n              return\n            }\n            this.isValidate = true\n            this.visible = true\n          }).catch({})\n          return\n        }\n        this.candidateLoading = true\n        Candidates(this.setting.taskId, this.formData).then(res => {\n          let data = res.data\n          this.candidateType = data.type\n          this.countersignOver = data.countersignOver\n          this.candidateLoading = false\n          this.candidateForm.branchList = []\n          this.branchList = []\n          if (data.type == 1) {\n            this.branchList = res.data.list.filter(o => o.isBranchFlow)\n            let list = res.data.list.filter(o => !o.isBranchFlow && o.isCandidates)\n            this.candidateForm.candidateList = list.map(o => ({\n              ...o,\n              isDefault: true,\n              label: '审批人',\n              value: [],\n              rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n            }))\n            this.$nextTick(() => {\n              this.$refs['candidateForm'].resetFields()\n            })\n            this.isValidate = true\n            this.visible = true\n          } else if (data.type == 2) {\n            let list = res.data.list.filter(o => o.isCandidates)\n            this.candidateForm.candidateList = list.map(o => ({\n              ...o,\n              label: '审批人',\n              value: [],\n              rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n            }))\n            this.$nextTick(() => {\n              this.$refs['candidateForm'].resetFields()\n            })\n            this.isValidate = true\n            this.visible = true\n          } else {\n            this.candidateForm.candidateList = []\n            if (!this.properties.hasSign && !this.properties.hasOpinion && !this.properties.hasFreeApprover && !this.properties.isCustomCopy) {\n              this.$confirm('此操作将通过该审批单，是否继续？', '提示', {\n                type: 'warning'\n              }).then(() => {\n                this.handleApproval()\n              }).catch(() => { });\n              return\n            }\n            this.isValidate = true\n            this.visible = true\n          }\n        }).catch(() => {\n          this.candidateLoading = false\n        })\n      }\n    },\n    onBranchChange(val) {\n      const defaultList = this.candidateForm.candidateList.filter(o => o.isDefault)\n      if (!val.length) return this.candidateForm.candidateList = defaultList\n      let list = []\n      for (let i = 0; i < val.length; i++) {\n        inner: for (let j = 0; j < this.branchList.length; j++) {\n          let o = this.branchList[j]\n          if (val[i] === o.nodeId && o.isCandidates) {\n            list.push({\n              ...o,\n              label: '审批人',\n              value: [],\n              rules: [{ required: true, message: `审批人不能为空`, trigger: 'click' }]\n            })\n            break inner\n          }\n        }\n      }\n      this.candidateForm.candidateList = [...defaultList, ...list]\n    },\n    saveAudit() {\n      this.btnLoading = true\n      SaveAudit(this.setting.taskId, this.formData).then(res => {\n        this.$message({\n          message: res.msg,\n          type: 'success',\n          duration: 1500,\n          onClose: () => {\n            this.btnLoading = false\n            this.$emit('close', true)\n          }\n        })\n      }).catch(() => {\n        this.btnLoading = false\n      })\n    },\n    submitOrSave() {\n      this.formData.status = this.eventType === 'submit' ? 0 : 1\n      this.formData.flowUrgent = this.flowUrgent\n      if (this.setting.delegateUserList) {//受委托人不为空的时候走委托创建流程\n        this.formData.delegateUserList = this.setting.delegateUserList\n      }\n\n      if (this.eventType === 'save') return this.handleRequest()\n      this.candidateLoading = true\n      Candidates(0, this.formData).then(res => {\n        let data = res.data\n        this.candidateLoading = false\n        this.candidateType = data.type\n        this.countersignOver = data.countersignOver\n        if (data.type == 1) {\n          this.branchList = res.data.list.filter(o => o.isBranchFlow)\n          this.candidateList = res.data.list.filter(o => !o.isBranchFlow && o.isCandidates)\n          this.candidateVisible = true\n        } else if (data.type == 2) {\n          this.branchList = []\n          this.candidateList = res.data.list.filter(o => o.isCandidates)\n          this.candidateVisible = true\n        } else {\n          if (this.properties.isCustomCopy) {\n            this.branchList = []\n            this.candidateList = []\n            this.candidateVisible = true\n            return\n          }\n          this.$confirm('您确定要提交当前流程吗, 是否继续?', '提示', {\n            type: 'warning'\n          }).then(() => {\n            this.handleRequest()\n          }).catch(() => { });\n        }\n      }).catch(() => {\n        this.candidateLoading = false\n      })\n    },\n    handleRequest(candidateData) {\n      if (candidateData) this.formData = { ...this.formData, ...candidateData }\n      this.formData.candidateType = this.candidateType\n      this.formData.countersignOver = this.countersignOver\n      if (!this.formData.id) delete (this.formData.id)\n      if (this.eventType === 'save') this.btnLoading = true\n      this.allBtnDisabled = true\n      const formMethod = this.formData.id ? Update : Create\n      formMethod(this.formData).then(res => {\n        const errorData = res.data\n        if (errorData && Array.isArray(errorData) && errorData.length) {\n          this.errorNodeList = errorData\n          this.errorVisible = true\n          this.allBtnDisabled = false\n        } else {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              if (this.eventType === 'save') this.btnLoading = false\n              this.candidateVisible = false\n              this.allBtnDisabled = false\n              this.errorVisible = false\n              this.$emit('close', true)\n            }\n          })\n        }\n      }).catch(() => {\n        if (this.eventType === 'save') this.btnLoading = false\n        if (this.$refs.candidateForm) this.$refs.candidateForm.btnLoading = false\n        this.allBtnDisabled = false\n        this.errorVisible = false\n      })\n    },\n    submitCandidate(data) {\n      this.handleRequest(data)\n    },\n    actionLauncher(eventType) {\n      this.eventType = eventType\n      if (['revoke', 'recall', 'approvalCancel'].includes(eventType) && !this.properties.hasOpinion && !this.properties.hasSign) {\n        let title = '';\n        if (eventType == 'revoke') title = '此操作将撤回该流程，是否继续？';\n        if (eventType == 'recall') title = '此操作将撤回该审批单，是否继续？';\n        if (eventType == 'approvalCancel') title = '此操作将审批驳回终止流程，是否继续？';\n        this.$confirm(title, '提示', {\n          type: 'warning'\n        }).then(() => {\n          this.actionReceiver()\n        }).catch(() => { });\n        return\n      }\n      this.showActionDialog()\n    },\n    showActionDialog() {\n      this.actionVisible = true\n      this.$nextTick(() => {\n        this.$refs.actionDialog.init(this.properties, this.eventType)\n      })\n    },\n    actionReceiver(query) {\n      if (!query) {\n        query = {\n          handleOpinion: '',\n          signImg: '',\n          fileList: []\n        }\n      }\n      if (this.eventType == 'approvalCancel') query = { ...query, eventType: \"approvalCancel\" }\n      const id = this.eventType == 'revoke' || this.eventType == 'approvalCancel' ? this.setting.id : this.setting.taskId\n      const actionMethod = this.getActionMethod()\n      this.approvalBtnLoading = true\n      actionMethod(id, query).then(res => {\n        this.approvalBtnLoading = false\n        this.$message({\n          type: 'success',\n          message: res.msg,\n          duration: 1000,\n          onClose: () => {\n            this.$emit('close', true)\n          }\n        })\n      }).catch(() => {\n        this.$refs.actionDialog.btnLoading = false\n        this.approvalBtnLoading = false\n      })\n    },\n    getActionMethod() {\n      if (this.eventType === 'transfer') return Transfer\n      if (this.eventType === 'assign') return Assign\n      if (this.eventType === 'revoke') return Revoke\n      if (this.eventType === 'recall') return Recall\n      if (this.eventType === 'cancel') return Cancel\n      if (this.eventType === 'approvalCancel') return Cancel;\n    },\n    press() {\n      this.$confirm('此操作将提示该节点尽快处理，是否继续?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        Press(this.setting.id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg,\n            duration: 1000\n          })\n        })\n      }).catch(() => { })\n    },\n    handleError(data) {\n      if (this.eventType === 'submit') {\n        this.formData.errorRuleUserList = data\n        this.handleRequest()\n        return\n      }\n      if (this.eventType === 'audit' || this.eventType === 'reject') {\n        this.handleApproval(data)\n        return\n      }\n      if (this.eventType === 'resurgence') {\n        this.handleResurgence(data)\n        return\n      }\n    },\n    handleApproval(errorRuleUserList) {\n      const handleRequest = () => {\n        if (this.properties.hasSign && !this.signImg) {\n          this.$message({\n            message: '请签名',\n            type: 'error'\n          })\n          return\n        }\n        let query = {\n          handleOpinion: this.candidateForm.handleOpinion,\n          fileList: this.candidateForm.fileList,\n          ...this.formData,\n          enCode: this.setting.enCode,\n          signImg: this.signImg,\n          copyIds: this.copyIds.join(','),\n          branchList: this.candidateForm.branchList,\n          candidateType: this.candidateType,\n          countersignOver: this.countersignOver,\n          rejectType: this.candidateForm.rejectType\n        }\n        if (this.eventType === 'reject') query.rejectStep = this.candidateForm.rejectStep\n        if (errorRuleUserList) query.errorRuleUserList = errorRuleUserList\n        if (this.candidateForm.candidateList.length) {\n          let candidateList = {}\n          for (let i = 0; i < this.candidateForm.candidateList.length; i++) {\n            candidateList[this.candidateForm.candidateList[i].nodeId] = this.candidateForm.candidateList[i].value\n          }\n          query.candidateList = candidateList\n        }\n        if (this.eventType === 'audit' && this.properties.hasFreeApprover) {\n          query = { freeApproverUserId: this.handleId, ...query }\n        }\n        const approvalMethod = this.eventType === 'audit' ? Audit : Reject\n        this.approvalBtnLoading = true\n        approvalMethod(this.setting.taskId, query).then(res => {\n          const errorData = res.data\n          if (errorData && Array.isArray(errorData) && errorData.length) {\n            this.errorNodeList = errorData\n            this.errorVisible = true\n            this.approvalBtnLoading = false\n          } else {\n            this.$message({\n              type: 'success',\n              message: res.msg,\n              duration: 1000,\n              onClose: () => {\n                this.approvalBtnLoading = false\n                this.visible = false\n                this.errorVisible = false\n                this.$emit('close', true)\n              }\n            })\n          }\n        }).catch(() => { this.approvalBtnLoading = false })\n      }\n      if (!this.isValidate) return handleRequest()\n      this.$refs['candidateForm'].validate((valid) => {\n        if (valid) {\n          handleRequest()\n        }\n      })\n    },\n    addComment() {\n      this.$refs.comment && this.$refs.comment.showCommentDialog()\n    },\n    setPageLoad(val) {\n      this.loading = !!val\n    },\n    setCandidateLoad(val) {\n      this.candidateLoading = !!val\n      this.allBtnDisabled = !!val\n    },\n    setLoad(val) {\n      this.btnLoading = !!val\n    },\n    handleFlowUrgent(e) {\n      this.flowUrgent = e\n    }\n  }\n}\n",null]}