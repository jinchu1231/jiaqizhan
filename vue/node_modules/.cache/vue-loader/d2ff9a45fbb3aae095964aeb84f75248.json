{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/extend/projectGantt/Task.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/extend/projectGantt/Task.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport dayjs from \"dayjs\"; // 导入日期js\n// const uuidv4 = require(\"uuid/v4\"); // 导入uuid生成插件\nimport isBetween from \"dayjs/plugin/isBetween\";\ndayjs.extend(isBetween);\nimport { TaskList, Delete } from '@/api/extend/projectGantt'\nimport Form from './TaskForm'\nexport default {\n  components: { Form },\n  data() {\n    return {\n      keyword: '',\n      list: [],\n      listLoading: false,\n      formVisible: false,\n      dateType: 'monthAndDay',\n      startDate: '',\n      endDate: '',\n      projectId: '',\n      managerIds: ''\n    }\n  },\n  computed: {\n    // 甘特图标题日期分配\n    ganttTitleDate() {\n      // 分解开始和结束日期\n      let start_date_spilt = dayjs(this.startDate)\n        .format(\"YYYY-M-D\")\n        .split(\"-\");\n      let end_date_spilt = dayjs(this.endDate)\n        .format(\"YYYY-M-D\")\n        .split(\"-\");\n      let start_year = Number(start_date_spilt[0]);\n      let start_mouth = Number(start_date_spilt[1]);\n      let end_year = Number(end_date_spilt[0]);\n      let end_mouth = Number(end_date_spilt[1]);\n      // 自动更新日期类型以适应任务时间范围跨度\n      if (this.autoGanttDateType) {\n        // 计算日期跨度\n        let mouth_diff = this.timeDiffTime(\n          this.startDate,\n          this.endDate,\n          \"months\"\n        );\n        if (mouth_diff > 12) {\n          // 12个月以上的分到yearAndMouth\n          this.setDataType(\"yearAndMonth\");\n        } else if (mouth_diff > 2) {\n          // 2个月以上的分到yearAndWeek\n          this.setDataType(\"yearAndWeek\");\n        } else {\n          this.setDataType(\"monthAndDay\");\n        }\n      }\n      // 不自动更新日期类型，以dateType固定展示\n      if (this.dateType === \"yearAndWeek\") {\n        return this.yearAndWeekTitleDate(\n          start_year,\n          start_mouth,\n          end_year,\n          end_mouth\n        );\n      } else if (this.dateType === \"monthAndDay\") {\n        return this.mouthAndDayTitleDate(\n          start_year,\n          start_mouth,\n          end_year,\n          end_mouth\n        );\n      } else {\n        return this.yearAndMouthTitleDate(\n          start_year,\n          start_mouth,\n          end_year,\n          end_mouth\n        );\n      }\n    },\n  },\n  methods: {\n    goBack() {\n      this.$emit('close')\n    },\n    init(item) {\n      if (!item || !item.id) return\n      this.projectId = item.id\n      this.managerIds = item.managerIds\n      this.startDate = item.startTime\n      this.endDate = item.endTime\n      this.keyword = ''\n      this.$nextTick(() => { this.initData() })\n    },\n    initData() {\n      this.listLoading = true\n      let query = { keyword: this.keyword }\n      TaskList(query, this.projectId).then(res => {\n        this.list = res.data.list\n        this.listLoading = false\n      })\n    },\n    search() {\n      this.initData()\n    },\n    reset() {\n      this.keyword = ''\n      this.initData()\n    },\n    handleDel(id) {\n      this.$confirm(this.$t('common.delTip'), this.$t('common.tipTitle'), {\n        type: 'warning'\n      }).then(() => {\n        Delete(id).then(res => {\n          this.$message({\n            type: 'success',\n            message: res.msg\n          });\n          this.reset()\n        })\n      }).catch(() => { });\n    },\n    // 新增 / 修改\n    addOrUpdateHandle(id) {\n      this.formVisible = true\n      this.$nextTick(() => {\n        this.$refs.Form.init(this.projectId, id, this.managerIds)\n      })\n    },\n    /**\n    * 年-周模式gantt标题\n    * start_year: 起始年\n    * start_mouth：起始月\n    * end_year：结束年\n    * end_mouth：结束月\n    */\n    yearAndWeekTitleDate(start_year, start_mouth, end_year, end_mouth) {\n      // 处理年份\n      let year_diff = end_year - start_year;\n      // 只存在同年或前后年的情况\n      if (year_diff === 0) {\n        // 年间隔为同一年\n        let isLeap = this.isLeap(start_year); // 是否闰年\n        let mouths = this.generationMonths(\n          start_year,\n          start_mouth,\n          end_mouth + 1,\n          isLeap,\n          true,\n          true\n        ); // 处理月份\n        return mouths;\n      }\n      // 处理开始月份\n      let startIsLeap = this.isLeap(start_year);\n      let start_mouths = this.generationMonths(\n        start_year,\n        start_mouth,\n        13,\n        startIsLeap,\n        true,\n        true\n      );\n      // 处理结束月份\n      let endIsLeap = this.isLeap(end_year);\n      let end_mouths = this.generationMonths(\n        end_year,\n        1,\n        end_mouth + 1,\n        endIsLeap,\n        true,\n        true\n      );\n      return start_mouths.concat(end_mouths);\n    },\n    /**\n     * 月-日模式gantt标题\n     * start_year: 起始年\n     * start_mouth：起始月\n     * end_year：结束年\n     * end_mouth：结束月\n     */\n    mouthAndDayTitleDate(start_year, start_mouth, end_year, end_mouth) {\n      // 处理年份\n      let year_diff = end_year - start_year;\n      // 只存在同年或前后年的情况\n      if (year_diff === 0) {\n        // 年间隔为同一年\n        let isLeap = this.isLeap(start_year); // 是否闰年\n        let mouths = this.generationMonths(\n          start_year,\n          start_mouth,\n          end_mouth + 1,\n          isLeap\n        ); // 处理月份\n        return mouths;\n      }\n      // 处理开始月份\n      let startIsLeap = this.isLeap(start_year);\n      let start_mouths = this.generationMonths(\n        start_year,\n        start_mouth,\n        13,\n        startIsLeap\n      );\n      // 处理结束月份\n      let endIsLeap = this.isLeap(end_year);\n      let end_mouths = this.generationMonths(\n        end_year,\n        1,\n        end_mouth + 1,\n        endIsLeap\n      );\n      return start_mouths.concat(end_mouths);\n    },\n    /**\n     * 生成月份函数\n     * year: Number 当前年份\n     * start_num: Number 开始月分\n     * end_num：Number 结束月份\n     * isLeap: Boolean 是否闰年\n     * insert_days: Boolean 是否需要插入 日\n     * week: 是否以周的间隔\n     */\n    generationMonths(\n      year,\n      start_num = 1,\n      end_num = 13,\n      isLeap = false,\n      insert_days = true,\n      week = false\n    ) {\n      let months = [];\n      if (insert_days) {\n        // 无需 日 的模式\n        for (let i = start_num; i < end_num; i++) {\n          // 需要 日 的模式\n          let days = this.generationDays(year, i, isLeap, week);\n          months.push({\n            name: `${i}月`,\n            date: i,\n            full_date: `${year}-${i}`,\n            children: days,\n            id: uuidv4()\n          });\n        }\n        return months;\n      }\n      for (let i = start_num; i < end_num; i++) {\n        // 需要 日 的模式\n        months.push({\n          name: `${i}月`,\n          date: i,\n          full_date: `${year}-${i}`,\n          id: uuidv4()\n        });\n      }\n      return months;\n    },\n    /**\n     * 生成日期函数\n     * year: Number 当前年份\n     * month: Number 当前月份\n     * isLeap: Boolean 是否闰年\n     * week: Boolean 是否间隔一周\n     */\n    generationDays(year, month, isLeap = false, week = false) {\n      let big_month = [1, 3, 5, 7, 8, 10, 12].includes(month);\n      let small_month = [4, 6, 9, 11].includes(month);\n      let dates_num = big_month ? 32 : small_month ? 31 : isLeap ? 30 : 29;\n      let days = [];\n      if (week) {\n        let _day = 1; // 从周日开始\n        let _start_day_inweek = this.timeInWeek(`${year}-${month}-1`);\n        if (_start_day_inweek !== 0) {\n          _day = 8 - _start_day_inweek;\n        }\n        for (let i = _day; i < dates_num; i += 7) {\n          days.push({\n            date: i,\n            name: `${i}日`,\n            id: uuidv4(),\n            full_date: `${year}-${month}-${i}`\n          });\n        }\n      } else {\n        for (let i = 1; i < dates_num; i++) {\n          days.push({\n            date: i,\n            name: `${i}日`,\n            id: uuidv4(),\n            full_date: `${year}-${month}-${i}`\n          });\n        }\n      }\n      return days;\n    },\n    /**\n     * 是否闰年函数\n     * year: Number 当前年份\n     */\n    isLeap(year) {\n      return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n    },\n    /**\n     * 当前日期gantt状态\n     * row: object 当前行信息\n     * date: string 当前格子日期\n     * unit: string 时间单位，以天、月、年计算\n     */\n    dayGanttType(row, date, unit = \"days\") {\n      let start_date = row.startTime;\n      let end_date = row.endTime;\n      let between = dayjs(date).isBetween(start_date, end_date, unit);\n      if (between) {\n        return \"item-on\";\n      }\n      let start = dayjs(start_date).isSame(date, unit);\n      let end = dayjs(end_date).isSame(date, unit);\n      if (start && end) {\n        return \"item-on item-full\";\n      }\n      if (start) {\n        return \"item-on item-start\";\n      }\n      if (end) {\n        return \"item-on item-end\";\n      }\n    },\n    /**\n     * 实际日期gantt状态\n     * row: object 当前行信息\n     * date: string 当前格子日期\n     * unit: string 时间单位，以天、月、年计算\n     */\n    realDayGanttType(row, date, unit = \"days\") {\n      let start_date = row[this.selfProps.realStartDate];\n      let end_date = row[this.selfProps.realEndDate];\n      let between = dayjs(date).isBetween(start_date, end_date, unit);\n      if (between) {\n        return \"real-on\";\n      }\n      let start = dayjs(start_date).isSame(date, unit);\n      let end = dayjs(end_date).isSame(date, unit);\n      if (start && end) {\n        return \"real-on real-full\";\n      }\n      if (start) {\n        return \"real-on real-start\";\n      }\n      if (end) {\n        return \"real-on real-end\";\n      }\n    },\n    // 以下是时间计算类函数 ------------------------------------------------------时间计算---------------------------------------\n    /**\n     * 计算时差\n     * startDate：开始时间\n     * endDate：结束时间\n     * unit：单位 days、months、yesrs\n     */\n    timeDiffTime(startDate, endDate, unit = \"days\") {\n      return dayjs(endDate).diff(startDate, unit);\n    },\n    /**\n     * 比较时间，是否之前\n     * startDate：开始时间\n     * endDate：结束时间\n     * unit：单位 days、months、yesrs\n     */\n    timeIsBefore(startDate, endDate, unit = \"days\") {\n      return dayjs(startDate).isBefore(endDate, unit);\n    },\n    /**\n     * 时间加计算函数\n     * date：原时间\n     * num：需要增加的时间数量\n     * nuit：增加时间的单位 day year\n     */\n    timeAdd(date, num = 1, nuit = \"day\", format = \"YYYY-MM-DD\") {\n      return dayjs(date)\n        .add(num, nuit)\n        .format(format);\n    },\n    /**\n     * 时间格式化函数\n     * date 需要格式化的数据\n     * format 格式化的格式\n     */\n    timeFormat(date, format = \"YYYY-MM-DD\") {\n      return date ? dayjs(date).format(format) : this.emptyCellText;\n    },\n    /**\n     * 查询时间是周几\n     */\n    timeInWeek(date) {\n      return dayjs(date).day();\n    },\n  }\n}\n",null]}