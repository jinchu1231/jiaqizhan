{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/Generator/utils/useTextMask.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Generator/utils/useTextMask.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultMaskOptions = void 0;\nexports.useTextMask = useTextMask;\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.regexp.replace\");\nrequire(\"core-js/modules/es6.regexp.constructor\");\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/es6.string.repeat\");\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * maskType\n * 1 - 全掩盖\n * 2 - 姓名-显示前1个字，后1个字\n * 3 - 手机号-显示前3位，后4位\n * 4 - 邮箱-显示前3个字，@和之后的字\n * 5 - 身份证-显示前6位，后3位，虚拟为4位\n * 6 - IP地址-显示第1段IP\n * 7 - 车牌号-显示前1个字，后2位\n * 8 - 银行卡号-显示前6位，后4位\n * 0 - 自定义规则\n */\nvar defaultMaskOptions = exports.defaultMaskOptions = {\n  filler: '*',\n  // 填充符号\n  maskType: 1,\n  // 掩码规则\n  prefixType: 1,\n  // 开头显示\n  prefixLimit: 0,\n  // 开头字数\n  prefixSpecifyChar: '',\n  // 开头字符\n  suffixType: 1,\n  // 结尾显示\n  suffixLimit: 0,\n  // 结尾字数\n  suffixSpecifyChar: '',\n  // 结尾字符\n  ignoreChar: '',\n  // 显示字符\n  useUnrealMask: false,\n  // 虚拟掩码\n  unrealMaskLength: 1 // 虚拟掩码长度\n};\nfunction useTextMask(options) {\n  var config = _objectSpread(_objectSpread({}, defaultMaskOptions), options || {});\n\n  // 全掩盖\n  function maskAll(str) {\n    return config.filler.repeat(str.length);\n  }\n  //姓名 显示前1个字，后1个字\n  function maskName(str) {\n    if (str.length <= 1) return str;\n    var prefix = str[0];\n    if (str.length === 2) return prefix + config.filler;\n    var suffix = str.slice(-1);\n    var maskedChars = config.filler.repeat(str.length - 2);\n    return prefix + maskedChars + suffix;\n  }\n  // 手机号 - 显示前3位，后4位\n  function maskPhoneNumber(str) {\n    if (str.length <= 7) return str;\n    var prefix = str.slice(0, 3);\n    var suffix = str.slice(-4);\n    var maskedChars = config.filler.repeat(str.length - 7);\n    return prefix + maskedChars + suffix;\n  }\n  // 邮箱 - 显示前3个字，@和之后的字\n  function maskEmailAddress(str) {\n    var atIndex = str.indexOf('@');\n    if (str.length <= 3 || atIndex > -1 && atIndex < 3) return str;\n    var suffixLength = 0;\n    var maskedCharsLength = str.length - 3;\n    if (atIndex > 0) {\n      suffixLength = atIndex;\n      maskedCharsLength = atIndex - 3;\n    }\n    var prefix = str.slice(0, 3);\n    var suffix = suffixLength ? str.slice(suffixLength) : '';\n    var maskedChars = config.filler.repeat(maskedCharsLength);\n    return prefix + maskedChars + suffix;\n  }\n  // 身份证 - 显示前6位，后3位，虚拟为4位\n  function maskIdNumber(str) {\n    if (str.length <= 9) return str;\n    var prefix = str.slice(0, 6);\n    var suffix = str.slice(-3);\n    var maskedChars = config.filler.repeat(4);\n    return prefix + maskedChars + suffix;\n  }\n  // IP地址-显示第1段IP\n  function maskIPAddress(str) {\n    var segments = str.split('.');\n    if (segments.length < 1) return str;\n    var maskedChars = ('.' + config.filler.repeat(3)).repeat(3);\n    return segments[0] + maskedChars;\n  }\n  // 车牌号-显示前1个字，后2位\n  function maskLicensePlate(str) {\n    if (str.length <= 3) return str;\n    var prefix = str[0];\n    var suffix = str.slice(-2);\n    var maskedChars = config.filler.repeat(str.length - 3);\n    return prefix + maskedChars + suffix;\n  }\n  // 银行卡号-显示前6位，后4位\n  function maskBankCard(str) {\n    if (str.length <= 10) return str;\n    var prefix = str.slice(0, 6);\n    var suffix = str.slice(-4);\n    var maskedChars = config.filler.repeat(str.length - 10);\n    return prefix + maskedChars + suffix;\n  }\n  // 自定义掩码规则\n  function maskCustom(str) {\n    var prefixLength = 0,\n      suffixLength = 0;\n    if (config.prefixType === 2) prefixLength = config.prefixLimit || 0;\n    if ((config.prefixType === 3 || config.prefixType === 4) && config.prefixSpecifyChar) {\n      var specifyCharIndex = str.indexOf(config.prefixSpecifyChar);\n      if (specifyCharIndex > -1) prefixLength = config.prefixType === 3 ? specifyCharIndex : specifyCharIndex + config.prefixSpecifyChar.length;\n    }\n    if (config.suffixType === 2) suffixLength = config.suffixLimit || 0;\n    if ((config.suffixType === 3 || config.suffixType === 4) && config.suffixSpecifyChar) {\n      var _specifyCharIndex = str.indexOf(config.suffixSpecifyChar);\n      if (_specifyCharIndex > -1) suffixLength = config.suffixType === 3 ? str.length - _specifyCharIndex - config.suffixSpecifyChar.length : str.length - _specifyCharIndex;\n    }\n    if (prefixLength + suffixLength >= str.length) return str;\n    var prefix = prefixLength ? str.slice(0, prefixLength) : '';\n    var suffix = suffixLength ? str.slice(-suffixLength) : '';\n    var middleChar = '';\n    if (!config.ignoreChar) {\n      var maskedLength = config.useUnrealMask ? config.unrealMaskLength || 1 : str.length - prefixLength - suffixLength;\n      middleChar = config.filler.repeat(maskedLength);\n    } else {\n      var ignoreCharList = config.ignoreChar.split(',');\n      var middleStr = str.slice(prefixLength, str.length - suffixLength);\n      var reg = new RegExp('(' + ignoreCharList.map(function (o) {\n        return o.replace(/\\*/g, '\\\\*');\n      }).join('|') + ')', 'g');\n      var list = middleStr.split(reg);\n      list = list.map(function (o) {\n        if (o && !ignoreCharList.includes(o)) {\n          var _maskedLength = config.useUnrealMask ? config.unrealMaskLength || 1 : o.length;\n          o = config.filler.repeat(_maskedLength);\n        }\n        return o;\n      });\n      middleChar = list.join('');\n    }\n    return prefix + middleChar + suffix;\n  }\n\n  // 获取掩码后文本\n  function getMaskedText(str) {\n    if (!str) return '';\n    if (config.maskType === 1) return maskAll(str);\n    if (config.maskType === 2) return maskName(str);\n    if (config.maskType === 3) return maskPhoneNumber(str);\n    if (config.maskType === 4) return maskEmailAddress(str);\n    if (config.maskType === 5) return maskIdNumber(str);\n    if (config.maskType === 6) return maskIPAddress(str);\n    if (config.maskType === 7) return maskLicensePlate(str);\n    if (config.maskType === 8) return maskBankCard(str);\n    if (config.maskType === 0) return maskCustom(str);\n    return str;\n  }\n  return {\n    maskAll: maskAll,\n    maskName: maskName,\n    maskPhoneNumber: maskPhoneNumber,\n    maskEmailAddress: maskEmailAddress,\n    maskIdNumber: maskIdNumber,\n    maskIPAddress: maskIPAddress,\n    maskLicensePlate: maskLicensePlate,\n    maskBankCard: maskBankCard,\n    maskCustom: maskCustom,\n    getMaskedText: getMaskedText\n  };\n}",null]}