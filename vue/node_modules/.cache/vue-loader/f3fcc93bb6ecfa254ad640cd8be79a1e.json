{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/login/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/login/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getConfig } from '@/api/user'\nimport { getSocialsLoginList, getLoginConfig, getTicket, getTicketStatus, socialsLogin } from '@/api/permission/socialsUser'\nimport qs from 'qs'\n\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      loginForm: {\n        account: '',\n        password: '',\n        code: '',\n        origin: 'password'\n      },\n      loginRules: {\n        account: [\n          { required: true, trigger: 'blur', message: this.$t('login.accountTip') }\n        ],\n        password: [\n          { required: true, trigger: 'blur', message: this.$t('login.passwordTip') }\n        ],\n        code: [\n          { required: true, trigger: 'blur', message: this.$t('login.codeTip') }\n        ],\n      },\n      imgUrl: \"\",\n      timestamp: '',\n      capsTooltip: false,\n      loading: false,\n      showDialog: false,\n      needCode: false,\n      codeLength: 4,\n      redirect: undefined,\n      showTxt: false,\n      otherQuery: {},\n      active: 1,\n      listenerLoad: false,\n      visible: false,\n      show: false,\n      ssoLoading: true,\n      isSso: false,\n      preUrl: '',\n      ssoUrl: '',\n      ssoTicket: \"\",\n      ticketParams: \"\",\n      ssoTimer: null,\n      socialsList: [],\n      dialogVisible: false,\n      tenantSocialList: [],\n      redirectUrl: '',\n    }\n  },\n  computed: {\n    sysConfig() {\n      return this.$store.state.settings.sysConfig\n    },\n    loginLoading() {\n      return this.$store.state.user.loginLoading\n    }\n  },\n  watch: {\n    loginLoading(val) {\n      if (!val) this.loading = false\n    },\n    visible(val) {\n      if (!val) {\n        this.loading = false\n        this.show = false\n        this.clearTimer()\n      }\n    },\n    $route: {\n      handler: function (route) {\n        const query = route.query\n        if (query) {\n          this.redirect = query.redirect\n          this.otherQuery = this.getOtherQuery(query)\n        }\n      },\n      immediate: true\n    }\n  },\n  created() {\n    const _this = this\n    document.onkeydown = function (e) {\n      const { keyCode } = e\n      if (keyCode === 13) {\n        _this.handleLogin()\n      }\n    }\n    if (this.needCode) this.changeImg()\n    this.getLoginConfig()\n  },\n  mounted() {\n    this.$store.commit('user/SET_LOGIN_LOADING', false)\n    this.setShowTxt()\n    window.onresize = () => {\n      this.setShowTxt()\n    }\n  },\n  destroyed() {\n    document.onkeydown = function (e) {\n      const { keyCode } = e\n      if (keyCode === 13) { }\n    }\n  },\n  methods: {\n    setShowTxt() {\n      if (document.documentElement.clientHeight <= 840) {\n        this.showTxt = false\n      } else {\n        this.showTxt = true\n      }\n    },\n    checkCapslock(e) {\n      const { key } = e\n      this.capsTooltip = key && key.length === 1 && key >= 'A' && key <= 'Z'\n    },\n    getConfig(val) {\n      if (!val) return\n      getConfig(this.loginForm.account).then(res => {\n        this.needCode = !!res.data.enableVerificationCode\n        if (this.needCode) {\n          this.codeLength = res.data.verificationCodeNumber || 4\n          this.changeImg()\n        }\n      })\n    },\n    handleLogin() {\n      if (this.loading) return\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true\n          this.$store.commit('user/SET_LOGIN_LOADING', true)\n          const query = {\n            ...this.loginForm,\n            timestamp: this.timestamp,\n            jnpf_ticket: this.ssoTicket\n          }\n          this.$store.dispatch('user/login', query).then(res => {\n            this.$router.push({\n              path: this.redirect || '/home',\n              query: this.otherQuery\n            })\n          }).catch(() => {\n            if (this.needCode) {\n              this.changeImg()\n              this.loginForm.code = ''\n            }\n            this.$store.commit('user/SET_LOGIN_LOADING', false)\n          })\n        } else {\n          return false\n        }\n      })\n    },\n    changeImg() {\n      let timestamp = Math.random()\n      this.timestamp = timestamp\n      this.imgUrl = `/api/oauth/ImageCode/${this.codeLength || 4}/${timestamp}`\n    },\n    getOtherQuery(query) {\n      return Object.keys(query).reduce((acc, cur) => {\n        if (cur !== 'redirect') {\n          acc[cur] = query[cur]\n        }\n        return acc\n      }, {})\n    },\n    otherLoginList() {\n      this.socialsList = []\n      getSocialsLoginList().then(res => {\n        this.socialsList = res.data.filter(item => { return item.isLatest == \"true\" });\n      })\n    },\n    otherLogin(data) {\n      getTicket().then(res => {\n        this.ssoTicket = res.data\n        if (this.winURL && !this.winURL.closed) {\n          this.winURL.location.replace(this.redirectUrl)\n          this.winURL.focus()\n          return\n        }\n        this.socialsList.forEach(item => {\n          if (data == item.enname) {\n            let renderUrl = item.renderUrl.replace('JNPF_TICKET', this.ssoTicket)\n            this.redirectUrl = renderUrl\n          }\n        })\n        var iWidth = 750; //弹出窗口的宽度;\n        var iHeight = 500;//弹出窗口的高度;\n        var iLeft = (window.screen.width - iWidth) / 2;\n        var iTop = (window.screen.height - iHeight) / 2;//获得窗口的垂直位置;\n        this.winURL = window.open(this.redirectUrl, '_blank', 'height=' + iHeight + ',innerHeight=' + iHeight + ',width=' + iWidth + ',innerWidth=' + iWidth + ',top=' + iTop + ',left=' + iLeft + ',toolbar=no,menubar=no,scrollbars=auto,resizeable=no,location=no,status=no')\n        this.ssoTimer = setInterval(() => {\n          if (this.winURL.closed) { this.clearTimer() }\n          this.getTicketStatus()\n        }, 1000)\n      })\n    },\n    getTicketStatus() {\n      if (!this.ssoTicket) return\n      getTicketStatus(this.ssoTicket).then(res => {\n        if (res.data.status != 2) {\n          this.winURL && this.winURL.close()\n          if (res.data.status == 4) {//未绑定预留ticket\n            clearInterval(this.ssoTimer)\n            this.ssoTimer = null\n          } else {\n            this.clearTimer()\n          }\n          switch (res.data.status) {\n            case 1://登陆成功\n              let param = {\n                theme: res.data.theme,\n                token: res.data.value\n              }\n              this.$store.dispatch('user/setToken', param).then(res => {\n                this.$router.push({\n                  path: this.redirect || '/home',\n                  query: this.otherQuery\n                })\n              })\n              break;\n            case 4://未绑定\n              this.$message.error('第三方账号未绑定，5分钟内登录本系统账号密码自动绑定该账号！')\n              this.visible = false\n              this.ssoUrl = ''\n              break;\n            case 6://多租户绑定多个\n              this.dialogVisible = true\n              this.tenantSocialList = typeof res.data.value === 'string' ? JSON.parse(res.data.value) : res.data.value;\n              break;\n            default:\n              this.$message.error(res.data.value || '账号异常！')\n              this.visible = false\n              this.ssoUrl = ''\n              this.getLoginConfig()\n              break\n          }\n        }\n      })\n    },\n    clearTimer() {\n      if (this.ssoTimer) {\n        clearInterval(this.ssoTimer)\n        this.ssoTimer = null\n        this.ssoTicket = ''\n      }\n    },\n    handleClose() {\n      this.dialogVisible = false\n    },\n    socailsLogin(data) {\n      socialsLogin(qs.stringify({ ...data, tenantLogin: true })).then(response => {\n        if (response.code == 200) {\n          this.$store.dispatch('user/setToken', response.data).then(res => {\n            this.$router.push({\n              path: this.redirect || '/home',\n              query: this.otherQuery\n            })\n          })\n        }\n      })\n    },\n    ssoLogin() {\n      if (this.loading) return\n      this.loading = true\n      getTicket().then(res => {\n        this.ssoTicket = res.data\n        this.ssoUrl = this.preUrl + '?' + this.ticketParams + '=' + this.ssoTicket\n        this.visible = true\n        this.ssoTimer = setInterval(() => {\n          this.getTicketStatus()\n        }, 1000)\n      })\n    },\n    getLoginConfig() {\n      getLoginConfig().then(res => {\n        this.isSso = res.data.redirect\n        this.preUrl = res.data.url\n        this.ticketParams = res.data.ticketParams\n        this.socialsList = res.data.socialsList || []\n        localStorage.setItem('useSocials', this.socialsList.length)\n        this.ssoLoading = false\n      }).catch(() => {\n        this.isSso = false\n        this.ssoLoading = false\n      })\n    },\n    onOpen() {\n      this.show = true\n    },\n  }\n}\n",null]}