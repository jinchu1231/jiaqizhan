{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/Preview.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Process/FlowCard/Preview.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _util = require(\"./util.js\");\nvar isCondition = function isCondition(data) {\n  return data.type === \"condition\" || data.type === \"approver\" && (data.isInterflow || data.isBranchFlow);\n};\nvar notEmptyArray = function notEmptyArray(arr) {\n  return Array.isArray(arr) && arr.length > 0;\n};\nvar hasBranch = function hasBranch(data) {\n  return notEmptyArray(data.conditionNodes);\n};\nvar stopPro = function stopPro(ev) {\n  return ev.stopPropagation();\n};\nfunction createNormalCard(ctx, conf, h) {\n  var classList = ['flow-path-card'];\n  if (conf.state) classList.push(conf.state);\n  var afterTrue = function afterTrue(isTrue, name) {\n    return isTrue && classList.push(name), isTrue;\n  };\n  var isStartNode = afterTrue(_util.NodeUtils.isStartNode(conf), 'start-node');\n  var isApprNode = afterTrue(_util.NodeUtils.isApproverNode(conf), 'approver');\n  var isCopyNode = afterTrue(_util.NodeUtils.isCopyNode(conf), 'copy');\n  var isTimerNode = afterTrue(_util.NodeUtils.isTimerNode(conf), 'timer');\n  var isSubFlowNode = afterTrue(_util.NodeUtils.isSubFlowNode(conf), 'subFlow');\n  return h(\"section\", {\n    \"class\": classList.join(' '),\n    \"on\": {\n      \"click\": this.eventLauncher.bind(ctx, \"edit\", conf)\n    }\n  }, [h(\"header\", {\n    \"class\": \"header\"\n  }, [h(\"div\", {\n    \"class\": \"title-box\",\n    \"style\": \"height: 100%;width:190px;\"\n  }, [h(\"span\", {\n    \"class\": \"title-text\"\n  }, [conf.properties.title])]), isSubFlowNode && h(\"el-tag\", {\n    \"class\": \"async-state\",\n    \"attrs\": {\n      \"size\": \"mini\",\n      \"effect\": \"plain\"\n    },\n    \"style\": \"right:10px\"\n  }, [conf.properties.isAsync ? '异步' : '同步'])]), h(\"div\", {\n    \"class\": \"body\"\n  }, [h(\"span\", {\n    \"class\": \"text\"\n  }, [conf.content])])]);\n}\n// arg = ctx, data, h\nvar createFunc = function createFunc() {\n  for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n    arg[_key] = arguments[_key];\n  }\n  return createNormalCard.call.apply(createNormalCard, [arg[0]].concat(arg));\n};\nvar nodes = {\n  start: createFunc,\n  approver: createFunc,\n  copy: createFunc,\n  timer: createFunc,\n  subFlow: createFunc,\n  interflow: createFunc,\n  branchFlow: createFunc,\n  empty: function empty(_) {\n    return '';\n  },\n  condition: function condition(ctx, conf, h) {\n    return h(\"section\", {\n      \"class\": \"flow-path-card condition\"\n    }, [h(\"header\", {\n      \"class\": \"header\"\n    }, [h(\"div\", {\n      \"class\": \"title-box\",\n      \"style\": \"height: 20px;width:160px;\"\n    }, [h(\"span\", {\n      \"class\": \"title-text\"\n    }, [conf.properties.title])])]), h(\"div\", {\n      \"class\": \"body\"\n    }, [h(\"div\", {\n      \"class\": \"text\"\n    }, [conf.content])])]);\n  }\n};\nfunction addNodeButton(ctx, data, h) {\n  var isBranch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // 只有非条件节点和条件分支树下面的那个按钮 才能添加新分支树\n  var couldAddBranch = !hasBranch(data) || isBranch;\n  var isEmpty = data.type === \"empty\";\n  if (isEmpty && !isBranch) {\n    return \"\";\n  }\n  return h(\"div\", {\n    \"class\": \"add-node-btn-box flex justify-center\"\n  });\n}\nfunction NodeFactory(ctx, data, h) {\n  if (!data) return;\n  var showErrorTip = ctx.verifyMode && _util.NodeUtils.checkNode(data) === false;\n  var res = [],\n    branchNode = \"\",\n    selfNode = h(\"div\", {\n      \"class\": \"node-wrap\"\n    }, [h(\"div\", {\n      \"class\": \"node-wrap-box \".concat(data.type, \" \").concat(_util.NodeUtils.isInterflowNode(data) ? 'interflow' : '', \" \").concat(_util.NodeUtils.isBranchFlowNode(data) ? 'branchFlow' : '', \" \").concat(showErrorTip ? 'error' : '')\n    }, [nodes[data.type].call(ctx, ctx, data, h), addNodeButton.call(ctx, ctx, data, h)])]);\n  if (hasBranch(data)) {\n    // 如果节点是数组 一定为条件分支 添加分支样式包裹\n    // {data.childNode && NodeFactory.call(ctx, ctx, data.childNode, h)}\n    branchNode = h(\"div\", {\n      \"class\": \"branch-wrap\"\n    }, [h(\"div\", {\n      \"class\": \"branch-box-wrap\"\n    }, [h(\"div\", {\n      \"class\": \"branch-box flex justify-center relative\"\n    }, [h(\"span\", {\n      \"class\": \"line\"\n    }), data.conditionNodes.map(function (d) {\n      return NodeFactory.call(ctx, ctx, d, h);\n    })])]), addNodeButton.call(ctx, ctx, data, h, true)]);\n  }\n  if (isCondition(data)) {\n    return h(\"div\", {\n      \"class\": \"col-box\"\n    }, [h(\"div\", {\n      \"class\": \"center-line\"\n    }), h(\"div\", {\n      \"class\": \"top-cover-line\"\n    }), h(\"div\", {\n      \"class\": \"bottom-cover-line\"\n    }), selfNode, branchNode, NodeFactory.call(ctx, ctx, data.childNode, h)]);\n  }\n  res.push(selfNode);\n  branchNode && res.push(branchNode);\n  data.childNode && res.push(NodeFactory.call(ctx, ctx, data.childNode, h));\n  return res;\n}\nfunction addEndNode(h) {\n  return h(\"section\", {\n    \"class\": \"end-node\"\n  }, [\"\\u6D41\\u7A0B\\u7ED3\\u675F\"]);\n}\nvar _default = exports.default = {\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    // 点击发布时需要校验节点数据完整性 此时打开校验模式\n    verifyMode: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {},\n  methods: {\n    /**\n     *事件触发器 统筹本组件所有事件并转发到父组件中\n     * @param { Object } 包含event（事件名）和args（事件参数）两个参数\n     */\n    eventLauncher: function eventLauncher(event) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      // args.slice(0,-1) vue 会注入MouseEvent到最后一个参数 去除事件对象\n      var param = {\n        event: event,\n        args: args.slice(0, -1)\n      };\n      this.$emit(\"emits\", param);\n    }\n  },\n  render: function render(h) {\n    return h(\"div\", {\n      \"style\": \"display: inline-flex; flex-direction: column; align-items: center;\"\n    }, [this.data && NodeFactory.call(this, this, this.data, h), addEndNode(h)]);\n  }\n};",null]}