{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/JNPF-table/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/JNPF-table/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport JnpfTableColumn from './Column'\nimport ColumnSettings from './ColumnSettings'\nexport default {\n  name: 'JNPF-table',\n  components: { JnpfTableColumn, ColumnSettings },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    // 序号 默认有\n    hasNO: {\n      type: Boolean,\n      default: true\n    },\n    hasNOFixed: {\n      type: Boolean,\n      default: false\n    },\n    // 多选框 默认无\n    hasC: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    customColumn: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      default: '100%'\n    }\n  },\n  data() {\n    return {\n      columnList: [],\n      hasSlotContent: false,\n      columns: [],\n      defaultColumns: [],\n      drawerVisible: false,\n      refreshTable: false\n    }\n  },\n  watch: {\n    data: {\n      handler(val) {\n        if (!val) return\n        this.doLayout()\n      },\n      deep: true\n    }\n  },\n  computed: {\n    menuId() {\n      return this.$route.meta.modelId || ''\n    }\n  },\n  mounted() {\n    this.getColumns()\n  },\n  beforeUpdate() {\n    this.getColumns()\n  },\n  updated() {\n    if (this.refreshTable) this.refreshTable = false\n  },\n  methods: {\n    showDrawer() {\n      this.drawerVisible = true\n      this.$nextTick(() => {\n        this.$refs.columnSettings.init(this.columnList, this.columns)\n      })\n    },\n    checkForSlotContent() {\n      let checkForContent = (hasContent, node) => {\n        return hasContent || node.tag || (node.text && node.text.trim())\n      }\n      return this.$slots && this.$slots.default && this.$slots.default.reduce(checkForContent, false)\n    },\n    getColumns() {\n      if (!this.customColumn) return\n      this.hasSlotContent = this.checkForSlotContent()\n      if (!this.hasSlotContent) return\n      this.columns = this.$slots.default\n      let defaultColumns = this.columns.map(o => o.componentOptions && o.componentOptions.propsData).filter(item => item)\n      this.defaultColumns = defaultColumns.filter(o => o.prop)\n      let list = [...this.defaultColumns]\n      const cacheList = this.jnpf.storageGet(this.menuId)\n      if (!cacheList) {\n        this.columnList = list.map(item => {\n          return {\n            ...item,\n            columnVisible: true\n          }\n        })\n      } else {\n        let columnList = cacheList.map(item => {\n          let isShow = false\n          list.forEach(item2 => {\n            if (item.prop === item2.prop) isShow = true\n          })\n          return isShow ? item : null\n        }).filter(item => item)\n        this.columnList = this.mergeArray(columnList, list)\n      }\n    },\n    mergeArray(arr1, arr2) {\n      let arr = [...arr1]\n      for (let i = 0; i < arr2.length; i++) {\n        let flag = true\n        inner: for (let j = 0; j < arr1.length; j++) {\n          if (arr2[i].prop == arr1[j].prop) {\n            flag = false\n            break inner\n          }\n        }\n        if (flag) arr.push(arr2[i])\n      }\n      return arr\n    },\n    doLayout() {\n      setTimeout(() => {\n        this.$nextTick(() => {\n          this.$refs && this.$refs.JNPFTable && this.$refs.JNPFTable.doLayout()\n        })\n      }, 50)\n    },\n    setColumn(list) {\n      // this.loading = true\n      this.jnpf.storageSet({ [this.menuId]: list })\n      this.columnList = list\n      this.$forceUpdate()\n      this.refreshTable = true\n    },\n    checkSelectable(row) {\n      if (row.top) return false\n      return true\n    }\n  }\n}\n",null]}