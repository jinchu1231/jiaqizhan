{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/TreeSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/TreeSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nlet isFirst = 1\nimport { mapState } from 'vuex'\nexport default {\n  name: \"JnpfTreeSelect\",\n  props: {\n    // 在过滤条件时候传true,设置不显示根节点标题\n    conditionFilter: { type: Boolean, default: false },\n    // 配置项\n    props: {\n      type: Object,\n      default: () => ({\n        value: 'id',             // ID字段名\n        label: 'fullName',       // 显示名称\n        children: 'children',    // 子级字段名\n        disabled: function (data) {\n          return data.disabled\n        }\n      })\n    },\n    // 是否禁用\n    disabled: { type: Boolean, default: false },\n    // 选项列表数据(树形结构的对象数组)\n    options: { type: Array, default: () => [] },\n    placeholder: { type: String, default: '请选择' },\n    // 初始值\n    value: {\n      type: [String, Number, Array]\n    },\n    // 可清空选项\n    clearable: { type: Boolean, default: false },\n    // 能否搜索\n    filterable: { type: Boolean, default: true },\n    // 只能选择最后一层的数值\n    lastLevel: { type: Boolean, default: false },\n    // 只能选择最后一层的数值时，需要根据 lastLevelKey来判断是否最后一层\n    lastLevelKey: { type: String, default: \"hasChildren\" },\n    lastLevelValue: { default: false },\n    // 自动收起\n    accordion: { type: Boolean, default: false },\n    defaultExpandAll: { type: Boolean, default: true },\n    multiple: { type: Boolean, default: false }, // 是否多选，默认单选\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    isDataInterface: {\n      type: Number,\n      default: 0\n    }\n  },\n  computed: {\n    ...mapState({\n      themeClass: state => state.settings.themeClass\n    })\n  },\n  data() {\n    return {\n      valueTitle: '',\n      defaultExpandedKey: [],\n      selectOptions: [],\n      optionTitle: \"\",\n      key: +new Date()\n    }\n  },\n  mounted() {\n    if (this.value) {\n      this.initHandle()\n    }\n  },\n  methods: {\n    visibleChange(val) {\n      this.$emit('visible-change', val)\n    },\n    selectFilter(val) {\n      if (this.options.length) this.$refs.selectTree.filter(val);\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data[this.props.label].indexOf(value) !== -1;\n    },\n    selectFocus() {\n      if (this.isDataInterface === 1) {\n        this.$emit('selectChange')\n      }\n      this.initHandle()\n      if (isFirst && this.$refs.elSelect) {\n        isFirst = 0\n        this.$refs.elSelect.focus()\n        this.$nextTick(() => {\n          this.$refs.elSelect.blur()\n        })\n      }\n    },\n    // 初始化值\n    initHandle() {\n      this.$refs.selectTree.filter('');\n      if (this.value) {\n        if (this.multiple) {\n          setTimeout(() => {\n            let titleList = []\n            this.$refs.selectTree.setCheckedKeys(this.value)\n            if (this.lastLevel) {\n              titleList = this.$refs.selectTree.getCheckedNodes(true)\n            } else {\n              titleList = this.$refs.selectTree.getCheckedNodes(this.conditionFilter)\n            }\n            this.selectOptions = titleList\n            this.valueTitle = titleList.map(o => o[this.props.value])\n          }, 10)\n        } else {\n          setTimeout(() => {\n            this.valueTitle = this.$refs.selectTree.getNode(this.value) ? this.$refs.selectTree.getNode(this.value).data[this.props.label] : ''     // 初始化显示\n            this.$refs.selectTree.setCurrentKey(this.value)       // 设置默认选中\n            this.defaultExpandedKey = [this.value]   // 设置默认展开\n          }, 10);\n        }\n      } else {\n        if (this.multiple) {\n          this.valueTitle = []\n          this.$refs.selectTree.setCheckedKeys([])\n        } else {\n          this.valueTitle = ''\n          this.$refs.selectTree.setCurrentKey(null)\n        }\n      }\n      this.initScroll()\n    },\n    // 初始化滚动条\n    initScroll() {\n      this.$nextTick(() => {\n        let list = document.querySelectorAll('.JNPF-select-tree .el-scrollbar .el-select-dropdown__wrap')\n        // 有多个下拉框，造成页面错位\n        let index = list.length - 1\n        let scrollWrap = list[index]\n        let scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar')\n        scrollWrap.style && (scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;')\n        for (let i = 0; i < scrollBar.length; i++) {\n          scrollBar[i].style.width = 0\n        }\n      })\n    },\n    // 单选切换选项\n    handleNodeClick(node) {\n      if (node.disabled) return\n      if (!this.multiple) {\n        if (this.lastLevel && node[this.lastLevelKey] != undefined && node[this.lastLevelKey] != this.lastLevelValue) return\n        this.valueTitle = node[this.props.label]\n        this.$emit('input', node[this.props.value], node)\n        this.$emit('change', node[this.props.value], node)\n        this.defaultExpandedKey = []\n        this.$refs.elSelect.blur()\n      }\n    },\n    // 多选选择\n    check(node) {\n      if (!this.multiple) return\n      let selectedData = [], titleList = [], selectedTextData = []\n      if (this.lastLevel) {\n        selectedTextData = this.$refs.selectTree.getCheckedNodes(true)\n        for (let i = 0; i < selectedTextData.length; i++) {\n          const e = selectedTextData[i];\n          if (e[this.lastLevelKey] == this.lastLevelValue) {\n            selectedData.push(e[this.props.value])\n            titleList.push(e[this.props.label])\n          }\n        }\n      } else {\n        selectedTextData = this.$refs.selectTree.getCheckedNodes()\n        for (let i = 0; i < selectedTextData.length; i++) {\n          const e = selectedTextData[i];\n          selectedData.push(e[this.props.value])\n          titleList.push(e[this.props.label])\n        }\n      }\n      this.$emit('input', selectedData, selectedTextData)\n      this.$emit('change', selectedData, selectedTextData)\n    },\n    removeTag(tag) {\n      this.$refs.selectTree.setChecked(tag, false)\n      this.check()\n    },\n    // 清除选中\n    clearHandle() {\n      if (this.multiple) {\n        this.valueTitle = []\n        this.$emit('input', [])\n        this.$emit('change', [], [])\n        this.$refs.selectTree.setCheckedKeys([])\n      } else {\n        this.valueTitle = ''\n        this.$emit('input', '')\n        this.$emit('change', '', '')\n      }\n      this.defaultExpandedKey = []\n      this.clearSelected()\n    },\n    // 清空选中样式\n    clearSelected() {\n      let allNode = document.querySelectorAll('#tree-option .el-tree-node')\n      for (let i = 0; i < allNode.length; i++) {\n        allNode[i].classList.remove('is-current')\n      }\n    },\n  },\n  watch: {\n    value(val) {\n      this.initHandle()\n    },\n    multiple(val) {\n      this.key = +new Date()\n    },\n    options(val) {\n      if (this.value) this.initHandle()\n    }\n  }\n}\n",null]}