{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/layout/components/NavbarRight.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/layout/components/NavbarRight.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/asyncToGenerator.js\"));\nrequire(\"core-js/modules/es6.regexp.replace\");\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime-corejs2@7.24.5@@babel/runtime-corejs2/helpers/defineProperty.js\"));\nvar _vuex = require(\"vuex\");\nvar _Screenfull = _interopRequireDefault(require(\"@/components/Screenfull\"));\nvar _SizeSelect = _interopRequireDefault(require(\"@/components/SizeSelect\"));\nvar _LangSelect = _interopRequireDefault(require(\"@/components/LangSelect\"));\nvar _HeaderSearch = _interopRequireDefault(require(\"@/components/HeaderSearch\"));\nvar _MessageList = _interopRequireDefault(require(\"./MessageList\"));\nvar _settings = _interopRequireDefault(require(\"./settings\"));\nvar _UserList = _interopRequireDefault(require(\"./userList/UserList\"));\nvar _ApplyList = _interopRequireDefault(require(\"./ApplyList\"));\nvar _elDragDialog = _interopRequireDefault(require(\"@/directive/el-drag-dialog\"));\nvar _reconnectingWebsocket = _interopRequireDefault(require(\"reconnecting-websocket\"));\nvar _auth = require(\"@/utils/auth\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = exports.default = {\n  directives: {\n    dragDialog: _elDragDialog.default\n  },\n  components: {\n    Screenfull: _Screenfull.default,\n    SizeSelect: _SizeSelect.default,\n    LangSelect: _LangSelect.default,\n    Search: _HeaderSearch.default,\n    MessageList: _MessageList.default,\n    UserList: _UserList.default,\n    ApplyList: _ApplyList.default,\n    Settings: _settings.default\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, (0, _vuex.mapState)({\n    showLanguage: function showLanguage(state) {\n      return state.settings.showLanguage;\n    },\n    showSearch: function showSearch(state) {\n      return state.settings.showSearch;\n    },\n    showSettings: function showSettings(state) {\n      return state.settings.showSettings;\n    }\n  })), (0, _vuex.mapGetters)(['device', 'userInfo'])), {}, {\n    sysConfig: function sysConfig() {\n      return this.$store.state.settings.sysConfig;\n    }\n  }),\n  data: function data() {\n    return {\n      visible: false,\n      visible2: false,\n      isTwinkle: false,\n      messageCount: 0,\n      notify: null,\n      userList: []\n    };\n  },\n  watch: {\n    isTwinkle: function isTwinkle(val) {\n      // if (val) {\n      //   this.notify.setTitle(true)\n      // } else {\n      //   this.notify.setTitle()\n      // }\n    }\n  },\n  created: function created() {\n    this.initWebSocket();\n    this.initNotify();\n  },\n  methods: {\n    initWebSocket: function initWebSocket() {\n      var _this = this;\n      this.socket = this.$store.getters.socket || null;\n      if ('WebSocket' in window) {\n        if (!this.socket) {\n          var isDev = process.env.NODE_ENV === 'development';\n          var token = this.$store.getters.token;\n          var url = isDev ? this.define.APIURl + '/api/message/websocket/' + token : window.location.origin + '/websocket/' + token;\n          var webSocketUrl = url.replace('https://', 'wss://').replace('http://', 'ws://');\n          this.socket = new _reconnectingWebsocket.default(webSocketUrl);\n          this.$store.commit('user/SET_SOCKET', this.socket);\n        }\n        //添加事件监听\n        var socket = this.socket;\n        socket.onopen = function () {\n          var onConnection = {\n            \"method\": \"OnConnection\",\n            \"token\": _this.$store.getters.token,\n            \"mobileDevice\": false,\n            systemId: _this.userInfo.systemId,\n            isSeparate: !!_this.jnpf.getJnpfAppId()\n          };\n          var msg = JSON.stringify(onConnection);\n          socket.send(msg);\n        };\n        socket.onmessage = function (event) {\n          var dataStr = event.data;\n          var data = JSON.parse(dataStr);\n          if (data.method == 'initMessage') {\n            _this.messageCount = data.unreadTotalCount || 0;\n            _this.isTwinkle = !!data.unreadNums.length;\n          }\n          //用户在线\n          if (data.method == 'Online') {}\n          //用户离线\n          if (data.method == 'Offline') {}\n          //消息推送（消息公告用的）\n          if (data.method == 'messagePush') {\n            _this.messageCount += data.unreadNoticeCount;\n            if (_this.$refs.MessageList.visible) _this.$refs.MessageList.init();\n          }\n          //用户过期\n          if (data.method == 'logout') {\n            setTimeout(function () {\n              if (data.token && data.token !== (0, _auth.getToken)()) return location.reload();\n              if (_this.socket) {\n                _this.socket.close();\n                _this.socket = null;\n                _this.$store.commit('user/SET_SOCKET', _this.socket);\n              }\n              _this.$message({\n                message: data.msg || '登录过期,请重新登录',\n                type: 'error',\n                duration: 1000,\n                onClose: function onClose() {\n                  _this.$store.dispatch('user/resetToken').then(function () {\n                    location.reload();\n                  });\n                }\n              });\n            }, 1000);\n          }\n          //断开websocket连接\n          if (data.method == 'closeSocket') {\n            if (_this.socket) {\n              _this.socket.close();\n              _this.socket = null;\n              _this.$store.commit('user/SET_SOCKET', _this.socket);\n            }\n          }\n          //接收对方发送的消息\n          if (data.method == 'receiveMessage') {\n            //判断是否打开窗口\n            if (_this.$refs.UserList && _this.$refs.UserList.$refs.JNPFIm && _this.$refs.UserList.$refs.JNPFIm.visible) {\n              if (_this.$refs.UserList.$refs.JNPFIm.info.id === data.formUserId) {\n                var messItem = {\n                  userId: data.formUserId,\n                  messageType: data.messageType,\n                  message: data.formMessage,\n                  dateTime: _this.jnpf.toDate(data.dateTime)\n                };\n                _this.$refs.UserList.$refs.JNPFIm.addItem(messItem);\n                //更新已读\n                var msgObj = {\n                  method: \"UpdateReadMessage\",\n                  formUserId: data.formUserId,\n                  token: _this.$store.getters.token\n                };\n                var msg = JSON.stringify(msgObj);\n                socket.send(msg);\n                _this.$refs.UserList.updateReply(data);\n              } else {\n                _this.$refs.UserList.updateReply(data, 1);\n                _this.isTwinkle = true;\n              }\n            } else {\n              _this.$refs.UserList.updateReply(data, 1);\n              _this.isTwinkle = true;\n            }\n          }\n          //显示自己发送的消息\n          if (data.method == 'sendMessage') {\n            if (_this.$refs.UserList.$refs.JNPFIm.info.id !== data.toUserId) return;\n            //添加到客户端\n            var _messItem = {\n              userId: data.UserId,\n              messageType: data.messageType,\n              message: data.toMessage,\n              dateTime: _this.jnpf.toDate(data.dateTime)\n            };\n            _this.$refs.UserList.updateLatestMessage(data);\n            _this.$refs.UserList.$refs.JNPFIm.addItem(_messItem);\n          }\n          //消息列表\n          if (data.method == 'messageList') {\n            _this.$refs.UserList.$refs.JNPFIm.getList(data);\n          }\n          //刷新页面\n          if (data.method == 'refresh') {\n            if (data.msg) {\n              _this.$message.error(data.msg);\n              setTimeout(function () {\n                location.reload();\n              }, 2000);\n            } else {\n              location.reload();\n            }\n          }\n        };\n      }\n    },\n    toggleSideBar: function toggleSideBar() {\n      this.$store.dispatch('app/toggleSideBar');\n    },\n    handleLogout: function handleLogout() {\n      var _this2 = this;\n      this.$confirm('您确定要退出应用程序吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this2.logout();\n      }).catch(function () {});\n    },\n    logout: function () {\n      var _logout = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.$store.dispatch('user/logout');\n            case 2:\n              // this.$router.push(`/login?redirect=${this.$route.fullPath}`)\n              this.$router.push(\"/login\");\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }(),\n    lock: function lock() {\n      var _this3 = this;\n      this.$store.dispatch('user/setLock');\n      this.$nextTick(function () {\n        _this3.$router.push('/lockScreen');\n      });\n    },\n    read: function read(isAll) {\n      if (isAll) {\n        this.messageCount = 0;\n      } else {\n        this.messageCount -= 1;\n        this.messageCount = this.messageCount >= 0 ? this.messageCount : 0;\n      }\n    },\n    openUserList: function openUserList() {\n      this.$refs.UserList.init();\n    },\n    changeApply: function changeApply() {\n      this.$refs.ApplyList.init();\n    },\n    changeTwinkle: function changeTwinkle(boo) {\n      this.isTwinkle = boo;\n    },\n    initNotify: function initNotify() {\n      // this.notify = new Notify({\n      //   message: '您有新消息',\n      //   effect: 'flash', // flash | scroll\n      //   interval: 1000\n      // });\n    }\n  }\n};",null]}