{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/systemData/dataSync/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/systemData/dataSync/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataSourceListAll, Execute, DataSync, batchExecute, checkDbLink } from '@/api/systemData/dataSource'\n\nexport default {\n  name: 'systemData-dataSync',\n  data() {\n    return {\n      key: '',\n      dataForm: {\n        dbConnectionFrom: '',\n        dbConnectionTo: ''\n      },\n      dbOptions: [],\n      dataRule: {\n        dbConnectionFrom: [\n          { required: true, message: '数据库连接 From不能为空', trigger: 'blur' }\n        ],\n        dbConnectionTo: [\n          { required: true, message: '数据库连接 To不能为空', trigger: 'blur' }\n        ]\n      },\n      list: [],\n      listLoading: false,\n      dialogVisible: false,//规则配置弹窗\n      configureList: [],\n      defaultConfigureList: [],\n      beforeConversion: '',//转换前\n      beforeConversionList: [],//转换前\n      afterConversion: '',//转换后\n      afterConversionList: [],//转换后\n      verification: false,\n      convertRuleMap: {},\n      batchList: []\n    }\n  },\n  created() {\n    this.initData()\n  },\n  methods: {\n    initData() {\n      getDataSourceListAll().then(res => {\n        this.dbOptions = res.data.list.filter(o => o.children && o.children.length)\n      })\n    },\n    check() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          if (this.dataForm.dbConnectionFrom === this.dataForm.dbConnectionTo) {\n            this.$message({\n              message: '数据库连接不能相同',\n              type: 'error',\n              duration: 1000,\n            })\n            return this.list = []\n          }\n          this.listLoading = true\n          checkDbLink(this.dataForm).then((res) => {\n            this.beforeConversionList = []\n            this.convertRuleMap = res.data.convertRuleMap\n            for (var key in this.convertRuleMap) {\n              this.beforeConversionList.push({ val: key, value: this.convertRuleMap[key] })\n            }\n            this.defaultConfigureList = []\n            for (let index = 0; index < this.beforeConversionList.length; index++) {\n              const element = this.beforeConversionList[index];\n              this.defaultConfigureList.push({\n                beforeConversion: element.val,\n                afterConversion: element.value[0]\n              })\n              this.defaultConfigureList[index].afterConversionList = element.value\n            }\n            this.configureList = JSON.parse(JSON.stringify(this.defaultConfigureList))\n            this.verification = res.data.checkDbFlag\n            this.list = res.data.tableList\n            for (let i = 0; i < this.list.length; i++) {\n              const e = this.list[i];\n              this.$set(this.list[i], 'result', '')\n              this.$set(this.list[i], 'btnLoading', false)\n            }\n            this.listLoading = false\n          }).catch(res => {\n            this.listLoading = false\n            this.list = []\n          })\n        }\n      })\n    },\n    changeConversion(val, i) {\n      this.afterConversionList = []\n      this.configureList[i].afterConversion = ''\n      this.configureList[i].afterConversionList = this.convertRuleMap[val]\n    },\n    saveRule() {//保存\n      this.defaultConfigureList = JSON.parse(JSON.stringify(this.configureList))\n      this.dialogVisible = false\n    },\n    addRule() {   //规则配置新增\n      this.configureList.push({\n        beforeConversion: '',\n        afterConversion: ''\n      })\n    },\n    delRule(i) {  //规则配置删除\n      this.configureList.splice(i, 1)\n    },\n    batch() {//批量同步\n      if (!this.batchList.length) return this.$message.error('请先选择数据')\n      var map = {};\n      let data = {\n        dbConnectionFrom: this.dataForm.dbConnectionFrom,\n        dbConnectionTo: this.dataForm.dbConnectionTo,\n        dbTableList: this.batchList,\n      }\n      if (this.configureList && this.configureList.length) {\n        for (var index in this.configureList) {\n          map[this.configureList[index].beforeConversion] = this.configureList[index].afterConversion;\n        }\n        data = { ...data, convertRuleMap: map }\n      }\n      this.listLoading = true\n      this.$confirm('批量同步，将覆盖您原有表内的数据。请确认操作', {\n        type: 'warning'\n      }).then(() => {\n        batchExecute(data).then(res => {\n          this.$message({ message: res.msg, type: 'success', duration: 1000 })\n          for (const key in res.data) {\n            for (let index = 0; index < this.list.length; index++) {\n              const element = this.list[index];\n              if (element.table == key) element.result = res.data[key] == 1 ? '成功' : '失败'\n            }\n          }\n          this.listLoading = false\n          this.toggleSelection()\n        }).catch(() => { this.listLoading = false })\n      }).catch(() => { this.listLoading = false })\n    },\n    toggleSelection() {\n      this.$refs.multipleTable.$refs.JNPFTable.clearSelection();\n    },\n    addConfigure() {  //添加规则配置\n      if (!this.verification) return this.$message.error('请验证连接')\n      this.dialogVisible = true\n      this.configureList = JSON.parse(JSON.stringify(this.defaultConfigureList))\n    },\n    handleSelectionChange(val) {   //多选框\n      let list = []\n      val.forEach(element => {\n        list.push(element.table)\n      })\n      this.batchList = list\n    },\n    copy(row) {\n      var map = {};\n      row.btnLoading = true\n      row.result = ''\n      let data = {\n        dbConnectionFrom: this.dataForm.dbConnectionFrom,\n        dbConnectionTo: this.dataForm.dbConnectionTo,\n        dbTable: row.table,\n      }\n      if (this.configureList.length) {\n        for (var index in this.configureList) {\n          map[this.configureList[index].beforeConversion] = this.configureList[index].afterConversion;\n        }\n        data = { ...data, convertRuleMap: map }\n      }\n      DataSync(data).then((res) => {\n        if (res.data == 0) {\n          this.execute(row, res.data)\n        } else if (res.data == 1) {\n          this.$message({\n            message: '初始库表中没有数据',\n            type: 'warning',\n            duration: 1000,\n          })\n          row.btnLoading = false\n        } else if (res.data == 2) {\n          this.$confirm('目标库中该表不存在，是否在目标库中创建该表，并同步数据?', '提示', {\n            type: 'warning'\n          }).then(() => {\n            this.execute(row, res.data)\n          }).catch(() => { row.btnLoading = false });\n        } else if (res.data == 3) {\n          this.$confirm('目标表存在数据,是否自动清除并同步数据?', '提示', {\n            type: 'warning'\n          }).then(() => {\n            this.execute(row, res.data)\n          }).catch(() => { row.btnLoading = false });\n        }\n      }).catch(() => { row.btnLoading = false });\n    },\n    execute(row, type) {\n      row.result = ''\n      var map = {};\n      let data = {\n        type,\n        dbConnectionFrom: this.dataForm.dbConnectionFrom,\n        dbConnectionTo: this.dataForm.dbConnectionTo,\n        dbTable: row.table\n      }\n      if (this.configureList.length) {\n        for (var index in this.configureList) {\n          map[this.configureList[index].beforeConversion] = this.configureList[index].afterConversion;\n        }\n        data = { ...data, convertRuleMap: map }\n      }\n      Execute(data).then((res) => {\n        row.result = res.msg\n        row.btnLoading = false\n      }).catch(() => {\n        row.btnLoading = false\n      })\n    }\n  }\n}\n",null]}