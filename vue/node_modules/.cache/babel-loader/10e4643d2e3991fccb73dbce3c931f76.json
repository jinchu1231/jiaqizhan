{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!/Users/交安/gas/vue/gas-web/src/components/Jnpf/Upload/vue-simple-uploader/mixin.js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/Upload/vue-simple-uploader/mixin.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/babel.config.js","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/\\u4EA4\\u5B89/gas/vue/gas-web/node_modules/_@babel_runtime@7.24.5@@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.function.name\");\nvar _vue = _interopRequireDefault(require(\"vue\"));\nvar _vueSimpleUploader = _interopRequireDefault(require(\"vue-simple-uploader\"));\nvar _sparkMd = _interopRequireDefault(require(\"spark-md5\"));\nvar _fileItem = _interopRequireDefault(require(\"./fileItem\"));\n_vue.default.use(_vueSimpleUploader.default);\nvar _default = exports.default = {\n  components: {\n    FileItem: _fileItem.default\n  },\n  data: function data() {\n    return {\n      options: {\n        target: this.define.comUrl + '/api/file/chunk',\n        chunkSize: 1024 * 1024 * 5,\n        maxChunkRetries: 5,\n        singleFile: this.limit === 1,\n        testChunks: true,\n        //是否开启服务器分片校验\n        // 服务器分片校验函数，秒传及断点续传基础\n        checkChunkUploadedByResponse: function checkChunkUploadedByResponse(chunk, message) {\n          var objMessage = JSON.parse(message);\n          if (objMessage.code === 200) {\n            if (objMessage.data.uploaded) {\n              return true;\n            }\n            var chunkNumbers = objMessage.data.chunkNumbers;\n            return (chunkNumbers || []).indexOf(chunk.offset + 1) >= 0;\n          } else {\n            return true;\n          }\n        },\n        headers: {\n          Authorization: this.$store.getters.token\n        },\n        query: {\n          fileType: '',\n          extension: ''\n        }\n      },\n      attrs: {\n        accept: this.accept || '*'\n      },\n      statusText: {\n        success: '上传成功',\n        error: '上传失败',\n        uploading: '上传中',\n        paused: '暂停中',\n        waiting: '等待中'\n      },\n      panelShow: false //选择文件后，展示上传panel\n    };\n  },\n  watch: {\n    limit: function limit(val) {\n      this.options.singleFile = val === 1;\n    },\n    accept: function accept(val) {\n      this.attrs.accept = val ? val : '*';\n    }\n  },\n  computed: {\n    //Uploader实例\n    uploader: function uploader() {\n      return this.$refs.uploader.uploader;\n    }\n  },\n  methods: {\n    openUploader: function openUploader() {\n      this.$refs.uploadBtn.$el.click();\n    },\n    onFileAdded: function onFileAdded(file) {\n      if (this.beforeUpload && typeof this.beforeUpload === \"function\" && !this.beforeUpload(file)) {\n        file.cancel();\n        file.ignored = true;\n        return false;\n      }\n      // 自定义状态\n      file.customStatus = 'check';\n      this.panelShow = true;\n      this.options.query.fileType = file.fileType;\n      this.options.query.extension = file.getExtension();\n      this.computeMD5(file);\n    },\n    onFileProgress: function onFileProgress(rootFile, file, chunk) {\n      // console.log(`上传中 ${file.name}，chunk：${chunk.startByte / 1024 / 1024} ~ ${chunk.endByte / 1024 / 1024}`)\n    },\n    onFileError: function onFileError(rootFile, file, response, chunk) {\n      file.cancel();\n      this.$message.error(\"\\u4E0A\\u4F20\\u5931\\u8D25\");\n    },\n    onFileSuccess: function onFileSuccess(rootFile, file, response, chunk) {\n      var _this2 = this;\n      var res = JSON.parse(response);\n      if (res.code != 200) {\n        this.$message.error(res.msg);\n        file.cancel();\n        return;\n      }\n      setTimeout(function () {\n        // 秒传 直接展示\n        if (res.data.uploaded) {\n          // 秒传结果\n        } else if (res.data.merge) {\n          // 需要合并\n          _this2.handelSuccess(file);\n        } else {\n          // 上传错误\n          file.cancel();\n          _this2.$message.error(\"\\u4E0A\\u4F20\\u5931\\u8D25\");\n        }\n      }, 300);\n    },\n    /**\n     * 计算md5，实现断点续传及秒传\n     * @param file\n     */\n    computeMD5: function computeMD5(file) {\n      var _this3 = this;\n      var _this = this;\n      var fileReader = new FileReader();\n      var time = new Date().getTime();\n      var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n      var currentChunk = 0;\n      var chunkSize = 10 * 1024 * 1000;\n      var chunks = Math.ceil(file.size / chunkSize);\n      var spark = new _sparkMd.default.ArrayBuffer();\n      file.pause();\n      loadNext();\n      fileReader.onload = function (e) {\n        spark.append(e.target.result);\n        if (currentChunk < chunks) {\n          currentChunk++;\n          loadNext();\n        } else {\n          var md5 = spark.end();\n          _this3.computeMD5Success(md5, file);\n        }\n      };\n      fileReader.onerror = function () {\n        _this.$message.error(\"\\u6587\\u4EF6\".concat(file.name, \"\\u8BFB\\u53D6\\u51FA\\u9519\\uFF0C\\u8BF7\\u68C0\\u67E5\\u8BE5\\u6587\\u4EF6\"));\n        file.cancel();\n      };\n      function loadNext() {\n        var start = currentChunk * chunkSize;\n        var end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n        fileReader.readAsArrayBuffer(blobSlice.call(file.file, start, end));\n      }\n    },\n    computeMD5Success: function computeMD5Success(md5, file) {\n      file.uniqueIdentifier = md5; // 把md5值作为文件的识别码\n      file.customStatus = 'uploading';\n      file.resume(); // 开始上传\n    },\n    close: function close() {\n      this.uploader.cancel();\n      this.panelShow = false;\n    },\n    onComplete: function onComplete() {\n      // this.uploader.cancel();\n      // this.panelShow = false;\n    }\n  }\n};",null]}