{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/list/Form.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/views/basic/dynamicModel/list/Form.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PrintDialog from '@/components/PrintDialog'\nimport { createModel, updateModel, getModelInfo } from '@/api/onlineDev/visualDev'\nimport Parser from '@/components/Generator/parser/Parser'\nimport PrintBrowse from '@/components/PrintBrowse'\nimport { deepClone } from '@/utils'\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  components: { Parser, PrintBrowse, PrintDialog },\n  data() {\n    return {\n      printId: '',\n      printDialogVisible: false,\n      visible: false,\n      key: +new Date(),\n      formConf: {},\n      dataForm: {\n        id: '',\n        data: ''\n      },\n      modelId: '',\n      formData: {},\n      btnLoading: false,\n      loading: true,\n      isPreview: false,\n      useFormPermission: false,\n      printBrowseVisible: false,\n      formOperates: [],\n      dialogLoading: false,\n      continueBtnLoading: false,\n      index: 0,\n      prevDis: false,\n      nextDis: false,\n      allList: [],\n      showMoreBtn: true,\n      type: 1,\n      refreshDataList: false\n    }\n  },\n  computed: {\n    ...mapGetters(['userInfo']),\n  },\n  methods: {\n    goBack() {\n      this.destroyStyle()\n      this.visible = false\n      this.$emit('refreshDataList', this.refreshDataList)\n    },\n    printBrowseHandle(id) {\n      this.printDialogVisible = false\n      this.printId = id;\n      this.printBrowseVisible = true;\n    },\n    print() {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持打印', type: 'warning' })\n      this.printDialogVisible = true\n      this.$nextTick(() => {\n        if (this.formConf.printId.length > 1) {\n          this.$refs.printDialog.init(this.formConf.printId)\n          return\n        }\n        this.printBrowseHandle(this.formConf.printId)\n      })\n    },\n    init(formConf, modelId, id, isPreview, useFormPermission, allList, type) {\n      this.formConf = deepClone(formConf)\n      this.modelId = modelId\n      this.isPreview = isPreview\n      this.useFormPermission = useFormPermission\n      this.dataForm.id = id || ''\n      this.getFormOperates()\n      this.loading = true\n      this.dialogLoading = false\n      this.prevDis = false\n      this.nextDis = false\n      this.allList = allList || []\n      this.type = type\n      if (type == 3 || type == 5) {\n        this.showMoreBtn = false\n      } else {\n        if (this.allList.length) {\n          this.index = this.allList.findIndex(item => item.id === id)\n          if (this.index == 0) this.prevDis = true\n          if (this.index == this.allList.length - 1) this.nextDis = true\n        } else {\n          this.prevDis = true\n          this.nextDis = true\n        }\n      }\n\n      this.$nextTick(() => {\n        if (this.dataForm.id) {\n          let extra = {\n            modelId,\n            id,\n            type: 2\n          }\n          this.$store.commit('generator/SET_DYNAMIC_MODEL_EXTRA', extra)\n          getModelInfo(modelId, this.dataForm.id).then(res => {\n            this.dataForm = res.data\n            if (!this.dataForm.data) return\n            this.formData = { ...JSON.parse(this.dataForm.data), id: this.dataForm.id }\n            this.fillFormData(this.formConf, this.formData)\n            this.dialogLoading = true\n            this.$nextTick(() => {\n              this.visible = true\n              this.loading = false\n            })\n          })\n        } else {\n          this.$store.commit('generator/SET_DYNAMIC_MODEL_EXTRA', {})\n          this.formData = {}\n          this.fillFormData(this.formConf, this.formData, \"add\")\n          this.dialogLoading = true\n          this.$nextTick(() => {\n            this.visible = true\n            this.loading = false\n          })\n        }\n        this.key = +new Date()\n      })\n    },\n    prev() {\n      this.index--\n      if (this.index === 0) this.prevDis = true\n      this.nextDis = false\n      this.renewModelInfo()\n    },\n    next() {\n      this.index++\n      if (this.index === this.allList.length - 1) this.nextDis = true\n      this.prevDis = false\n      this.renewModelInfo()\n    },\n    renewModelInfo() {\n      getModelInfo(this.modelId, this.allList[this.index].id).then(res => {\n        this.dataForm = res.data\n        if (!this.dataForm.data) return\n        this.resetForm()\n        let formData = { ...JSON.parse(this.dataForm.data), id: this.dataForm.id }\n        this.fillFormData(this.formConf, formData)\n        this.$nextTick(() => {\n          this.key = +new Date()\n        })\n      })\n    },\n    getFormOperates() {\n      if (this.isPreview || !this.useFormPermission) return\n      const permissionList = this.$store.getters.permissionList\n      const modelId = this.$route.meta.modelId\n      const list = permissionList.filter(o => o.modelId === modelId)\n      this.formOperates = list[0] && list[0].form ? list[0].form : []\n    },\n    fillFormData(form, data, flag) {\n      const loop = (list, parent) => {\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          if (item.__vModel__) {\n            let val = data.hasOwnProperty(item.__vModel__) ? data[item.__vModel__] : item.__config__.defaultValue\n            if (!item.__config__.isSubTable) item.__config__.defaultValue = val\n            if (flag == \"add\") {//新增时候，默认当前\n              if (item.__config__.defaultCurrent) {\n                if (item.__config__.jnpfKey === 'datePicker') {\n                  let format = item.format\n                  let dateStr = this.jnpf.toDate(new Date().getTime(), format)\n                  let time = format === 'yyyy' ? '-01-01 00:00:00' : format === 'yyyy-MM' ? '-01 00:00:00' : format === 'yyyy-MM-dd' ?\n                    ' 00:00:00' : ''\n                  item.__config__.defaultValue = new Date(dateStr + time).getTime()\n                }\n                if (item.__config__.jnpfKey === 'timePicker') {\n                  item.__config__.defaultValue = this.jnpf.toDate(new Date(), item.format)\n                }\n                if (item.__config__.jnpfKey === 'organizeSelect' && (this.userInfo.organizeIdList instanceof Array && this.userInfo.organizeIdList.length > 0)) {\n                  item.__config__.defaultValue = item.multiple == true ? [this.userInfo.organizeIdList] : this.userInfo.organizeIdList\n                }\n                if (item.__config__.jnpfKey === 'depSelect' && this.userInfo.departmentId) {\n                  item.__config__.defaultValue = item.multiple ? [this.userInfo.departmentId] : this.userInfo.departmentId;\n                }\n                if (item.__config__.jnpfKey === 'posSelect' && (this.userInfo.positionIds instanceof Array && this.userInfo.positionIds.length > 0)) {\n                  item.__config__.defaultValue = item.multiple ? this.userInfo.positionIds.map(o => o.id) : this.userInfo.positionIds[0].id\n                }\n                if (item.__config__.jnpfKey === 'roleSelect' && (this.userInfo.roleIds instanceof Array && this.userInfo.roleIds.length > 0)) {\n                  item.__config__.defaultValue = item.multiple ? this.userInfo.roleIds : this.userInfo.roleIds[0];\n                }\n                if (item.__config__.jnpfKey === 'groupSelect' && (this.userInfo.groupIds instanceof Array && this.userInfo.groupIds.length > 0)) {\n                  item.__config__.defaultValue = item.multiple ? this.userInfo.groupIds : this.userInfo.groupIds[0];\n                }\n                if (['userSelect'].includes(item.__config__.jnpfKey) && this.userInfo.userId) {\n                  item.__config__.defaultValue = item.multiple ? [this.userInfo.userId] : this.userInfo.userId;\n                }\n                if (item.__config__.jnpfKey === 'usersSelect' && this.userInfo.userId) {\n                  item.__config__.defaultValue = item.multiple ? [this.userInfo.userId + '--user'] : this.userInfo.userId + '--user';\n                }\n                if (item.__config__.jnpfKey === 'sign' && this.userInfo.signImg) item.__config__.defaultValue = this.userInfo.signImg\n              }\n            }\n            if (!this.isPreview && this.useFormPermission) {\n              let id = item.__config__.isSubTable ? parent.__vModel__ + '-' + item.__vModel__ : item.__vModel__\n              let noShow = true\n              if (this.formOperates && this.formOperates.length) {\n                noShow = !this.formOperates.some(o => o.enCode === id)\n              }\n              noShow = item.__config__.noShow ? item.__config__.noShow : noShow\n              this.$set(item.__config__, 'noShow', noShow)\n            }\n          }\n          if (item.__config__ && item.__config__.children && Array.isArray(item.__config__.children)) {\n            loop(item.__config__.children, item)\n          }\n        }\n      }\n      loop(form.fields)\n      form.formData = data\n    },\n    resetForm() {\n      this.$nextTick(() => {\n        this.$refs.dynamicForm && this.$refs.dynamicForm.resetForm()\n      })\n    },\n    submitForm(data, callback, type) {\n      if (!data) return\n      if (type == 2) {\n        this.refreshDataList = true\n        this.continueBtnLoading = true\n      } else {\n        this.btnLoading = true\n      }\n      const formData = { ...this.formData, ...data }\n      this.dataForm.data = JSON.stringify(formData)\n      const formMethod = this.dataForm.id ? updateModel : createModel\n      formMethod(this.modelId, this.dataForm).then(res => {\n        if (this.dataForm.id) {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              if (callback && typeof callback === \"function\") callback()\n              this.$nextTick(() => {\n                if (type == 2) {\n                  getModelInfo(this.modelId, this.dataForm.id).then(res => {\n                    this.dataForm = res.data\n                    this.continueBtnLoading = false\n                    if (!this.dataForm.data) return\n                    this.formData = { ...JSON.parse(this.dataForm.data), id: this.dataForm.id }\n                    this.fillFormData(this.formConf, this.formData)\n                  })\n                } else {\n                  this.visible = false\n                  this.destroyStyle()\n                  this.btnLoading = false\n                  this.$emit('refreshDataList', true)\n                }\n              })\n            }\n          })\n        } else {\n          this.$message({\n            message: res.msg,\n            type: 'success',\n            duration: 1500,\n            onClose: () => {\n              if (callback && typeof callback === \"function\") callback()\n              this.$nextTick(() => {\n                this.continueBtnLoading = false\n                if (type == 2) {\n                  this.resetForm()\n                  this.$nextTick(() => {\n                    this.key = +new Date()\n                  })\n                  return\n                }\n                this.visible = false\n                this.btnLoading = false\n                this.$emit('refreshDataList', true)\n              })\n            }\n          })\n        }\n      }).catch(() => {\n        this.continueBtnLoading = false\n        this.btnLoading = false\n      })\n    },\n    dataFormSubmit(type) {\n      if (this.isPreview) return this.$message({ message: '功能预览不支持数据保存', type: 'warning' })\n      this.$refs.dynamicForm && this.$refs.dynamicForm.submitForm(type)\n    },\n    destroyStyle() {\n      if (document.getElementById('styleId')) {\n        document.getElementById('styleId').remove()\n      }\n    }\n  }\n}\n",null]}