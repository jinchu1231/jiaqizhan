{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/RelationForm/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/RelationForm/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getFieldDataSelect, getDataChange, getConfigData } from '@/api/onlineDev/visualDev'\nimport Detail from '@/views/basic/dynamicModel/list/detail'\nimport emitter from 'element-ui/src/mixins/emitter'\nlet { methods: { dispatch } } = emitter\nexport default {\n  name: 'JnpfRelationForm',\n  components: { Detail },\n  props: {\n    value: {\n      default: ''\n    },\n    modelId: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    relationField: {\n      type: String,\n      default: ''\n    },\n    field: {\n      type: String,\n      default: ''\n    },\n    columnOptions: {\n      type: Array,\n      default: () => []\n    },\n    hasPage: {\n      type: Boolean,\n      default: false\n    },\n    pageSize: {\n      type: Number,\n      default: 20\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    popupType: {\n      type: String,\n      default: 'dialog'\n    },\n    popupTitle: {\n      type: String,\n      default: '选择数据'\n    },\n    popupWidth: {\n      type: String,\n      default: '800px'\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data() {\n    return {\n      list: [],\n      innerValue: '',\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      },\n      total: 0,\n      checked: '',\n      checkedTxt: '',\n      checkedRow: {},\n      listLoading: false,\n      inputHovering: false,\n      visible: false,\n      detailVisible: false\n    }\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    }\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.multiple\n        ? Array.isArray(this.value) && this.value.length > 0\n        : this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.disabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    }\n  },\n  created() {\n    this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n    this.setDefault()\n  },\n  methods: {\n    initData() {\n      if (!this.modelId || !this.relationField) return\n      this.listLoading = true\n      let columnOptionsList = this.columnOptions.map(o => o.value)\n      let query = {\n        ...this.listQuery,\n        relationField: this.relationField,\n        columnOptions: columnOptionsList.join(',')\n      }\n      getFieldDataSelect(this.modelId, query).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n        this.setDefault()\n      }).catch(() => { this.listLoading = false })\n    },\n    search() {\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n      this.initData()\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n      this.initData()\n    },\n    openDialog() {\n      if (this.disabled) {\n        if (!this.value) return\n        getConfigData(this.modelId).then(res => {\n          if (!res.data) return\n          if (!res.data.formData) return\n          let formData = JSON.parse(res.data.formData)\n          formData.popupType = 'general'\n          this.detailVisible = true\n          this.$nextTick(() => {\n            this.$refs.Detail.init(formData, this.modelId, this.value)\n          })\n\n        })\n        return\n      }\n      this.checked = this.value\n      this.visible = true\n      this.reset()\n    },\n    clear() {\n      this.checked = ''\n      this.innerValue = ''\n      this.checkedRow = {}\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n      dispatch.call(this, 'ElFormItem', 'el.form.change', this.checked)\n    },\n    select() {\n      if (!this.checked) return\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n      dispatch.call(this, 'ElFormItem', 'el.form.change', this.checked)\n      this.visible = false\n    },\n    rowClick(row) {\n      this.checked = row.id\n      this.checkedTxt = row[this.relationField]\n      this.checkedRow = row\n    },\n    setDefault() {\n      this.getItemValue(this.value)\n    },\n    getItemValue(val) {\n      if (val) {\n        if (!this.modelId) return\n        getDataChange(this.modelId, val).then(res => {\n          if (!res.data || !res.data.data) return\n          let data = JSON.parse(res.data.data)\n          this.innerValue = data[this.relationField]\n          this.checkedTxt = data[this.relationField]\n          if (!this.field) return\n          let relationData = this.$store.state.generator.relationData\n          this.$set(relationData, this.field, data)\n          this.$eventBus.$emit('eventBus', relationData, this.field)\n          this.$store.commit('generator/UPDATE_RELATION_DATA', relationData)\n        })\n      } else {\n        this.innerValue = ''\n        this.checkedTxt = ''\n        if (!this.field) return\n        let relationData = this.$store.state.generator.relationData\n        this.$set(relationData, this.field, {})\n        this.$eventBus.$emit('eventBus', relationData, this.field)\n        this.$store.commit('generator/UPDATE_RELATION_DATA', relationData)\n      }\n    }\n  }\n}\n",null]}