{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/Barcode/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/Barcode/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport JsBarcode from 'jsbarcode'\nlet unique = 0\n\nexport default {\n  name: 'JnpfBarcode',\n  props: {\n    dataType: {\n      type: String,\n      default: 'static'\n    },\n    format: {\n      type: String,\n      default: 'code128'\n    },\n    lineColor: {\n      type: String,\n      default: '#000'\n    },\n    background: {\n      type: String,\n      default: '#fff'\n    },\n    relationField: {\n      type: String,\n      default: ''\n    },\n    formData: {\n      type: Object\n    },\n    width: {\n      type: Number,\n      default: 4\n    },\n    height: {\n      type: Number,\n      default: 40\n    },\n    staticText: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    barcode() {\n      if (this.dataType === 'static') {\n        return this.staticText\n      } else {\n        return this.relationText\n      }\n    }\n  },\n  data() {\n    return {\n      id: '',\n      relationText: \"\",\n    }\n  },\n  created() {\n    this.id = this.uuid()\n  },\n  watch: {\n    formData: {\n      handler: function (val) {\n        if (val && this.dataType === 'relation' && this.relationField) {\n          this.relationText = val[this.relationField]\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    format() {\n      this.getBarcode()\n    },\n    barcode() {\n      this.$nextTick(() => {\n        this.getBarcode()\n      })\n    },\n    lineColor() {\n      this.getBarcode()\n    },\n    background() {\n      this.getBarcode()\n    },\n    width() {\n      this.getBarcode()\n    },\n    height() {\n      this.getBarcode()\n    },\n  },\n  mounted() {\n    this.getBarcode()\n  },\n  methods: {\n    uuid() {\n      const time = Date.now()\n      const random = Math.floor(Math.random() * 1000000000)\n      unique++\n      return 'barcode_' + random + unique + String(time)\n    },\n    getBarcode() {\n      if (!this.barcode) return\n      let reg = /^[A-Za-z0-9]+$/\n      if (!reg.test(this.barcode)) {\n        return\n      }\n      JsBarcode(\"#\" + this.id, this.barcode, {\n        format: this.format,\n        lineColor: this.lineColor,\n        width: this.width,\n        height: this.height,\n        background: this.background,\n        displayValue: false,\n        margin: 5\n      });\n    }\n  },\n}\n",null]}