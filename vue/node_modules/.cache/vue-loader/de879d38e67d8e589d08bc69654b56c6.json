{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/integrationProcess/PropPanel/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { NodeUtils } from \"../FlowCard/util\"\nimport nodeConfig from \"../FlowCard/config\"\nimport StartNode from './StartNode'\nimport AddDataNode from './AddDataNode'\nimport UpdateDataNode from './UpdateDataNode'\nimport DeleteDataNode from './DeleteDataNode'\nimport DataInterfaceNode from './DataInterfaceNode'\nimport MessageNode from './MessageNode'\nimport GetDataNode from './GetDataNode'\nimport LaunchFlowNode from './LaunchFlowNode'\nimport { getConfigData } from '@/api/onlineDev/visualDev'\nimport { getFlowList, getFlowFormInfo } from '@/api/workFlow/FlowEngine'\nimport { getWebhookUrl } from '@/api/onlineDev/integrate';\nexport default {\n  props: [/*当前节点数据*/\"value\", /*整个节点数据*/\"processData\", \"flowType\", 'formInfo'],\n  components: { StartNode, AddDataNode, UpdateDataNode, DeleteDataNode, DataInterfaceNode, MessageNode, GetDataNode, LaunchFlowNode },\n  data() {\n    return {\n      properties: {}, // 当前节点数据\n      activeKey: '1',\n      startForm: JSON.parse(JSON.stringify(nodeConfig.defaultStartForm)),\n      addDataForm: {},\n      updateDataForm: {},\n      deleteDataForm: {},\n      dataInterfaceForm: {},\n      integrateType: this.formInfo.type || 1,\n      messageForm: {},\n      getDataForm: {},\n      launchFlowForm: {},\n      visible: false,  // 控制面板显隐\n      formFieldList: [],\n      flowOptions: [],\n      key: '',\n      key2: ''\n    };\n  },\n  computed: {\n    // 未使用的条件个数\n    notUseConNum() {\n      // 发起人是默认就有得  所以需要加 1\n      return this.pconditions.length - this.showingPCons.length + 1;\n    },\n    formFieldsOptions() {\n      let formFieldsList = []\n      formFieldsList = this.integrateType != 2 ? this.processData.properties.formFieldList || [] : this.processData.childNode.properties.formFieldList || []\n      let boo = formFieldsList.some(o => o.id === '@formId')\n      if (!boo) formFieldsList.unshift({ fullName: '@表单ID', id: '@formId', label: '@formId(@表单ID)' })\n      return formFieldsList;\n    },\n    usedFormItems() {\n      return this.formFieldsOptions.filter(o => o.id.indexOf('-') < 0)\n    },\n    funcOptions() {\n      let options = [\n        ...systemFieldOptions,\n        ...this.formFieldsOptions\n      ]\n      return options\n    },\n    funcRequiredOptions() {\n      return this.formFieldsOptions.filter(o => o.__config__ && o.__config__.required)\n    },\n    rejectStepOptions() {\n      let options = []\n      const list = [{\n        nodeId: '2',\n        properties: { title: '自选审批节点' }\n      }]\n      options = [...defaultStep, ...list, ...this.realNodeList]\n      if (this.approverForm.rejectType == 2) {\n        options = options.filter(o => o.nodeId != 1)\n      }\n      return options\n    }\n  },\n  methods: {\n    initCommonNodeData(key) {\n      let properties = JSON.parse(JSON.stringify(this.value.properties))\n      Object.assign(this[key + 'Form'], properties);\n      this.$nextTick(async () => {\n        if ((key === 'addData' || key === 'updateData' || key == 'launchFlow') && this[key + 'Form'].enableFlow && this[key + 'Form'].formId) {\n          this.getFlowOptions(this[key + 'Form'].formId);\n        }\n        if (this.integrateType == 2 && ['addData', 'updateData', 'deleteData'].includes(key) && !this[key + 'Form'].ruleList.length) {\n          const emptyChildItem = { field: '', symbol: '==', fieldValueType: 1, fieldValue: undefined, jnpfKey: '', fieldValueJnpfKey: '', cellKey: +new Date() };\n          const emptyItem = { logic: 'and', groups: [emptyChildItem] };\n          this[key + 'Form'].ruleList.push(JSON.parse(JSON.stringify(emptyItem)));\n          this.key = +new Date()\n        }\n        if (this.integrateType == 3 && key === 'start' && !this[key + 'Form'].webhookUrl) {\n          const res = await getWebhookUrl(this.formInfo.id);\n          if (!res) return;\n          this[key + 'Form'].webhookUrl = res.data.webhookUrl;\n          this[key + 'Form'].webhookGetFieldsUrl = res.data.requestUrl;\n          this[key + 'Form'].webhookRandomStr = res.data.randomStr;\n        }\n      });\n    },\n    // 字段设置验证\n    transferExist(form) {\n      const list = this[form + 'Form'].transferList;\n      let isOk = true;\n      for (let i = 0; i < list.length; i++) {\n        const e = list[i];\n        if (e.required) {\n          if (!e.sourceValue) {\n            this.$message.warning(`${e.targetFieldLabel}的值不能为空`);\n            isOk = false;\n            break;\n          }\n        } else {\n          if (!e.targetField) {\n            this.$message.warning(`目标表单字段不能为空`);\n            isOk = false;\n            break;\n          }\n        }\n      }\n      return isOk;\n    },\n    conditionExist(form) {\n      const list = this[form + 'Form'].ruleList;\n      let isOk = true;\n      outer: for (let i = 0; i < list.length; i++) {\n        const e = list[i];\n        let label = '';\n        if (this.integrateType == 1) {\n          if (form === 'updateData') label = '更新条件';\n          if (form === 'deleteData') label = '删除条件';\n        }\n        if (this.integrateType == 2) {\n          label = '目标表单';\n        }\n        for (let j = 0; j < e.groups.length; j++) {\n          const child = e.groups[j];\n          if (!child.field) {\n            this.$message.warning(`条件字段不能为空`);\n            isOk = false;\n            break outer;\n          }\n          if (!child.symbol) {\n            this.$message.warning('条件符号不能为空');\n            isOk = false;\n            break;\n          }\n          if (\n            !['null', 'notNull'].includes(child.symbol) && !['switch'].includes(child.jnpfKey) &&\n            (!child.fieldValue || this.jnpf.isEmpty(child.fieldValue)) &&\n            (!['inputNumber', 'calculate', 'rate'].includes(child.jnpfKey) || (['inputNumber', 'calculate', 'rate'].includes(child.jnpfKey) && child.fieldValue !== 0))\n          ) {\n            this.$message.warning('数据值不能为空');\n            isOk = false;\n            break;\n          }\n        }\n      }\n      return isOk;\n    },\n    getFormFieldList(id, form) {\n      this.flowOptions = []\n      getConfigData(id).then(res => {\n        const { formData, enableFlow, flowId } = res.data;\n        let formJson = {},\n          fieldList = [];\n        if (formData) formJson = JSON.parse(formData);\n        fieldList = formJson.fields || [];\n        let list = this.transformFieldList(fieldList);\n        this[form + 'Form'].formFieldList = list.map(o => ({ ...o, label: o.fullName ? o.id + '(' + o.fullName + ')' : o.id }));\n        if (enableFlow == 1) this.getFlowOptions(flowId);\n        if (form === 'addData' || form === 'launchFlow') this.updateTransferList(form);\n        this.key = +new Date()\n      });\n    },\n    // 获取流程表单字段\n    getFlowFormFieldList(id, form) {\n      this.flowOptions = [];\n      getFlowFormInfo(id).then(res => {\n        let { formType = 1, propertyJson } = res.data;\n        let formJson = {},\n          fieldList = [];\n        if (propertyJson) formJson = JSON.parse(propertyJson);\n        if (formType == 1) {\n          fieldList = this.transformFormJson(formJson);\n        } else {\n          fieldList = formJson.fields;\n        }\n        let list = this.transformFieldList(fieldList);\n        this[form + 'Form'].formFieldList = list.map(o => ({ ...o, label: o.fullName ? o.id + '(' + o.fullName + ')' : o.id }));\n        if (form === 'launchFlow') this.updateTransferList(form);\n      });\n    },\n    // 获取流程列表\n    getFlowOptions(id) {\n      getFlowList(id, '1').then(res => {\n        this.flowOptions = res.data\n      })\n    },\n    transformFormJson(list) {\n      const fieldList = list.map(o => ({\n        __config__: {\n          label: o.filedName,\n          jnpfKey: o.jnpfKey || '',\n          required: o.required || false,\n        },\n        __vModel__: o.filedId,\n        multiple: o.multiple || false,\n      }));\n      return fieldList;\n    },\n    transformFieldList(formFieldList) {\n      let list = [];\n      const loop = (data, parent) => {\n        if (!data) return;\n        if (data.__vModel__ && data.__config__.jnpfKey !== 'table') {\n          const isTableChild = parent && parent.__config__ && parent.__config__.jnpfKey === 'table';\n          list.push({\n            id: isTableChild ? parent.__vModel__ + '-' + data.__vModel__ : data.__vModel__,\n            fullName: isTableChild ? parent.__config__.label + '-' + data.__config__.label : data.__config__.label,\n            ...data,\n          });\n        }\n        if (Array.isArray(data)) data.forEach(d => loop(d, parent));\n        if (data.__config__ && data.__config__.children && Array.isArray(data.__config__.children)) {\n          loop(data.__config__.children, data);\n        }\n      };\n      loop(formFieldList);\n      return list;\n    },\n    updateTransferList(form) {\n      const formFieldList = this[form + 'Form'].formFieldList;\n      let list = [];\n      for (let i = 0; i < formFieldList.length; i++) {\n        if (formFieldList[i].__config__.required) {\n          list.push({ targetField: formFieldList[i].id, targetFieldLabel: formFieldList[i].fullName, sourceType: 1, sourceValue: '', required: true });\n        }\n      }\n      this[form + 'Form'].transferList = list;\n      this.key = +new Date()\n    },\n    // 判断是否是发起节点\n    isStartNode() {\n      return this.value ? NodeUtils.isStartNode(this.value) : false;\n    },\n    // 判断是否是新增数据节点\n    isAddDataNode() {\n      return this.value ? NodeUtils.isAddDataNode(this.value) : false;\n    },\n    // 判断是否是更新数据节点\n    isUpdateDataNode() {\n      return this.value ? NodeUtils.isUpdateDataNode(this.value) : false;\n    },\n    // 判断是否是删除数据节点\n    isDeleteDataNode() {\n      return this.value ? NodeUtils.isDeleteDataNode(this.value) : false;\n    },\n    // 判断是否是数据接口节点\n    isDataInterfaceNode() {\n      return this.value ? NodeUtils.isDataInterfaceNode(this.value) : false;\n    },\n    // 判断是否是消息通知节点\n    isMessageNode() {\n      return this.value ? NodeUtils.isMessageNode(this.value) : false;\n    },\n    // 判断是否是数据节点节点\n    isGetDataNode() {\n      return this.value ? NodeUtils.isGetDataNode(this.value) : false;\n    },\n    // 判断是否是发起审批节点\n    isLaunchFlowNode() {\n      return this.value ? NodeUtils.isLaunchFlowNode(this.value) : false;\n    },\n    // 发起人节点确认保存\n    startNodeConfirm() {\n      let formConf = this.$refs && this.$refs.startNodeRef.getFormConf();\n      if (!formConf) return\n      this.startForm = formConf\n      if (this.integrateType == 1) {\n        Object.assign(this.properties, this.startForm);\n        const eventName = this.startForm.triggerEvent == 1 ? '新增数据' : this.startForm.triggerEvent == 2 ? '修改数据' : '删除数据';\n        const content = `当[${this.startForm.formName}]表单[${eventName}]成功时`;\n        this.$emit('confirm', this.properties, content);\n      } else if (this.integrateType == 2) {\n        Object.assign(this.properties, this.startForm);\n        this.$emit('confirm', this.properties, this.startForm.cron);\n      } else {\n        Object.assign(this.properties, this.startForm);\n        this.$emit('confirm', this.properties, '已设置');\n      }\n      this.cancel();\n    },\n    // 新增数据节点确认保存\n    addDataNodeConfirm() {\n      let item = this.$refs && this.$refs.addNodeRef.getItem();\n      this.addDataForm.transferList = item.transferList\n      this.addDataForm.ruleList = item.ruleList\n      if (this.integrateType == 2) this.addDataForm.addRule = item.addRule\n      if (!this.addDataForm.formId) return this.$message.error('请选择目标表单');\n      if (this.addDataForm.enableFlow && !this.addDataForm.flowId) return this.$message.error('请选择流程');\n      if (!this.transferExist('addData')) return;\n      if (this.integrateType != 1 && !this.conditionExist('addData')) return;\n      Object.assign(this.properties, this.addDataForm);\n      const content = `在[${this.addDataForm.formName}]表单中新增数据`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 更新数据节点确认保存\n    updateDataNodeConfirm() {\n      let item = this.$refs && this.$refs.updateNodeRef.getTransferList();\n      this.updateDataForm.transferList = item.transferList\n      this.updateDataForm.ruleList = item.ruleList\n      this.updateDataForm.unFoundRule = item.unFoundRule\n      this.updateDataForm.ruleMatchLogic = item.ruleMatchLogic\n      if (!this.updateDataForm.formId) return this.$message.error('请选择目标表单');\n      if (this.updateDataForm.enableFlow && !this.updateDataForm.flowId) return this.$message.error('请选择流程');\n      if (!this.transferExist('updateData')) return;\n      if (!this.conditionExist('updateData')) return;\n      Object.assign(this.properties, this.updateDataForm);\n      const content = `在[${this.updateDataForm.formName}]表单中更新数据`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 删除数据节点确认保存\n    deleteDataNodeConfirm() {\n      if (!this.deleteDataForm.formId) return this.$message.error('请选择目标表单');\n      let ruleList = this.$refs.deleteNodeRef.getRuleList();\n      this.deleteDataForm.ruleList = ruleList\n      if (!this.conditionExist('deleteData')) return;\n      Object.assign(this.properties, this.deleteDataForm);\n      const content = `执行[${this.deleteDataForm.formName}]表单中[删除数据]`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 数据接口节点确认保存\n    dataInterfaceNodeConfirm() {\n      if (!this.dataInterfaceForm.formId) return this.$message.error('请选择执行数据接口');\n      Object.assign(this.properties, this.dataInterfaceForm);\n      const content = `执行[${this.dataInterfaceForm.formName}]数据接口`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 消息通知节点确认保存\n    messageNodeConfirm() {\n      this.messageForm = this.$refs && this.$refs.messageNodeRef.getDataForm();\n      if (!this.messageForm.msgUserIds || !this.messageForm.msgUserIds.length) return this.$message.error('请选择接收人');\n      if (!this.messageForm.msgId) return this.$message.error('请选择发送配置');\n      Object.assign(this.properties, this.messageForm);\n      const content = `执行[${this.messageForm.msgName}]的消息发送`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 获取数据节点确认保存\n    getDataNodeConfirm() {\n      let item = this.$refs && this.$refs.getDataNodeRef.getItem();\n      if (!item) return\n      this.getDataForm = item\n      const msg = this.getDataForm.formType == 3 ? '请选择数据接口' : '请选择表单';\n      if (!this.getDataForm.formId) return this.$message.error(msg);\n      Object.assign(this.properties, this.getDataForm);\n      const content = `从[${this.getDataForm.formName}]中获取数据`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    //获取发起审批确认保存\n    launchFlowConfirm() {\n      let item = this.$refs.getLaunchFlowRef.getItem();\n      this.launchFlowForm.transferList = item.transferList || []\n      if (!item.flowId) return this.$message.error('请选择流程');\n      this.launchFlowForm.flowId = item.flowId\n      if (!item.initiator.length) return this.$message.error('请选择发起人');\n      this.launchFlowForm.initiator = item.initiator\n      if (!this.transferExist('launchFlow')) return;\n      Object.assign(this.properties, this.launchFlowForm);\n      const content = `发起[${this.launchFlowForm.flowName}]流程`;\n      this.$emit('confirm', this.properties, content);\n      this.cancel();\n    },\n    // 关闭抽屉\n    cancel() {\n      setTimeout(() => {\n        this.$emit(\"cancel\");\n        this.visible = false;\n      }, 0)\n    },\n    handleOk() {\n      this.isStartNode() && this.startNodeConfirm();\n      this.isAddDataNode() && this.addDataNodeConfirm();\n      this.isUpdateDataNode() && this.updateDataNodeConfirm();\n      this.isDeleteDataNode() && this.deleteDataNodeConfirm();\n      this.isDataInterfaceNode() && this.dataInterfaceNodeConfirm();\n      this.isMessageNode() && this.messageNodeConfirm();\n      this.isGetDataNode() && this.getDataNodeConfirm();\n      this.isLaunchFlowNode() && this.launchFlowConfirm();\n    }\n  },\n  watch: {\n    visible(val) {\n      if (!val) {\n        this.addDataForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm)) // 重置数据为默认状态\n        this.startForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        this.updateDataForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        this.deleteDataForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        this.dataInterfaceForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        this.messageForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        this.getDataForm = JSON.parse(JSON.stringify(nodeConfig.defaultStartForm))\n        return\n      }\n      this.isStartNode() && this.initCommonNodeData('start')\n      this.isAddDataNode() && this.initCommonNodeData('addData')\n      this.isUpdateDataNode() && this.initCommonNodeData('updateData')\n      this.isDeleteDataNode() && this.initCommonNodeData('deleteData')\n      this.isDataInterfaceNode() && this.initCommonNodeData('dataInterface')\n      this.isMessageNode() && this.initCommonNodeData('message')\n      this.isGetDataNode() && this.initCommonNodeData('getData');\n      this.isLaunchFlowNode() && this.initCommonNodeData('launchFlow');\n    },\n    value(newVal) {\n      if (newVal && newVal.properties) {\n        this.visible = true;\n        this.properties = JSON.parse(JSON.stringify(newVal.properties));\n        if (this.properties) {\n          NodeUtils.isConditionNode(newVal) && this.getPriorityLength();\n        }\n      }\n    }\n  },\n};\n",null]}