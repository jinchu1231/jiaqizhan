{"remainingRequest":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!/Users/交安/gas/vue/gas-web/src/components/Jnpf/PopupTableSelect/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/交安/gas/vue/gas-web/src/components/Jnpf/PopupTableSelect/index.vue","mtime":1706684850000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/交安/gas/vue/gas-web/node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDataInterfaceDataSelect, getDataInterfaceDataInfoByIds } from '@/api/systemData/dataInterface'\nimport { addResizeListener, removeResizeListener } from 'element-ui/src/utils/resize-event';\nimport emitter from 'element-ui/src/mixins/emitter'\nlet { methods: { dispatch } } = emitter\nexport default {\n  name: 'JnpfPopupTableSelect',\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  props: {\n    value: {\n      type: [String, Number, Array],\n      default: ''\n    },\n    rowIndex: {\n      default: null\n    },\n    formData: {\n      type: Object\n    },\n    templateJson: {\n      type: Array,\n      default: () => []\n    },\n    interfaceId: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    propsValue: {\n      type: String,\n      default: 'id'\n    },\n    relationField: {\n      type: String,\n      default: 'fullName'\n    },\n    popupType: {\n      type: String,\n      default: 'popover'\n    },\n    popupTitle: {\n      type: String,\n      default: '选择数据'\n    },\n    popupWidth: {\n      type: String,\n      default: '800px'\n    },\n    field: {\n      type: String,\n      default: ''\n    },\n    columnOptions: {\n      type: Array,\n      default: () => []\n    },\n    hasPage: {\n      type: Boolean,\n      default: false\n    },\n    pageSize: {\n      type: Number,\n      default: 20\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    size: String,\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data() {\n    return {\n      list: [],\n      innerValue: '',\n      listQuery: {\n        keyword: '',\n        currentPage: 1,\n        pageSize: 20\n      },\n      total: 0,\n      checked: '',\n      checkedTxt: '',\n      checkedRow: {},\n      selectedData: [],\n      selectedIds: [],\n      tagsIds: [],\n      tagsList: [],\n      listLoading: false,\n      inputHovering: false,\n      inputWidth: 0,\n      initialInputHeight: 0,\n    }\n  },\n  watch: {\n    value(val) {\n      this.setDefault()\n    },\n    selectDisabled() {\n      this.$nextTick(() => {\n        this.resetInputHeight();\n      });\n    },\n  },\n  computed: {\n    showClose() {\n      let hasValue = this.multiple\n        ? Array.isArray(this.value) && this.value.length > 0\n        : this.value !== undefined && this.value !== null && this.value !== '';\n      let criteria = this.clearable &&\n        !this.selectDisabled &&\n        this.inputHovering &&\n        hasValue;\n      return criteria;\n    },\n    currentPlaceholder() {\n      if (this.multiple && Array.isArray(this.value) && this.value.length) {\n        return ''\n      } else {\n        return this.placeholder\n      }\n    },\n    selectDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    selectSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    collapseTagSize() {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1\n        ? 'mini'\n        : 'small';\n    },\n  },\n  created() {\n    this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n    this.setDefault()\n  },\n  mounted() {\n    addResizeListener(this.$el, this.handleResize);\n\n    const reference = this.$refs.reference;\n    if (reference && reference.$el) {\n      const sizeMap = {\n        medium: 36,\n        small: 32,\n        mini: 28\n      };\n      const input = reference.$el.querySelector('input');\n      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];\n    }\n    if (this.multiple) {\n      this.resetInputHeight();\n    }\n    this.$nextTick(() => {\n      if (reference && reference.$el) {\n        this.inputWidth = reference.$el.getBoundingClientRect().width;\n      }\n    });\n    this.setDefault()\n  },\n  beforeDestroy() {\n    if (this.$el && this.handleResize) removeResizeListener(this.$el, this.handleResize);\n  },\n  methods: {\n    closePopover() {\n      this.$refs.popover.doClose()\n    },\n    onClose() {\n      if (this.multiple) {\n        this.$emit('input', this.tagsIds)\n        this.$emit('change', this.tagsIds, this.tagsList)\n        dispatch.call(this, 'ElFormItem', 'el.form.change', this.tagsIds)\n      }\n      this.closePopover()\n    },\n    initData() {\n      if (!this.interfaceId) return\n      this.listLoading = true\n      const paramList = this.getParamList()\n      const columnOptions = this.columnOptions.map(o => o.value)\n      let query = {\n        ...this.listQuery,\n        interfaceId: this.interfaceId,\n        propsValue: this.propsValue,\n        relationField: this.relationField,\n        columnOptions: columnOptions.join(','),\n        paramList\n      }\n      getDataInterfaceDataSelect(this.interfaceId, query).then(res => {\n        this.list = res.data.list\n        this.total = res.data.pagination.total\n        this.listLoading = false\n      }).catch(() => { this.listLoading = false })\n    },\n    getParamList() {\n      let templateJson = this.templateJson\n      for (let i = 0; i < templateJson.length; i++) {\n        if (templateJson[i].relationField && this.formData) {\n          if (templateJson[i].relationField.includes('-')) {\n            let tableVModel = templateJson[i].relationField.split('-')[0]\n            let childVModel = templateJson[i].relationField.split('-')[1]\n            templateJson[i].defaultValue = this.formData[tableVModel] && this.formData[tableVModel][this.rowIndex] && this.formData[tableVModel][this.rowIndex][childVModel] || ''\n          } else {\n            templateJson[i].defaultValue = this.formData[templateJson[i].relationField] || ''\n          }\n        }\n      }\n      return templateJson\n    },\n    interfaceDataHandler(data) {\n      if (!data.dataProcessing) return data.list\n      const dataHandler = this.jnpf.getScriptFunc.call(this, data.dataProcessing)\n      if (!dataHandler) return data.list\n      return dataHandler(data.list)\n    },\n    search() {\n      this.initData()\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n    },\n    reset() {\n      this.listQuery.keyword = ''\n      this.listQuery.currentPage = 1\n      this.listQuery.pageSize = this.hasPage ? this.pageSize : 10000\n      this.initData()\n    },\n    openDialog() {\n      if (this.disabled) return\n      this.reset()\n    },\n    confirm() {\n      if (this.multiple) {\n        this.innerValue = ''\n        this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n        this.selectedIds = this.selectedData.map(o => o[this.propsValue])\n        this.tagsIds = JSON.parse(JSON.stringify(this.selectedIds))\n        this.$emit('input', this.selectedIds)\n        this.$emit('change', this.selectedIds, this.selectedData)\n        this.closePopover()\n        dispatch.call(this, 'ElFormItem', 'el.form.change', this.selectedIds)\n      } else {\n        if (!this.checked) {\n          this.innerValue = ''\n          this.checkedRow = {}\n          this.$emit('input', '')\n          this.$emit('change', '', {})\n          this.closePopover()\n          dispatch.call(this, 'ElFormItem', 'el.form.change', '')\n          return\n        }\n        this.innerValue = this.checkedTxt\n        this.$emit('input', this.checked)\n        this.$emit('change', this.checked, this.checkedRow)\n        this.closePopover()\n        dispatch.call(this, 'ElFormItem', 'el.form.change', this.checked)\n      }\n    },\n    rowClick(row) {\n      if (this.multiple) {\n        const boo = this.selectedData.some(o => o[this.propsValue] === row[this.propsValue])\n        if (boo) {\n          this.selectedData = this.selectedData.filter(o => o[this.propsValue] !== row[this.propsValue])\n          this.selectedIds = this.selectedIds.filter(o => o !== row[this.propsValue])\n        } else {\n          this.selectedData.push(row)\n          this.selectedIds.push(row[this.propsValue])\n        }\n      } else {\n        this.checked = row[this.propsValue]\n        this.checkedTxt = row[this.relationField]\n        this.checkedRow = row\n      }\n    },\n    setDefault() {\n      if (!this.value || (this.multiple && !this.value.length)) {\n        this.innerValue = ''\n        this.checked = ''\n        this.selectedIds = []\n        this.tagsIds = []\n        this.selectedData = []\n        this.tagsList = []\n        // if (!this.field) return\n        // let relationData = this.$store.state.generator.relationData\n        // this.$set(relationData, this.field, [])\n        // this.$store.commit('generator/UPDATE_RELATION_DATA', relationData)\n        return\n      }\n      if (!this.interfaceId) return\n      const arr = this.multiple ? this.value : [this.value]\n      if (this.multiple && !Array.isArray(this.value)) {\n        this.value = []\n        arr = []\n      }\n      const paramList = this.getParamList()\n      let query = {\n        ids: arr,\n        interfaceId: this.interfaceId,\n        propsValue: this.propsValue,\n        relationField: this.relationField,\n        paramList\n      }\n      getDataInterfaceDataInfoByIds(this.interfaceId, query).then(res => {\n        this.selectedData = res.data\n        this.selectedIds = this.selectedData.map(o => o[this.propsValue])\n        if (this.multiple) {\n          this.innerValue = ''\n          this.tagsList = JSON.parse(JSON.stringify(this.selectedData))\n          this.tagsIds = JSON.parse(JSON.stringify(this.selectedIds))\n        } else {\n          this.checked = this.value\n          this.innerValue = this.selectedData.length ? this.selectedData[0][this.relationField] : ''\n          this.checkedRow = this.selectedData[0]\n        }\n        // if (!this.field) return\n        // let relationData = this.$store.state.generator.relationData\n        // this.$set(relationData, this.field, res.data)\n        // this.$store.commit('generator/UPDATE_RELATION_DATA', relationData)\n        this.$nextTick(() => {\n          if (this.multiple) {\n            this.resetInputHeight();\n          }\n        });\n      })\n    },\n    deleteTag(event, index) {\n      this.selectedData.splice(index, 1)\n      this.confirm()\n      event.stopPropagation();\n    },\n    handleClearClick(event) {\n      this.checked = ''\n      this.innerValue = ''\n      this.checkedRow = {}\n      this.selectedIds = []\n      this.selectedData = []\n      this.$emit('input', this.checked)\n      this.$emit('change', this.checked, this.checkedRow)\n      dispatch.call(this, 'ElFormItem', 'el.form.change', this.checked)\n      event.stopPropagation();\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    resetInputHeight() {\n      if (this.collapseTags) return;\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return;\n        let inputChildNodes = this.$refs.reference.$el.childNodes;\n        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];\n        const tags = this.$refs.tags;\n        const tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        const sizeInMap = this.initialInputHeight || 40;\n        input.style.height = this.selectedData.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tagsHeight + (tagsHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px';\n      });\n    },\n    resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    }\n  }\n}\n",null]}